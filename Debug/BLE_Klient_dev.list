
BLE_Klient_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000837c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  0800850c  0800850c  0001850c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000084  080088a8  080088a8  000188a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000110  0800892c  0800892c  0001892c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08008a3c  08008a3c  00018a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  08008a40  08008a40  00018a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000084  20000000  08008a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001594  20000084  08008ac8  00020084  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001618  08008ac8  00021618  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   00037483  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005fd6  00000000  00000000  00057537  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00014373  00000000  00000000  0005d50d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a80  00000000  00000000  00071880  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f30  00000000  00000000  00073300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00010ca6  00000000  00000000  00075230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b309  00000000  00000000  00085ed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000911df  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005948  00000000  00000000  0009125c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084f4 	.word	0x080084f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080084f4 	.word	0x080084f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__aeabi_d2uiz>:
 8000a04:	004a      	lsls	r2, r1, #1
 8000a06:	d211      	bcs.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a0c:	d211      	bcs.n	8000a32 <__aeabi_d2uiz+0x2e>
 8000a0e:	d50d      	bpl.n	8000a2c <__aeabi_d2uiz+0x28>
 8000a10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a18:	d40e      	bmi.n	8000a38 <__aeabi_d2uiz+0x34>
 8000a1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a26:	fa23 f002 	lsr.w	r0, r3, r2
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d102      	bne.n	8000a3e <__aeabi_d2uiz+0x3a>
 8000a38:	f04f 30ff 	mov.w	r0, #4294967295
 8000a3c:	4770      	bx	lr
 8000a3e:	f04f 0000 	mov.w	r0, #0
 8000a42:	4770      	bx	lr

08000a44 <__aeabi_uldivmod>:
 8000a44:	b953      	cbnz	r3, 8000a5c <__aeabi_uldivmod+0x18>
 8000a46:	b94a      	cbnz	r2, 8000a5c <__aeabi_uldivmod+0x18>
 8000a48:	2900      	cmp	r1, #0
 8000a4a:	bf08      	it	eq
 8000a4c:	2800      	cmpeq	r0, #0
 8000a4e:	bf1c      	itt	ne
 8000a50:	f04f 31ff 	movne.w	r1, #4294967295
 8000a54:	f04f 30ff 	movne.w	r0, #4294967295
 8000a58:	f001 b8f6 	b.w	8001c48 <__aeabi_idiv0>
 8000a5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a64:	f000 f806 	bl	8000a74 <__udivmoddi4>
 8000a68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a70:	b004      	add	sp, #16
 8000a72:	4770      	bx	lr

08000a74 <__udivmoddi4>:
 8000a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a78:	468c      	mov	ip, r1
 8000a7a:	460d      	mov	r5, r1
 8000a7c:	4604      	mov	r4, r0
 8000a7e:	9e08      	ldr	r6, [sp, #32]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d151      	bne.n	8000b28 <__udivmoddi4+0xb4>
 8000a84:	428a      	cmp	r2, r1
 8000a86:	4617      	mov	r7, r2
 8000a88:	d96d      	bls.n	8000b66 <__udivmoddi4+0xf2>
 8000a8a:	fab2 fe82 	clz	lr, r2
 8000a8e:	f1be 0f00 	cmp.w	lr, #0
 8000a92:	d00b      	beq.n	8000aac <__udivmoddi4+0x38>
 8000a94:	f1ce 0c20 	rsb	ip, lr, #32
 8000a98:	fa01 f50e 	lsl.w	r5, r1, lr
 8000a9c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000aa0:	fa02 f70e 	lsl.w	r7, r2, lr
 8000aa4:	ea4c 0c05 	orr.w	ip, ip, r5
 8000aa8:	fa00 f40e 	lsl.w	r4, r0, lr
 8000aac:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000ab0:	0c25      	lsrs	r5, r4, #16
 8000ab2:	fbbc f8fa 	udiv	r8, ip, sl
 8000ab6:	fa1f f987 	uxth.w	r9, r7
 8000aba:	fb0a cc18 	mls	ip, sl, r8, ip
 8000abe:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000ac2:	fb08 f309 	mul.w	r3, r8, r9
 8000ac6:	42ab      	cmp	r3, r5
 8000ac8:	d90a      	bls.n	8000ae0 <__udivmoddi4+0x6c>
 8000aca:	19ed      	adds	r5, r5, r7
 8000acc:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ad0:	f080 8123 	bcs.w	8000d1a <__udivmoddi4+0x2a6>
 8000ad4:	42ab      	cmp	r3, r5
 8000ad6:	f240 8120 	bls.w	8000d1a <__udivmoddi4+0x2a6>
 8000ada:	f1a8 0802 	sub.w	r8, r8, #2
 8000ade:	443d      	add	r5, r7
 8000ae0:	1aed      	subs	r5, r5, r3
 8000ae2:	b2a4      	uxth	r4, r4
 8000ae4:	fbb5 f0fa 	udiv	r0, r5, sl
 8000ae8:	fb0a 5510 	mls	r5, sl, r0, r5
 8000aec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000af0:	fb00 f909 	mul.w	r9, r0, r9
 8000af4:	45a1      	cmp	r9, r4
 8000af6:	d909      	bls.n	8000b0c <__udivmoddi4+0x98>
 8000af8:	19e4      	adds	r4, r4, r7
 8000afa:	f100 33ff 	add.w	r3, r0, #4294967295
 8000afe:	f080 810a 	bcs.w	8000d16 <__udivmoddi4+0x2a2>
 8000b02:	45a1      	cmp	r9, r4
 8000b04:	f240 8107 	bls.w	8000d16 <__udivmoddi4+0x2a2>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	443c      	add	r4, r7
 8000b0c:	eba4 0409 	sub.w	r4, r4, r9
 8000b10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000b14:	2100      	movs	r1, #0
 8000b16:	2e00      	cmp	r6, #0
 8000b18:	d061      	beq.n	8000bde <__udivmoddi4+0x16a>
 8000b1a:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b1e:	2300      	movs	r3, #0
 8000b20:	6034      	str	r4, [r6, #0]
 8000b22:	6073      	str	r3, [r6, #4]
 8000b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	d907      	bls.n	8000b3c <__udivmoddi4+0xc8>
 8000b2c:	2e00      	cmp	r6, #0
 8000b2e:	d054      	beq.n	8000bda <__udivmoddi4+0x166>
 8000b30:	2100      	movs	r1, #0
 8000b32:	e886 0021 	stmia.w	r6, {r0, r5}
 8000b36:	4608      	mov	r0, r1
 8000b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3c:	fab3 f183 	clz	r1, r3
 8000b40:	2900      	cmp	r1, #0
 8000b42:	f040 808e 	bne.w	8000c62 <__udivmoddi4+0x1ee>
 8000b46:	42ab      	cmp	r3, r5
 8000b48:	d302      	bcc.n	8000b50 <__udivmoddi4+0xdc>
 8000b4a:	4282      	cmp	r2, r0
 8000b4c:	f200 80fa 	bhi.w	8000d44 <__udivmoddi4+0x2d0>
 8000b50:	1a84      	subs	r4, r0, r2
 8000b52:	eb65 0503 	sbc.w	r5, r5, r3
 8000b56:	2001      	movs	r0, #1
 8000b58:	46ac      	mov	ip, r5
 8000b5a:	2e00      	cmp	r6, #0
 8000b5c:	d03f      	beq.n	8000bde <__udivmoddi4+0x16a>
 8000b5e:	e886 1010 	stmia.w	r6, {r4, ip}
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	b912      	cbnz	r2, 8000b6e <__udivmoddi4+0xfa>
 8000b68:	2701      	movs	r7, #1
 8000b6a:	fbb7 f7f2 	udiv	r7, r7, r2
 8000b6e:	fab7 fe87 	clz	lr, r7
 8000b72:	f1be 0f00 	cmp.w	lr, #0
 8000b76:	d134      	bne.n	8000be2 <__udivmoddi4+0x16e>
 8000b78:	1beb      	subs	r3, r5, r7
 8000b7a:	0c3a      	lsrs	r2, r7, #16
 8000b7c:	fa1f fc87 	uxth.w	ip, r7
 8000b80:	2101      	movs	r1, #1
 8000b82:	fbb3 f8f2 	udiv	r8, r3, r2
 8000b86:	0c25      	lsrs	r5, r4, #16
 8000b88:	fb02 3318 	mls	r3, r2, r8, r3
 8000b8c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000b90:	fb0c f308 	mul.w	r3, ip, r8
 8000b94:	42ab      	cmp	r3, r5
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x134>
 8000b98:	19ed      	adds	r5, r5, r7
 8000b9a:	f108 30ff 	add.w	r0, r8, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x132>
 8000ba0:	42ab      	cmp	r3, r5
 8000ba2:	f200 80d1 	bhi.w	8000d48 <__udivmoddi4+0x2d4>
 8000ba6:	4680      	mov	r8, r0
 8000ba8:	1aed      	subs	r5, r5, r3
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb5 f0f2 	udiv	r0, r5, r2
 8000bb0:	fb02 5510 	mls	r5, r2, r0, r5
 8000bb4:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000bb8:	fb0c fc00 	mul.w	ip, ip, r0
 8000bbc:	45a4      	cmp	ip, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x15c>
 8000bc0:	19e4      	adds	r4, r4, r7
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x15a>
 8000bc8:	45a4      	cmp	ip, r4
 8000bca:	f200 80b8 	bhi.w	8000d3e <__udivmoddi4+0x2ca>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 040c 	sub.w	r4, r4, ip
 8000bd4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bd8:	e79d      	b.n	8000b16 <__udivmoddi4+0xa2>
 8000bda:	4631      	mov	r1, r6
 8000bdc:	4630      	mov	r0, r6
 8000bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be2:	f1ce 0420 	rsb	r4, lr, #32
 8000be6:	fa05 f30e 	lsl.w	r3, r5, lr
 8000bea:	fa07 f70e 	lsl.w	r7, r7, lr
 8000bee:	fa20 f804 	lsr.w	r8, r0, r4
 8000bf2:	0c3a      	lsrs	r2, r7, #16
 8000bf4:	fa25 f404 	lsr.w	r4, r5, r4
 8000bf8:	ea48 0803 	orr.w	r8, r8, r3
 8000bfc:	fbb4 f1f2 	udiv	r1, r4, r2
 8000c00:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000c04:	fb02 4411 	mls	r4, r2, r1, r4
 8000c08:	fa1f fc87 	uxth.w	ip, r7
 8000c0c:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000c10:	fb01 f30c 	mul.w	r3, r1, ip
 8000c14:	42ab      	cmp	r3, r5
 8000c16:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x1bc>
 8000c1c:	19ed      	adds	r5, r5, r7
 8000c1e:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c22:	f080 808a 	bcs.w	8000d3a <__udivmoddi4+0x2c6>
 8000c26:	42ab      	cmp	r3, r5
 8000c28:	f240 8087 	bls.w	8000d3a <__udivmoddi4+0x2c6>
 8000c2c:	3902      	subs	r1, #2
 8000c2e:	443d      	add	r5, r7
 8000c30:	1aeb      	subs	r3, r5, r3
 8000c32:	fa1f f588 	uxth.w	r5, r8
 8000c36:	fbb3 f0f2 	udiv	r0, r3, r2
 8000c3a:	fb02 3310 	mls	r3, r2, r0, r3
 8000c3e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000c42:	fb00 f30c 	mul.w	r3, r0, ip
 8000c46:	42ab      	cmp	r3, r5
 8000c48:	d907      	bls.n	8000c5a <__udivmoddi4+0x1e6>
 8000c4a:	19ed      	adds	r5, r5, r7
 8000c4c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c50:	d26f      	bcs.n	8000d32 <__udivmoddi4+0x2be>
 8000c52:	42ab      	cmp	r3, r5
 8000c54:	d96d      	bls.n	8000d32 <__udivmoddi4+0x2be>
 8000c56:	3802      	subs	r0, #2
 8000c58:	443d      	add	r5, r7
 8000c5a:	1aeb      	subs	r3, r5, r3
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	e78f      	b.n	8000b82 <__udivmoddi4+0x10e>
 8000c62:	f1c1 0720 	rsb	r7, r1, #32
 8000c66:	fa22 f807 	lsr.w	r8, r2, r7
 8000c6a:	408b      	lsls	r3, r1
 8000c6c:	fa05 f401 	lsl.w	r4, r5, r1
 8000c70:	ea48 0303 	orr.w	r3, r8, r3
 8000c74:	fa20 fe07 	lsr.w	lr, r0, r7
 8000c78:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000c7c:	40fd      	lsrs	r5, r7
 8000c7e:	ea4e 0e04 	orr.w	lr, lr, r4
 8000c82:	fbb5 f9fc 	udiv	r9, r5, ip
 8000c86:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000c8a:	fb0c 5519 	mls	r5, ip, r9, r5
 8000c8e:	fa1f f883 	uxth.w	r8, r3
 8000c92:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000c96:	fb09 f408 	mul.w	r4, r9, r8
 8000c9a:	42ac      	cmp	r4, r5
 8000c9c:	fa02 f201 	lsl.w	r2, r2, r1
 8000ca0:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x244>
 8000ca6:	18ed      	adds	r5, r5, r3
 8000ca8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cac:	d243      	bcs.n	8000d36 <__udivmoddi4+0x2c2>
 8000cae:	42ac      	cmp	r4, r5
 8000cb0:	d941      	bls.n	8000d36 <__udivmoddi4+0x2c2>
 8000cb2:	f1a9 0902 	sub.w	r9, r9, #2
 8000cb6:	441d      	add	r5, r3
 8000cb8:	1b2d      	subs	r5, r5, r4
 8000cba:	fa1f fe8e 	uxth.w	lr, lr
 8000cbe:	fbb5 f0fc 	udiv	r0, r5, ip
 8000cc2:	fb0c 5510 	mls	r5, ip, r0, r5
 8000cc6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000cca:	fb00 f808 	mul.w	r8, r0, r8
 8000cce:	45a0      	cmp	r8, r4
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x26e>
 8000cd2:	18e4      	adds	r4, r4, r3
 8000cd4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cd8:	d229      	bcs.n	8000d2e <__udivmoddi4+0x2ba>
 8000cda:	45a0      	cmp	r8, r4
 8000cdc:	d927      	bls.n	8000d2e <__udivmoddi4+0x2ba>
 8000cde:	3802      	subs	r0, #2
 8000ce0:	441c      	add	r4, r3
 8000ce2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ce6:	eba4 0408 	sub.w	r4, r4, r8
 8000cea:	fba0 8902 	umull	r8, r9, r0, r2
 8000cee:	454c      	cmp	r4, r9
 8000cf0:	46c6      	mov	lr, r8
 8000cf2:	464d      	mov	r5, r9
 8000cf4:	d315      	bcc.n	8000d22 <__udivmoddi4+0x2ae>
 8000cf6:	d012      	beq.n	8000d1e <__udivmoddi4+0x2aa>
 8000cf8:	b156      	cbz	r6, 8000d10 <__udivmoddi4+0x29c>
 8000cfa:	ebba 030e 	subs.w	r3, sl, lr
 8000cfe:	eb64 0405 	sbc.w	r4, r4, r5
 8000d02:	fa04 f707 	lsl.w	r7, r4, r7
 8000d06:	40cb      	lsrs	r3, r1
 8000d08:	431f      	orrs	r7, r3
 8000d0a:	40cc      	lsrs	r4, r1
 8000d0c:	6037      	str	r7, [r6, #0]
 8000d0e:	6074      	str	r4, [r6, #4]
 8000d10:	2100      	movs	r1, #0
 8000d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d16:	4618      	mov	r0, r3
 8000d18:	e6f8      	b.n	8000b0c <__udivmoddi4+0x98>
 8000d1a:	4690      	mov	r8, r2
 8000d1c:	e6e0      	b.n	8000ae0 <__udivmoddi4+0x6c>
 8000d1e:	45c2      	cmp	sl, r8
 8000d20:	d2ea      	bcs.n	8000cf8 <__udivmoddi4+0x284>
 8000d22:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d26:	eb69 0503 	sbc.w	r5, r9, r3
 8000d2a:	3801      	subs	r0, #1
 8000d2c:	e7e4      	b.n	8000cf8 <__udivmoddi4+0x284>
 8000d2e:	4628      	mov	r0, r5
 8000d30:	e7d7      	b.n	8000ce2 <__udivmoddi4+0x26e>
 8000d32:	4640      	mov	r0, r8
 8000d34:	e791      	b.n	8000c5a <__udivmoddi4+0x1e6>
 8000d36:	4681      	mov	r9, r0
 8000d38:	e7be      	b.n	8000cb8 <__udivmoddi4+0x244>
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	e778      	b.n	8000c30 <__udivmoddi4+0x1bc>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	e745      	b.n	8000bd0 <__udivmoddi4+0x15c>
 8000d44:	4608      	mov	r0, r1
 8000d46:	e708      	b.n	8000b5a <__udivmoddi4+0xe6>
 8000d48:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4c:	443d      	add	r5, r7
 8000d4e:	e72b      	b.n	8000ba8 <__udivmoddi4+0x134>

08000d50 <selfrel_offset31>:
 8000d50:	6803      	ldr	r3, [r0, #0]
 8000d52:	005a      	lsls	r2, r3, #1
 8000d54:	bf4c      	ite	mi
 8000d56:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000d5a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 8000d5e:	4418      	add	r0, r3
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <search_EIT_table>:
 8000d64:	b361      	cbz	r1, 8000dc0 <search_EIT_table+0x5c>
 8000d66:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d6a:	f101 3aff 	add.w	sl, r1, #4294967295
 8000d6e:	4690      	mov	r8, r2
 8000d70:	4606      	mov	r6, r0
 8000d72:	46d1      	mov	r9, sl
 8000d74:	2700      	movs	r7, #0
 8000d76:	eb07 0409 	add.w	r4, r7, r9
 8000d7a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 8000d7e:	1064      	asrs	r4, r4, #1
 8000d80:	00e5      	lsls	r5, r4, #3
 8000d82:	1971      	adds	r1, r6, r5
 8000d84:	4608      	mov	r0, r1
 8000d86:	f7ff ffe3 	bl	8000d50 <selfrel_offset31>
 8000d8a:	45a2      	cmp	sl, r4
 8000d8c:	4683      	mov	fp, r0
 8000d8e:	f105 0008 	add.w	r0, r5, #8
 8000d92:	4430      	add	r0, r6
 8000d94:	d009      	beq.n	8000daa <search_EIT_table+0x46>
 8000d96:	f7ff ffdb 	bl	8000d50 <selfrel_offset31>
 8000d9a:	45c3      	cmp	fp, r8
 8000d9c:	f100 30ff 	add.w	r0, r0, #4294967295
 8000da0:	d805      	bhi.n	8000dae <search_EIT_table+0x4a>
 8000da2:	4540      	cmp	r0, r8
 8000da4:	d209      	bcs.n	8000dba <search_EIT_table+0x56>
 8000da6:	1c67      	adds	r7, r4, #1
 8000da8:	e7e5      	b.n	8000d76 <search_EIT_table+0x12>
 8000daa:	45c3      	cmp	fp, r8
 8000dac:	d905      	bls.n	8000dba <search_EIT_table+0x56>
 8000dae:	42a7      	cmp	r7, r4
 8000db0:	d002      	beq.n	8000db8 <search_EIT_table+0x54>
 8000db2:	f104 39ff 	add.w	r9, r4, #4294967295
 8000db6:	e7de      	b.n	8000d76 <search_EIT_table+0x12>
 8000db8:	2100      	movs	r1, #0
 8000dba:	4608      	mov	r0, r1
 8000dbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	4770      	bx	lr

08000dc4 <__gnu_unwind_get_pr_addr>:
 8000dc4:	2801      	cmp	r0, #1
 8000dc6:	d007      	beq.n	8000dd8 <__gnu_unwind_get_pr_addr+0x14>
 8000dc8:	2802      	cmp	r0, #2
 8000dca:	d007      	beq.n	8000ddc <__gnu_unwind_get_pr_addr+0x18>
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <__gnu_unwind_get_pr_addr+0x1c>)
 8000dce:	2800      	cmp	r0, #0
 8000dd0:	bf0c      	ite	eq
 8000dd2:	4618      	moveq	r0, r3
 8000dd4:	2000      	movne	r0, #0
 8000dd6:	4770      	bx	lr
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <__gnu_unwind_get_pr_addr+0x20>)
 8000dda:	4770      	bx	lr
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <__gnu_unwind_get_pr_addr+0x24>)
 8000dde:	4770      	bx	lr
 8000de0:	080014c9 	.word	0x080014c9
 8000de4:	080014cd 	.word	0x080014cd
 8000de8:	080014d1 	.word	0x080014d1

08000dec <get_eit_entry>:
 8000dec:	b530      	push	{r4, r5, lr}
 8000dee:	4b24      	ldr	r3, [pc, #144]	; (8000e80 <get_eit_entry+0x94>)
 8000df0:	b083      	sub	sp, #12
 8000df2:	4604      	mov	r4, r0
 8000df4:	1e8d      	subs	r5, r1, #2
 8000df6:	b37b      	cbz	r3, 8000e58 <get_eit_entry+0x6c>
 8000df8:	a901      	add	r1, sp, #4
 8000dfa:	4628      	mov	r0, r5
 8000dfc:	f3af 8000 	nop.w
 8000e00:	b320      	cbz	r0, 8000e4c <get_eit_entry+0x60>
 8000e02:	9901      	ldr	r1, [sp, #4]
 8000e04:	462a      	mov	r2, r5
 8000e06:	f7ff ffad 	bl	8000d64 <search_EIT_table>
 8000e0a:	4601      	mov	r1, r0
 8000e0c:	b1f0      	cbz	r0, 8000e4c <get_eit_entry+0x60>
 8000e0e:	f7ff ff9f 	bl	8000d50 <selfrel_offset31>
 8000e12:	684b      	ldr	r3, [r1, #4]
 8000e14:	64a0      	str	r0, [r4, #72]	; 0x48
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d012      	beq.n	8000e40 <get_eit_entry+0x54>
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	f101 0004 	add.w	r0, r1, #4
 8000e20:	db20      	blt.n	8000e64 <get_eit_entry+0x78>
 8000e22:	f7ff ff95 	bl	8000d50 <selfrel_offset31>
 8000e26:	2300      	movs	r3, #0
 8000e28:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000e2a:	6523      	str	r3, [r4, #80]	; 0x50
 8000e2c:	6803      	ldr	r3, [r0, #0]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	db1c      	blt.n	8000e6c <get_eit_entry+0x80>
 8000e32:	f7ff ff8d 	bl	8000d50 <selfrel_offset31>
 8000e36:	2300      	movs	r3, #0
 8000e38:	6120      	str	r0, [r4, #16]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	b003      	add	sp, #12
 8000e3e:	bd30      	pop	{r4, r5, pc}
 8000e40:	2300      	movs	r3, #0
 8000e42:	6123      	str	r3, [r4, #16]
 8000e44:	2305      	movs	r3, #5
 8000e46:	4618      	mov	r0, r3
 8000e48:	b003      	add	sp, #12
 8000e4a:	bd30      	pop	{r4, r5, pc}
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	6123      	str	r3, [r4, #16]
 8000e50:	2309      	movs	r3, #9
 8000e52:	4618      	mov	r0, r3
 8000e54:	b003      	add	sp, #12
 8000e56:	bd30      	pop	{r4, r5, pc}
 8000e58:	490a      	ldr	r1, [pc, #40]	; (8000e84 <get_eit_entry+0x98>)
 8000e5a:	480b      	ldr	r0, [pc, #44]	; (8000e88 <get_eit_entry+0x9c>)
 8000e5c:	1a09      	subs	r1, r1, r0
 8000e5e:	10c9      	asrs	r1, r1, #3
 8000e60:	9101      	str	r1, [sp, #4]
 8000e62:	e7cf      	b.n	8000e04 <get_eit_entry+0x18>
 8000e64:	2301      	movs	r3, #1
 8000e66:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000e68:	6523      	str	r3, [r4, #80]	; 0x50
 8000e6a:	e7df      	b.n	8000e2c <get_eit_entry+0x40>
 8000e6c:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000e70:	f7ff ffa8 	bl	8000dc4 <__gnu_unwind_get_pr_addr>
 8000e74:	2800      	cmp	r0, #0
 8000e76:	6120      	str	r0, [r4, #16]
 8000e78:	bf14      	ite	ne
 8000e7a:	2300      	movne	r3, #0
 8000e7c:	2309      	moveq	r3, #9
 8000e7e:	e7dc      	b.n	8000e3a <get_eit_entry+0x4e>
 8000e80:	00000000 	.word	0x00000000
 8000e84:	08008a3c 	.word	0x08008a3c
 8000e88:	0800892c 	.word	0x0800892c

08000e8c <restore_non_core_regs>:
 8000e8c:	6803      	ldr	r3, [r0, #0]
 8000e8e:	07da      	lsls	r2, r3, #31
 8000e90:	b510      	push	{r4, lr}
 8000e92:	4604      	mov	r4, r0
 8000e94:	d406      	bmi.n	8000ea4 <restore_non_core_regs+0x18>
 8000e96:	079b      	lsls	r3, r3, #30
 8000e98:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8000e9c:	d509      	bpl.n	8000eb2 <restore_non_core_regs+0x26>
 8000e9e:	f000 fc51 	bl	8001744 <__gnu_Unwind_Restore_VFP_D>
 8000ea2:	6823      	ldr	r3, [r4, #0]
 8000ea4:	0759      	lsls	r1, r3, #29
 8000ea6:	d509      	bpl.n	8000ebc <restore_non_core_regs+0x30>
 8000ea8:	071a      	lsls	r2, r3, #28
 8000eaa:	d50e      	bpl.n	8000eca <restore_non_core_regs+0x3e>
 8000eac:	06db      	lsls	r3, r3, #27
 8000eae:	d513      	bpl.n	8000ed8 <restore_non_core_regs+0x4c>
 8000eb0:	bd10      	pop	{r4, pc}
 8000eb2:	f000 fc3f 	bl	8001734 <__gnu_Unwind_Restore_VFP>
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	0759      	lsls	r1, r3, #29
 8000eba:	d4f5      	bmi.n	8000ea8 <restore_non_core_regs+0x1c>
 8000ebc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000ec0:	f000 fc48 	bl	8001754 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000ec4:	6823      	ldr	r3, [r4, #0]
 8000ec6:	071a      	lsls	r2, r3, #28
 8000ec8:	d4f0      	bmi.n	8000eac <restore_non_core_regs+0x20>
 8000eca:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000ece:	f000 fc49 	bl	8001764 <__gnu_Unwind_Restore_WMMXD>
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	06db      	lsls	r3, r3, #27
 8000ed6:	d4eb      	bmi.n	8000eb0 <restore_non_core_regs+0x24>
 8000ed8:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000edc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ee0:	f000 bc84 	b.w	80017ec <__gnu_Unwind_Restore_WMMXC>

08000ee4 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000ee4:	6803      	ldr	r3, [r0, #0]
 8000ee6:	b103      	cbz	r3, 8000eea <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000ee8:	4403      	add	r3, r0
 8000eea:	4618      	mov	r0, r3
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <__gnu_unwind_24bit.isra.1>:
 8000ef0:	2009      	movs	r0, #9
 8000ef2:	4770      	bx	lr

08000ef4 <_Unwind_DebugHook>:
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <unwind_phase2>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	4604      	mov	r4, r0
 8000efc:	460d      	mov	r5, r1
 8000efe:	e008      	b.n	8000f12 <unwind_phase2+0x1a>
 8000f00:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8000f02:	6163      	str	r3, [r4, #20]
 8000f04:	462a      	mov	r2, r5
 8000f06:	6923      	ldr	r3, [r4, #16]
 8000f08:	4621      	mov	r1, r4
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	4798      	blx	r3
 8000f0e:	2808      	cmp	r0, #8
 8000f10:	d108      	bne.n	8000f24 <unwind_phase2+0x2c>
 8000f12:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f14:	4620      	mov	r0, r4
 8000f16:	f7ff ff69 	bl	8000dec <get_eit_entry>
 8000f1a:	4606      	mov	r6, r0
 8000f1c:	2800      	cmp	r0, #0
 8000f1e:	d0ef      	beq.n	8000f00 <unwind_phase2+0x8>
 8000f20:	f007 fa9c 	bl	800845c <abort>
 8000f24:	2807      	cmp	r0, #7
 8000f26:	d1fb      	bne.n	8000f20 <unwind_phase2+0x28>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000f2c:	f7ff ffe2 	bl	8000ef4 <_Unwind_DebugHook>
 8000f30:	1d28      	adds	r0, r5, #4
 8000f32:	f000 fbf3 	bl	800171c <__restore_core_regs>
 8000f36:	bf00      	nop

08000f38 <unwind_phase2_forced>:
 8000f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f3c:	1d0c      	adds	r4, r1, #4
 8000f3e:	4605      	mov	r5, r0
 8000f40:	4692      	mov	sl, r2
 8000f42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f44:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000f48:	ae03      	add	r6, sp, #12
 8000f4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f4e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f50:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f52:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f54:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f58:	ac02      	add	r4, sp, #8
 8000f5a:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8000f5e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8000f62:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000f66:	2300      	movs	r3, #0
 8000f68:	4628      	mov	r0, r5
 8000f6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000f6c:	6023      	str	r3, [r4, #0]
 8000f6e:	f7ff ff3d 	bl	8000dec <get_eit_entry>
 8000f72:	f1ba 0f00 	cmp.w	sl, #0
 8000f76:	4607      	mov	r7, r0
 8000f78:	bf14      	ite	ne
 8000f7a:	260a      	movne	r6, #10
 8000f7c:	2609      	moveq	r6, #9
 8000f7e:	b17f      	cbz	r7, 8000fa0 <unwind_phase2_forced+0x68>
 8000f80:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000f82:	f046 0110 	orr.w	r1, r6, #16
 8000f86:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000f8a:	462a      	mov	r2, r5
 8000f8c:	6463      	str	r3, [r4, #68]	; 0x44
 8000f8e:	2001      	movs	r0, #1
 8000f90:	462b      	mov	r3, r5
 8000f92:	47c0      	blx	r8
 8000f94:	bb78      	cbnz	r0, 8000ff6 <unwind_phase2_forced+0xbe>
 8000f96:	4638      	mov	r0, r7
 8000f98:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fa2:	616b      	str	r3, [r5, #20]
 8000fa4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000fa8:	4621      	mov	r1, r4
 8000faa:	a87a      	add	r0, sp, #488	; 0x1e8
 8000fac:	f006 fc18 	bl	80077e0 <memcpy>
 8000fb0:	692b      	ldr	r3, [r5, #16]
 8000fb2:	aa7a      	add	r2, sp, #488	; 0x1e8
 8000fb4:	4629      	mov	r1, r5
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	4798      	blx	r3
 8000fba:	9b88      	ldr	r3, [sp, #544]	; 0x220
 8000fbc:	4682      	mov	sl, r0
 8000fbe:	e88d 0210 	stmia.w	sp, {r4, r9}
 8000fc2:	4631      	mov	r1, r6
 8000fc4:	6463      	str	r3, [r4, #68]	; 0x44
 8000fc6:	462a      	mov	r2, r5
 8000fc8:	462b      	mov	r3, r5
 8000fca:	2001      	movs	r0, #1
 8000fcc:	47c0      	blx	r8
 8000fce:	b990      	cbnz	r0, 8000ff6 <unwind_phase2_forced+0xbe>
 8000fd0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000fd4:	a97a      	add	r1, sp, #488	; 0x1e8
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f006 fc02 	bl	80077e0 <memcpy>
 8000fdc:	f1ba 0f08 	cmp.w	sl, #8
 8000fe0:	d106      	bne.n	8000ff0 <unwind_phase2_forced+0xb8>
 8000fe2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	f7ff ff01 	bl	8000dec <get_eit_entry>
 8000fea:	2609      	movs	r6, #9
 8000fec:	4607      	mov	r7, r0
 8000fee:	e7c6      	b.n	8000f7e <unwind_phase2_forced+0x46>
 8000ff0:	f1ba 0f07 	cmp.w	sl, #7
 8000ff4:	d005      	beq.n	8001002 <unwind_phase2_forced+0xca>
 8000ff6:	2709      	movs	r7, #9
 8000ff8:	4638      	mov	r0, r7
 8000ffa:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 8000ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001002:	4638      	mov	r0, r7
 8001004:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001006:	f7ff ff75 	bl	8000ef4 <_Unwind_DebugHook>
 800100a:	a803      	add	r0, sp, #12
 800100c:	f000 fb86 	bl	800171c <__restore_core_regs>

08001010 <_Unwind_GetCFA>:
 8001010:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8001012:	4770      	bx	lr

08001014 <__gnu_Unwind_RaiseException>:
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8001018:	640b      	str	r3, [r1, #64]	; 0x40
 800101a:	1d0e      	adds	r6, r1, #4
 800101c:	460f      	mov	r7, r1
 800101e:	4604      	mov	r4, r0
 8001020:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001022:	b0f9      	sub	sp, #484	; 0x1e4
 8001024:	ad01      	add	r5, sp, #4
 8001026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001028:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800102a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800102c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800102e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001030:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001034:	f04f 36ff 	mov.w	r6, #4294967295
 8001038:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800103c:	9600      	str	r6, [sp, #0]
 800103e:	e006      	b.n	800104e <__gnu_Unwind_RaiseException+0x3a>
 8001040:	6923      	ldr	r3, [r4, #16]
 8001042:	466a      	mov	r2, sp
 8001044:	4621      	mov	r1, r4
 8001046:	4798      	blx	r3
 8001048:	2808      	cmp	r0, #8
 800104a:	4605      	mov	r5, r0
 800104c:	d108      	bne.n	8001060 <__gnu_Unwind_RaiseException+0x4c>
 800104e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8001050:	4620      	mov	r0, r4
 8001052:	f7ff fecb 	bl	8000dec <get_eit_entry>
 8001056:	2800      	cmp	r0, #0
 8001058:	d0f2      	beq.n	8001040 <__gnu_Unwind_RaiseException+0x2c>
 800105a:	2009      	movs	r0, #9
 800105c:	b079      	add	sp, #484	; 0x1e4
 800105e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001060:	4668      	mov	r0, sp
 8001062:	f7ff ff13 	bl	8000e8c <restore_non_core_regs>
 8001066:	2d06      	cmp	r5, #6
 8001068:	d1f7      	bne.n	800105a <__gnu_Unwind_RaiseException+0x46>
 800106a:	4639      	mov	r1, r7
 800106c:	4620      	mov	r0, r4
 800106e:	f7ff ff43 	bl	8000ef8 <unwind_phase2>
 8001072:	bf00      	nop

08001074 <__gnu_Unwind_ForcedUnwind>:
 8001074:	b430      	push	{r4, r5}
 8001076:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8001078:	60c1      	str	r1, [r0, #12]
 800107a:	6182      	str	r2, [r0, #24]
 800107c:	4619      	mov	r1, r3
 800107e:	641d      	str	r5, [r3, #64]	; 0x40
 8001080:	2200      	movs	r2, #0
 8001082:	bc30      	pop	{r4, r5}
 8001084:	e758      	b.n	8000f38 <unwind_phase2_forced>
 8001086:	bf00      	nop

08001088 <__gnu_Unwind_Resume>:
 8001088:	b570      	push	{r4, r5, r6, lr}
 800108a:	68c6      	ldr	r6, [r0, #12]
 800108c:	6943      	ldr	r3, [r0, #20]
 800108e:	640b      	str	r3, [r1, #64]	; 0x40
 8001090:	b126      	cbz	r6, 800109c <__gnu_Unwind_Resume+0x14>
 8001092:	2201      	movs	r2, #1
 8001094:	f7ff ff50 	bl	8000f38 <unwind_phase2_forced>
 8001098:	f007 f9e0 	bl	800845c <abort>
 800109c:	6903      	ldr	r3, [r0, #16]
 800109e:	460a      	mov	r2, r1
 80010a0:	4604      	mov	r4, r0
 80010a2:	460d      	mov	r5, r1
 80010a4:	4601      	mov	r1, r0
 80010a6:	2002      	movs	r0, #2
 80010a8:	4798      	blx	r3
 80010aa:	2807      	cmp	r0, #7
 80010ac:	d007      	beq.n	80010be <__gnu_Unwind_Resume+0x36>
 80010ae:	2808      	cmp	r0, #8
 80010b0:	d103      	bne.n	80010ba <__gnu_Unwind_Resume+0x32>
 80010b2:	4629      	mov	r1, r5
 80010b4:	4620      	mov	r0, r4
 80010b6:	f7ff ff1f 	bl	8000ef8 <unwind_phase2>
 80010ba:	f007 f9cf 	bl	800845c <abort>
 80010be:	4630      	mov	r0, r6
 80010c0:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80010c2:	f7ff ff17 	bl	8000ef4 <_Unwind_DebugHook>
 80010c6:	1d28      	adds	r0, r5, #4
 80010c8:	f000 fb28 	bl	800171c <__restore_core_regs>

080010cc <__gnu_Unwind_Resume_or_Rethrow>:
 80010cc:	68c2      	ldr	r2, [r0, #12]
 80010ce:	b11a      	cbz	r2, 80010d8 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80010d0:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80010d2:	640a      	str	r2, [r1, #64]	; 0x40
 80010d4:	2200      	movs	r2, #0
 80010d6:	e72f      	b.n	8000f38 <unwind_phase2_forced>
 80010d8:	e79c      	b.n	8001014 <__gnu_Unwind_RaiseException>
 80010da:	bf00      	nop

080010dc <_Unwind_Complete>:
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop

080010e0 <_Unwind_DeleteException>:
 80010e0:	6883      	ldr	r3, [r0, #8]
 80010e2:	b113      	cbz	r3, 80010ea <_Unwind_DeleteException+0xa>
 80010e4:	4601      	mov	r1, r0
 80010e6:	2001      	movs	r0, #1
 80010e8:	4718      	bx	r3
 80010ea:	4770      	bx	lr

080010ec <_Unwind_VRS_Get>:
 80010ec:	b500      	push	{lr}
 80010ee:	2904      	cmp	r1, #4
 80010f0:	d807      	bhi.n	8001102 <_Unwind_VRS_Get+0x16>
 80010f2:	e8df f001 	tbb	[pc, r1]
 80010f6:	0903      	.short	0x0903
 80010f8:	0906      	.short	0x0906
 80010fa:	09          	.byte	0x09
 80010fb:	00          	.byte	0x00
 80010fc:	b90b      	cbnz	r3, 8001102 <_Unwind_VRS_Get+0x16>
 80010fe:	2a0f      	cmp	r2, #15
 8001100:	d905      	bls.n	800110e <_Unwind_VRS_Get+0x22>
 8001102:	2002      	movs	r0, #2
 8001104:	f85d fb04 	ldr.w	pc, [sp], #4
 8001108:	2001      	movs	r0, #1
 800110a:	f85d fb04 	ldr.w	pc, [sp], #4
 800110e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001112:	4618      	mov	r0, r3
 8001114:	6853      	ldr	r3, [r2, #4]
 8001116:	9a01      	ldr	r2, [sp, #4]
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	f85d fb04 	ldr.w	pc, [sp], #4
 800111e:	bf00      	nop

08001120 <_Unwind_GetGR>:
 8001120:	b510      	push	{r4, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	2300      	movs	r3, #0
 8001126:	ac03      	add	r4, sp, #12
 8001128:	460a      	mov	r2, r1
 800112a:	9400      	str	r4, [sp, #0]
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff ffdd 	bl	80010ec <_Unwind_VRS_Get>
 8001132:	9803      	ldr	r0, [sp, #12]
 8001134:	b004      	add	sp, #16
 8001136:	bd10      	pop	{r4, pc}

08001138 <_Unwind_VRS_Set>:
 8001138:	b500      	push	{lr}
 800113a:	2904      	cmp	r1, #4
 800113c:	d807      	bhi.n	800114e <_Unwind_VRS_Set+0x16>
 800113e:	e8df f001 	tbb	[pc, r1]
 8001142:	0903      	.short	0x0903
 8001144:	0906      	.short	0x0906
 8001146:	09          	.byte	0x09
 8001147:	00          	.byte	0x00
 8001148:	b90b      	cbnz	r3, 800114e <_Unwind_VRS_Set+0x16>
 800114a:	2a0f      	cmp	r2, #15
 800114c:	d905      	bls.n	800115a <_Unwind_VRS_Set+0x22>
 800114e:	2002      	movs	r0, #2
 8001150:	f85d fb04 	ldr.w	pc, [sp], #4
 8001154:	2001      	movs	r0, #1
 8001156:	f85d fb04 	ldr.w	pc, [sp], #4
 800115a:	9901      	ldr	r1, [sp, #4]
 800115c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001160:	6809      	ldr	r1, [r1, #0]
 8001162:	6051      	str	r1, [r2, #4]
 8001164:	4618      	mov	r0, r3
 8001166:	f85d fb04 	ldr.w	pc, [sp], #4
 800116a:	bf00      	nop

0800116c <_Unwind_SetGR>:
 800116c:	b510      	push	{r4, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	ac04      	add	r4, sp, #16
 8001172:	2300      	movs	r3, #0
 8001174:	f844 2d04 	str.w	r2, [r4, #-4]!
 8001178:	460a      	mov	r2, r1
 800117a:	9400      	str	r4, [sp, #0]
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff ffdb 	bl	8001138 <_Unwind_VRS_Set>
 8001182:	b004      	add	sp, #16
 8001184:	bd10      	pop	{r4, pc}
 8001186:	bf00      	nop

08001188 <__gnu_Unwind_Backtrace>:
 8001188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800118a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	1d15      	adds	r5, r2, #4
 8001190:	4607      	mov	r7, r0
 8001192:	460e      	mov	r6, r1
 8001194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001196:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800119a:	ac17      	add	r4, sp, #92	; 0x5c
 800119c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80011aa:	f04f 35ff 	mov.w	r5, #4294967295
 80011ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80011b2:	9516      	str	r5, [sp, #88]	; 0x58
 80011b4:	e010      	b.n	80011d8 <__gnu_Unwind_Backtrace+0x50>
 80011b6:	a816      	add	r0, sp, #88	; 0x58
 80011b8:	f7ff ffd8 	bl	800116c <_Unwind_SetGR>
 80011bc:	4631      	mov	r1, r6
 80011be:	a816      	add	r0, sp, #88	; 0x58
 80011c0:	47b8      	blx	r7
 80011c2:	aa16      	add	r2, sp, #88	; 0x58
 80011c4:	4669      	mov	r1, sp
 80011c6:	b978      	cbnz	r0, 80011e8 <__gnu_Unwind_Backtrace+0x60>
 80011c8:	9b04      	ldr	r3, [sp, #16]
 80011ca:	2008      	movs	r0, #8
 80011cc:	4798      	blx	r3
 80011ce:	2805      	cmp	r0, #5
 80011d0:	4604      	mov	r4, r0
 80011d2:	d00a      	beq.n	80011ea <__gnu_Unwind_Backtrace+0x62>
 80011d4:	2809      	cmp	r0, #9
 80011d6:	d007      	beq.n	80011e8 <__gnu_Unwind_Backtrace+0x60>
 80011d8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80011da:	4668      	mov	r0, sp
 80011dc:	f7ff fe06 	bl	8000dec <get_eit_entry>
 80011e0:	466a      	mov	r2, sp
 80011e2:	210c      	movs	r1, #12
 80011e4:	2800      	cmp	r0, #0
 80011e6:	d0e6      	beq.n	80011b6 <__gnu_Unwind_Backtrace+0x2e>
 80011e8:	2409      	movs	r4, #9
 80011ea:	a816      	add	r0, sp, #88	; 0x58
 80011ec:	f7ff fe4e 	bl	8000e8c <restore_non_core_regs>
 80011f0:	4620      	mov	r0, r4
 80011f2:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 80011f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011f8 <__gnu_unwind_pr_common>:
 80011f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011fc:	460d      	mov	r5, r1
 80011fe:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001200:	b08b      	sub	sp, #44	; 0x2c
 8001202:	1d0c      	adds	r4, r1, #4
 8001204:	6809      	ldr	r1, [r1, #0]
 8001206:	9107      	str	r1, [sp, #28]
 8001208:	4691      	mov	r9, r2
 800120a:	9408      	str	r4, [sp, #32]
 800120c:	f000 0b03 	and.w	fp, r0, #3
 8001210:	461e      	mov	r6, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d160      	bne.n	80012d8 <__gnu_unwind_pr_common+0xe0>
 8001216:	0209      	lsls	r1, r1, #8
 8001218:	2303      	movs	r3, #3
 800121a:	9107      	str	r1, [sp, #28]
 800121c:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8001220:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8001224:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8001226:	f1bb 0f02 	cmp.w	fp, #2
 800122a:	bf08      	it	eq
 800122c:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 800122e:	f013 0301 	ands.w	r3, r3, #1
 8001232:	d140      	bne.n	80012b6 <__gnu_unwind_pr_common+0xbe>
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	f000 0308 	and.w	r3, r0, #8
 800123a:	9303      	str	r3, [sp, #12]
 800123c:	f8d4 8000 	ldr.w	r8, [r4]
 8001240:	f1b8 0f00 	cmp.w	r8, #0
 8001244:	d039      	beq.n	80012ba <__gnu_unwind_pr_common+0xc2>
 8001246:	2e02      	cmp	r6, #2
 8001248:	d043      	beq.n	80012d2 <__gnu_unwind_pr_common+0xda>
 800124a:	f8b4 8000 	ldrh.w	r8, [r4]
 800124e:	8867      	ldrh	r7, [r4, #2]
 8001250:	3404      	adds	r4, #4
 8001252:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8001254:	f027 0a01 	bic.w	sl, r7, #1
 8001258:	210f      	movs	r1, #15
 800125a:	4648      	mov	r0, r9
 800125c:	449a      	add	sl, r3
 800125e:	f7ff ff5f 	bl	8001120 <_Unwind_GetGR>
 8001262:	4582      	cmp	sl, r0
 8001264:	d833      	bhi.n	80012ce <__gnu_unwind_pr_common+0xd6>
 8001266:	f028 0301 	bic.w	r3, r8, #1
 800126a:	449a      	add	sl, r3
 800126c:	4550      	cmp	r0, sl
 800126e:	bf2c      	ite	cs
 8001270:	2000      	movcs	r0, #0
 8001272:	2001      	movcc	r0, #1
 8001274:	007f      	lsls	r7, r7, #1
 8001276:	f007 0702 	and.w	r7, r7, #2
 800127a:	f008 0801 	and.w	r8, r8, #1
 800127e:	ea47 0708 	orr.w	r7, r7, r8
 8001282:	2f01      	cmp	r7, #1
 8001284:	d03e      	beq.n	8001304 <__gnu_unwind_pr_common+0x10c>
 8001286:	d335      	bcc.n	80012f4 <__gnu_unwind_pr_common+0xfc>
 8001288:	2f02      	cmp	r7, #2
 800128a:	d11c      	bne.n	80012c6 <__gnu_unwind_pr_common+0xce>
 800128c:	6823      	ldr	r3, [r4, #0]
 800128e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001292:	9202      	str	r2, [sp, #8]
 8001294:	f1bb 0f00 	cmp.w	fp, #0
 8001298:	d176      	bne.n	8001388 <__gnu_unwind_pr_common+0x190>
 800129a:	b128      	cbz	r0, 80012a8 <__gnu_unwind_pr_common+0xb0>
 800129c:	9903      	ldr	r1, [sp, #12]
 800129e:	2900      	cmp	r1, #0
 80012a0:	d07e      	beq.n	80013a0 <__gnu_unwind_pr_common+0x1a8>
 80012a2:	2a00      	cmp	r2, #0
 80012a4:	f000 80a6 	beq.w	80013f4 <__gnu_unwind_pr_common+0x1fc>
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	db77      	blt.n	800139c <__gnu_unwind_pr_common+0x1a4>
 80012ac:	9b02      	ldr	r3, [sp, #8]
 80012ae:	3301      	adds	r3, #1
 80012b0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80012b4:	e7c2      	b.n	800123c <__gnu_unwind_pr_common+0x44>
 80012b6:	2300      	movs	r3, #0
 80012b8:	9301      	str	r3, [sp, #4]
 80012ba:	2e02      	cmp	r6, #2
 80012bc:	dd3e      	ble.n	800133c <__gnu_unwind_pr_common+0x144>
 80012be:	f7ff fe17 	bl	8000ef0 <__gnu_unwind_24bit.isra.1>
 80012c2:	2800      	cmp	r0, #0
 80012c4:	d040      	beq.n	8001348 <__gnu_unwind_pr_common+0x150>
 80012c6:	2009      	movs	r0, #9
 80012c8:	b00b      	add	sp, #44	; 0x2c
 80012ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012ce:	2000      	movs	r0, #0
 80012d0:	e7d0      	b.n	8001274 <__gnu_unwind_pr_common+0x7c>
 80012d2:	6867      	ldr	r7, [r4, #4]
 80012d4:	3408      	adds	r4, #8
 80012d6:	e7bc      	b.n	8001252 <__gnu_unwind_pr_common+0x5a>
 80012d8:	2b02      	cmp	r3, #2
 80012da:	dca3      	bgt.n	8001224 <__gnu_unwind_pr_common+0x2c>
 80012dc:	0c0b      	lsrs	r3, r1, #16
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	0409      	lsls	r1, r1, #16
 80012e2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80012e6:	2302      	movs	r3, #2
 80012e8:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 80012ec:	9107      	str	r1, [sp, #28]
 80012ee:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80012f2:	e797      	b.n	8001224 <__gnu_unwind_pr_common+0x2c>
 80012f4:	f1bb 0f00 	cmp.w	fp, #0
 80012f8:	d002      	beq.n	8001300 <__gnu_unwind_pr_common+0x108>
 80012fa:	2800      	cmp	r0, #0
 80012fc:	f040 80bd 	bne.w	800147a <__gnu_unwind_pr_common+0x282>
 8001300:	3404      	adds	r4, #4
 8001302:	e79b      	b.n	800123c <__gnu_unwind_pr_common+0x44>
 8001304:	f1bb 0f00 	cmp.w	fp, #0
 8001308:	d125      	bne.n	8001356 <__gnu_unwind_pr_common+0x15e>
 800130a:	b1a8      	cbz	r0, 8001338 <__gnu_unwind_pr_common+0x140>
 800130c:	e894 000c 	ldmia.w	r4, {r2, r3}
 8001310:	1c99      	adds	r1, r3, #2
 8001312:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8001316:	d0d6      	beq.n	80012c6 <__gnu_unwind_pr_common+0xce>
 8001318:	f105 0158 	add.w	r1, r5, #88	; 0x58
 800131c:	3301      	adds	r3, #1
 800131e:	9106      	str	r1, [sp, #24]
 8001320:	f000 80a3 	beq.w	800146a <__gnu_unwind_pr_common+0x272>
 8001324:	1d20      	adds	r0, r4, #4
 8001326:	f7ff fddd 	bl	8000ee4 <_Unwind_decode_typeinfo_ptr.isra.0>
 800132a:	ab06      	add	r3, sp, #24
 800132c:	4601      	mov	r1, r0
 800132e:	4628      	mov	r0, r5
 8001330:	f3af 8000 	nop.w
 8001334:	2800      	cmp	r0, #0
 8001336:	d177      	bne.n	8001428 <__gnu_unwind_pr_common+0x230>
 8001338:	3408      	adds	r4, #8
 800133a:	e77f      	b.n	800123c <__gnu_unwind_pr_common+0x44>
 800133c:	a907      	add	r1, sp, #28
 800133e:	4648      	mov	r0, r9
 8001340:	f000 faee 	bl	8001920 <__gnu_unwind_execute>
 8001344:	2800      	cmp	r0, #0
 8001346:	d1be      	bne.n	80012c6 <__gnu_unwind_pr_common+0xce>
 8001348:	9b01      	ldr	r3, [sp, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d15c      	bne.n	8001408 <__gnu_unwind_pr_common+0x210>
 800134e:	2008      	movs	r0, #8
 8001350:	b00b      	add	sp, #44	; 0x2c
 8001352:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001356:	210d      	movs	r1, #13
 8001358:	4648      	mov	r0, r9
 800135a:	6a2f      	ldr	r7, [r5, #32]
 800135c:	f7ff fee0 	bl	8001120 <_Unwind_GetGR>
 8001360:	4287      	cmp	r7, r0
 8001362:	d1e9      	bne.n	8001338 <__gnu_unwind_pr_common+0x140>
 8001364:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001366:	429c      	cmp	r4, r3
 8001368:	d1e6      	bne.n	8001338 <__gnu_unwind_pr_common+0x140>
 800136a:	4620      	mov	r0, r4
 800136c:	f7ff fcf0 	bl	8000d50 <selfrel_offset31>
 8001370:	210f      	movs	r1, #15
 8001372:	4602      	mov	r2, r0
 8001374:	4648      	mov	r0, r9
 8001376:	f7ff fef9 	bl	800116c <_Unwind_SetGR>
 800137a:	4648      	mov	r0, r9
 800137c:	462a      	mov	r2, r5
 800137e:	2100      	movs	r1, #0
 8001380:	f7ff fef4 	bl	800116c <_Unwind_SetGR>
 8001384:	2007      	movs	r0, #7
 8001386:	e79f      	b.n	80012c8 <__gnu_unwind_pr_common+0xd0>
 8001388:	210d      	movs	r1, #13
 800138a:	4648      	mov	r0, r9
 800138c:	6a2f      	ldr	r7, [r5, #32]
 800138e:	f7ff fec7 	bl	8001120 <_Unwind_GetGR>
 8001392:	4287      	cmp	r7, r0
 8001394:	d058      	beq.n	8001448 <__gnu_unwind_pr_common+0x250>
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	da87      	bge.n	80012ac <__gnu_unwind_pr_common+0xb4>
 800139c:	3404      	adds	r4, #4
 800139e:	e785      	b.n	80012ac <__gnu_unwind_pr_common+0xb4>
 80013a0:	9b02      	ldr	r3, [sp, #8]
 80013a2:	b33b      	cbz	r3, 80013f4 <__gnu_unwind_pr_common+0x1fc>
 80013a4:	f105 0358 	add.w	r3, r5, #88	; 0x58
 80013a8:	1d27      	adds	r7, r4, #4
 80013aa:	f8cd b010 	str.w	fp, [sp, #16]
 80013ae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80013b2:	f8dd a008 	ldr.w	sl, [sp, #8]
 80013b6:	9605      	str	r6, [sp, #20]
 80013b8:	46a3      	mov	fp, r4
 80013ba:	461c      	mov	r4, r3
 80013bc:	e002      	b.n	80013c4 <__gnu_unwind_pr_common+0x1cc>
 80013be:	45b2      	cmp	sl, r6
 80013c0:	46b0      	mov	r8, r6
 80013c2:	d016      	beq.n	80013f2 <__gnu_unwind_pr_common+0x1fa>
 80013c4:	4638      	mov	r0, r7
 80013c6:	9406      	str	r4, [sp, #24]
 80013c8:	f7ff fd8c 	bl	8000ee4 <_Unwind_decode_typeinfo_ptr.isra.0>
 80013cc:	ab06      	add	r3, sp, #24
 80013ce:	4601      	mov	r1, r0
 80013d0:	2200      	movs	r2, #0
 80013d2:	4628      	mov	r0, r5
 80013d4:	f3af 8000 	nop.w
 80013d8:	f108 0601 	add.w	r6, r8, #1
 80013dc:	3704      	adds	r7, #4
 80013de:	2800      	cmp	r0, #0
 80013e0:	d0ed      	beq.n	80013be <__gnu_unwind_pr_common+0x1c6>
 80013e2:	9b02      	ldr	r3, [sp, #8]
 80013e4:	9e05      	ldr	r6, [sp, #20]
 80013e6:	4543      	cmp	r3, r8
 80013e8:	465c      	mov	r4, fp
 80013ea:	f8dd b010 	ldr.w	fp, [sp, #16]
 80013ee:	d1d2      	bne.n	8001396 <__gnu_unwind_pr_common+0x19e>
 80013f0:	e000      	b.n	80013f4 <__gnu_unwind_pr_common+0x1fc>
 80013f2:	465c      	mov	r4, fp
 80013f4:	4648      	mov	r0, r9
 80013f6:	210d      	movs	r1, #13
 80013f8:	f7ff fe92 	bl	8001120 <_Unwind_GetGR>
 80013fc:	9b06      	ldr	r3, [sp, #24]
 80013fe:	6228      	str	r0, [r5, #32]
 8001400:	62ac      	str	r4, [r5, #40]	; 0x28
 8001402:	626b      	str	r3, [r5, #36]	; 0x24
 8001404:	2006      	movs	r0, #6
 8001406:	e75f      	b.n	80012c8 <__gnu_unwind_pr_common+0xd0>
 8001408:	210f      	movs	r1, #15
 800140a:	4648      	mov	r0, r9
 800140c:	f7ff fe88 	bl	8001120 <_Unwind_GetGR>
 8001410:	210e      	movs	r1, #14
 8001412:	4602      	mov	r2, r0
 8001414:	4648      	mov	r0, r9
 8001416:	f7ff fea9 	bl	800116c <_Unwind_SetGR>
 800141a:	4648      	mov	r0, r9
 800141c:	4a29      	ldr	r2, [pc, #164]	; (80014c4 <__gnu_unwind_pr_common+0x2cc>)
 800141e:	210f      	movs	r1, #15
 8001420:	f7ff fea4 	bl	800116c <_Unwind_SetGR>
 8001424:	2007      	movs	r0, #7
 8001426:	e74f      	b.n	80012c8 <__gnu_unwind_pr_common+0xd0>
 8001428:	4607      	mov	r7, r0
 800142a:	210d      	movs	r1, #13
 800142c:	4648      	mov	r0, r9
 800142e:	f7ff fe77 	bl	8001120 <_Unwind_GetGR>
 8001432:	2f02      	cmp	r7, #2
 8001434:	6228      	str	r0, [r5, #32]
 8001436:	d11d      	bne.n	8001474 <__gnu_unwind_pr_common+0x27c>
 8001438:	462b      	mov	r3, r5
 800143a:	9a06      	ldr	r2, [sp, #24]
 800143c:	f843 2f2c 	str.w	r2, [r3, #44]!
 8001440:	626b      	str	r3, [r5, #36]	; 0x24
 8001442:	62ac      	str	r4, [r5, #40]	; 0x28
 8001444:	2006      	movs	r0, #6
 8001446:	e73f      	b.n	80012c8 <__gnu_unwind_pr_common+0xd0>
 8001448:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800144a:	429c      	cmp	r4, r3
 800144c:	d1a3      	bne.n	8001396 <__gnu_unwind_pr_common+0x19e>
 800144e:	2204      	movs	r2, #4
 8001450:	2700      	movs	r7, #0
 8001452:	18a3      	adds	r3, r4, r2
 8001454:	9902      	ldr	r1, [sp, #8]
 8001456:	62a9      	str	r1, [r5, #40]	; 0x28
 8001458:	62ef      	str	r7, [r5, #44]	; 0x2c
 800145a:	632a      	str	r2, [r5, #48]	; 0x30
 800145c:	636b      	str	r3, [r5, #52]	; 0x34
 800145e:	6823      	ldr	r3, [r4, #0]
 8001460:	42bb      	cmp	r3, r7
 8001462:	db1d      	blt.n	80014a0 <__gnu_unwind_pr_common+0x2a8>
 8001464:	2301      	movs	r3, #1
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	e720      	b.n	80012ac <__gnu_unwind_pr_common+0xb4>
 800146a:	4648      	mov	r0, r9
 800146c:	210d      	movs	r1, #13
 800146e:	f7ff fe57 	bl	8001120 <_Unwind_GetGR>
 8001472:	6228      	str	r0, [r5, #32]
 8001474:	9b06      	ldr	r3, [sp, #24]
 8001476:	626b      	str	r3, [r5, #36]	; 0x24
 8001478:	e7e3      	b.n	8001442 <__gnu_unwind_pr_common+0x24a>
 800147a:	4620      	mov	r0, r4
 800147c:	f7ff fc68 	bl	8000d50 <selfrel_offset31>
 8001480:	3404      	adds	r4, #4
 8001482:	4606      	mov	r6, r0
 8001484:	63ac      	str	r4, [r5, #56]	; 0x38
 8001486:	4628      	mov	r0, r5
 8001488:	f3af 8000 	nop.w
 800148c:	2800      	cmp	r0, #0
 800148e:	f43f af1a 	beq.w	80012c6 <__gnu_unwind_pr_common+0xce>
 8001492:	4648      	mov	r0, r9
 8001494:	4632      	mov	r2, r6
 8001496:	210f      	movs	r1, #15
 8001498:	f7ff fe68 	bl	800116c <_Unwind_SetGR>
 800149c:	2007      	movs	r0, #7
 800149e:	e713      	b.n	80012c8 <__gnu_unwind_pr_common+0xd0>
 80014a0:	4608      	mov	r0, r1
 80014a2:	3001      	adds	r0, #1
 80014a4:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80014a8:	f7ff fc52 	bl	8000d50 <selfrel_offset31>
 80014ac:	210f      	movs	r1, #15
 80014ae:	4602      	mov	r2, r0
 80014b0:	4648      	mov	r0, r9
 80014b2:	f7ff fe5b 	bl	800116c <_Unwind_SetGR>
 80014b6:	4648      	mov	r0, r9
 80014b8:	462a      	mov	r2, r5
 80014ba:	4639      	mov	r1, r7
 80014bc:	f7ff fe56 	bl	800116c <_Unwind_SetGR>
 80014c0:	2007      	movs	r0, #7
 80014c2:	e701      	b.n	80012c8 <__gnu_unwind_pr_common+0xd0>
 80014c4:	00000000 	.word	0x00000000

080014c8 <__aeabi_unwind_cpp_pr0>:
 80014c8:	2300      	movs	r3, #0
 80014ca:	e695      	b.n	80011f8 <__gnu_unwind_pr_common>

080014cc <__aeabi_unwind_cpp_pr1>:
 80014cc:	2301      	movs	r3, #1
 80014ce:	e693      	b.n	80011f8 <__gnu_unwind_pr_common>

080014d0 <__aeabi_unwind_cpp_pr2>:
 80014d0:	2302      	movs	r3, #2
 80014d2:	e691      	b.n	80011f8 <__gnu_unwind_pr_common>

080014d4 <_Unwind_VRS_Pop>:
 80014d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014d6:	4604      	mov	r4, r0
 80014d8:	b0c5      	sub	sp, #276	; 0x114
 80014da:	2904      	cmp	r1, #4
 80014dc:	d80d      	bhi.n	80014fa <_Unwind_VRS_Pop+0x26>
 80014de:	e8df f001 	tbb	[pc, r1]
 80014e2:	0353      	.short	0x0353
 80014e4:	310c      	.short	0x310c
 80014e6:	0f          	.byte	0x0f
 80014e7:	00          	.byte	0x00
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	ea4f 4612 	mov.w	r6, r2, lsr #16
 80014ee:	b295      	uxth	r5, r2
 80014f0:	d162      	bne.n	80015b8 <_Unwind_VRS_Pop+0xe4>
 80014f2:	1972      	adds	r2, r6, r5
 80014f4:	2a10      	cmp	r2, #16
 80014f6:	f240 809b 	bls.w	8001630 <_Unwind_VRS_Pop+0x15c>
 80014fa:	2002      	movs	r0, #2
 80014fc:	b045      	add	sp, #276	; 0x114
 80014fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1fa      	bne.n	80014fa <_Unwind_VRS_Pop+0x26>
 8001504:	2a10      	cmp	r2, #16
 8001506:	d8f8      	bhi.n	80014fa <_Unwind_VRS_Pop+0x26>
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	06d8      	lsls	r0, r3, #27
 800150c:	f100 80c6 	bmi.w	800169c <_Unwind_VRS_Pop+0x1c8>
 8001510:	ae22      	add	r6, sp, #136	; 0x88
 8001512:	4630      	mov	r0, r6
 8001514:	9201      	str	r2, [sp, #4]
 8001516:	f000 f973 	bl	8001800 <__gnu_Unwind_Save_WMMXC>
 800151a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800151c:	9a01      	ldr	r2, [sp, #4]
 800151e:	2300      	movs	r3, #0
 8001520:	2501      	movs	r5, #1
 8001522:	fa05 f103 	lsl.w	r1, r5, r3
 8001526:	4211      	tst	r1, r2
 8001528:	d003      	beq.n	8001532 <_Unwind_VRS_Pop+0x5e>
 800152a:	6801      	ldr	r1, [r0, #0]
 800152c:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8001530:	3004      	adds	r0, #4
 8001532:	3301      	adds	r3, #1
 8001534:	2b04      	cmp	r3, #4
 8001536:	d1f4      	bne.n	8001522 <_Unwind_VRS_Pop+0x4e>
 8001538:	63a0      	str	r0, [r4, #56]	; 0x38
 800153a:	4630      	mov	r0, r6
 800153c:	f000 f956 	bl	80017ec <__gnu_Unwind_Restore_WMMXC>
 8001540:	2000      	movs	r0, #0
 8001542:	e7db      	b.n	80014fc <_Unwind_VRS_Pop+0x28>
 8001544:	2b03      	cmp	r3, #3
 8001546:	d1d8      	bne.n	80014fa <_Unwind_VRS_Pop+0x26>
 8001548:	0c15      	lsrs	r5, r2, #16
 800154a:	b297      	uxth	r7, r2
 800154c:	19eb      	adds	r3, r5, r7
 800154e:	2b10      	cmp	r3, #16
 8001550:	d8d3      	bhi.n	80014fa <_Unwind_VRS_Pop+0x26>
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	071e      	lsls	r6, r3, #28
 8001556:	f100 80b5 	bmi.w	80016c4 <_Unwind_VRS_Pop+0x1f0>
 800155a:	ae22      	add	r6, sp, #136	; 0x88
 800155c:	4630      	mov	r0, r6
 800155e:	f000 f923 	bl	80017a8 <__gnu_Unwind_Save_WMMXD>
 8001562:	00ed      	lsls	r5, r5, #3
 8001564:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001566:	b14f      	cbz	r7, 800157c <_Unwind_VRS_Pop+0xa8>
 8001568:	3d04      	subs	r5, #4
 800156a:	1971      	adds	r1, r6, r5
 800156c:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8001570:	f853 2b04 	ldr.w	r2, [r3], #4
 8001574:	f841 2f04 	str.w	r2, [r1, #4]!
 8001578:	4283      	cmp	r3, r0
 800157a:	d1f9      	bne.n	8001570 <_Unwind_VRS_Pop+0x9c>
 800157c:	4630      	mov	r0, r6
 800157e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001580:	f000 f8f0 	bl	8001764 <__gnu_Unwind_Restore_WMMXD>
 8001584:	2000      	movs	r0, #0
 8001586:	e7b9      	b.n	80014fc <_Unwind_VRS_Pop+0x28>
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1b6      	bne.n	80014fa <_Unwind_VRS_Pop+0x26>
 800158c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800158e:	b297      	uxth	r7, r2
 8001590:	1d20      	adds	r0, r4, #4
 8001592:	2601      	movs	r6, #1
 8001594:	fa06 f103 	lsl.w	r1, r6, r3
 8001598:	4239      	tst	r1, r7
 800159a:	f103 0301 	add.w	r3, r3, #1
 800159e:	d002      	beq.n	80015a6 <_Unwind_VRS_Pop+0xd2>
 80015a0:	6829      	ldr	r1, [r5, #0]
 80015a2:	6001      	str	r1, [r0, #0]
 80015a4:	3504      	adds	r5, #4
 80015a6:	2b10      	cmp	r3, #16
 80015a8:	f100 0004 	add.w	r0, r0, #4
 80015ac:	d1f2      	bne.n	8001594 <_Unwind_VRS_Pop+0xc0>
 80015ae:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 80015b2:	d13b      	bne.n	800162c <_Unwind_VRS_Pop+0x158>
 80015b4:	63a5      	str	r5, [r4, #56]	; 0x38
 80015b6:	e7a1      	b.n	80014fc <_Unwind_VRS_Pop+0x28>
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d19e      	bne.n	80014fa <_Unwind_VRS_Pop+0x26>
 80015bc:	1977      	adds	r7, r6, r5
 80015be:	2f20      	cmp	r7, #32
 80015c0:	d89b      	bhi.n	80014fa <_Unwind_VRS_Pop+0x26>
 80015c2:	2e0f      	cmp	r6, #15
 80015c4:	d966      	bls.n	8001694 <_Unwind_VRS_Pop+0x1c0>
 80015c6:	462f      	mov	r7, r5
 80015c8:	2d00      	cmp	r5, #0
 80015ca:	d13a      	bne.n	8001642 <_Unwind_VRS_Pop+0x16e>
 80015cc:	462a      	mov	r2, r5
 80015ce:	2700      	movs	r7, #0
 80015d0:	2a00      	cmp	r2, #0
 80015d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80015d4:	dd72      	ble.n	80016bc <_Unwind_VRS_Pop+0x1e8>
 80015d6:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80015da:	4601      	mov	r1, r0
 80015dc:	a844      	add	r0, sp, #272	; 0x110
 80015de:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 80015e2:	388c      	subs	r0, #140	; 0x8c
 80015e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80015e8:	f840 5f04 	str.w	r5, [r0, #4]!
 80015ec:	4291      	cmp	r1, r2
 80015ee:	d1f9      	bne.n	80015e4 <_Unwind_VRS_Pop+0x110>
 80015f0:	4608      	mov	r0, r1
 80015f2:	b197      	cbz	r7, 800161a <_Unwind_VRS_Pop+0x146>
 80015f4:	2e10      	cmp	r6, #16
 80015f6:	4632      	mov	r2, r6
 80015f8:	a944      	add	r1, sp, #272	; 0x110
 80015fa:	bf38      	it	cc
 80015fc:	2210      	movcc	r2, #16
 80015fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8001602:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8001606:	0079      	lsls	r1, r7, #1
 8001608:	3a04      	subs	r2, #4
 800160a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800160e:	f850 5b04 	ldr.w	r5, [r0], #4
 8001612:	f842 5f04 	str.w	r5, [r2, #4]!
 8001616:	4288      	cmp	r0, r1
 8001618:	d1f9      	bne.n	800160e <_Unwind_VRS_Pop+0x13a>
 800161a:	2b01      	cmp	r3, #1
 800161c:	d048      	beq.n	80016b0 <_Unwind_VRS_Pop+0x1dc>
 800161e:	2e0f      	cmp	r6, #15
 8001620:	63a1      	str	r1, [r4, #56]	; 0x38
 8001622:	d933      	bls.n	800168c <_Unwind_VRS_Pop+0x1b8>
 8001624:	b117      	cbz	r7, 800162c <_Unwind_VRS_Pop+0x158>
 8001626:	a802      	add	r0, sp, #8
 8001628:	f000 f894 	bl	8001754 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 800162c:	2000      	movs	r0, #0
 800162e:	e765      	b.n	80014fc <_Unwind_VRS_Pop+0x28>
 8001630:	2e0f      	cmp	r6, #15
 8001632:	f63f af62 	bhi.w	80014fa <_Unwind_VRS_Pop+0x26>
 8001636:	2700      	movs	r7, #0
 8001638:	6822      	ldr	r2, [r4, #0]
 800163a:	07d1      	lsls	r1, r2, #31
 800163c:	d417      	bmi.n	800166e <_Unwind_VRS_Pop+0x19a>
 800163e:	2f00      	cmp	r7, #0
 8001640:	d060      	beq.n	8001704 <_Unwind_VRS_Pop+0x230>
 8001642:	6822      	ldr	r2, [r4, #0]
 8001644:	0751      	lsls	r1, r2, #29
 8001646:	d445      	bmi.n	80016d4 <_Unwind_VRS_Pop+0x200>
 8001648:	2b01      	cmp	r3, #1
 800164a:	d04d      	beq.n	80016e8 <_Unwind_VRS_Pop+0x214>
 800164c:	2e0f      	cmp	r6, #15
 800164e:	d806      	bhi.n	800165e <_Unwind_VRS_Pop+0x18a>
 8001650:	a822      	add	r0, sp, #136	; 0x88
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	f000 f87a 	bl	800174c <__gnu_Unwind_Save_VFP_D>
 8001658:	9b01      	ldr	r3, [sp, #4]
 800165a:	2f00      	cmp	r7, #0
 800165c:	d0b6      	beq.n	80015cc <_Unwind_VRS_Pop+0xf8>
 800165e:	a802      	add	r0, sp, #8
 8001660:	9301      	str	r3, [sp, #4]
 8001662:	f000 f87b 	bl	800175c <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001666:	9b01      	ldr	r3, [sp, #4]
 8001668:	f1c6 0210 	rsb	r2, r6, #16
 800166c:	e7b0      	b.n	80015d0 <_Unwind_VRS_Pop+0xfc>
 800166e:	f022 0101 	bic.w	r1, r2, #1
 8001672:	2b05      	cmp	r3, #5
 8001674:	6021      	str	r1, [r4, #0]
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	4620      	mov	r0, r4
 800167a:	d03b      	beq.n	80016f4 <_Unwind_VRS_Pop+0x220>
 800167c:	f022 0203 	bic.w	r2, r2, #3
 8001680:	f840 2b48 	str.w	r2, [r0], #72
 8001684:	f000 f85a 	bl	800173c <__gnu_Unwind_Save_VFP>
 8001688:	9b01      	ldr	r3, [sp, #4]
 800168a:	e7d8      	b.n	800163e <_Unwind_VRS_Pop+0x16a>
 800168c:	a822      	add	r0, sp, #136	; 0x88
 800168e:	f000 f859 	bl	8001744 <__gnu_Unwind_Restore_VFP_D>
 8001692:	e7c7      	b.n	8001624 <_Unwind_VRS_Pop+0x150>
 8001694:	2f10      	cmp	r7, #16
 8001696:	d9ce      	bls.n	8001636 <_Unwind_VRS_Pop+0x162>
 8001698:	3f10      	subs	r7, #16
 800169a:	e7cd      	b.n	8001638 <_Unwind_VRS_Pop+0x164>
 800169c:	f023 0310 	bic.w	r3, r3, #16
 80016a0:	6023      	str	r3, [r4, #0]
 80016a2:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 80016a6:	9201      	str	r2, [sp, #4]
 80016a8:	f000 f8aa 	bl	8001800 <__gnu_Unwind_Save_WMMXC>
 80016ac:	9a01      	ldr	r2, [sp, #4]
 80016ae:	e72f      	b.n	8001510 <_Unwind_VRS_Pop+0x3c>
 80016b0:	3104      	adds	r1, #4
 80016b2:	63a1      	str	r1, [r4, #56]	; 0x38
 80016b4:	a822      	add	r0, sp, #136	; 0x88
 80016b6:	f000 f83d 	bl	8001734 <__gnu_Unwind_Restore_VFP>
 80016ba:	e7b7      	b.n	800162c <_Unwind_VRS_Pop+0x158>
 80016bc:	2f00      	cmp	r7, #0
 80016be:	d199      	bne.n	80015f4 <_Unwind_VRS_Pop+0x120>
 80016c0:	4601      	mov	r1, r0
 80016c2:	e7aa      	b.n	800161a <_Unwind_VRS_Pop+0x146>
 80016c4:	f023 0308 	bic.w	r3, r3, #8
 80016c8:	6023      	str	r3, [r4, #0]
 80016ca:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80016ce:	f000 f86b 	bl	80017a8 <__gnu_Unwind_Save_WMMXD>
 80016d2:	e742      	b.n	800155a <_Unwind_VRS_Pop+0x86>
 80016d4:	4620      	mov	r0, r4
 80016d6:	f022 0204 	bic.w	r2, r2, #4
 80016da:	f840 2bd0 	str.w	r2, [r0], #208
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	f000 f83c 	bl	800175c <__gnu_Unwind_Save_VFP_D_16_to_31>
 80016e4:	9b01      	ldr	r3, [sp, #4]
 80016e6:	e7af      	b.n	8001648 <_Unwind_VRS_Pop+0x174>
 80016e8:	a822      	add	r0, sp, #136	; 0x88
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	f000 f826 	bl	800173c <__gnu_Unwind_Save_VFP>
 80016f0:	9b01      	ldr	r3, [sp, #4]
 80016f2:	e7b9      	b.n	8001668 <_Unwind_VRS_Pop+0x194>
 80016f4:	f041 0102 	orr.w	r1, r1, #2
 80016f8:	f840 1b48 	str.w	r1, [r0], #72
 80016fc:	f000 f826 	bl	800174c <__gnu_Unwind_Save_VFP_D>
 8001700:	9b01      	ldr	r3, [sp, #4]
 8001702:	e79c      	b.n	800163e <_Unwind_VRS_Pop+0x16a>
 8001704:	2b01      	cmp	r3, #1
 8001706:	d003      	beq.n	8001710 <_Unwind_VRS_Pop+0x23c>
 8001708:	2e0f      	cmp	r6, #15
 800170a:	f63f af5f 	bhi.w	80015cc <_Unwind_VRS_Pop+0xf8>
 800170e:	e79f      	b.n	8001650 <_Unwind_VRS_Pop+0x17c>
 8001710:	a822      	add	r0, sp, #136	; 0x88
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	f000 f812 	bl	800173c <__gnu_Unwind_Save_VFP>
 8001718:	9b01      	ldr	r3, [sp, #4]
 800171a:	e757      	b.n	80015cc <_Unwind_VRS_Pop+0xf8>

0800171c <__restore_core_regs>:
 800171c:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8001720:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001724:	469c      	mov	ip, r3
 8001726:	46a6      	mov	lr, r4
 8001728:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800172c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8001730:	46e5      	mov	sp, ip
 8001732:	bd00      	pop	{pc}

08001734 <__gnu_Unwind_Restore_VFP>:
 8001734:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop

0800173c <__gnu_Unwind_Save_VFP>:
 800173c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop

08001744 <__gnu_Unwind_Restore_VFP_D>:
 8001744:	ec90 0b20 	vldmia	r0, {d0-d15}
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop

0800174c <__gnu_Unwind_Save_VFP_D>:
 800174c:	ec80 0b20 	vstmia	r0, {d0-d15}
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop

08001754 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8001754:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop

0800175c <__gnu_Unwind_Save_VFP_D_16_to_31>:
 800175c:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop

08001764 <__gnu_Unwind_Restore_WMMXD>:
 8001764:	ecf0 0102 	ldfe	f0, [r0], #8
 8001768:	ecf0 1102 	ldfe	f1, [r0], #8
 800176c:	ecf0 2102 	ldfe	f2, [r0], #8
 8001770:	ecf0 3102 	ldfe	f3, [r0], #8
 8001774:	ecf0 4102 	ldfe	f4, [r0], #8
 8001778:	ecf0 5102 	ldfe	f5, [r0], #8
 800177c:	ecf0 6102 	ldfe	f6, [r0], #8
 8001780:	ecf0 7102 	ldfe	f7, [r0], #8
 8001784:	ecf0 8102 	ldfp	f0, [r0], #8
 8001788:	ecf0 9102 	ldfp	f1, [r0], #8
 800178c:	ecf0 a102 	ldfp	f2, [r0], #8
 8001790:	ecf0 b102 	ldfp	f3, [r0], #8
 8001794:	ecf0 c102 	ldfp	f4, [r0], #8
 8001798:	ecf0 d102 	ldfp	f5, [r0], #8
 800179c:	ecf0 e102 	ldfp	f6, [r0], #8
 80017a0:	ecf0 f102 	ldfp	f7, [r0], #8
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop

080017a8 <__gnu_Unwind_Save_WMMXD>:
 80017a8:	ece0 0102 	stfe	f0, [r0], #8
 80017ac:	ece0 1102 	stfe	f1, [r0], #8
 80017b0:	ece0 2102 	stfe	f2, [r0], #8
 80017b4:	ece0 3102 	stfe	f3, [r0], #8
 80017b8:	ece0 4102 	stfe	f4, [r0], #8
 80017bc:	ece0 5102 	stfe	f5, [r0], #8
 80017c0:	ece0 6102 	stfe	f6, [r0], #8
 80017c4:	ece0 7102 	stfe	f7, [r0], #8
 80017c8:	ece0 8102 	stfp	f0, [r0], #8
 80017cc:	ece0 9102 	stfp	f1, [r0], #8
 80017d0:	ece0 a102 	stfp	f2, [r0], #8
 80017d4:	ece0 b102 	stfp	f3, [r0], #8
 80017d8:	ece0 c102 	stfp	f4, [r0], #8
 80017dc:	ece0 d102 	stfp	f5, [r0], #8
 80017e0:	ece0 e102 	stfp	f6, [r0], #8
 80017e4:	ece0 f102 	stfp	f7, [r0], #8
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop

080017ec <__gnu_Unwind_Restore_WMMXC>:
 80017ec:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 80017f0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 80017f4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 80017f8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop

08001800 <__gnu_Unwind_Save_WMMXC>:
 8001800:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001804:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001808:	fca0 a101 	stc2	1, cr10, [r0], #4
 800180c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop

08001814 <_Unwind_RaiseException>:
 8001814:	46ec      	mov	ip, sp
 8001816:	b500      	push	{lr}
 8001818:	e92d 5000 	stmdb	sp!, {ip, lr}
 800181c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001820:	f04f 0300 	mov.w	r3, #0
 8001824:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001828:	a901      	add	r1, sp, #4
 800182a:	f7ff fbf3 	bl	8001014 <__gnu_Unwind_RaiseException>
 800182e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001832:	b012      	add	sp, #72	; 0x48
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop

08001838 <_Unwind_Resume>:
 8001838:	46ec      	mov	ip, sp
 800183a:	b500      	push	{lr}
 800183c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001840:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001844:	f04f 0300 	mov.w	r3, #0
 8001848:	e92d 000c 	stmdb	sp!, {r2, r3}
 800184c:	a901      	add	r1, sp, #4
 800184e:	f7ff fc1b 	bl	8001088 <__gnu_Unwind_Resume>
 8001852:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001856:	b012      	add	sp, #72	; 0x48
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop

0800185c <_Unwind_Resume_or_Rethrow>:
 800185c:	46ec      	mov	ip, sp
 800185e:	b500      	push	{lr}
 8001860:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001864:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001870:	a901      	add	r1, sp, #4
 8001872:	f7ff fc2b 	bl	80010cc <__gnu_Unwind_Resume_or_Rethrow>
 8001876:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800187a:	b012      	add	sp, #72	; 0x48
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop

08001880 <_Unwind_ForcedUnwind>:
 8001880:	46ec      	mov	ip, sp
 8001882:	b500      	push	{lr}
 8001884:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001888:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001894:	ab01      	add	r3, sp, #4
 8001896:	f7ff fbed 	bl	8001074 <__gnu_Unwind_ForcedUnwind>
 800189a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800189e:	b012      	add	sp, #72	; 0x48
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop

080018a4 <_Unwind_Backtrace>:
 80018a4:	46ec      	mov	ip, sp
 80018a6:	b500      	push	{lr}
 80018a8:	e92d 5000 	stmdb	sp!, {ip, lr}
 80018ac:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e92d 000c 	stmdb	sp!, {r2, r3}
 80018b8:	aa01      	add	r2, sp, #4
 80018ba:	f7ff fc65 	bl	8001188 <__gnu_Unwind_Backtrace>
 80018be:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80018c2:	b012      	add	sp, #72	; 0x48
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop

080018c8 <next_unwind_byte>:
 80018c8:	7a02      	ldrb	r2, [r0, #8]
 80018ca:	b91a      	cbnz	r2, 80018d4 <next_unwind_byte+0xc>
 80018cc:	7a43      	ldrb	r3, [r0, #9]
 80018ce:	b943      	cbnz	r3, 80018e2 <next_unwind_byte+0x1a>
 80018d0:	20b0      	movs	r0, #176	; 0xb0
 80018d2:	4770      	bx	lr
 80018d4:	6803      	ldr	r3, [r0, #0]
 80018d6:	3a01      	subs	r2, #1
 80018d8:	7202      	strb	r2, [r0, #8]
 80018da:	021a      	lsls	r2, r3, #8
 80018dc:	6002      	str	r2, [r0, #0]
 80018de:	0e18      	lsrs	r0, r3, #24
 80018e0:	4770      	bx	lr
 80018e2:	6842      	ldr	r2, [r0, #4]
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b410      	push	{r4}
 80018e8:	7243      	strb	r3, [r0, #9]
 80018ea:	6813      	ldr	r3, [r2, #0]
 80018ec:	2103      	movs	r1, #3
 80018ee:	1d14      	adds	r4, r2, #4
 80018f0:	7201      	strb	r1, [r0, #8]
 80018f2:	021a      	lsls	r2, r3, #8
 80018f4:	6044      	str	r4, [r0, #4]
 80018f6:	6002      	str	r2, [r0, #0]
 80018f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80018fc:	0e18      	lsrs	r0, r3, #24
 80018fe:	4770      	bx	lr

08001900 <_Unwind_GetGR.constprop.0>:
 8001900:	b500      	push	{lr}
 8001902:	b085      	sub	sp, #20
 8001904:	aa03      	add	r2, sp, #12
 8001906:	2300      	movs	r3, #0
 8001908:	9200      	str	r2, [sp, #0]
 800190a:	4619      	mov	r1, r3
 800190c:	220c      	movs	r2, #12
 800190e:	f7ff fbed 	bl	80010ec <_Unwind_VRS_Get>
 8001912:	9803      	ldr	r0, [sp, #12]
 8001914:	b005      	add	sp, #20
 8001916:	f85d fb04 	ldr.w	pc, [sp], #4
 800191a:	bf00      	nop

0800191c <unwind_UCB_from_context>:
 800191c:	e7f0      	b.n	8001900 <_Unwind_GetGR.constprop.0>
 800191e:	bf00      	nop

08001920 <__gnu_unwind_execute>:
 8001920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001924:	4606      	mov	r6, r0
 8001926:	b085      	sub	sp, #20
 8001928:	460f      	mov	r7, r1
 800192a:	f04f 0800 	mov.w	r8, #0
 800192e:	4638      	mov	r0, r7
 8001930:	f7ff ffca 	bl	80018c8 <next_unwind_byte>
 8001934:	28b0      	cmp	r0, #176	; 0xb0
 8001936:	4604      	mov	r4, r0
 8001938:	d023      	beq.n	8001982 <__gnu_unwind_execute+0x62>
 800193a:	0605      	lsls	r5, r0, #24
 800193c:	d427      	bmi.n	800198e <__gnu_unwind_execute+0x6e>
 800193e:	2300      	movs	r3, #0
 8001940:	f10d 090c 	add.w	r9, sp, #12
 8001944:	4619      	mov	r1, r3
 8001946:	0085      	lsls	r5, r0, #2
 8001948:	220d      	movs	r2, #13
 800194a:	f8cd 9000 	str.w	r9, [sp]
 800194e:	4630      	mov	r0, r6
 8001950:	f7ff fbcc 	bl	80010ec <_Unwind_VRS_Get>
 8001954:	b2ed      	uxtb	r5, r5
 8001956:	9b03      	ldr	r3, [sp, #12]
 8001958:	f8cd 9000 	str.w	r9, [sp]
 800195c:	0660      	lsls	r0, r4, #25
 800195e:	f105 0504 	add.w	r5, r5, #4
 8001962:	bf4c      	ite	mi
 8001964:	1b5d      	submi	r5, r3, r5
 8001966:	18ed      	addpl	r5, r5, r3
 8001968:	2300      	movs	r3, #0
 800196a:	4619      	mov	r1, r3
 800196c:	220d      	movs	r2, #13
 800196e:	4630      	mov	r0, r6
 8001970:	9503      	str	r5, [sp, #12]
 8001972:	f7ff fbe1 	bl	8001138 <_Unwind_VRS_Set>
 8001976:	4638      	mov	r0, r7
 8001978:	f7ff ffa6 	bl	80018c8 <next_unwind_byte>
 800197c:	28b0      	cmp	r0, #176	; 0xb0
 800197e:	4604      	mov	r4, r0
 8001980:	d1db      	bne.n	800193a <__gnu_unwind_execute+0x1a>
 8001982:	f1b8 0f00 	cmp.w	r8, #0
 8001986:	f000 8095 	beq.w	8001ab4 <__gnu_unwind_execute+0x194>
 800198a:	2000      	movs	r0, #0
 800198c:	e01c      	b.n	80019c8 <__gnu_unwind_execute+0xa8>
 800198e:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8001992:	2b80      	cmp	r3, #128	; 0x80
 8001994:	d05d      	beq.n	8001a52 <__gnu_unwind_execute+0x132>
 8001996:	2b90      	cmp	r3, #144	; 0x90
 8001998:	d019      	beq.n	80019ce <__gnu_unwind_execute+0xae>
 800199a:	2ba0      	cmp	r3, #160	; 0xa0
 800199c:	d02c      	beq.n	80019f8 <__gnu_unwind_execute+0xd8>
 800199e:	2bb0      	cmp	r3, #176	; 0xb0
 80019a0:	d03f      	beq.n	8001a22 <__gnu_unwind_execute+0x102>
 80019a2:	2bc0      	cmp	r3, #192	; 0xc0
 80019a4:	d06c      	beq.n	8001a80 <__gnu_unwind_execute+0x160>
 80019a6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80019aa:	2bd0      	cmp	r3, #208	; 0xd0
 80019ac:	d10b      	bne.n	80019c6 <__gnu_unwind_execute+0xa6>
 80019ae:	f000 0207 	and.w	r2, r0, #7
 80019b2:	3201      	adds	r2, #1
 80019b4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80019b8:	2305      	movs	r3, #5
 80019ba:	2101      	movs	r1, #1
 80019bc:	4630      	mov	r0, r6
 80019be:	f7ff fd89 	bl	80014d4 <_Unwind_VRS_Pop>
 80019c2:	2800      	cmp	r0, #0
 80019c4:	d0b3      	beq.n	800192e <__gnu_unwind_execute+0xe>
 80019c6:	2009      	movs	r0, #9
 80019c8:	b005      	add	sp, #20
 80019ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019ce:	f000 030d 	and.w	r3, r0, #13
 80019d2:	2b0d      	cmp	r3, #13
 80019d4:	d0f7      	beq.n	80019c6 <__gnu_unwind_execute+0xa6>
 80019d6:	ad03      	add	r5, sp, #12
 80019d8:	2300      	movs	r3, #0
 80019da:	f000 020f 	and.w	r2, r0, #15
 80019de:	4619      	mov	r1, r3
 80019e0:	9500      	str	r5, [sp, #0]
 80019e2:	4630      	mov	r0, r6
 80019e4:	f7ff fb82 	bl	80010ec <_Unwind_VRS_Get>
 80019e8:	2300      	movs	r3, #0
 80019ea:	9500      	str	r5, [sp, #0]
 80019ec:	4619      	mov	r1, r3
 80019ee:	220d      	movs	r2, #13
 80019f0:	4630      	mov	r0, r6
 80019f2:	f7ff fba1 	bl	8001138 <_Unwind_VRS_Set>
 80019f6:	e79a      	b.n	800192e <__gnu_unwind_execute+0xe>
 80019f8:	43c2      	mvns	r2, r0
 80019fa:	f002 0307 	and.w	r3, r2, #7
 80019fe:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 8001a02:	411a      	asrs	r2, r3
 8001a04:	0701      	lsls	r1, r0, #28
 8001a06:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	bf48      	it	mi
 8001a10:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001a14:	4619      	mov	r1, r3
 8001a16:	4630      	mov	r0, r6
 8001a18:	f7ff fd5c 	bl	80014d4 <_Unwind_VRS_Pop>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d1d2      	bne.n	80019c6 <__gnu_unwind_execute+0xa6>
 8001a20:	e785      	b.n	800192e <__gnu_unwind_execute+0xe>
 8001a22:	28b1      	cmp	r0, #177	; 0xb1
 8001a24:	d057      	beq.n	8001ad6 <__gnu_unwind_execute+0x1b6>
 8001a26:	28b2      	cmp	r0, #178	; 0xb2
 8001a28:	d068      	beq.n	8001afc <__gnu_unwind_execute+0x1dc>
 8001a2a:	28b3      	cmp	r0, #179	; 0xb3
 8001a2c:	f000 8095 	beq.w	8001b5a <__gnu_unwind_execute+0x23a>
 8001a30:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001a34:	2bb4      	cmp	r3, #180	; 0xb4
 8001a36:	d0c6      	beq.n	80019c6 <__gnu_unwind_execute+0xa6>
 8001a38:	f000 0207 	and.w	r2, r0, #7
 8001a3c:	3201      	adds	r2, #1
 8001a3e:	2301      	movs	r3, #1
 8001a40:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001a44:	4619      	mov	r1, r3
 8001a46:	4630      	mov	r0, r6
 8001a48:	f7ff fd44 	bl	80014d4 <_Unwind_VRS_Pop>
 8001a4c:	2800      	cmp	r0, #0
 8001a4e:	d1ba      	bne.n	80019c6 <__gnu_unwind_execute+0xa6>
 8001a50:	e76d      	b.n	800192e <__gnu_unwind_execute+0xe>
 8001a52:	4638      	mov	r0, r7
 8001a54:	f7ff ff38 	bl	80018c8 <next_unwind_byte>
 8001a58:	0224      	lsls	r4, r4, #8
 8001a5a:	4304      	orrs	r4, r0
 8001a5c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8001a60:	d0b1      	beq.n	80019c6 <__gnu_unwind_execute+0xa6>
 8001a62:	0124      	lsls	r4, r4, #4
 8001a64:	2300      	movs	r3, #0
 8001a66:	b2a2      	uxth	r2, r4
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4630      	mov	r0, r6
 8001a6c:	f7ff fd32 	bl	80014d4 <_Unwind_VRS_Pop>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d1a8      	bne.n	80019c6 <__gnu_unwind_execute+0xa6>
 8001a74:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 8001a78:	bf18      	it	ne
 8001a7a:	f04f 0801 	movne.w	r8, #1
 8001a7e:	e756      	b.n	800192e <__gnu_unwind_execute+0xe>
 8001a80:	28c6      	cmp	r0, #198	; 0xc6
 8001a82:	d07d      	beq.n	8001b80 <__gnu_unwind_execute+0x260>
 8001a84:	28c7      	cmp	r0, #199	; 0xc7
 8001a86:	f000 8086 	beq.w	8001b96 <__gnu_unwind_execute+0x276>
 8001a8a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 8001a8e:	2bc0      	cmp	r3, #192	; 0xc0
 8001a90:	f000 8094 	beq.w	8001bbc <__gnu_unwind_execute+0x29c>
 8001a94:	28c8      	cmp	r0, #200	; 0xc8
 8001a96:	f000 809f 	beq.w	8001bd8 <__gnu_unwind_execute+0x2b8>
 8001a9a:	28c9      	cmp	r0, #201	; 0xc9
 8001a9c:	d193      	bne.n	80019c6 <__gnu_unwind_execute+0xa6>
 8001a9e:	4638      	mov	r0, r7
 8001aa0:	f7ff ff12 	bl	80018c8 <next_unwind_byte>
 8001aa4:	0302      	lsls	r2, r0, #12
 8001aa6:	f000 000f 	and.w	r0, r0, #15
 8001aaa:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 8001aae:	3001      	adds	r0, #1
 8001ab0:	4302      	orrs	r2, r0
 8001ab2:	e781      	b.n	80019b8 <__gnu_unwind_execute+0x98>
 8001ab4:	ac03      	add	r4, sp, #12
 8001ab6:	4643      	mov	r3, r8
 8001ab8:	220e      	movs	r2, #14
 8001aba:	4641      	mov	r1, r8
 8001abc:	9400      	str	r4, [sp, #0]
 8001abe:	4630      	mov	r0, r6
 8001ac0:	f7ff fb14 	bl	80010ec <_Unwind_VRS_Get>
 8001ac4:	9400      	str	r4, [sp, #0]
 8001ac6:	4630      	mov	r0, r6
 8001ac8:	4643      	mov	r3, r8
 8001aca:	220f      	movs	r2, #15
 8001acc:	4641      	mov	r1, r8
 8001ace:	f7ff fb33 	bl	8001138 <_Unwind_VRS_Set>
 8001ad2:	4640      	mov	r0, r8
 8001ad4:	e778      	b.n	80019c8 <__gnu_unwind_execute+0xa8>
 8001ad6:	4638      	mov	r0, r7
 8001ad8:	f7ff fef6 	bl	80018c8 <next_unwind_byte>
 8001adc:	2800      	cmp	r0, #0
 8001ade:	f43f af72 	beq.w	80019c6 <__gnu_unwind_execute+0xa6>
 8001ae2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001ae6:	f47f af6e 	bne.w	80019c6 <__gnu_unwind_execute+0xa6>
 8001aea:	4602      	mov	r2, r0
 8001aec:	4619      	mov	r1, r3
 8001aee:	4630      	mov	r0, r6
 8001af0:	f7ff fcf0 	bl	80014d4 <_Unwind_VRS_Pop>
 8001af4:	2800      	cmp	r0, #0
 8001af6:	f47f af66 	bne.w	80019c6 <__gnu_unwind_execute+0xa6>
 8001afa:	e718      	b.n	800192e <__gnu_unwind_execute+0xe>
 8001afc:	2300      	movs	r3, #0
 8001afe:	f10d 090c 	add.w	r9, sp, #12
 8001b02:	220d      	movs	r2, #13
 8001b04:	4619      	mov	r1, r3
 8001b06:	f8cd 9000 	str.w	r9, [sp]
 8001b0a:	4630      	mov	r0, r6
 8001b0c:	f7ff faee 	bl	80010ec <_Unwind_VRS_Get>
 8001b10:	4638      	mov	r0, r7
 8001b12:	f7ff fed9 	bl	80018c8 <next_unwind_byte>
 8001b16:	0602      	lsls	r2, r0, #24
 8001b18:	f04f 0402 	mov.w	r4, #2
 8001b1c:	d50c      	bpl.n	8001b38 <__gnu_unwind_execute+0x218>
 8001b1e:	9b03      	ldr	r3, [sp, #12]
 8001b20:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001b24:	40a0      	lsls	r0, r4
 8001b26:	4403      	add	r3, r0
 8001b28:	4638      	mov	r0, r7
 8001b2a:	9303      	str	r3, [sp, #12]
 8001b2c:	f7ff fecc 	bl	80018c8 <next_unwind_byte>
 8001b30:	0603      	lsls	r3, r0, #24
 8001b32:	f104 0407 	add.w	r4, r4, #7
 8001b36:	d4f2      	bmi.n	8001b1e <__gnu_unwind_execute+0x1fe>
 8001b38:	9b03      	ldr	r3, [sp, #12]
 8001b3a:	f8cd 9000 	str.w	r9, [sp]
 8001b3e:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 8001b42:	40a2      	lsls	r2, r4
 8001b44:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001b48:	2300      	movs	r3, #0
 8001b4a:	4414      	add	r4, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	220d      	movs	r2, #13
 8001b50:	4630      	mov	r0, r6
 8001b52:	9403      	str	r4, [sp, #12]
 8001b54:	f7ff faf0 	bl	8001138 <_Unwind_VRS_Set>
 8001b58:	e6e9      	b.n	800192e <__gnu_unwind_execute+0xe>
 8001b5a:	4638      	mov	r0, r7
 8001b5c:	f7ff feb4 	bl	80018c8 <next_unwind_byte>
 8001b60:	0301      	lsls	r1, r0, #12
 8001b62:	f000 000f 	and.w	r0, r0, #15
 8001b66:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001b6a:	1c42      	adds	r2, r0, #1
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	4630      	mov	r0, r6
 8001b72:	4619      	mov	r1, r3
 8001b74:	f7ff fcae 	bl	80014d4 <_Unwind_VRS_Pop>
 8001b78:	2800      	cmp	r0, #0
 8001b7a:	f47f af24 	bne.w	80019c6 <__gnu_unwind_execute+0xa6>
 8001b7e:	e6d6      	b.n	800192e <__gnu_unwind_execute+0xe>
 8001b80:	4638      	mov	r0, r7
 8001b82:	f7ff fea1 	bl	80018c8 <next_unwind_byte>
 8001b86:	0301      	lsls	r1, r0, #12
 8001b88:	f000 000f 	and.w	r0, r0, #15
 8001b8c:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001b90:	1c42      	adds	r2, r0, #1
 8001b92:	2303      	movs	r3, #3
 8001b94:	e7eb      	b.n	8001b6e <__gnu_unwind_execute+0x24e>
 8001b96:	4638      	mov	r0, r7
 8001b98:	f7ff fe96 	bl	80018c8 <next_unwind_byte>
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	f43f af12 	beq.w	80019c6 <__gnu_unwind_execute+0xa6>
 8001ba2:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001ba6:	f47f af0e 	bne.w	80019c6 <__gnu_unwind_execute+0xa6>
 8001baa:	4602      	mov	r2, r0
 8001bac:	2104      	movs	r1, #4
 8001bae:	4630      	mov	r0, r6
 8001bb0:	f7ff fc90 	bl	80014d4 <_Unwind_VRS_Pop>
 8001bb4:	2800      	cmp	r0, #0
 8001bb6:	f47f af06 	bne.w	80019c6 <__gnu_unwind_execute+0xa6>
 8001bba:	e6b8      	b.n	800192e <__gnu_unwind_execute+0xe>
 8001bbc:	f000 020f 	and.w	r2, r0, #15
 8001bc0:	3201      	adds	r2, #1
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4630      	mov	r0, r6
 8001bcc:	f7ff fc82 	bl	80014d4 <_Unwind_VRS_Pop>
 8001bd0:	2800      	cmp	r0, #0
 8001bd2:	f47f aef8 	bne.w	80019c6 <__gnu_unwind_execute+0xa6>
 8001bd6:	e6aa      	b.n	800192e <__gnu_unwind_execute+0xe>
 8001bd8:	4638      	mov	r0, r7
 8001bda:	f7ff fe75 	bl	80018c8 <next_unwind_byte>
 8001bde:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8001be2:	f000 030f 	and.w	r3, r0, #15
 8001be6:	3210      	adds	r2, #16
 8001be8:	3301      	adds	r3, #1
 8001bea:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 8001bee:	e6e3      	b.n	80019b8 <__gnu_unwind_execute+0x98>

08001bf0 <__gnu_unwind_frame>:
 8001bf0:	b510      	push	{r4, lr}
 8001bf2:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	2003      	movs	r0, #3
 8001bfa:	f88d 000c 	strb.w	r0, [sp, #12]
 8001bfe:	79dc      	ldrb	r4, [r3, #7]
 8001c00:	f88d 400d 	strb.w	r4, [sp, #13]
 8001c04:	0212      	lsls	r2, r2, #8
 8001c06:	3308      	adds	r3, #8
 8001c08:	4608      	mov	r0, r1
 8001c0a:	a901      	add	r1, sp, #4
 8001c0c:	9201      	str	r2, [sp, #4]
 8001c0e:	9302      	str	r3, [sp, #8]
 8001c10:	f7ff fe86 	bl	8001920 <__gnu_unwind_execute>
 8001c14:	b004      	add	sp, #16
 8001c16:	bd10      	pop	{r4, pc}

08001c18 <_Unwind_GetRegionStart>:
 8001c18:	b508      	push	{r3, lr}
 8001c1a:	f7ff fe7f 	bl	800191c <unwind_UCB_from_context>
 8001c1e:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8001c20:	bd08      	pop	{r3, pc}
 8001c22:	bf00      	nop

08001c24 <_Unwind_GetLanguageSpecificData>:
 8001c24:	b508      	push	{r3, lr}
 8001c26:	f7ff fe79 	bl	800191c <unwind_UCB_from_context>
 8001c2a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001c2c:	79c3      	ldrb	r3, [r0, #7]
 8001c2e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001c32:	3008      	adds	r0, #8
 8001c34:	bd08      	pop	{r3, pc}
 8001c36:	bf00      	nop

08001c38 <_Unwind_GetTextRelBase>:
 8001c38:	b508      	push	{r3, lr}
 8001c3a:	f006 fc0f 	bl	800845c <abort>
 8001c3e:	bf00      	nop

08001c40 <_Unwind_GetDataRelBase>:
 8001c40:	b508      	push	{r3, lr}
 8001c42:	f7ff fff9 	bl	8001c38 <_Unwind_GetTextRelBase>
 8001c46:	bf00      	nop

08001c48 <__aeabi_idiv0>:
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop

08001c4c <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c4c:	4a09      	ldr	r2, [pc, #36]	; (8001c74 <HAL_Init+0x28>)
 8001c4e:	6813      	ldr	r3, [r2, #0]
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001c54:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c56:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c58:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5a:	f000 f833 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f005 f97a 	bl	8006f58 <HAL_InitTick>
 8001c64:	4604      	mov	r4, r0
 8001c66:	b918      	cbnz	r0, 8001c70 <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c68:	f005 f924 	bl	8006eb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001c70:	2401      	movs	r4, #1
 8001c72:	e7fb      	b.n	8001c6c <HAL_Init+0x20>
 8001c74:	40022000 	.word	0x40022000

08001c78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c78:	4a03      	ldr	r2, [pc, #12]	; (8001c88 <HAL_IncTick+0x10>)
 8001c7a:	4904      	ldr	r1, [pc, #16]	; (8001c8c <HAL_IncTick+0x14>)
 8001c7c:	6813      	ldr	r3, [r2, #0]
 8001c7e:	6809      	ldr	r1, [r1, #0]
 8001c80:	440b      	add	r3, r1
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	200014c8 	.word	0x200014c8
 8001c8c:	20000000 	.word	0x20000000

08001c90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c90:	4b01      	ldr	r3, [pc, #4]	; (8001c98 <HAL_GetTick+0x8>)
 8001c92:	6818      	ldr	r0, [r3, #0]
}
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	200014c8 	.word	0x200014c8

08001c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c9c:	b538      	push	{r3, r4, r5, lr}
 8001c9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff fff6 	bl	8001c90 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca4:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca6:	bf1c      	itt	ne
 8001ca8:	4b05      	ldrne	r3, [pc, #20]	; (8001cc0 <HAL_Delay+0x24>)
 8001caa:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001cac:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001cae:	bf18      	it	ne
 8001cb0:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cb2:	f7ff ffed 	bl	8001c90 <HAL_GetTick>
 8001cb6:	1b40      	subs	r0, r0, r5
 8001cb8:	4284      	cmp	r4, r0
 8001cba:	d8fa      	bhi.n	8001cb2 <HAL_Delay+0x16>
  {
  }
}
 8001cbc:	bd38      	pop	{r3, r4, r5, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000000 	.word	0x20000000

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001cc6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ccc:	041b      	lsls	r3, r3, #16
 8001cce:	0c1b      	lsrs	r3, r3, #16
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd4:	0200      	lsls	r0, r0, #8
 8001cd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cda:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001cde:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001ce0:	60d3      	str	r3, [r2, #12]
 8001ce2:	4770      	bx	lr
 8001ce4:	e000ed00 	.word	0xe000ed00

08001ce8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b17      	ldr	r3, [pc, #92]	; (8001d48 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cea:	b530      	push	{r4, r5, lr}
 8001cec:	68dc      	ldr	r4, [r3, #12]
 8001cee:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	bf28      	it	cs
 8001cfc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cfe:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d00:	f04f 0501 	mov.w	r5, #1
 8001d04:	fa05 f303 	lsl.w	r3, r5, r3
 8001d08:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d0c:	bf8c      	ite	hi
 8001d0e:	3c03      	subhi	r4, #3
 8001d10:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d12:	4019      	ands	r1, r3
 8001d14:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d16:	fa05 f404 	lsl.w	r4, r5, r4
 8001d1a:	3c01      	subs	r4, #1
 8001d1c:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d20:	ea42 0201 	orr.w	r2, r2, r1
 8001d24:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	bfad      	iteet	ge
 8001d2a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2e:	f000 000f 	andlt.w	r0, r0, #15
 8001d32:	4b06      	ldrlt	r3, [pc, #24]	; (8001d4c <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d34:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d38:	bfb5      	itete	lt
 8001d3a:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d40:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001d44:	bd30      	pop	{r4, r5, pc}
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00
 8001d4c:	e000ed14 	.word	0xe000ed14

08001d50 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d50:	2800      	cmp	r0, #0
 8001d52:	db08      	blt.n	8001d66 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d54:	0942      	lsrs	r2, r0, #5
 8001d56:	2301      	movs	r3, #1
 8001d58:	f000 001f 	and.w	r0, r0, #31
 8001d5c:	fa03 f000 	lsl.w	r0, r3, r0
 8001d60:	4b01      	ldr	r3, [pc, #4]	; (8001d68 <HAL_NVIC_EnableIRQ+0x18>)
 8001d62:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100

08001d6c <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8001d6c:	b911      	cbnz	r1, 8001d74 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001d6e:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d70:	4608      	mov	r0, r1
      break;
 8001d72:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8001d74:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8001d76:	4770      	bx	lr

08001d78 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001d78:	b110      	cbz	r0, 8001d80 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001d7a:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	4770      	bx	lr
    return HAL_ERROR;
 8001d80:	2001      	movs	r0, #1
  }
}
 8001d82:	4770      	bx	lr

08001d84 <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d84:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001d86:	2201      	movs	r2, #1
 8001d88:	f003 011f 	and.w	r1, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001d8c:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8001d90:	408a      	lsls	r2, r1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8001d92:	015b      	lsls	r3, r3, #5
 8001d94:	4906      	ldr	r1, [pc, #24]	; (8001db0 <HAL_EXTI_IRQHandler+0x2c>)
{
 8001d96:	b410      	push	{r4}
  regval = (*regaddr & maskline);
 8001d98:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 8001d9a:	4222      	tst	r2, r4
 8001d9c:	d005      	beq.n	8001daa <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001d9e:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001da0:	6843      	ldr	r3, [r0, #4]
 8001da2:	b113      	cbz	r3, 8001daa <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 8001da4:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 8001da8:	4718      	bx	r3
}
 8001daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	40010414 	.word	0x40010414

08001db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001db8:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dba:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dbc:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001f68 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001dc0:	4c67      	ldr	r4, [pc, #412]	; (8001f60 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc2:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8001dc4:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc6:	9a01      	ldr	r2, [sp, #4]
 8001dc8:	40da      	lsrs	r2, r3
 8001dca:	d102      	bne.n	8001dd2 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8001dcc:	b005      	add	sp, #20
 8001dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd2:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001dd4:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001dd6:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001dd8:	ea12 0e06 	ands.w	lr, r2, r6
 8001ddc:	f000 80b1 	beq.w	8001f42 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001de0:	684a      	ldr	r2, [r1, #4]
 8001de2:	f022 0710 	bic.w	r7, r2, #16
 8001de6:	2f02      	cmp	r7, #2
 8001de8:	d116      	bne.n	8001e18 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001dea:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8001dee:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001df2:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001df6:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001dfa:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001dfe:	f04f 0c0f 	mov.w	ip, #15
 8001e02:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001e06:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e0a:	690d      	ldr	r5, [r1, #16]
 8001e0c:	fa05 f50a 	lsl.w	r5, r5, sl
 8001e10:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001e14:	f8c9 5020 	str.w	r5, [r9, #32]
 8001e18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e1c:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8001e1e:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e22:	fa05 f50c 	lsl.w	r5, r5, ip
 8001e26:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e28:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e2c:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e30:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e34:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e36:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e3a:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001e3c:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e40:	d811      	bhi.n	8001e66 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8001e42:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e44:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e48:	68cf      	ldr	r7, [r1, #12]
 8001e4a:	fa07 f70c 	lsl.w	r7, r7, ip
 8001e4e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8001e52:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001e54:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e56:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001e5a:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8001e5e:	409f      	lsls	r7, r3
 8001e60:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001e64:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001e66:	f1ba 0f03 	cmp.w	sl, #3
 8001e6a:	d107      	bne.n	8001e7c <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001e6c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001e6e:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001e72:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8001e76:	409f      	lsls	r7, r3
 8001e78:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8001e7a:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001e7c:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e7e:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e80:	688e      	ldr	r6, [r1, #8]
 8001e82:	fa06 f60c 	lsl.w	r6, r6, ip
 8001e86:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8001e88:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e8a:	00d5      	lsls	r5, r2, #3
 8001e8c:	d559      	bpl.n	8001f42 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001e92:	f045 0501 	orr.w	r5, r5, #1
 8001e96:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8001e9a:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8001e9e:	f023 0603 	bic.w	r6, r3, #3
 8001ea2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8001ea6:	f005 0501 	and.w	r5, r5, #1
 8001eaa:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8001eae:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eb0:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb4:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001eb6:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001eb8:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001ebc:	270f      	movs	r7, #15
 8001ebe:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ec2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ec6:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001eca:	d03c      	beq.n	8001f46 <HAL_GPIO_Init+0x192>
 8001ecc:	4d25      	ldr	r5, [pc, #148]	; (8001f64 <HAL_GPIO_Init+0x1b0>)
 8001ece:	42a8      	cmp	r0, r5
 8001ed0:	d03b      	beq.n	8001f4a <HAL_GPIO_Init+0x196>
 8001ed2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ed6:	42a8      	cmp	r0, r5
 8001ed8:	d039      	beq.n	8001f4e <HAL_GPIO_Init+0x19a>
 8001eda:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ede:	42a8      	cmp	r0, r5
 8001ee0:	d037      	beq.n	8001f52 <HAL_GPIO_Init+0x19e>
 8001ee2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ee6:	42a8      	cmp	r0, r5
 8001ee8:	d035      	beq.n	8001f56 <HAL_GPIO_Init+0x1a2>
 8001eea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001eee:	42a8      	cmp	r0, r5
 8001ef0:	d033      	beq.n	8001f5a <HAL_GPIO_Init+0x1a6>
 8001ef2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ef6:	42a8      	cmp	r0, r5
 8001ef8:	bf14      	ite	ne
 8001efa:	2507      	movne	r5, #7
 8001efc:	2506      	moveq	r5, #6
 8001efe:	fa05 f50c 	lsl.w	r5, r5, ip
 8001f02:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f04:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001f06:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001f08:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f0c:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8001f0e:	bf54      	ite	pl
 8001f10:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001f12:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001f16:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001f18:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f1a:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001f1c:	bf54      	ite	pl
 8001f1e:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001f20:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001f24:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001f26:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f28:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001f2a:	bf54      	ite	pl
 8001f2c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001f2e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8001f32:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001f34:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f36:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001f38:	bf54      	ite	pl
 8001f3a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001f3c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8001f40:	60e5      	str	r5, [r4, #12]
    position++;
 8001f42:	3301      	adds	r3, #1
 8001f44:	e73f      	b.n	8001dc6 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f46:	2500      	movs	r5, #0
 8001f48:	e7d9      	b.n	8001efe <HAL_GPIO_Init+0x14a>
 8001f4a:	2501      	movs	r5, #1
 8001f4c:	e7d7      	b.n	8001efe <HAL_GPIO_Init+0x14a>
 8001f4e:	2502      	movs	r5, #2
 8001f50:	e7d5      	b.n	8001efe <HAL_GPIO_Init+0x14a>
 8001f52:	2503      	movs	r5, #3
 8001f54:	e7d3      	b.n	8001efe <HAL_GPIO_Init+0x14a>
 8001f56:	2504      	movs	r5, #4
 8001f58:	e7d1      	b.n	8001efe <HAL_GPIO_Init+0x14a>
 8001f5a:	2505      	movs	r5, #5
 8001f5c:	e7cf      	b.n	8001efe <HAL_GPIO_Init+0x14a>
 8001f5e:	bf00      	nop
 8001f60:	40010400 	.word	0x40010400
 8001f64:	48000400 	.word	0x48000400
 8001f68:	40021000 	.word	0x40021000

08001f6c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001f70:	4c40      	ldr	r4, [pc, #256]	; (8002074 <HAL_GPIO_DeInit+0x108>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001f72:	f8df b108 	ldr.w	fp, [pc, #264]	; 800207c <HAL_GPIO_DeInit+0x110>
  uint32_t position = 0x00u;
 8001f76:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f78:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f7c:	f04f 080f 	mov.w	r8, #15
  while ((GPIO_Pin >> position) != 0x00u)
 8001f80:	fa31 f203 	lsrs.w	r2, r1, r3
 8001f84:	d101      	bne.n	8001f8a <HAL_GPIO_DeInit+0x1e>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
 8001f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f8a:	fa0a f503 	lsl.w	r5, sl, r3
    if (iocurrent != 0x00u)
 8001f8e:	ea11 0605 	ands.w	r6, r1, r5
 8001f92:	d060      	beq.n	8002056 <HAL_GPIO_DeInit+0xea>
 8001f94:	f023 0703 	bic.w	r7, r3, #3
 8001f98:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001f9c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001fa0:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001fa4:	68ba      	ldr	r2, [r7, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001fa6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001faa:	fa08 f90e 	lsl.w	r9, r8, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001fae:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001fb2:	ea02 0c09 	and.w	ip, r2, r9
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001fb6:	d050      	beq.n	800205a <HAL_GPIO_DeInit+0xee>
 8001fb8:	4a2f      	ldr	r2, [pc, #188]	; (8002078 <HAL_GPIO_DeInit+0x10c>)
 8001fba:	4290      	cmp	r0, r2
 8001fbc:	d04f      	beq.n	800205e <HAL_GPIO_DeInit+0xf2>
 8001fbe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fc2:	4290      	cmp	r0, r2
 8001fc4:	d04d      	beq.n	8002062 <HAL_GPIO_DeInit+0xf6>
 8001fc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fca:	4290      	cmp	r0, r2
 8001fcc:	d04b      	beq.n	8002066 <HAL_GPIO_DeInit+0xfa>
 8001fce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fd2:	4290      	cmp	r0, r2
 8001fd4:	d049      	beq.n	800206a <HAL_GPIO_DeInit+0xfe>
 8001fd6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fda:	4290      	cmp	r0, r2
 8001fdc:	d047      	beq.n	800206e <HAL_GPIO_DeInit+0x102>
 8001fde:	4558      	cmp	r0, fp
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2206      	moveq	r2, #6
 8001fe4:	2207      	movne	r2, #7
 8001fe6:	fa02 f20e 	lsl.w	r2, r2, lr
 8001fea:	4594      	cmp	ip, r2
 8001fec:	d110      	bne.n	8002010 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR1 &= ~(iocurrent);
 8001fee:	6822      	ldr	r2, [r4, #0]
 8001ff0:	43f6      	mvns	r6, r6
 8001ff2:	4032      	ands	r2, r6
 8001ff4:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001ff6:	6862      	ldr	r2, [r4, #4]
 8001ff8:	4032      	ands	r2, r6
 8001ffa:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001ffc:	68a2      	ldr	r2, [r4, #8]
 8001ffe:	4032      	ands	r2, r6
 8002000:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002002:	68e2      	ldr	r2, [r4, #12]
 8002004:	4016      	ands	r6, r2
 8002006:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	ea22 0209 	bic.w	r2, r2, r9
 800200e:	60ba      	str	r2, [r7, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002010:	6806      	ldr	r6, [r0, #0]
 8002012:	2703      	movs	r7, #3
 8002014:	005a      	lsls	r2, r3, #1
 8002016:	fa07 f202 	lsl.w	r2, r7, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800201a:	fa23 f707 	lsr.w	r7, r3, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800201e:	4316      	orrs	r6, r2
 8002020:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8002024:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002026:	f003 0607 	and.w	r6, r3, #7
 800202a:	f8d7 e020 	ldr.w	lr, [r7, #32]
 800202e:	00b6      	lsls	r6, r6, #2
 8002030:	fa08 f606 	lsl.w	r6, r8, r6
 8002034:	ea2e 0606 	bic.w	r6, lr, r6
 8002038:	623e      	str	r6, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800203a:	6886      	ldr	r6, [r0, #8]
 800203c:	43d2      	mvns	r2, r2
 800203e:	4016      	ands	r6, r2
 8002040:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002042:	6846      	ldr	r6, [r0, #4]
 8002044:	43ed      	mvns	r5, r5
 8002046:	402e      	ands	r6, r5
 8002048:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800204a:	68c6      	ldr	r6, [r0, #12]
 800204c:	4032      	ands	r2, r6
 800204e:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002050:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002052:	4015      	ands	r5, r2
 8002054:	62c5      	str	r5, [r0, #44]	; 0x2c
    position++;
 8002056:	3301      	adds	r3, #1
 8002058:	e792      	b.n	8001f80 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800205a:	2200      	movs	r2, #0
 800205c:	e7c3      	b.n	8001fe6 <HAL_GPIO_DeInit+0x7a>
 800205e:	2201      	movs	r2, #1
 8002060:	e7c1      	b.n	8001fe6 <HAL_GPIO_DeInit+0x7a>
 8002062:	2202      	movs	r2, #2
 8002064:	e7bf      	b.n	8001fe6 <HAL_GPIO_DeInit+0x7a>
 8002066:	2203      	movs	r2, #3
 8002068:	e7bd      	b.n	8001fe6 <HAL_GPIO_DeInit+0x7a>
 800206a:	2204      	movs	r2, #4
 800206c:	e7bb      	b.n	8001fe6 <HAL_GPIO_DeInit+0x7a>
 800206e:	2205      	movs	r2, #5
 8002070:	e7b9      	b.n	8001fe6 <HAL_GPIO_DeInit+0x7a>
 8002072:	bf00      	nop
 8002074:	40010400 	.word	0x40010400
 8002078:	48000400 	.word	0x48000400
 800207c:	48001800 	.word	0x48001800

08002080 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002080:	6903      	ldr	r3, [r0, #16]
 8002082:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002084:	bf14      	ite	ne
 8002086:	2001      	movne	r0, #1
 8002088:	2000      	moveq	r0, #0
 800208a:	4770      	bx	lr

0800208c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800208c:	b10a      	cbz	r2, 8002092 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800208e:	6181      	str	r1, [r0, #24]
 8002090:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002092:	6281      	str	r1, [r0, #40]	; 0x28
 8002094:	4770      	bx	lr
	...

08002098 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002098:	4b02      	ldr	r3, [pc, #8]	; (80020a4 <HAL_PWREx_GetVoltageRange+0xc>)
 800209a:	6818      	ldr	r0, [r3, #0]
#endif
}
 800209c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40007000 	.word	0x40007000

080020a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020a8:	4b17      	ldr	r3, [pc, #92]	; (8002108 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020aa:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020ac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b0:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b4:	d11c      	bne.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020b6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80020ba:	d015      	beq.n	80020e8 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020bc:	681a      	ldr	r2, [r3, #0]
 80020be:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80020c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020c6:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020c8:	4a10      	ldr	r2, [pc, #64]	; (800210c <HAL_PWREx_ControlVoltageScaling+0x64>)
 80020ca:	6811      	ldr	r1, [r2, #0]
 80020cc:	2232      	movs	r2, #50	; 0x32
 80020ce:	434a      	muls	r2, r1
 80020d0:	490f      	ldr	r1, [pc, #60]	; (8002110 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80020d2:	fbb2 f2f1 	udiv	r2, r2, r1
 80020d6:	4619      	mov	r1, r3
 80020d8:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020da:	6958      	ldr	r0, [r3, #20]
 80020dc:	0540      	lsls	r0, r0, #21
 80020de:	d500      	bpl.n	80020e2 <HAL_PWREx_ControlVoltageScaling+0x3a>
 80020e0:	b922      	cbnz	r2, 80020ec <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020e2:	694b      	ldr	r3, [r1, #20]
 80020e4:	055b      	lsls	r3, r3, #21
 80020e6:	d40d      	bmi.n	8002104 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020e8:	2000      	movs	r0, #0
 80020ea:	4770      	bx	lr
        wait_loop_index--;
 80020ec:	3a01      	subs	r2, #1
 80020ee:	e7f4      	b.n	80020da <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80020f0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020f4:	bf1f      	itttt	ne
 80020f6:	681a      	ldrne	r2, [r3, #0]
 80020f8:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 80020fc:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8002100:	601a      	strne	r2, [r3, #0]
 8002102:	e7f1      	b.n	80020e8 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8002104:	2003      	movs	r0, #3
}
 8002106:	4770      	bx	lr
 8002108:	40007000 	.word	0x40007000
 800210c:	2000001c 	.word	0x2000001c
 8002110:	000f4240 	.word	0x000f4240

08002114 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002114:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002116:	4d1e      	ldr	r5, [pc, #120]	; (8002190 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8002118:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800211a:	00da      	lsls	r2, r3, #3
{
 800211c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800211e:	d518      	bpl.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002120:	f7ff ffba 	bl	8002098 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002124:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8002128:	d123      	bne.n	8002172 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800212a:	2c80      	cmp	r4, #128	; 0x80
 800212c:	d929      	bls.n	8002182 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800212e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002130:	bf8c      	ite	hi
 8002132:	2002      	movhi	r0, #2
 8002134:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002136:	4a17      	ldr	r2, [pc, #92]	; (8002194 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8002138:	6813      	ldr	r3, [r2, #0]
 800213a:	f023 0307 	bic.w	r3, r3, #7
 800213e:	4303      	orrs	r3, r0
 8002140:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002142:	6813      	ldr	r3, [r2, #0]
 8002144:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002148:	1a18      	subs	r0, r3, r0
 800214a:	bf18      	it	ne
 800214c:	2001      	movne	r0, #1
 800214e:	b003      	add	sp, #12
 8002150:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	65ab      	str	r3, [r5, #88]	; 0x58
 800215a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002164:	f7ff ff98 	bl	8002098 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8002168:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800216a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800216e:	65ab      	str	r3, [r5, #88]	; 0x58
 8002170:	e7d8      	b.n	8002124 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002172:	2c80      	cmp	r4, #128	; 0x80
 8002174:	d807      	bhi.n	8002186 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8002176:	d008      	beq.n	800218a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8002178:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 800217c:	4258      	negs	r0, r3
 800217e:	4158      	adcs	r0, r3
 8002180:	e7d9      	b.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002182:	2000      	movs	r0, #0
 8002184:	e7d7      	b.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8002186:	2003      	movs	r0, #3
 8002188:	e7d5      	b.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800218a:	2002      	movs	r0, #2
 800218c:	e7d3      	b.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0x22>
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
 8002194:	40022000 	.word	0x40022000

08002198 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002198:	4b22      	ldr	r3, [pc, #136]	; (8002224 <HAL_RCC_GetSysClockFreq+0x8c>)
 800219a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800219c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800219e:	f012 020c 	ands.w	r2, r2, #12
 80021a2:	d005      	beq.n	80021b0 <HAL_RCC_GetSysClockFreq+0x18>
 80021a4:	2a0c      	cmp	r2, #12
 80021a6:	d115      	bne.n	80021d4 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a8:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021ac:	2901      	cmp	r1, #1
 80021ae:	d118      	bne.n	80021e2 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021b0:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80021b2:	481d      	ldr	r0, [pc, #116]	; (8002228 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021b4:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021b6:	bf55      	itete	pl
 80021b8:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021bc:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021be:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021c2:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80021c6:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021ca:	b34a      	cbz	r2, 8002220 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021cc:	2a0c      	cmp	r2, #12
 80021ce:	d009      	beq.n	80021e4 <HAL_RCC_GetSysClockFreq+0x4c>
 80021d0:	2000      	movs	r0, #0
  return sysclockfreq;
 80021d2:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021d4:	2a04      	cmp	r2, #4
 80021d6:	d022      	beq.n	800221e <HAL_RCC_GetSysClockFreq+0x86>
 80021d8:	2a08      	cmp	r2, #8
 80021da:	4814      	ldr	r0, [pc, #80]	; (800222c <HAL_RCC_GetSysClockFreq+0x94>)
 80021dc:	bf18      	it	ne
 80021de:	2000      	movne	r0, #0
 80021e0:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80021e2:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80021ea:	2a02      	cmp	r2, #2
 80021ec:	d015      	beq.n	800221a <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 80021ee:	490f      	ldr	r1, [pc, #60]	; (800222c <HAL_RCC_GetSysClockFreq+0x94>)
 80021f0:	2a03      	cmp	r2, #3
 80021f2:	bf08      	it	eq
 80021f4:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021f6:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021f8:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002200:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002204:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002208:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800220a:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800220c:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800220e:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002210:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8002214:	fbb0 f0f3 	udiv	r0, r0, r3
 8002218:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800221a:	4805      	ldr	r0, [pc, #20]	; (8002230 <HAL_RCC_GetSysClockFreq+0x98>)
 800221c:	e7eb      	b.n	80021f6 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800221e:	4804      	ldr	r0, [pc, #16]	; (8002230 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40021000 	.word	0x40021000
 8002228:	080087e0 	.word	0x080087e0
 800222c:	007a1200 	.word	0x007a1200
 8002230:	00f42400 	.word	0x00f42400

08002234 <HAL_RCC_OscConfig>:
{
 8002234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002238:	4605      	mov	r5, r0
 800223a:	b918      	cbnz	r0, 8002244 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 800223c:	2001      	movs	r0, #1
}
 800223e:	b003      	add	sp, #12
 8002240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002244:	4ca7      	ldr	r4, [pc, #668]	; (80024e4 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002246:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002248:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800224a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800224c:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800224e:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002252:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002256:	d53d      	bpl.n	80022d4 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002258:	b11e      	cbz	r6, 8002262 <HAL_RCC_OscConfig+0x2e>
 800225a:	2e0c      	cmp	r6, #12
 800225c:	d166      	bne.n	800232c <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800225e:	2f01      	cmp	r7, #1
 8002260:	d164      	bne.n	800232c <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002262:	6823      	ldr	r3, [r4, #0]
 8002264:	0799      	lsls	r1, r3, #30
 8002266:	d502      	bpl.n	800226e <HAL_RCC_OscConfig+0x3a>
 8002268:	69ab      	ldr	r3, [r5, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0e6      	beq.n	800223c <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800226e:	6823      	ldr	r3, [r4, #0]
 8002270:	6a28      	ldr	r0, [r5, #32]
 8002272:	071a      	lsls	r2, r3, #28
 8002274:	bf56      	itet	pl
 8002276:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800227a:	6823      	ldrmi	r3, [r4, #0]
 800227c:	091b      	lsrpl	r3, r3, #4
 800227e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002282:	4283      	cmp	r3, r0
 8002284:	d23b      	bcs.n	80022fe <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002286:	f7ff ff45 	bl	8002114 <RCC_SetFlashLatencyFromMSIRange>
 800228a:	2800      	cmp	r0, #0
 800228c:	d1d6      	bne.n	800223c <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800228e:	6823      	ldr	r3, [r4, #0]
 8002290:	f043 0308 	orr.w	r3, r3, #8
 8002294:	6023      	str	r3, [r4, #0]
 8002296:	6823      	ldr	r3, [r4, #0]
 8002298:	6a2a      	ldr	r2, [r5, #32]
 800229a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800229e:	4313      	orrs	r3, r2
 80022a0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a2:	6863      	ldr	r3, [r4, #4]
 80022a4:	69ea      	ldr	r2, [r5, #28]
 80022a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80022ae:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022b0:	f7ff ff72 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 80022b4:	68a3      	ldr	r3, [r4, #8]
 80022b6:	4a8c      	ldr	r2, [pc, #560]	; (80024e8 <HAL_RCC_OscConfig+0x2b4>)
 80022b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022bc:	5cd3      	ldrb	r3, [r2, r3]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	40d8      	lsrs	r0, r3
 80022c4:	4b89      	ldr	r3, [pc, #548]	; (80024ec <HAL_RCC_OscConfig+0x2b8>)
 80022c6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80022c8:	4b89      	ldr	r3, [pc, #548]	; (80024f0 <HAL_RCC_OscConfig+0x2bc>)
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	f004 fe44 	bl	8006f58 <HAL_InitTick>
        if(status != HAL_OK)
 80022d0:	2800      	cmp	r0, #0
 80022d2:	d1b4      	bne.n	800223e <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d4:	682b      	ldr	r3, [r5, #0]
 80022d6:	07d9      	lsls	r1, r3, #31
 80022d8:	d45f      	bmi.n	800239a <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	079a      	lsls	r2, r3, #30
 80022de:	f100 809e 	bmi.w	800241e <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e2:	682b      	ldr	r3, [r5, #0]
 80022e4:	0719      	lsls	r1, r3, #28
 80022e6:	f100 80d2 	bmi.w	800248e <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022ea:	682b      	ldr	r3, [r5, #0]
 80022ec:	075a      	lsls	r2, r3, #29
 80022ee:	f100 8101 	bmi.w	80024f4 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80022f2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f040 816a 	bne.w	80025ce <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80022fa:	2000      	movs	r0, #0
 80022fc:	e79f      	b.n	800223e <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022fe:	6823      	ldr	r3, [r4, #0]
 8002300:	f043 0308 	orr.w	r3, r3, #8
 8002304:	6023      	str	r3, [r4, #0]
 8002306:	6823      	ldr	r3, [r4, #0]
 8002308:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800230c:	4303      	orrs	r3, r0
 800230e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002310:	6863      	ldr	r3, [r4, #4]
 8002312:	69ea      	ldr	r2, [r5, #28]
 8002314:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002318:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800231c:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800231e:	2e00      	cmp	r6, #0
 8002320:	d1c6      	bne.n	80022b0 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002322:	f7ff fef7 	bl	8002114 <RCC_SetFlashLatencyFromMSIRange>
 8002326:	2800      	cmp	r0, #0
 8002328:	d0c2      	beq.n	80022b0 <HAL_RCC_OscConfig+0x7c>
 800232a:	e787      	b.n	800223c <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800232c:	69ab      	ldr	r3, [r5, #24]
 800232e:	b31b      	cbz	r3, 8002378 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002338:	f7ff fcaa 	bl	8001c90 <HAL_GetTick>
 800233c:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	079b      	lsls	r3, r3, #30
 8002342:	d511      	bpl.n	8002368 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002344:	6823      	ldr	r3, [r4, #0]
 8002346:	f043 0308 	orr.w	r3, r3, #8
 800234a:	6023      	str	r3, [r4, #0]
 800234c:	6823      	ldr	r3, [r4, #0]
 800234e:	6a2a      	ldr	r2, [r5, #32]
 8002350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002354:	4313      	orrs	r3, r2
 8002356:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002358:	6863      	ldr	r3, [r4, #4]
 800235a:	69ea      	ldr	r2, [r5, #28]
 800235c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002360:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002364:	6063      	str	r3, [r4, #4]
 8002366:	e7b5      	b.n	80022d4 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002368:	f7ff fc92 	bl	8001c90 <HAL_GetTick>
 800236c:	eba0 0008 	sub.w	r0, r0, r8
 8002370:	2802      	cmp	r0, #2
 8002372:	d9e4      	bls.n	800233e <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8002374:	2003      	movs	r0, #3
 8002376:	e762      	b.n	800223e <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	f023 0301 	bic.w	r3, r3, #1
 800237e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002380:	f7ff fc86 	bl	8001c90 <HAL_GetTick>
 8002384:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002386:	6823      	ldr	r3, [r4, #0]
 8002388:	0798      	lsls	r0, r3, #30
 800238a:	d5a3      	bpl.n	80022d4 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800238c:	f7ff fc80 	bl	8001c90 <HAL_GetTick>
 8002390:	eba0 0008 	sub.w	r0, r0, r8
 8002394:	2802      	cmp	r0, #2
 8002396:	d9f6      	bls.n	8002386 <HAL_RCC_OscConfig+0x152>
 8002398:	e7ec      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800239a:	2e08      	cmp	r6, #8
 800239c:	d003      	beq.n	80023a6 <HAL_RCC_OscConfig+0x172>
 800239e:	2e0c      	cmp	r6, #12
 80023a0:	d108      	bne.n	80023b4 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023a2:	2f03      	cmp	r7, #3
 80023a4:	d106      	bne.n	80023b4 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a6:	6823      	ldr	r3, [r4, #0]
 80023a8:	039b      	lsls	r3, r3, #14
 80023aa:	d596      	bpl.n	80022da <HAL_RCC_OscConfig+0xa6>
 80023ac:	686b      	ldr	r3, [r5, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d193      	bne.n	80022da <HAL_RCC_OscConfig+0xa6>
 80023b2:	e743      	b.n	800223c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b4:	686b      	ldr	r3, [r5, #4]
 80023b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ba:	d110      	bne.n	80023de <HAL_RCC_OscConfig+0x1aa>
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c2:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80023c4:	f7ff fc64 	bl	8001c90 <HAL_GetTick>
 80023c8:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023ca:	6823      	ldr	r3, [r4, #0]
 80023cc:	0398      	lsls	r0, r3, #14
 80023ce:	d484      	bmi.n	80022da <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff fc5e 	bl	8001c90 <HAL_GetTick>
 80023d4:	eba0 0008 	sub.w	r0, r0, r8
 80023d8:	2864      	cmp	r0, #100	; 0x64
 80023da:	d9f6      	bls.n	80023ca <HAL_RCC_OscConfig+0x196>
 80023dc:	e7ca      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023e2:	d104      	bne.n	80023ee <HAL_RCC_OscConfig+0x1ba>
 80023e4:	6823      	ldr	r3, [r4, #0]
 80023e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ea:	6023      	str	r3, [r4, #0]
 80023ec:	e7e6      	b.n	80023bc <HAL_RCC_OscConfig+0x188>
 80023ee:	6822      	ldr	r2, [r4, #0]
 80023f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023f4:	6022      	str	r2, [r4, #0]
 80023f6:	6822      	ldr	r2, [r4, #0]
 80023f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023fc:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1e0      	bne.n	80023c4 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8002402:	f7ff fc45 	bl	8001c90 <HAL_GetTick>
 8002406:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002408:	6823      	ldr	r3, [r4, #0]
 800240a:	0399      	lsls	r1, r3, #14
 800240c:	f57f af65 	bpl.w	80022da <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002410:	f7ff fc3e 	bl	8001c90 <HAL_GetTick>
 8002414:	eba0 0008 	sub.w	r0, r0, r8
 8002418:	2864      	cmp	r0, #100	; 0x64
 800241a:	d9f5      	bls.n	8002408 <HAL_RCC_OscConfig+0x1d4>
 800241c:	e7aa      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800241e:	2e04      	cmp	r6, #4
 8002420:	d003      	beq.n	800242a <HAL_RCC_OscConfig+0x1f6>
 8002422:	2e0c      	cmp	r6, #12
 8002424:	d110      	bne.n	8002448 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002426:	2f02      	cmp	r7, #2
 8002428:	d10e      	bne.n	8002448 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	055a      	lsls	r2, r3, #21
 800242e:	d503      	bpl.n	8002438 <HAL_RCC_OscConfig+0x204>
 8002430:	68eb      	ldr	r3, [r5, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	f43f af02 	beq.w	800223c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	6863      	ldr	r3, [r4, #4]
 800243a:	692a      	ldr	r2, [r5, #16]
 800243c:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8002440:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002444:	6063      	str	r3, [r4, #4]
 8002446:	e74c      	b.n	80022e2 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002448:	68eb      	ldr	r3, [r5, #12]
 800244a:	b17b      	cbz	r3, 800246c <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 800244c:	6823      	ldr	r3, [r4, #0]
 800244e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002452:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002454:	f7ff fc1c 	bl	8001c90 <HAL_GetTick>
 8002458:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800245a:	6823      	ldr	r3, [r4, #0]
 800245c:	055b      	lsls	r3, r3, #21
 800245e:	d4eb      	bmi.n	8002438 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002460:	f7ff fc16 	bl	8001c90 <HAL_GetTick>
 8002464:	1bc0      	subs	r0, r0, r7
 8002466:	2802      	cmp	r0, #2
 8002468:	d9f7      	bls.n	800245a <HAL_RCC_OscConfig+0x226>
 800246a:	e783      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002472:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002474:	f7ff fc0c 	bl	8001c90 <HAL_GetTick>
 8002478:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	0558      	lsls	r0, r3, #21
 800247e:	f57f af30 	bpl.w	80022e2 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002482:	f7ff fc05 	bl	8001c90 <HAL_GetTick>
 8002486:	1bc0      	subs	r0, r0, r7
 8002488:	2802      	cmp	r0, #2
 800248a:	d9f6      	bls.n	800247a <HAL_RCC_OscConfig+0x246>
 800248c:	e772      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800248e:	696b      	ldr	r3, [r5, #20]
 8002490:	b19b      	cbz	r3, 80024ba <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8002492:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800249e:	f7ff fbf7 	bl	8001c90 <HAL_GetTick>
 80024a2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024a4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80024a8:	079b      	lsls	r3, r3, #30
 80024aa:	f53f af1e 	bmi.w	80022ea <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ae:	f7ff fbef 	bl	8001c90 <HAL_GetTick>
 80024b2:	1bc0      	subs	r0, r0, r7
 80024b4:	2802      	cmp	r0, #2
 80024b6:	d9f5      	bls.n	80024a4 <HAL_RCC_OscConfig+0x270>
 80024b8:	e75c      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 80024ba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80024c6:	f7ff fbe3 	bl	8001c90 <HAL_GetTick>
 80024ca:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024cc:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80024d0:	0798      	lsls	r0, r3, #30
 80024d2:	f57f af0a 	bpl.w	80022ea <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d6:	f7ff fbdb 	bl	8001c90 <HAL_GetTick>
 80024da:	1bc0      	subs	r0, r0, r7
 80024dc:	2802      	cmp	r0, #2
 80024de:	d9f5      	bls.n	80024cc <HAL_RCC_OscConfig+0x298>
 80024e0:	e748      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	080087c6 	.word	0x080087c6
 80024ec:	2000001c 	.word	0x2000001c
 80024f0:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80024f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024f6:	00d9      	lsls	r1, r3, #3
 80024f8:	d429      	bmi.n	800254e <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002500:	65a3      	str	r3, [r4, #88]	; 0x58
 8002502:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800250c:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002510:	4f89      	ldr	r7, [pc, #548]	; (8002738 <HAL_RCC_OscConfig+0x504>)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	05da      	lsls	r2, r3, #23
 8002516:	d51d      	bpl.n	8002554 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002518:	68ab      	ldr	r3, [r5, #8]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d12b      	bne.n	8002576 <HAL_RCC_OscConfig+0x342>
 800251e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800252a:	f7ff fbb1 	bl	8001c90 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002532:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002534:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002538:	0798      	lsls	r0, r3, #30
 800253a:	d542      	bpl.n	80025c2 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 800253c:	f1b8 0f00 	cmp.w	r8, #0
 8002540:	f43f aed7 	beq.w	80022f2 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002544:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254a:	65a3      	str	r3, [r4, #88]	; 0x58
 800254c:	e6d1      	b.n	80022f2 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 800254e:	f04f 0800 	mov.w	r8, #0
 8002552:	e7dd      	b.n	8002510 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800255c:	f7ff fb98 	bl	8001c90 <HAL_GetTick>
 8002560:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	05db      	lsls	r3, r3, #23
 8002566:	d4d7      	bmi.n	8002518 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002568:	f7ff fb92 	bl	8001c90 <HAL_GetTick>
 800256c:	eba0 0009 	sub.w	r0, r0, r9
 8002570:	2802      	cmp	r0, #2
 8002572:	d9f6      	bls.n	8002562 <HAL_RCC_OscConfig+0x32e>
 8002574:	e6fe      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002576:	2b05      	cmp	r3, #5
 8002578:	d106      	bne.n	8002588 <HAL_RCC_OscConfig+0x354>
 800257a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800257e:	f043 0304 	orr.w	r3, r3, #4
 8002582:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002586:	e7ca      	b.n	800251e <HAL_RCC_OscConfig+0x2ea>
 8002588:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002594:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002598:	f022 0204 	bic.w	r2, r2, #4
 800259c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1c2      	bne.n	800252a <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 80025a4:	f7ff fb74 	bl	8001c90 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a8:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80025ac:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ae:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80025b2:	0799      	lsls	r1, r3, #30
 80025b4:	d5c2      	bpl.n	800253c <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025b6:	f7ff fb6b 	bl	8001c90 <HAL_GetTick>
 80025ba:	1bc0      	subs	r0, r0, r7
 80025bc:	4548      	cmp	r0, r9
 80025be:	d9f6      	bls.n	80025ae <HAL_RCC_OscConfig+0x37a>
 80025c0:	e6d8      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c2:	f7ff fb65 	bl	8001c90 <HAL_GetTick>
 80025c6:	1bc0      	subs	r0, r0, r7
 80025c8:	4548      	cmp	r0, r9
 80025ca:	d9b3      	bls.n	8002534 <HAL_RCC_OscConfig+0x300>
 80025cc:	e6d2      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	f040 808f 	bne.w	80026f2 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 80025d4:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d6:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80025d8:	f003 0103 	and.w	r1, r3, #3
 80025dc:	4291      	cmp	r1, r2
 80025de:	d124      	bne.n	800262a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025e0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80025e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80025e6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80025ec:	d11d      	bne.n	800262a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ee:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80025f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025f4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80025f8:	d117      	bne.n	800262a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80025fa:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80025fc:	3a07      	subs	r2, #7
 80025fe:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8002602:	bf18      	it	ne
 8002604:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002606:	4291      	cmp	r1, r2
 8002608:	d10f      	bne.n	800262a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800260a:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 800260c:	0852      	lsrs	r2, r2, #1
 800260e:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8002612:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002614:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002618:	d107      	bne.n	800262a <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800261a:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 800261c:	0852      	lsrs	r2, r2, #1
 800261e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8002622:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002624:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002628:	d04a      	beq.n	80026c0 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800262a:	2e0c      	cmp	r6, #12
 800262c:	f43f ae06 	beq.w	800223c <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	f53f ae02 	bmi.w	800223c <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	f53f adfe 	bmi.w	800223c <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002640:	6823      	ldr	r3, [r4, #0]
 8002642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002646:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002648:	f7ff fb22 	bl	8001c90 <HAL_GetTick>
 800264c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264e:	6823      	ldr	r3, [r4, #0]
 8002650:	019f      	lsls	r7, r3, #6
 8002652:	d42f      	bmi.n	80026b4 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002654:	68e2      	ldr	r2, [r4, #12]
 8002656:	4b39      	ldr	r3, [pc, #228]	; (800273c <HAL_RCC_OscConfig+0x508>)
 8002658:	4013      	ands	r3, r2
 800265a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800265c:	4313      	orrs	r3, r2
 800265e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002660:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002664:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002666:	3a01      	subs	r2, #1
 8002668:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800266c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800266e:	0912      	lsrs	r2, r2, #4
 8002670:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002674:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002676:	0852      	lsrs	r2, r2, #1
 8002678:	3a01      	subs	r2, #1
 800267a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800267e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002680:	0852      	lsrs	r2, r2, #1
 8002682:	3a01      	subs	r2, #1
 8002684:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002688:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800268a:	6823      	ldr	r3, [r4, #0]
 800268c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002690:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002692:	68e3      	ldr	r3, [r4, #12]
 8002694:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002698:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 800269a:	f7ff faf9 	bl	8001c90 <HAL_GetTick>
 800269e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026a0:	6823      	ldr	r3, [r4, #0]
 80026a2:	0198      	lsls	r0, r3, #6
 80026a4:	f53f ae29 	bmi.w	80022fa <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a8:	f7ff faf2 	bl	8001c90 <HAL_GetTick>
 80026ac:	1b40      	subs	r0, r0, r5
 80026ae:	2802      	cmp	r0, #2
 80026b0:	d9f6      	bls.n	80026a0 <HAL_RCC_OscConfig+0x46c>
 80026b2:	e65f      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7ff faec 	bl	8001c90 <HAL_GetTick>
 80026b8:	1b80      	subs	r0, r0, r6
 80026ba:	2802      	cmp	r0, #2
 80026bc:	d9c7      	bls.n	800264e <HAL_RCC_OscConfig+0x41a>
 80026be:	e659      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	0199      	lsls	r1, r3, #6
 80026c4:	f53f ae19 	bmi.w	80022fa <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ce:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026d0:	68e3      	ldr	r3, [r4, #12]
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d6:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 80026d8:	f7ff fada 	bl	8001c90 <HAL_GetTick>
 80026dc:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	019a      	lsls	r2, r3, #6
 80026e2:	f53f ae0a 	bmi.w	80022fa <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e6:	f7ff fad3 	bl	8001c90 <HAL_GetTick>
 80026ea:	1b40      	subs	r0, r0, r5
 80026ec:	2802      	cmp	r0, #2
 80026ee:	d9f6      	bls.n	80026de <HAL_RCC_OscConfig+0x4aa>
 80026f0:	e640      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026f2:	2e0c      	cmp	r6, #12
 80026f4:	f43f ada2 	beq.w	800223c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026fe:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002700:	6823      	ldr	r3, [r4, #0]
 8002702:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002706:	bf02      	ittt	eq
 8002708:	68e3      	ldreq	r3, [r4, #12]
 800270a:	f023 0303 	biceq.w	r3, r3, #3
 800270e:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002710:	68e3      	ldr	r3, [r4, #12]
 8002712:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800271a:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800271c:	f7ff fab8 	bl	8001c90 <HAL_GetTick>
 8002720:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	019b      	lsls	r3, r3, #6
 8002726:	f57f ade8 	bpl.w	80022fa <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272a:	f7ff fab1 	bl	8001c90 <HAL_GetTick>
 800272e:	1b40      	subs	r0, r0, r5
 8002730:	2802      	cmp	r0, #2
 8002732:	d9f6      	bls.n	8002722 <HAL_RCC_OscConfig+0x4ee>
 8002734:	e61e      	b.n	8002374 <HAL_RCC_OscConfig+0x140>
 8002736:	bf00      	nop
 8002738:	40007000 	.word	0x40007000
 800273c:	f99d808c 	.word	0xf99d808c

08002740 <HAL_RCC_ClockConfig>:
{
 8002740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002744:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8002746:	4604      	mov	r4, r0
 8002748:	b910      	cbnz	r0, 8002750 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800274a:	2001      	movs	r0, #1
 800274c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002750:	4a41      	ldr	r2, [pc, #260]	; (8002858 <HAL_RCC_ClockConfig+0x118>)
 8002752:	6813      	ldr	r3, [r2, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	428b      	cmp	r3, r1
 800275a:	d32a      	bcc.n	80027b2 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	07d9      	lsls	r1, r3, #31
 8002760:	d432      	bmi.n	80027c8 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002762:	6821      	ldr	r1, [r4, #0]
 8002764:	078a      	lsls	r2, r1, #30
 8002766:	d45c      	bmi.n	8002822 <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002768:	4a3b      	ldr	r2, [pc, #236]	; (8002858 <HAL_RCC_ClockConfig+0x118>)
 800276a:	6813      	ldr	r3, [r2, #0]
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	429e      	cmp	r6, r3
 8002772:	d35e      	bcc.n	8002832 <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002774:	f011 0f04 	tst.w	r1, #4
 8002778:	4d38      	ldr	r5, [pc, #224]	; (800285c <HAL_RCC_ClockConfig+0x11c>)
 800277a:	d165      	bne.n	8002848 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800277c:	070b      	lsls	r3, r1, #28
 800277e:	d506      	bpl.n	800278e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002780:	68ab      	ldr	r3, [r5, #8]
 8002782:	6922      	ldr	r2, [r4, #16]
 8002784:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002788:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800278c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800278e:	f7ff fd03 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8002792:	68ab      	ldr	r3, [r5, #8]
 8002794:	4a32      	ldr	r2, [pc, #200]	; (8002860 <HAL_RCC_ClockConfig+0x120>)
 8002796:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800279a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800279e:	5cd3      	ldrb	r3, [r2, r3]
 80027a0:	f003 031f 	and.w	r3, r3, #31
 80027a4:	40d8      	lsrs	r0, r3
 80027a6:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <HAL_RCC_ClockConfig+0x124>)
 80027a8:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80027aa:	4b2f      	ldr	r3, [pc, #188]	; (8002868 <HAL_RCC_ClockConfig+0x128>)
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	f004 bbd3 	b.w	8006f58 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b2:	6813      	ldr	r3, [r2, #0]
 80027b4:	f023 0307 	bic.w	r3, r3, #7
 80027b8:	430b      	orrs	r3, r1
 80027ba:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027bc:	6813      	ldr	r3, [r2, #0]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	4299      	cmp	r1, r3
 80027c4:	d1c1      	bne.n	800274a <HAL_RCC_ClockConfig+0xa>
 80027c6:	e7c9      	b.n	800275c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027c8:	6862      	ldr	r2, [r4, #4]
 80027ca:	4d24      	ldr	r5, [pc, #144]	; (800285c <HAL_RCC_ClockConfig+0x11c>)
 80027cc:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027ce:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d0:	d11b      	bne.n	800280a <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027d2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d6:	d0b8      	beq.n	800274a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027d8:	68ab      	ldr	r3, [r5, #8]
 80027da:	f023 0303 	bic.w	r3, r3, #3
 80027de:	4313      	orrs	r3, r2
 80027e0:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 80027e2:	f7ff fa55 	bl	8001c90 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80027ea:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ec:	68ab      	ldr	r3, [r5, #8]
 80027ee:	6862      	ldr	r2, [r4, #4]
 80027f0:	f003 030c 	and.w	r3, r3, #12
 80027f4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80027f8:	d0b3      	beq.n	8002762 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027fa:	f7ff fa49 	bl	8001c90 <HAL_GetTick>
 80027fe:	1bc0      	subs	r0, r0, r7
 8002800:	4540      	cmp	r0, r8
 8002802:	d9f3      	bls.n	80027ec <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8002804:	2003      	movs	r0, #3
}
 8002806:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800280a:	2a02      	cmp	r2, #2
 800280c:	d102      	bne.n	8002814 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800280e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002812:	e7e0      	b.n	80027d6 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002814:	b912      	cbnz	r2, 800281c <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002816:	f013 0f02 	tst.w	r3, #2
 800281a:	e7dc      	b.n	80027d6 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800281c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002820:	e7d9      	b.n	80027d6 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002822:	4a0e      	ldr	r2, [pc, #56]	; (800285c <HAL_RCC_ClockConfig+0x11c>)
 8002824:	68a0      	ldr	r0, [r4, #8]
 8002826:	6893      	ldr	r3, [r2, #8]
 8002828:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282c:	4303      	orrs	r3, r0
 800282e:	6093      	str	r3, [r2, #8]
 8002830:	e79a      	b.n	8002768 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002832:	6813      	ldr	r3, [r2, #0]
 8002834:	f023 0307 	bic.w	r3, r3, #7
 8002838:	4333      	orrs	r3, r6
 800283a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283c:	6813      	ldr	r3, [r2, #0]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	429e      	cmp	r6, r3
 8002844:	d181      	bne.n	800274a <HAL_RCC_ClockConfig+0xa>
 8002846:	e795      	b.n	8002774 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002848:	68ab      	ldr	r3, [r5, #8]
 800284a:	68e2      	ldr	r2, [r4, #12]
 800284c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002850:	4313      	orrs	r3, r2
 8002852:	60ab      	str	r3, [r5, #8]
 8002854:	e792      	b.n	800277c <HAL_RCC_ClockConfig+0x3c>
 8002856:	bf00      	nop
 8002858:	40022000 	.word	0x40022000
 800285c:	40021000 	.word	0x40021000
 8002860:	080087c6 	.word	0x080087c6
 8002864:	2000001c 	.word	0x2000001c
 8002868:	20000004 	.word	0x20000004

0800286c <HAL_RCC_GetHCLKFreq>:
}
 800286c:	4b01      	ldr	r3, [pc, #4]	; (8002874 <HAL_RCC_GetHCLKFreq+0x8>)
 800286e:	6818      	ldr	r0, [r3, #0]
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	2000001c 	.word	0x2000001c

08002878 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x18>)
 800287a:	4a06      	ldr	r2, [pc, #24]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	4a04      	ldr	r2, [pc, #16]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002886:	6810      	ldr	r0, [r2, #0]
 8002888:	f003 031f 	and.w	r3, r3, #31
}
 800288c:	40d8      	lsrs	r0, r3
 800288e:	4770      	bx	lr
 8002890:	40021000 	.word	0x40021000
 8002894:	080087d6 	.word	0x080087d6
 8002898:	2000001c 	.word	0x2000001c

0800289c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 800289e:	4a06      	ldr	r2, [pc, #24]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	4a04      	ldr	r2, [pc, #16]	; (80028bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028aa:	6810      	ldr	r0, [r2, #0]
 80028ac:	f003 031f 	and.w	r3, r3, #31
}
 80028b0:	40d8      	lsrs	r0, r3
 80028b2:	4770      	bx	lr
 80028b4:	40021000 	.word	0x40021000
 80028b8:	080087d6 	.word	0x080087d6
 80028bc:	2000001c 	.word	0x2000001c

080028c0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80028c0:	230f      	movs	r3, #15
 80028c2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_GetClockConfig+0x34>)
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	f002 0203 	and.w	r2, r2, #3
 80028cc:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80028ce:	689a      	ldr	r2, [r3, #8]
 80028d0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80028d4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80028dc:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	08db      	lsrs	r3, r3, #3
 80028e2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028e6:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80028e8:	4b03      	ldr	r3, [pc, #12]	; (80028f8 <HAL_RCC_GetClockConfig+0x38>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	600b      	str	r3, [r1, #0]
 80028f2:	4770      	bx	lr
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40022000 	.word	0x40022000

080028fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80028fe:	4b45      	ldr	r3, [pc, #276]	; (8002a14 <RCCEx_PLLSAI1_Config+0x118>)
 8002900:	68da      	ldr	r2, [r3, #12]
 8002902:	f012 0f03 	tst.w	r2, #3
{
 8002906:	4605      	mov	r5, r0
 8002908:	460e      	mov	r6, r1
 800290a:	461c      	mov	r4, r3
 800290c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800290e:	d02a      	beq.n	8002966 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	f002 0203 	and.w	r2, r2, #3
 8002916:	4282      	cmp	r2, r0
 8002918:	d13c      	bne.n	8002994 <RCCEx_PLLSAI1_Config+0x98>
       ||
 800291a:	2a00      	cmp	r2, #0
 800291c:	d03a      	beq.n	8002994 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800291e:	68db      	ldr	r3, [r3, #12]
       ||
 8002920:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002922:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002926:	3301      	adds	r3, #1
       ||
 8002928:	4293      	cmp	r3, r2
 800292a:	d133      	bne.n	8002994 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002932:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002934:	f7ff f9ac 	bl	8001c90 <HAL_GetTick>
 8002938:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800293a:	6823      	ldr	r3, [r4, #0]
 800293c:	011a      	lsls	r2, r3, #4
 800293e:	d432      	bmi.n	80029a6 <RCCEx_PLLSAI1_Config+0xaa>
 8002940:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002942:	2e00      	cmp	r6, #0
 8002944:	d036      	beq.n	80029b4 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002946:	2e01      	cmp	r6, #1
 8002948:	d150      	bne.n	80029ec <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800294a:	6922      	ldr	r2, [r4, #16]
 800294c:	6928      	ldr	r0, [r5, #16]
 800294e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002952:	0840      	lsrs	r0, r0, #1
 8002954:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002958:	3801      	subs	r0, #1
 800295a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800295e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8002962:	6122      	str	r2, [r4, #16]
 8002964:	e032      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8002966:	2802      	cmp	r0, #2
 8002968:	d010      	beq.n	800298c <RCCEx_PLLSAI1_Config+0x90>
 800296a:	2803      	cmp	r0, #3
 800296c:	d014      	beq.n	8002998 <RCCEx_PLLSAI1_Config+0x9c>
 800296e:	2801      	cmp	r0, #1
 8002970:	d110      	bne.n	8002994 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	079f      	lsls	r7, r3, #30
 8002976:	d538      	bpl.n	80029ea <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002978:	68e3      	ldr	r3, [r4, #12]
 800297a:	686a      	ldr	r2, [r5, #4]
 800297c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002980:	3a01      	subs	r2, #1
 8002982:	4318      	orrs	r0, r3
 8002984:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002988:	60e0      	str	r0, [r4, #12]
 800298a:	e7cf      	b.n	800292c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002992:	d1f1      	bne.n	8002978 <RCCEx_PLLSAI1_Config+0x7c>
 8002994:	2001      	movs	r0, #1
 8002996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	0391      	lsls	r1, r2, #14
 800299c:	d4ec      	bmi.n	8002978 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80029a4:	e7f5      	b.n	8002992 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029a6:	f7ff f973 	bl	8001c90 <HAL_GetTick>
 80029aa:	1bc0      	subs	r0, r0, r7
 80029ac:	2802      	cmp	r0, #2
 80029ae:	d9c4      	bls.n	800293a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80029b0:	2003      	movs	r0, #3
 80029b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029b4:	6921      	ldr	r1, [r4, #16]
 80029b6:	68eb      	ldr	r3, [r5, #12]
 80029b8:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 80029bc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80029c0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80029ca:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029d2:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7ff f95c 	bl	8001c90 <HAL_GetTick>
 80029d8:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029da:	6823      	ldr	r3, [r4, #0]
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	d513      	bpl.n	8002a08 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029e0:	6923      	ldr	r3, [r4, #16]
 80029e2:	69aa      	ldr	r2, [r5, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	6123      	str	r3, [r4, #16]
 80029e8:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 80029ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ec:	6923      	ldr	r3, [r4, #16]
 80029ee:	6968      	ldr	r0, [r5, #20]
 80029f0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029f4:	0840      	lsrs	r0, r0, #1
 80029f6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029fa:	3801      	subs	r0, #1
 80029fc:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002a00:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002a04:	6123      	str	r3, [r4, #16]
 8002a06:	e7e1      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a08:	f7ff f942 	bl	8001c90 <HAL_GetTick>
 8002a0c:	1b80      	subs	r0, r0, r6
 8002a0e:	2802      	cmp	r0, #2
 8002a10:	d9e3      	bls.n	80029da <RCCEx_PLLSAI1_Config+0xde>
 8002a12:	e7cd      	b.n	80029b0 <RCCEx_PLLSAI1_Config+0xb4>
 8002a14:	40021000 	.word	0x40021000

08002a18 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a1a:	4b3d      	ldr	r3, [pc, #244]	; (8002b10 <RCCEx_PLLSAI2_Config+0xf8>)
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	f012 0f03 	tst.w	r2, #3
{
 8002a22:	4605      	mov	r5, r0
 8002a24:	460e      	mov	r6, r1
 8002a26:	461c      	mov	r4, r3
 8002a28:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a2a:	d028      	beq.n	8002a7e <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	f002 0203 	and.w	r2, r2, #3
 8002a32:	4282      	cmp	r2, r0
 8002a34:	d13a      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0x94>
       ||
 8002a36:	2a00      	cmp	r2, #0
 8002a38:	d038      	beq.n	8002aac <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a3a:	68db      	ldr	r3, [r3, #12]
       ||
 8002a3c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a3e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002a42:	3301      	adds	r3, #1
       ||
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d131      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a48:	6823      	ldr	r3, [r4, #0]
 8002a4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a50:	f7ff f91e 	bl	8001c90 <HAL_GetTick>
 8002a54:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	009a      	lsls	r2, r3, #2
 8002a5a:	d430      	bmi.n	8002abe <RCCEx_PLLSAI2_Config+0xa6>
 8002a5c:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a5e:	2e00      	cmp	r6, #0
 8002a60:	d034      	beq.n	8002acc <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a62:	6963      	ldr	r3, [r4, #20]
 8002a64:	6929      	ldr	r1, [r5, #16]
 8002a66:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a6a:	0849      	lsrs	r1, r1, #1
 8002a6c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a70:	3901      	subs	r1, #1
 8002a72:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002a76:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002a7a:	6163      	str	r3, [r4, #20]
 8002a7c:	e032      	b.n	8002ae4 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8002a7e:	2802      	cmp	r0, #2
 8002a80:	d010      	beq.n	8002aa4 <RCCEx_PLLSAI2_Config+0x8c>
 8002a82:	2803      	cmp	r0, #3
 8002a84:	d014      	beq.n	8002ab0 <RCCEx_PLLSAI2_Config+0x98>
 8002a86:	2801      	cmp	r0, #1
 8002a88:	d110      	bne.n	8002aac <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	079f      	lsls	r7, r3, #30
 8002a8e:	d538      	bpl.n	8002b02 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a90:	68e3      	ldr	r3, [r4, #12]
 8002a92:	686a      	ldr	r2, [r5, #4]
 8002a94:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8002a98:	3a01      	subs	r2, #1
 8002a9a:	4318      	orrs	r0, r3
 8002a9c:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002aa0:	60e0      	str	r0, [r4, #12]
 8002aa2:	e7d1      	b.n	8002a48 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aaa:	d1f1      	bne.n	8002a90 <RCCEx_PLLSAI2_Config+0x78>
 8002aac:	2001      	movs	r0, #1
 8002aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ab0:	681a      	ldr	r2, [r3, #0]
 8002ab2:	0391      	lsls	r1, r2, #14
 8002ab4:	d4ec      	bmi.n	8002a90 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8002abc:	e7f5      	b.n	8002aaa <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002abe:	f7ff f8e7 	bl	8001c90 <HAL_GetTick>
 8002ac2:	1bc0      	subs	r0, r0, r7
 8002ac4:	2802      	cmp	r0, #2
 8002ac6:	d9c6      	bls.n	8002a56 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8002ac8:	2003      	movs	r0, #3
 8002aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002acc:	6962      	ldr	r2, [r4, #20]
 8002ace:	68eb      	ldr	r3, [r5, #12]
 8002ad0:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8002ad4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002ad8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002ae2:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ae4:	6823      	ldr	r3, [r4, #0]
 8002ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aea:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7ff f8d0 	bl	8001c90 <HAL_GetTick>
 8002af0:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002af2:	6823      	ldr	r3, [r4, #0]
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	d505      	bpl.n	8002b04 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002af8:	6963      	ldr	r3, [r4, #20]
 8002afa:	696a      	ldr	r2, [r5, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	6163      	str	r3, [r4, #20]
 8002b00:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b04:	f7ff f8c4 	bl	8001c90 <HAL_GetTick>
 8002b08:	1b80      	subs	r0, r0, r6
 8002b0a:	2802      	cmp	r0, #2
 8002b0c:	d9f1      	bls.n	8002af2 <RCCEx_PLLSAI2_Config+0xda>
 8002b0e:	e7db      	b.n	8002ac8 <RCCEx_PLLSAI2_Config+0xb0>
 8002b10:	40021000 	.word	0x40021000

08002b14 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002b14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b18:	6806      	ldr	r6, [r0, #0]
 8002b1a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8002b1e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b20:	d024      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b22:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002b24:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002b28:	d02c      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8002b2a:	d802      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002b2c:	b1c1      	cbz	r1, 8002b60 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8002b2e:	2601      	movs	r6, #1
 8002b30:	e01c      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002b32:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002b36:	d00d      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002b38:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002b3c:	d1f7      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b3e:	4a4d      	ldr	r2, [pc, #308]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b40:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002b42:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002b46:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002b50:	2600      	movs	r6, #0
 8002b52:	e00b      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b54:	4a47      	ldr	r2, [pc, #284]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b56:	68d3      	ldr	r3, [r2, #12]
 8002b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b5c:	60d3      	str	r3, [r2, #12]
      break;
 8002b5e:	e7ee      	b.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b60:	3004      	adds	r0, #4
 8002b62:	f7ff fecb 	bl	80028fc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b66:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	d0e8      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002b6c:	6823      	ldr	r3, [r4, #0]
 8002b6e:	04d8      	lsls	r0, r3, #19
 8002b70:	d506      	bpl.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002b72:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002b74:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002b78:	d074      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8002b7a:	d808      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b7c:	b1a9      	cbz	r1, 8002baa <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8002b7e:	2601      	movs	r6, #1
 8002b80:	4635      	mov	r5, r6
 8002b82:	e021      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002b84:	2100      	movs	r1, #0
 8002b86:	3020      	adds	r0, #32
 8002b88:	f7ff ff46 	bl	8002a18 <RCCEx_PLLSAI2_Config>
 8002b8c:	e7eb      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002b8e:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8002b92:	d004      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8002b94:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8002b98:	d1f1      	bne.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8002b9a:	4635      	mov	r5, r6
 8002b9c:	e009      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002b9e:	4a35      	ldr	r2, [pc, #212]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ba0:	68d3      	ldr	r3, [r2, #12]
 8002ba2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba6:	60d3      	str	r3, [r2, #12]
 8002ba8:	e7f7      	b.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002baa:	1d20      	adds	r0, r4, #4
 8002bac:	f7ff fea6 	bl	80028fc <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002bb0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8002bb2:	2d00      	cmp	r5, #0
 8002bb4:	d15c      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bb6:	4a2f      	ldr	r2, [pc, #188]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bb8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002bba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002bbe:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8002bc2:	430b      	orrs	r3, r1
 8002bc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	0399      	lsls	r1, r3, #14
 8002bcc:	f140 814f 	bpl.w	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bd0:	4f28      	ldr	r7, [pc, #160]	; (8002c74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bd4:	00da      	lsls	r2, r3, #3
 8002bd6:	f140 8176 	bpl.w	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8002bda:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bde:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002c78 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8002be2:	f8d9 3000 	ldr.w	r3, [r9]
 8002be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bea:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8002bee:	f7ff f84f 	bl	8001c90 <HAL_GetTick>
 8002bf2:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002bf4:	f8d9 3000 	ldr.w	r3, [r9]
 8002bf8:	05db      	lsls	r3, r3, #23
 8002bfa:	d53f      	bpl.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8002bfc:	2d00      	cmp	r5, #0
 8002bfe:	d144      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c04:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002c08:	d015      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8002c0a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d011      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c16:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002c1a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c22:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c2a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c2e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c36:	07d8      	lsls	r0, r3, #31
 8002c38:	d509      	bpl.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8002c3a:	f7ff f829 	bl	8001c90 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002c42:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c48:	0799      	lsls	r1, r3, #30
 8002c4a:	f140 8109 	bpl.w	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002c52:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002c56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c60:	4635      	mov	r5, r6
 8002c62:	e012      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002c64:	2100      	movs	r1, #0
 8002c66:	f104 0020 	add.w	r0, r4, #32
 8002c6a:	f7ff fed5 	bl	8002a18 <RCCEx_PLLSAI2_Config>
 8002c6e:	e79f      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002c70:	462e      	mov	r6, r5
 8002c72:	e7a9      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7c:	f7ff f808 	bl	8001c90 <HAL_GetTick>
 8002c80:	eba0 000a 	sub.w	r0, r0, sl
 8002c84:	2802      	cmp	r0, #2
 8002c86:	d9b5      	bls.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002c88:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002c8a:	f1b8 0f00 	cmp.w	r8, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002c92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c96:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c98:	6823      	ldr	r3, [r4, #0]
 8002c9a:	07da      	lsls	r2, r3, #31
 8002c9c:	d508      	bpl.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c9e:	4990      	ldr	r1, [pc, #576]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ca0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002ca2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ca6:	f022 0203 	bic.w	r2, r2, #3
 8002caa:	4302      	orrs	r2, r0
 8002cac:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cb0:	079f      	lsls	r7, r3, #30
 8002cb2:	d508      	bpl.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cb4:	498a      	ldr	r1, [pc, #552]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002cb6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002cb8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cbc:	f022 020c 	bic.w	r2, r2, #12
 8002cc0:	4302      	orrs	r2, r0
 8002cc2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cc6:	075e      	lsls	r6, r3, #29
 8002cc8:	d508      	bpl.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cca:	4985      	ldr	r1, [pc, #532]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ccc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002cce:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cd2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002cd6:	4302      	orrs	r2, r0
 8002cd8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cdc:	0718      	lsls	r0, r3, #28
 8002cde:	d508      	bpl.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ce0:	497f      	ldr	r1, [pc, #508]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002ce2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002ce4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002ce8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002cec:	4302      	orrs	r2, r0
 8002cee:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cf2:	06d9      	lsls	r1, r3, #27
 8002cf4:	d508      	bpl.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cf6:	497a      	ldr	r1, [pc, #488]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002cf8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002cfa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002cfe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002d02:	4302      	orrs	r2, r0
 8002d04:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d08:	069a      	lsls	r2, r3, #26
 8002d0a:	d508      	bpl.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d0c:	4974      	ldr	r1, [pc, #464]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d0e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002d10:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d14:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d18:	4302      	orrs	r2, r0
 8002d1a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d1e:	059f      	lsls	r7, r3, #22
 8002d20:	d508      	bpl.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d22:	496f      	ldr	r1, [pc, #444]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d24:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002d26:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d2a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002d2e:	4302      	orrs	r2, r0
 8002d30:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d34:	055e      	lsls	r6, r3, #21
 8002d36:	d508      	bpl.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d38:	4969      	ldr	r1, [pc, #420]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d3a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8002d3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d40:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002d44:	4302      	orrs	r2, r0
 8002d46:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d4a:	0658      	lsls	r0, r3, #25
 8002d4c:	d508      	bpl.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d4e:	4964      	ldr	r1, [pc, #400]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d50:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002d52:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d56:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d5a:	4302      	orrs	r2, r0
 8002d5c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d60:	0619      	lsls	r1, r3, #24
 8002d62:	d508      	bpl.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d64:	495e      	ldr	r1, [pc, #376]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002d68:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d6c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002d70:	4302      	orrs	r2, r0
 8002d72:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d76:	05da      	lsls	r2, r3, #23
 8002d78:	d508      	bpl.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d7a:	4959      	ldr	r1, [pc, #356]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d7e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d82:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002d86:	4302      	orrs	r2, r0
 8002d88:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d8c:	049b      	lsls	r3, r3, #18
 8002d8e:	d50f      	bpl.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d90:	4a53      	ldr	r2, [pc, #332]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002d92:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002d94:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002d98:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002d9c:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002d9e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002da2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002da6:	d164      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da8:	68d3      	ldr	r3, [r2, #12]
 8002daa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dae:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002db0:	6823      	ldr	r3, [r4, #0]
 8002db2:	031f      	lsls	r7, r3, #12
 8002db4:	d50f      	bpl.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002db6:	4a4a      	ldr	r2, [pc, #296]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002db8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002dba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002dbe:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002dc2:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dc4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002dc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002dcc:	d15c      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dce:	68d3      	ldr	r3, [r2, #12]
 8002dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dd4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	035e      	lsls	r6, r3, #13
 8002dda:	d50f      	bpl.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ddc:	4a40      	ldr	r2, [pc, #256]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002dde:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002de0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002de4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002de8:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dea:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dee:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002df2:	d154      	bne.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002df4:	68d3      	ldr	r3, [r2, #12]
 8002df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dfa:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002dfc:	6823      	ldr	r3, [r4, #0]
 8002dfe:	0458      	lsls	r0, r3, #17
 8002e00:	d512      	bpl.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e02:	4937      	ldr	r1, [pc, #220]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e04:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002e06:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e0a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002e0e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e10:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002e18:	d14c      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	1d20      	adds	r0, r4, #4
 8002e1e:	f7ff fd6d 	bl	80028fc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002e22:	2800      	cmp	r0, #0
 8002e24:	bf18      	it	ne
 8002e26:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e28:	6822      	ldr	r2, [r4, #0]
 8002e2a:	0411      	lsls	r1, r2, #16
 8002e2c:	d508      	bpl.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e2e:	492c      	ldr	r1, [pc, #176]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e30:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002e32:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002e36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e3a:	4303      	orrs	r3, r0
 8002e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e40:	03d3      	lsls	r3, r2, #15
 8002e42:	d509      	bpl.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e44:	4a26      	ldr	r2, [pc, #152]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002e46:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8002e4a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e52:	430b      	orrs	r3, r1
 8002e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002e58:	4628      	mov	r0, r5
 8002e5a:	b002      	add	sp, #8
 8002e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7fe ff16 	bl	8001c90 <HAL_GetTick>
 8002e64:	1b40      	subs	r0, r0, r5
 8002e66:	4548      	cmp	r0, r9
 8002e68:	f67f aeec 	bls.w	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002e6c:	e70c      	b.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002e6e:	4635      	mov	r5, r6
 8002e70:	e712      	b.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e72:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e76:	d19b      	bne.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e78:	2101      	movs	r1, #1
 8002e7a:	1d20      	adds	r0, r4, #4
 8002e7c:	f7ff fd3e 	bl	80028fc <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002e80:	2800      	cmp	r0, #0
 8002e82:	bf18      	it	ne
 8002e84:	4605      	movne	r5, r0
 8002e86:	e793      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002e88:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e8c:	d1a3      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e8e:	2101      	movs	r1, #1
 8002e90:	1d20      	adds	r0, r4, #4
 8002e92:	f7ff fd33 	bl	80028fc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002e96:	2800      	cmp	r0, #0
 8002e98:	bf18      	it	ne
 8002e9a:	4605      	movne	r5, r0
 8002e9c:	e79b      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e9e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002ea2:	d1ab      	bne.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ea4:	2101      	movs	r1, #1
 8002ea6:	1d20      	adds	r0, r4, #4
 8002ea8:	f7ff fd28 	bl	80028fc <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002eac:	2800      	cmp	r0, #0
 8002eae:	bf18      	it	ne
 8002eb0:	4605      	movne	r5, r0
 8002eb2:	e7a3      	b.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002eb4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002eb8:	d1b6      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002eba:	2102      	movs	r1, #2
 8002ebc:	f104 0020 	add.w	r0, r4, #32
 8002ec0:	f7ff fdaa 	bl	8002a18 <RCCEx_PLLSAI2_Config>
 8002ec4:	e7ad      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ecc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ece:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed4:	9301      	str	r3, [sp, #4]
 8002ed6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ed8:	f04f 0801 	mov.w	r8, #1
 8002edc:	e67f      	b.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0xca>
 8002ede:	bf00      	nop
 8002ee0:	40021000 	.word	0x40021000

08002ee4 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ee4:	6803      	ldr	r3, [r0, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002eec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eee:	6842      	ldr	r2, [r0, #4]
 8002ef0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002ef4:	d10a      	bne.n	8002f0c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8002ef6:	6882      	ldr	r2, [r0, #8]
 8002ef8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002efc:	d002      	beq.n	8002f04 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002efe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002f02:	d103      	bne.n	8002f0c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f0c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8002f0e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002f12:	d107      	bne.n	8002f24 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f22:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f24:	2301      	movs	r3, #1
 8002f26:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8002f30:	2003      	movs	r0, #3
 8002f32:	4770      	bx	lr

08002f34 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002f34:	b570      	push	{r4, r5, r6, lr}
 8002f36:	4604      	mov	r4, r0
 8002f38:	460d      	mov	r5, r1
 8002f3a:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	6898      	ldr	r0, [r3, #8]
 8002f40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002f44:	d100      	bne.n	8002f48 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002f48:	1c6a      	adds	r2, r5, #1
 8002f4a:	d0f8      	beq.n	8002f3e <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f4c:	f7fe fea0 	bl	8001c90 <HAL_GetTick>
 8002f50:	1b80      	subs	r0, r0, r6
 8002f52:	4285      	cmp	r5, r0
 8002f54:	d8f2      	bhi.n	8002f3c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8002f56:	4620      	mov	r0, r4
}
 8002f58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002f5c:	f7ff bfc2 	b.w	8002ee4 <SPI_WaitFifoStateUntilTimeout.part.1>

08002f60 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f62:	4605      	mov	r5, r0
 8002f64:	460c      	mov	r4, r1
 8002f66:	4616      	mov	r6, r2
 8002f68:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8002f6a:	6829      	ldr	r1, [r5, #0]
 8002f6c:	6888      	ldr	r0, [r1, #8]
 8002f6e:	4020      	ands	r0, r4
 8002f70:	d100      	bne.n	8002f74 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 8002f72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f74:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002f78:	bf08      	it	eq
 8002f7a:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8002f7c:	1c73      	adds	r3, r6, #1
 8002f7e:	d0f5      	beq.n	8002f6c <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002f80:	f7fe fe86 	bl	8001c90 <HAL_GetTick>
 8002f84:	1bc0      	subs	r0, r0, r7
 8002f86:	4286      	cmp	r6, r0
 8002f88:	d8ef      	bhi.n	8002f6a <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8002f8a:	4628      	mov	r0, r5
}
 8002f8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f90:	f7ff bfa8 	b.w	8002ee4 <SPI_WaitFifoStateUntilTimeout.part.1>

08002f94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f94:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f96:	4613      	mov	r3, r2
{
 8002f98:	460d      	mov	r5, r1
 8002f9a:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f9c:	460a      	mov	r2, r1
 8002f9e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8002fa2:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fa4:	f7ff ffdc 	bl	8002f60 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002fa8:	b128      	cbz	r0, 8002fb6 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002faa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002fac:	f043 0320 	orr.w	r3, r3, #32
 8002fb0:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8002fb2:	2003      	movs	r0, #3
 8002fb4:	e00f      	b.n	8002fd6 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fb6:	4632      	mov	r2, r6
 8002fb8:	4629      	mov	r1, r5
 8002fba:	4620      	mov	r0, r4
 8002fbc:	f7ff ffba 	bl	8002f34 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d1f2      	bne.n	8002faa <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002fc4:	4633      	mov	r3, r6
 8002fc6:	462a      	mov	r2, r5
 8002fc8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f7ff ffc7 	bl	8002f60 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002fd2:	2800      	cmp	r0, #0
 8002fd4:	d1e9      	bne.n	8002faa <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002fd6:	bd70      	pop	{r4, r5, r6, pc}

08002fd8 <HAL_SPI_MspInit>:
 8002fd8:	4770      	bx	lr

08002fda <HAL_SPI_Init>:
{
 8002fda:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002fdc:	4604      	mov	r4, r0
 8002fde:	2800      	cmp	r0, #0
 8002fe0:	d04a      	beq.n	8003078 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fe6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002fea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fee:	b91b      	cbnz	r3, 8002ff8 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002ff0:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002ff4:	f7ff fff0 	bl	8002fd8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ff8:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002ffa:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002ffc:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8003000:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003002:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8003004:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003008:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800300c:	600b      	str	r3, [r1, #0]
 800300e:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003012:	d92e      	bls.n	8003072 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003014:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003016:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800301a:	bf18      	it	ne
 800301c:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800301e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003020:	b92b      	cbnz	r3, 800302e <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003022:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003026:	bf8c      	ite	hi
 8003028:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800302a:	2301      	movls	r3, #1
 800302c:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800302e:	68a6      	ldr	r6, [r4, #8]
 8003030:	6863      	ldr	r3, [r4, #4]
 8003032:	69a5      	ldr	r5, [r4, #24]
 8003034:	4333      	orrs	r3, r6
 8003036:	6926      	ldr	r6, [r4, #16]
 8003038:	4333      	orrs	r3, r6
 800303a:	6966      	ldr	r6, [r4, #20]
 800303c:	4333      	orrs	r3, r6
 800303e:	69e6      	ldr	r6, [r4, #28]
 8003040:	4333      	orrs	r3, r6
 8003042:	6a26      	ldr	r6, [r4, #32]
 8003044:	4333      	orrs	r3, r6
 8003046:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003048:	4333      	orrs	r3, r6
 800304a:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800304e:	4333      	orrs	r3, r6
 8003050:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003052:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003054:	431a      	orrs	r2, r3
 8003056:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003058:	0c2d      	lsrs	r5, r5, #16
 800305a:	431a      	orrs	r2, r3
 800305c:	f005 0504 	and.w	r5, r5, #4
 8003060:	432a      	orrs	r2, r5
 8003062:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8003064:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003066:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8003068:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800306a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800306c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8003070:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003072:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003076:	e7d0      	b.n	800301a <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8003078:	2001      	movs	r0, #1
}
 800307a:	bd70      	pop	{r4, r5, r6, pc}

0800307c <HAL_SPI_TransmitReceive>:
{
 800307c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003080:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8003082:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8003086:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8003088:	2b01      	cmp	r3, #1
{
 800308a:	4604      	mov	r4, r0
 800308c:	460d      	mov	r5, r1
 800308e:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8003090:	f000 8115 	beq.w	80032be <HAL_SPI_TransmitReceive+0x242>
 8003094:	2301      	movs	r3, #1
 8003096:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800309a:	f7fe fdf9 	bl	8001c90 <HAL_GetTick>
  tmp_state           = hspi->State;
 800309e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 80030a2:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80030a4:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030a6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80030a8:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030aa:	d00a      	beq.n	80030c2 <HAL_SPI_TransmitReceive+0x46>
 80030ac:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80030b0:	f040 8103 	bne.w	80032ba <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030b4:	68a0      	ldr	r0, [r4, #8]
 80030b6:	2800      	cmp	r0, #0
 80030b8:	f040 80ff 	bne.w	80032ba <HAL_SPI_TransmitReceive+0x23e>
 80030bc:	2b04      	cmp	r3, #4
 80030be:	f040 80fc 	bne.w	80032ba <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80030c2:	2d00      	cmp	r5, #0
 80030c4:	d049      	beq.n	800315a <HAL_SPI_TransmitReceive+0xde>
 80030c6:	f1b9 0f00 	cmp.w	r9, #0
 80030ca:	d046      	beq.n	800315a <HAL_SPI_TransmitReceive+0xde>
 80030cc:	2e00      	cmp	r6, #0
 80030ce:	d044      	beq.n	800315a <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030d0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030d4:	68e2      	ldr	r2, [r4, #12]
 80030d6:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80030d8:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80030dc:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80030de:	bf1c      	itt	ne
 80030e0:	2305      	movne	r3, #5
 80030e2:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030e6:	2300      	movs	r3, #0
 80030e8:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80030ea:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 80030ee:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 80030f2:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80030f4:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80030f6:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80030f8:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80030fc:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80030fe:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003100:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003102:	d801      	bhi.n	8003108 <HAL_SPI_TransmitReceive+0x8c>
 8003104:	2e01      	cmp	r6, #1
 8003106:	d92a      	bls.n	800315e <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003108:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800310c:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800310e:	6803      	ldr	r3, [r0, #0]
 8003110:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8003112:	bf5e      	ittt	pl
 8003114:	6803      	ldrpl	r3, [r0, #0]
 8003116:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800311a:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800311c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8003120:	d956      	bls.n	80031d0 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003122:	b109      	cbz	r1, 8003128 <HAL_SPI_TransmitReceive+0xac>
 8003124:	2e01      	cmp	r6, #1
 8003126:	d107      	bne.n	8003138 <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003128:	f835 3b02 	ldrh.w	r3, [r5], #2
 800312c:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 800312e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003130:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003132:	3b01      	subs	r3, #1
 8003134:	b29b      	uxth	r3, r3
 8003136:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8003138:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800313a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800313c:	b29b      	uxth	r3, r3
 800313e:	b98b      	cbnz	r3, 8003164 <HAL_SPI_TransmitReceive+0xe8>
 8003140:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003144:	b29b      	uxth	r3, r3
 8003146:	b96b      	cbnz	r3, 8003164 <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003148:	4642      	mov	r2, r8
 800314a:	4639      	mov	r1, r7
 800314c:	4620      	mov	r0, r4
 800314e:	f7ff ff21 	bl	8002f94 <SPI_EndRxTxTransaction>
 8003152:	2800      	cmp	r0, #0
 8003154:	d034      	beq.n	80031c0 <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003156:	2320      	movs	r3, #32
 8003158:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800315a:	2001      	movs	r0, #1
 800315c:	e030      	b.n	80031c0 <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800315e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003162:	e7d3      	b.n	800310c <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003164:	6822      	ldr	r2, [r4, #0]
 8003166:	6893      	ldr	r3, [r2, #8]
 8003168:	0799      	lsls	r1, r3, #30
 800316a:	d50d      	bpl.n	8003188 <HAL_SPI_TransmitReceive+0x10c>
 800316c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800316e:	b29b      	uxth	r3, r3
 8003170:	b153      	cbz	r3, 8003188 <HAL_SPI_TransmitReceive+0x10c>
 8003172:	b14d      	cbz	r5, 8003188 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003174:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003176:	f833 1b02 	ldrh.w	r1, [r3], #2
 800317a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800317c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800317e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003180:	3b01      	subs	r3, #1
 8003182:	b29b      	uxth	r3, r3
 8003184:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8003186:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003188:	6893      	ldr	r3, [r2, #8]
 800318a:	07db      	lsls	r3, r3, #31
 800318c:	d50f      	bpl.n	80031ae <HAL_SPI_TransmitReceive+0x132>
 800318e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003192:	b29b      	uxth	r3, r3
 8003194:	b15b      	cbz	r3, 80031ae <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003198:	68d2      	ldr	r2, [r2, #12]
 800319a:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800319e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80031a0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80031ac:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80031ae:	f7fe fd6f 	bl	8001c90 <HAL_GetTick>
 80031b2:	eba0 0008 	sub.w	r0, r0, r8
 80031b6:	4287      	cmp	r7, r0
 80031b8:	d8bf      	bhi.n	800313a <HAL_SPI_TransmitReceive+0xbe>
 80031ba:	1c7e      	adds	r6, r7, #1
 80031bc:	d0bd      	beq.n	800313a <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 80031be:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80031c0:	2301      	movs	r3, #1
 80031c2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80031c6:	2300      	movs	r3, #0
 80031c8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80031cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031d0:	b109      	cbz	r1, 80031d6 <HAL_SPI_TransmitReceive+0x15a>
 80031d2:	2e01      	cmp	r6, #1
 80031d4:	d10b      	bne.n	80031ee <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 80031d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031d8:	b29b      	uxth	r3, r3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d951      	bls.n	8003282 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031de:	f835 3b02 	ldrh.w	r3, [r5], #2
 80031e2:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 80031e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e6:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031e8:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80031ee:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031f0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	b923      	cbnz	r3, 8003200 <HAL_SPI_TransmitReceive+0x184>
 80031f6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d0a3      	beq.n	8003148 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003200:	6822      	ldr	r2, [r4, #0]
 8003202:	6893      	ldr	r3, [r2, #8]
 8003204:	0798      	lsls	r0, r3, #30
 8003206:	d511      	bpl.n	800322c <HAL_SPI_TransmitReceive+0x1b0>
 8003208:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800320a:	b29b      	uxth	r3, r3
 800320c:	b173      	cbz	r3, 800322c <HAL_SPI_TransmitReceive+0x1b0>
 800320e:	b16d      	cbz	r5, 800322c <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 8003210:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003218:	d93b      	bls.n	8003292 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800321a:	f833 1b02 	ldrh.w	r1, [r3], #2
 800321e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003220:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003222:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003224:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8003226:	b29b      	uxth	r3, r3
 8003228:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 800322a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800322c:	6822      	ldr	r2, [r4, #0]
 800322e:	6893      	ldr	r3, [r2, #8]
 8003230:	07d9      	lsls	r1, r3, #31
 8003232:	d51d      	bpl.n	8003270 <HAL_SPI_TransmitReceive+0x1f4>
 8003234:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003238:	b29b      	uxth	r3, r3
 800323a:	b1cb      	cbz	r3, 8003270 <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 800323c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003246:	d92c      	bls.n	80032a2 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003248:	68d1      	ldr	r1, [r2, #12]
 800324a:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800324e:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003250:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003254:	3b02      	subs	r3, #2
 8003256:	b29b      	uxth	r3, r3
 8003258:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800325c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003260:	b29b      	uxth	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	d803      	bhi.n	800326e <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003266:	6853      	ldr	r3, [r2, #4]
 8003268:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800326c:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800326e:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003270:	f7fe fd0e 	bl	8001c90 <HAL_GetTick>
 8003274:	eba0 0008 	sub.w	r0, r0, r8
 8003278:	4287      	cmp	r7, r0
 800327a:	d8b9      	bhi.n	80031f0 <HAL_SPI_TransmitReceive+0x174>
 800327c:	1c7b      	adds	r3, r7, #1
 800327e:	d0b7      	beq.n	80031f0 <HAL_SPI_TransmitReceive+0x174>
 8003280:	e79d      	b.n	80031be <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003282:	782b      	ldrb	r3, [r5, #0]
 8003284:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 8003286:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003288:	3301      	adds	r3, #1
 800328a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800328c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800328e:	3b01      	subs	r3, #1
 8003290:	e7ab      	b.n	80031ea <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8003296:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003298:	3301      	adds	r3, #1
 800329a:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800329c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800329e:	3b01      	subs	r3, #1
 80032a0:	e7c1      	b.n	8003226 <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032a2:	7b12      	ldrb	r2, [r2, #12]
 80032a4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80032a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80032a8:	3301      	adds	r3, #1
 80032aa:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80032ac:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80032b8:	e7d9      	b.n	800326e <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 80032ba:	2002      	movs	r0, #2
 80032bc:	e780      	b.n	80031c0 <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 80032be:	2002      	movs	r0, #2
}
 80032c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080032c4 <HAL_SPI_GetState>:
  return hspi->State;
 80032c4:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 80032c8:	4770      	bx	lr

080032ca <HAL_TIM_Base_MspInit>:
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032cc:	6803      	ldr	r3, [r0, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032d6:	6899      	ldr	r1, [r3, #8]
 80032d8:	4a06      	ldr	r2, [pc, #24]	; (80032f4 <HAL_TIM_Base_Start_IT+0x28>)
 80032da:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032dc:	2a06      	cmp	r2, #6
 80032de:	d006      	beq.n	80032ee <HAL_TIM_Base_Start_IT+0x22>
 80032e0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 80032e4:	bf1e      	ittt	ne
 80032e6:	681a      	ldrne	r2, [r3, #0]
 80032e8:	f042 0201 	orrne.w	r2, r2, #1
 80032ec:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80032ee:	2000      	movs	r0, #0
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	00010007 	.word	0x00010007

080032f8 <HAL_TIM_OC_DelayElapsedCallback>:
 80032f8:	4770      	bx	lr

080032fa <HAL_TIM_IC_CaptureCallback>:
 80032fa:	4770      	bx	lr

080032fc <HAL_TIM_PWM_PulseFinishedCallback>:
 80032fc:	4770      	bx	lr

080032fe <HAL_TIM_TriggerCallback>:
 80032fe:	4770      	bx	lr

08003300 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003300:	6803      	ldr	r3, [r0, #0]
 8003302:	691a      	ldr	r2, [r3, #16]
 8003304:	0791      	lsls	r1, r2, #30
{
 8003306:	b510      	push	{r4, lr}
 8003308:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800330a:	d50f      	bpl.n	800332c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800330c:	68da      	ldr	r2, [r3, #12]
 800330e:	0792      	lsls	r2, r2, #30
 8003310:	d50c      	bpl.n	800332c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003312:	f06f 0202 	mvn.w	r2, #2
 8003316:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003318:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800331a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800331c:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800331e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003320:	f000 8085 	beq.w	800342e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003324:	f7ff ffe9 	bl	80032fa <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003328:	2300      	movs	r3, #0
 800332a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	0752      	lsls	r2, r2, #29
 8003332:	d510      	bpl.n	8003356 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003334:	68da      	ldr	r2, [r3, #12]
 8003336:	0750      	lsls	r0, r2, #29
 8003338:	d50d      	bpl.n	8003356 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800333a:	f06f 0204 	mvn.w	r2, #4
 800333e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003340:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003342:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003344:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003348:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800334a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800334c:	d075      	beq.n	800343a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800334e:	f7ff ffd4 	bl	80032fa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003352:	2300      	movs	r3, #0
 8003354:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003356:	6823      	ldr	r3, [r4, #0]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	0711      	lsls	r1, r2, #28
 800335c:	d50f      	bpl.n	800337e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	0712      	lsls	r2, r2, #28
 8003362:	d50c      	bpl.n	800337e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003364:	f06f 0208 	mvn.w	r2, #8
 8003368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800336a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800336c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800336e:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003370:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003372:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003374:	d067      	beq.n	8003446 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8003376:	f7ff ffc0 	bl	80032fa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337a:	2300      	movs	r3, #0
 800337c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800337e:	6823      	ldr	r3, [r4, #0]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	06d0      	lsls	r0, r2, #27
 8003384:	d510      	bpl.n	80033a8 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003386:	68da      	ldr	r2, [r3, #12]
 8003388:	06d1      	lsls	r1, r2, #27
 800338a:	d50d      	bpl.n	80033a8 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800338c:	f06f 0210 	mvn.w	r2, #16
 8003390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003392:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003394:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003396:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800339a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800339c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800339e:	d058      	beq.n	8003452 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80033a0:	f7ff ffab 	bl	80032fa <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033a4:	2300      	movs	r3, #0
 80033a6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80033a8:	6823      	ldr	r3, [r4, #0]
 80033aa:	691a      	ldr	r2, [r3, #16]
 80033ac:	07d2      	lsls	r2, r2, #31
 80033ae:	d508      	bpl.n	80033c2 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	07d0      	lsls	r0, r2, #31
 80033b4:	d505      	bpl.n	80033c2 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80033b6:	f06f 0201 	mvn.w	r2, #1
 80033ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033bc:	4620      	mov	r0, r4
 80033be:	f003 faed 	bl	800699c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80033c2:	6823      	ldr	r3, [r4, #0]
 80033c4:	691a      	ldr	r2, [r3, #16]
 80033c6:	0611      	lsls	r1, r2, #24
 80033c8:	d508      	bpl.n	80033dc <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	0612      	lsls	r2, r2, #24
 80033ce:	d505      	bpl.n	80033dc <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80033d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80033d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80033d6:	4620      	mov	r0, r4
 80033d8:	f000 f8c3 	bl	8003562 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80033dc:	6823      	ldr	r3, [r4, #0]
 80033de:	691a      	ldr	r2, [r3, #16]
 80033e0:	05d0      	lsls	r0, r2, #23
 80033e2:	d508      	bpl.n	80033f6 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	0611      	lsls	r1, r2, #24
 80033e8:	d505      	bpl.n	80033f6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80033ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80033ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80033f0:	4620      	mov	r0, r4
 80033f2:	f000 f8b7 	bl	8003564 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80033f6:	6823      	ldr	r3, [r4, #0]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	0652      	lsls	r2, r2, #25
 80033fc:	d508      	bpl.n	8003410 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	0650      	lsls	r0, r2, #25
 8003402:	d505      	bpl.n	8003410 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003404:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800340a:	4620      	mov	r0, r4
 800340c:	f7ff ff77 	bl	80032fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003410:	6823      	ldr	r3, [r4, #0]
 8003412:	691a      	ldr	r2, [r3, #16]
 8003414:	0691      	lsls	r1, r2, #26
 8003416:	d522      	bpl.n	800345e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	0692      	lsls	r2, r2, #26
 800341c:	d51f      	bpl.n	800345e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800341e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003422:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003424:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800342a:	f000 b899 	b.w	8003560 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800342e:	f7ff ff63 	bl	80032f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003432:	4620      	mov	r0, r4
 8003434:	f7ff ff62 	bl	80032fc <HAL_TIM_PWM_PulseFinishedCallback>
 8003438:	e776      	b.n	8003328 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	f7ff ff5d 	bl	80032f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800343e:	4620      	mov	r0, r4
 8003440:	f7ff ff5c 	bl	80032fc <HAL_TIM_PWM_PulseFinishedCallback>
 8003444:	e785      	b.n	8003352 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	f7ff ff57 	bl	80032f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344a:	4620      	mov	r0, r4
 800344c:	f7ff ff56 	bl	80032fc <HAL_TIM_PWM_PulseFinishedCallback>
 8003450:	e793      	b.n	800337a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	f7ff ff51 	bl	80032f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003456:	4620      	mov	r0, r4
 8003458:	f7ff ff50 	bl	80032fc <HAL_TIM_PWM_PulseFinishedCallback>
 800345c:	e7a2      	b.n	80033a4 <HAL_TIM_IRQHandler+0xa4>
 800345e:	bd10      	pop	{r4, pc}

08003460 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003460:	4a30      	ldr	r2, [pc, #192]	; (8003524 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8003462:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003464:	4290      	cmp	r0, r2
 8003466:	d012      	beq.n	800348e <TIM_Base_SetConfig+0x2e>
 8003468:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800346c:	d00f      	beq.n	800348e <TIM_Base_SetConfig+0x2e>
 800346e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003472:	4290      	cmp	r0, r2
 8003474:	d00b      	beq.n	800348e <TIM_Base_SetConfig+0x2e>
 8003476:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800347a:	4290      	cmp	r0, r2
 800347c:	d007      	beq.n	800348e <TIM_Base_SetConfig+0x2e>
 800347e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003482:	4290      	cmp	r0, r2
 8003484:	d003      	beq.n	800348e <TIM_Base_SetConfig+0x2e>
 8003486:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 800348a:	4290      	cmp	r0, r2
 800348c:	d119      	bne.n	80034c2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800348e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003490:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8003494:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003496:	4a23      	ldr	r2, [pc, #140]	; (8003524 <TIM_Base_SetConfig+0xc4>)
 8003498:	4290      	cmp	r0, r2
 800349a:	d01d      	beq.n	80034d8 <TIM_Base_SetConfig+0x78>
 800349c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80034a0:	d01a      	beq.n	80034d8 <TIM_Base_SetConfig+0x78>
 80034a2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80034a6:	4290      	cmp	r0, r2
 80034a8:	d016      	beq.n	80034d8 <TIM_Base_SetConfig+0x78>
 80034aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034ae:	4290      	cmp	r0, r2
 80034b0:	d012      	beq.n	80034d8 <TIM_Base_SetConfig+0x78>
 80034b2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034b6:	4290      	cmp	r0, r2
 80034b8:	d00e      	beq.n	80034d8 <TIM_Base_SetConfig+0x78>
 80034ba:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 80034be:	4290      	cmp	r0, r2
 80034c0:	d00a      	beq.n	80034d8 <TIM_Base_SetConfig+0x78>
 80034c2:	4a19      	ldr	r2, [pc, #100]	; (8003528 <TIM_Base_SetConfig+0xc8>)
 80034c4:	4290      	cmp	r0, r2
 80034c6:	d007      	beq.n	80034d8 <TIM_Base_SetConfig+0x78>
 80034c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034cc:	4290      	cmp	r0, r2
 80034ce:	d003      	beq.n	80034d8 <TIM_Base_SetConfig+0x78>
 80034d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034d4:	4290      	cmp	r0, r2
 80034d6:	d103      	bne.n	80034e0 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034d8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80034da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034de:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034e0:	694a      	ldr	r2, [r1, #20]
 80034e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e6:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80034e8:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034ea:	688b      	ldr	r3, [r1, #8]
 80034ec:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ee:	680b      	ldr	r3, [r1, #0]
 80034f0:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f2:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <TIM_Base_SetConfig+0xc4>)
 80034f4:	4298      	cmp	r0, r3
 80034f6:	d00f      	beq.n	8003518 <TIM_Base_SetConfig+0xb8>
 80034f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fc:	4298      	cmp	r0, r3
 80034fe:	d00b      	beq.n	8003518 <TIM_Base_SetConfig+0xb8>
 8003500:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8003504:	4298      	cmp	r0, r3
 8003506:	d007      	beq.n	8003518 <TIM_Base_SetConfig+0xb8>
 8003508:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800350c:	4298      	cmp	r0, r3
 800350e:	d003      	beq.n	8003518 <TIM_Base_SetConfig+0xb8>
 8003510:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003514:	4298      	cmp	r0, r3
 8003516:	d101      	bne.n	800351c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003518:	690b      	ldr	r3, [r1, #16]
 800351a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800351c:	2301      	movs	r3, #1
 800351e:	6143      	str	r3, [r0, #20]
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop
 8003524:	40012c00 	.word	0x40012c00
 8003528:	40014000 	.word	0x40014000

0800352c <HAL_TIM_Base_Init>:
{
 800352c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800352e:	4604      	mov	r4, r0
 8003530:	b1a0      	cbz	r0, 800355c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003532:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003536:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800353a:	b91b      	cbnz	r3, 8003544 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800353c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8003540:	f7ff fec3 	bl	80032ca <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	2302      	movs	r3, #2
 8003546:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354a:	6820      	ldr	r0, [r4, #0]
 800354c:	1d21      	adds	r1, r4, #4
 800354e:	f7ff ff87 	bl	8003460 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8003552:	2301      	movs	r3, #1
 8003554:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003558:	2000      	movs	r0, #0
 800355a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800355c:	2001      	movs	r0, #1
}
 800355e:	bd10      	pop	{r4, pc}

08003560 <HAL_TIMEx_CommutCallback>:
 8003560:	4770      	bx	lr

08003562 <HAL_TIMEx_BreakCallback>:
 8003562:	4770      	bx	lr

08003564 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003564:	4770      	bx	lr
	...

08003568 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003568:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800356a:	69c1      	ldr	r1, [r0, #28]
{
 800356c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800356e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003570:	6883      	ldr	r3, [r0, #8]
 8003572:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003574:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003576:	4303      	orrs	r3, r0
 8003578:	6960      	ldr	r0, [r4, #20]
 800357a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800357c:	48ba      	ldr	r0, [pc, #744]	; (8003868 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800357e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003580:	4028      	ands	r0, r5
 8003582:	4303      	orrs	r3, r0
 8003584:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003586:	6853      	ldr	r3, [r2, #4]
 8003588:	68e0      	ldr	r0, [r4, #12]
 800358a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800358e:	4303      	orrs	r3, r0
 8003590:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003592:	4bb6      	ldr	r3, [pc, #728]	; (800386c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003594:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003596:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003598:	bf1c      	itt	ne
 800359a:	6a23      	ldrne	r3, [r4, #32]
 800359c:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800359e:	6893      	ldr	r3, [r2, #8]
 80035a0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035a4:	4303      	orrs	r3, r0
 80035a6:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035a8:	4bb1      	ldr	r3, [pc, #708]	; (8003870 <UART_SetConfig+0x308>)
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d119      	bne.n	80035e2 <UART_SetConfig+0x7a>
 80035ae:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80035b2:	4ab0      	ldr	r2, [pc, #704]	; (8003874 <UART_SetConfig+0x30c>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b8:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035bc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80035c0:	5cd3      	ldrb	r3, [r2, r3]
 80035c2:	f040 8138 	bne.w	8003836 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	f200 808f 	bhi.w	80036ea <UART_SetConfig+0x182>
 80035cc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80035d0:	00ca011a 	.word	0x00ca011a
 80035d4:	008d00f9 	.word	0x008d00f9
 80035d8:	008d0114 	.word	0x008d0114
 80035dc:	008d008d 	.word	0x008d008d
 80035e0:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035e2:	4ba5      	ldr	r3, [pc, #660]	; (8003878 <UART_SetConfig+0x310>)
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d107      	bne.n	80035f8 <UART_SetConfig+0x90>
 80035e8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 80035ec:	4aa3      	ldr	r2, [pc, #652]	; (800387c <UART_SetConfig+0x314>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	e7e1      	b.n	80035bc <UART_SetConfig+0x54>
 80035f8:	4ba1      	ldr	r3, [pc, #644]	; (8003880 <UART_SetConfig+0x318>)
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d123      	bne.n	8003646 <UART_SetConfig+0xde>
 80035fe:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800360a:	2b10      	cmp	r3, #16
 800360c:	f000 80f1 	beq.w	80037f2 <UART_SetConfig+0x28a>
 8003610:	d80b      	bhi.n	800362a <UART_SetConfig+0xc2>
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80f3 	beq.w	80037fe <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003618:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      default:
        ret = HAL_ERROR;
 800361c:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003620:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003624:	f000 80f8 	beq.w	8003818 <UART_SetConfig+0x2b0>
 8003628:	e0a8      	b.n	800377c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800362a:	2b20      	cmp	r3, #32
 800362c:	f000 80c6 	beq.w	80037bc <UART_SetConfig+0x254>
 8003630:	2b30      	cmp	r3, #48	; 0x30
 8003632:	d1f1      	bne.n	8003618 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003634:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003638:	f040 80b8 	bne.w	80037ac <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800363c:	6860      	ldr	r0, [r4, #4]
 800363e:	0843      	lsrs	r3, r0, #1
 8003640:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003644:	e0c3      	b.n	80037ce <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003646:	4b8f      	ldr	r3, [pc, #572]	; (8003884 <UART_SetConfig+0x31c>)
 8003648:	429a      	cmp	r2, r3
 800364a:	d11e      	bne.n	800368a <UART_SetConfig+0x122>
 800364c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003658:	2b40      	cmp	r3, #64	; 0x40
 800365a:	f000 80bb 	beq.w	80037d4 <UART_SetConfig+0x26c>
 800365e:	d80a      	bhi.n	8003676 <UART_SetConfig+0x10e>
 8003660:	b97b      	cbnz	r3, 8003682 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003662:	4b82      	ldr	r3, [pc, #520]	; (800386c <UART_SetConfig+0x304>)
 8003664:	429a      	cmp	r2, r3
 8003666:	f040 80ca 	bne.w	80037fe <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800366a:	f7ff f905 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
        break;
 800366e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8003670:	bbb0      	cbnz	r0, 80036e0 <UART_SetConfig+0x178>
 8003672:	4602      	mov	r2, r0
 8003674:	e03a      	b.n	80036ec <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003676:	2b80      	cmp	r3, #128	; 0x80
 8003678:	f000 809d 	beq.w	80037b6 <UART_SetConfig+0x24e>
 800367c:	2bc0      	cmp	r3, #192	; 0xc0
 800367e:	f000 80b0 	beq.w	80037e2 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003682:	4b7a      	ldr	r3, [pc, #488]	; (800386c <UART_SetConfig+0x304>)
 8003684:	429a      	cmp	r2, r3
 8003686:	d1c7      	bne.n	8003618 <UART_SetConfig+0xb0>
 8003688:	e02f      	b.n	80036ea <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368a:	4b7f      	ldr	r3, [pc, #508]	; (8003888 <UART_SetConfig+0x320>)
 800368c:	429a      	cmp	r2, r3
 800368e:	d111      	bne.n	80036b4 <UART_SetConfig+0x14c>
 8003690:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8003694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003698:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a0:	f000 8098 	beq.w	80037d4 <UART_SetConfig+0x26c>
 80036a4:	d9dc      	bls.n	8003660 <UART_SetConfig+0xf8>
 80036a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036aa:	f000 8084 	beq.w	80037b6 <UART_SetConfig+0x24e>
 80036ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036b2:	e7e4      	b.n	800367e <UART_SetConfig+0x116>
 80036b4:	4b6d      	ldr	r3, [pc, #436]	; (800386c <UART_SetConfig+0x304>)
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d1ae      	bne.n	8003618 <UART_SetConfig+0xb0>
 80036ba:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ca:	f000 8083 	beq.w	80037d4 <UART_SetConfig+0x26c>
 80036ce:	d9c7      	bls.n	8003660 <UART_SetConfig+0xf8>
 80036d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036d4:	d06f      	beq.n	80037b6 <UART_SetConfig+0x24e>
 80036d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036da:	e7d0      	b.n	800367e <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80036dc:	486b      	ldr	r0, [pc, #428]	; (800388c <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 80036de:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036e0:	6862      	ldr	r2, [r4, #4]
 80036e2:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80036e6:	4281      	cmp	r1, r0
 80036e8:	d905      	bls.n	80036f6 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 80036ea:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036ec:	2300      	movs	r3, #0
 80036ee:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 80036f0:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 80036f2:	4610      	mov	r0, r2
 80036f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80036f6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80036fa:	d8f6      	bhi.n	80036ea <UART_SetConfig+0x182>
        switch (clocksource)
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d82e      	bhi.n	800375e <UART_SetConfig+0x1f6>
 8003700:	e8df f003 	tbb	[pc, r3]
 8003704:	2d1c2d05 	.word	0x2d1c2d05
 8003708:	2d2d2d24 	.word	0x2d2d2d24
 800370c:	27          	.byte	0x27
 800370d:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 800370e:	f7ff f8b3 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003712:	6862      	ldr	r2, [r4, #4]
 8003714:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003718:	0856      	lsrs	r6, r2, #1
 800371a:	2700      	movs	r7, #0
 800371c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8003720:	2300      	movs	r3, #0
 8003722:	4630      	mov	r0, r6
 8003724:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003726:	f7fd f98d 	bl	8000a44 <__aeabi_uldivmod>
            break;
 800372a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800372c:	4b58      	ldr	r3, [pc, #352]	; (8003890 <UART_SetConfig+0x328>)
 800372e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8003732:	4299      	cmp	r1, r3
 8003734:	d8d9      	bhi.n	80036ea <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8003736:	6823      	ldr	r3, [r4, #0]
 8003738:	60d8      	str	r0, [r3, #12]
 800373a:	e7d7      	b.n	80036ec <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800373c:	4855      	ldr	r0, [pc, #340]	; (8003894 <UART_SetConfig+0x32c>)
 800373e:	0855      	lsrs	r5, r2, #1
 8003740:	2300      	movs	r3, #0
 8003742:	2100      	movs	r1, #0
 8003744:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003746:	f141 0100 	adc.w	r1, r1, #0
 800374a:	e7ec      	b.n	8003726 <UART_SetConfig+0x1be>
            pclk = HAL_RCC_GetSysClockFreq();
 800374c:	f7fe fd24 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 8003750:	e7df      	b.n	8003712 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8003752:	0850      	lsrs	r0, r2, #1
 8003754:	2100      	movs	r1, #0
 8003756:	2300      	movs	r3, #0
 8003758:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 800375c:	e7f3      	b.n	8003746 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 800375e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003760:	2000      	movs	r0, #0
 8003762:	e7e3      	b.n	800372c <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003764:	f7ff f89a 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 8003768:	e04e      	b.n	8003808 <UART_SetConfig+0x2a0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800376a:	f7ff f885 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800376e:	6862      	ldr	r2, [r4, #4]
 8003770:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003774:	fbb3 f3f2 	udiv	r3, r3, r2
 8003778:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800377a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800377c:	f1a3 0010 	sub.w	r0, r3, #16
 8003780:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003784:	4288      	cmp	r0, r1
 8003786:	d8b0      	bhi.n	80036ea <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8003788:	6821      	ldr	r1, [r4, #0]
 800378a:	60cb      	str	r3, [r1, #12]
 800378c:	e7ae      	b.n	80036ec <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK2Freq();
 800378e:	f7ff f885 	bl	800289c <HAL_RCC_GetPCLK2Freq>
 8003792:	e7ec      	b.n	800376e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003794:	6860      	ldr	r0, [r4, #4]
 8003796:	0843      	lsrs	r3, r0, #1
 8003798:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800379c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037a0:	fbb3 f3f0 	udiv	r3, r3, r0
 80037a4:	e7e8      	b.n	8003778 <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetSysClockFreq();
 80037a6:	f7fe fcf7 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 80037aa:	e7e0      	b.n	800376e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80037ac:	6860      	ldr	r0, [r4, #4]
 80037ae:	0843      	lsrs	r3, r0, #1
 80037b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80037b4:	e7f4      	b.n	80037a0 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 80037b6:	4b2d      	ldr	r3, [pc, #180]	; (800386c <UART_SetConfig+0x304>)
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d08f      	beq.n	80036dc <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037bc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80037c0:	d1e8      	bne.n	8003794 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80037c2:	6860      	ldr	r0, [r4, #4]
 80037c4:	0843      	lsrs	r3, r0, #1
 80037c6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80037ca:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80037d2:	e01f      	b.n	8003814 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 80037d4:	4b25      	ldr	r3, [pc, #148]	; (800386c <UART_SetConfig+0x304>)
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d10b      	bne.n	80037f2 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80037da:	f7fe fcdd 	bl	8002198 <HAL_RCC_GetSysClockFreq>
        break;
 80037de:	2304      	movs	r3, #4
 80037e0:	e746      	b.n	8003670 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 80037e2:	4b22      	ldr	r3, [pc, #136]	; (800386c <UART_SetConfig+0x304>)
 80037e4:	429a      	cmp	r2, r3
 80037e6:	f47f af25 	bne.w	8003634 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 80037ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ee:	2308      	movs	r3, #8
 80037f0:	e776      	b.n	80036e0 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037f2:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80037f6:	d1d6      	bne.n	80037a6 <UART_SetConfig+0x23e>
        pclk = HAL_RCC_GetSysClockFreq();
 80037f8:	f7fe fcce 	bl	8002198 <HAL_RCC_GetSysClockFreq>
 80037fc:	e004      	b.n	8003808 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037fe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003802:	d1b2      	bne.n	800376a <UART_SetConfig+0x202>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003804:	f7ff f838 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003808:	6861      	ldr	r1, [r4, #4]
 800380a:	084a      	lsrs	r2, r1, #1
 800380c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003810:	fbb3 f3f1 	udiv	r3, r3, r1
 8003814:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003816:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003818:	f1a3 0010 	sub.w	r0, r3, #16
 800381c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003820:	4288      	cmp	r0, r1
 8003822:	f63f af62 	bhi.w	80036ea <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003826:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800382a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800382c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003830:	430b      	orrs	r3, r1
 8003832:	60c3      	str	r3, [r0, #12]
 8003834:	e75a      	b.n	80036ec <UART_SetConfig+0x184>
    switch (clocksource)
 8003836:	2b08      	cmp	r3, #8
 8003838:	f63f af57 	bhi.w	80036ea <UART_SetConfig+0x182>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <UART_SetConfig+0x2dc>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	0800376b 	.word	0x0800376b
 8003848:	0800378f 	.word	0x0800378f
 800384c:	08003795 	.word	0x08003795
 8003850:	080036eb 	.word	0x080036eb
 8003854:	080037a7 	.word	0x080037a7
 8003858:	080036eb 	.word	0x080036eb
 800385c:	080036eb 	.word	0x080036eb
 8003860:	080036eb 	.word	0x080036eb
 8003864:	080037ad 	.word	0x080037ad
 8003868:	efff69f3 	.word	0xefff69f3
 800386c:	40008000 	.word	0x40008000
 8003870:	40013800 	.word	0x40013800
 8003874:	0800863c 	.word	0x0800863c
 8003878:	40004400 	.word	0x40004400
 800387c:	08008640 	.word	0x08008640
 8003880:	40004800 	.word	0x40004800
 8003884:	40004c00 	.word	0x40004c00
 8003888:	40005000 	.word	0x40005000
 800388c:	00f42400 	.word	0x00f42400
 8003890:	000ffcff 	.word	0x000ffcff
 8003894:	f4240000 	.word	0xf4240000

08003898 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003898:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800389a:	07da      	lsls	r2, r3, #31
{
 800389c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800389e:	d506      	bpl.n	80038ae <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038a0:	6801      	ldr	r1, [r0, #0]
 80038a2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80038a4:	684a      	ldr	r2, [r1, #4]
 80038a6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80038aa:	4322      	orrs	r2, r4
 80038ac:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038ae:	079c      	lsls	r4, r3, #30
 80038b0:	d506      	bpl.n	80038c0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80038b2:	6801      	ldr	r1, [r0, #0]
 80038b4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80038b6:	684a      	ldr	r2, [r1, #4]
 80038b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80038bc:	4322      	orrs	r2, r4
 80038be:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80038c0:	0759      	lsls	r1, r3, #29
 80038c2:	d506      	bpl.n	80038d2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80038c4:	6801      	ldr	r1, [r0, #0]
 80038c6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80038c8:	684a      	ldr	r2, [r1, #4]
 80038ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80038ce:	4322      	orrs	r2, r4
 80038d0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038d2:	071a      	lsls	r2, r3, #28
 80038d4:	d506      	bpl.n	80038e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038d6:	6801      	ldr	r1, [r0, #0]
 80038d8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80038da:	684a      	ldr	r2, [r1, #4]
 80038dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038e0:	4322      	orrs	r2, r4
 80038e2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038e4:	06dc      	lsls	r4, r3, #27
 80038e6:	d506      	bpl.n	80038f6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038e8:	6801      	ldr	r1, [r0, #0]
 80038ea:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80038ec:	688a      	ldr	r2, [r1, #8]
 80038ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80038f2:	4322      	orrs	r2, r4
 80038f4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038f6:	0699      	lsls	r1, r3, #26
 80038f8:	d506      	bpl.n	8003908 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038fa:	6801      	ldr	r1, [r0, #0]
 80038fc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80038fe:	688a      	ldr	r2, [r1, #8]
 8003900:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003904:	4322      	orrs	r2, r4
 8003906:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003908:	065a      	lsls	r2, r3, #25
 800390a:	d50f      	bpl.n	800392c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800390c:	6801      	ldr	r1, [r0, #0]
 800390e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003910:	684a      	ldr	r2, [r1, #4]
 8003912:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003916:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003918:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800391c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800391e:	d105      	bne.n	800392c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003920:	684a      	ldr	r2, [r1, #4]
 8003922:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003924:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003928:	4322      	orrs	r2, r4
 800392a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	d506      	bpl.n	800393e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003930:	6802      	ldr	r2, [r0, #0]
 8003932:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003934:	6853      	ldr	r3, [r2, #4]
 8003936:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800393a:	430b      	orrs	r3, r1
 800393c:	6053      	str	r3, [r2, #4]
 800393e:	bd10      	pop	{r4, pc}

08003940 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003944:	9d06      	ldr	r5, [sp, #24]
 8003946:	4604      	mov	r4, r0
 8003948:	460f      	mov	r7, r1
 800394a:	4616      	mov	r6, r2
 800394c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800394e:	6821      	ldr	r1, [r4, #0]
 8003950:	69ca      	ldr	r2, [r1, #28]
 8003952:	ea37 0302 	bics.w	r3, r7, r2
 8003956:	bf0c      	ite	eq
 8003958:	2201      	moveq	r2, #1
 800395a:	2200      	movne	r2, #0
 800395c:	42b2      	cmp	r2, r6
 800395e:	d002      	beq.n	8003966 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003960:	2000      	movs	r0, #0
}
 8003962:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003966:	1c68      	adds	r0, r5, #1
 8003968:	d0f2      	beq.n	8003950 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396a:	f7fe f991 	bl	8001c90 <HAL_GetTick>
 800396e:	eba0 0008 	sub.w	r0, r0, r8
 8003972:	4285      	cmp	r5, r0
 8003974:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003976:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003978:	d300      	bcc.n	800397c <UART_WaitOnFlagUntilTimeout+0x3c>
 800397a:	b97d      	cbnz	r5, 800399c <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800397c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003980:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003982:	6883      	ldr	r3, [r0, #8]
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 800398a:	2320      	movs	r3, #32
 800398c:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800398e:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8003990:	2300      	movs	r3, #0
 8003992:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 8003996:	2003      	movs	r0, #3
 8003998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800399c:	075a      	lsls	r2, r3, #29
 800399e:	d5d6      	bpl.n	800394e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039a0:	69c3      	ldr	r3, [r0, #28]
 80039a2:	051b      	lsls	r3, r3, #20
 80039a4:	d5d3      	bpl.n	800394e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80039a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039aa:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ac:	6803      	ldr	r3, [r0, #0]
 80039ae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80039b2:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	6883      	ldr	r3, [r0, #8]
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80039bc:	2320      	movs	r3, #32
 80039be:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80039c0:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80039c2:	67e3      	str	r3, [r4, #124]	; 0x7c
 80039c4:	e7e4      	b.n	8003990 <UART_WaitOnFlagUntilTimeout+0x50>

080039c6 <HAL_UART_Transmit>:
{
 80039c6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80039ca:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80039cc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80039ce:	2b20      	cmp	r3, #32
{
 80039d0:	4604      	mov	r4, r0
 80039d2:	460e      	mov	r6, r1
 80039d4:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80039d6:	d14c      	bne.n	8003a72 <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 80039d8:	2900      	cmp	r1, #0
 80039da:	d048      	beq.n	8003a6e <HAL_UART_Transmit+0xa8>
 80039dc:	2a00      	cmp	r2, #0
 80039de:	d046      	beq.n	8003a6e <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 80039e0:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d044      	beq.n	8003a72 <HAL_UART_Transmit+0xac>
 80039e8:	2301      	movs	r3, #1
 80039ea:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039ee:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039f2:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80039f4:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 80039f6:	f7fe f94b 	bl	8001c90 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039fa:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 80039fc:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003a04:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8003a06:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a0a:	d103      	bne.n	8003a14 <HAL_UART_Transmit+0x4e>
 8003a0c:	6923      	ldr	r3, [r4, #16]
 8003a0e:	b90b      	cbnz	r3, 8003a14 <HAL_UART_Transmit+0x4e>
 8003a10:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003a12:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8003a14:	2300      	movs	r3, #0
 8003a16:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8003a1a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a1e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003a22:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a24:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8003a26:	b93a      	cbnz	r2, 8003a38 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a28:	2140      	movs	r1, #64	; 0x40
 8003a2a:	4620      	mov	r0, r4
 8003a2c:	f7ff ff88 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 8003a30:	b940      	cbnz	r0, 8003a44 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8003a32:	2320      	movs	r3, #32
 8003a34:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8003a36:	e006      	b.n	8003a46 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2180      	movs	r1, #128	; 0x80
 8003a3c:	4620      	mov	r0, r4
 8003a3e:	f7ff ff7f 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 8003a42:	b118      	cbz	r0, 8003a4c <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 8003a44:	2003      	movs	r0, #3
}
 8003a46:	b003      	add	sp, #12
 8003a48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a4c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003a4e:	b95e      	cbnz	r6, 8003a68 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a50:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a58:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8003a5a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003a66:	e7d8      	b.n	8003a1a <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a68:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003a6c:	e7f4      	b.n	8003a58 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 8003a6e:	2001      	movs	r0, #1
 8003a70:	e7e9      	b.n	8003a46 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8003a72:	2002      	movs	r0, #2
 8003a74:	e7e7      	b.n	8003a46 <HAL_UART_Transmit+0x80>

08003a76 <UART_CheckIdleState>:
{
 8003a76:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a78:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a7a:	2600      	movs	r6, #0
 8003a7c:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003a7e:	f7fe f907 	bl	8001c90 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a82:	6823      	ldr	r3, [r4, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8003a88:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a8a:	d415      	bmi.n	8003ab8 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a8c:	6823      	ldr	r3, [r4, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	075b      	lsls	r3, r3, #29
 8003a92:	d50a      	bpl.n	8003aaa <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a98:	9300      	str	r3, [sp, #0]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	462b      	mov	r3, r5
 8003a9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003aa2:	4620      	mov	r0, r4
 8003aa4:	f7ff ff4c 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 8003aa8:	b990      	cbnz	r0, 8003ad0 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8003aaa:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8003aac:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8003aae:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8003ab0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8003ab4:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8003ab6:	e00c      	b.n	8003ad2 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003abc:	9300      	str	r3, [sp, #0]
 8003abe:	4632      	mov	r2, r6
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f7ff ff3a 	bl	8003940 <UART_WaitOnFlagUntilTimeout>
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d0dd      	beq.n	8003a8c <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8003ad0:	2003      	movs	r0, #3
}
 8003ad2:	b002      	add	sp, #8
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}

08003ad6 <HAL_UART_Init>:
{
 8003ad6:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003ad8:	4604      	mov	r4, r0
 8003ada:	b340      	cbz	r0, 8003b2e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003adc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003ade:	b91b      	cbnz	r3, 8003ae8 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003ae0:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003ae4:	f003 fa06 	bl	8006ef4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003ae8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003aea:	2324      	movs	r3, #36	; 0x24
 8003aec:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003aee:	6813      	ldr	r3, [r2, #0]
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003af6:	4620      	mov	r0, r4
 8003af8:	f7ff fd36 	bl	8003568 <UART_SetConfig>
 8003afc:	2801      	cmp	r0, #1
 8003afe:	d016      	beq.n	8003b2e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003b02:	b113      	cbz	r3, 8003b0a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8003b04:	4620      	mov	r0, r4
 8003b06:	f7ff fec7 	bl	8003898 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b0a:	6823      	ldr	r3, [r4, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b1a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003b22:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003b2a:	f7ff bfa4 	b.w	8003a76 <UART_CheckIdleState>
}
 8003b2e:	2001      	movs	r0, #1
 8003b30:	bd10      	pop	{r4, pc}

08003b32 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003b32:	b570      	push	{r4, r5, r6, lr}
 8003b34:	b08a      	sub	sp, #40	; 0x28
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003b36:	2400      	movs	r4, #0
  cp.role = role;
 8003b38:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 8003b3c:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 8003b40:	f88d 2006 	strb.w	r2, [sp, #6]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003b44:	4621      	mov	r1, r4
 8003b46:	2218      	movs	r2, #24
 8003b48:	a804      	add	r0, sp, #16
{
 8003b4a:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003b4c:	9402      	str	r4, [sp, #8]
 8003b4e:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003b52:	f003 fe50 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003b56:	233f      	movs	r3, #63	; 0x3f
 8003b58:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8003b5c:	238a      	movs	r3, #138	; 0x8a
 8003b5e:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8003b62:	ab01      	add	r3, sp, #4
 8003b64:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8003b66:	2303      	movs	r3, #3
 8003b68:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003b6a:	ad02      	add	r5, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 8003b6c:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003b6e:	4621      	mov	r1, r4
 8003b70:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8003b72:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8003b74:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8003b76:	f000 fc2d 	bl	80043d4 <hci_send_req>
 8003b7a:	42a0      	cmp	r0, r4
 8003b7c:	db15      	blt.n	8003baa <aci_gap_init_IDB05A1+0x78>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8003b7e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003b82:	b980      	cbnz	r0, 8003ba6 <aci_gap_init_IDB05A1+0x74>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8003b84:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003b86:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *service_handle = btohs(resp.service_handle);
 8003b8a:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8003b8e:	8032      	strh	r2, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003b90:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003b94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003b98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003b9a:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8003b9c:	9b03      	ldr	r3, [sp, #12]
 8003b9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003ba0:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8003ba4:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 8003ba6:	b00a      	add	sp, #40	; 0x28
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8003baa:	20ff      	movs	r0, #255	; 0xff
 8003bac:	e7fb      	b.n	8003ba6 <aci_gap_init_IDB05A1+0x74>

08003bae <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003bae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bb2:	b08a      	sub	sp, #40	; 0x28
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003bb4:	2400      	movs	r4, #0
  cp.role = role;
 8003bb6:	f88d 0004 	strb.w	r0, [sp, #4]
{
 8003bba:	4688      	mov	r8, r1
 8003bbc:	4616      	mov	r6, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	2218      	movs	r2, #24
 8003bc2:	a804      	add	r0, sp, #16
{
 8003bc4:	461d      	mov	r5, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003bc6:	9402      	str	r4, [sp, #8]
 8003bc8:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003bcc:	f003 fe13 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003bd0:	233f      	movs	r3, #63	; 0x3f
 8003bd2:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8003bd6:	238a      	movs	r3, #138	; 0x8a
 8003bd8:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8003bdc:	ab01      	add	r3, sp, #4
 8003bde:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8003be0:	2301      	movs	r3, #1
 8003be2:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003be4:	af02      	add	r7, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 8003be6:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003be8:	4621      	mov	r1, r4
 8003bea:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8003bec:	9708      	str	r7, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8003bee:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8003bf0:	f000 fbf0 	bl	80043d4 <hci_send_req>
 8003bf4:	42a0      	cmp	r0, r4
 8003bf6:	db15      	blt.n	8003c24 <aci_gap_init_IDB04A1+0x76>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8003bf8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003bfc:	b978      	cbnz	r0, 8003c1e <aci_gap_init_IDB04A1+0x70>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 8003bfe:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003c00:	f89d 300c 	ldrb.w	r3, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 8003c04:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8003c08:	f8a8 2000 	strh.w	r2, [r8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 8003c0c:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8003c10:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003c14:	8032      	strh	r2, [r6, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8003c16:	9a03      	ldr	r2, [sp, #12]
 8003c18:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8003c1c:	802a      	strh	r2, [r5, #0]
  
  return 0;
}
 8003c1e:	b00a      	add	sp, #40	; 0x28
 8003c20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8003c24:	20ff      	movs	r0, #255	; 0xff
 8003c26:	e7fa      	b.n	8003c1e <aci_gap_init_IDB04A1+0x70>

08003c28 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8003c28:	b570      	push	{r4, r5, r6, lr}
 8003c2a:	b092      	sub	sp, #72	; 0x48
 8003c2c:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8003c30:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8003c34:	192e      	adds	r6, r5, r4
 8003c36:	2e1a      	cmp	r6, #26
 8003c38:	dc4f      	bgt.n	8003cda <aci_gap_set_discoverable+0xb2>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8003c3a:	f88d 0020 	strb.w	r0, [sp, #32]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 8003c3e:	f8ad 1021 	strh.w	r1, [sp, #33]	; 0x21
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8003c42:	f8ad 2023 	strh.w	r2, [sp, #35]	; 0x23
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 8003c46:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003c4a:	462a      	mov	r2, r5
  buffer[indx] = AdvFilterPolicy;
 8003c4c:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003c50:	9918      	ldr	r1, [sp, #96]	; 0x60
  buffer[indx] = AdvFilterPolicy;
 8003c52:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003c56:	a80a      	add	r0, sp, #40	; 0x28
  buffer[indx] = LocalNameLen;
 8003c58:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003c5c:	f003 fdc0 	bl	80077e0 <memcpy>
  indx +=  LocalNameLen;
 8003c60:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 8003c64:	aa12      	add	r2, sp, #72	; 0x48
 8003c66:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
 8003c6a:	3509      	adds	r5, #9
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003c6c:	ae08      	add	r6, sp, #32
  indx++;
 8003c6e:	b2ed      	uxtb	r5, r5
  buffer[indx] = ServiceUUIDLen;
 8003c70:	f803 4c28 	strb.w	r4, [r3, #-40]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8003c74:	4622      	mov	r2, r4
 8003c76:	991a      	ldr	r1, [sp, #104]	; 0x68
 8003c78:	1970      	adds	r0, r6, r5
  indx +=  ServiceUUIDLen;  
 8003c7a:	442c      	add	r4, r5
  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 8003c7c:	f003 fdb0 	bl	80077e0 <memcpy>
  indx +=  ServiceUUIDLen;  
 8003c80:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 8003c82:	ab12      	add	r3, sp, #72	; 0x48
 8003c84:	4423      	add	r3, r4
 8003c86:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8003c8a:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;
 8003c8e:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 8003c90:	aa12      	add	r2, sp, #72	; 0x48
 8003c92:	fa52 f383 	uxtab	r3, r2, r3
 8003c96:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 8003c9a:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	2218      	movs	r2, #24
 8003ca2:	a802      	add	r0, sp, #8
 8003ca4:	f003 fda7 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003ca8:	233f      	movs	r3, #63	; 0x3f
 8003caa:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 8003cae:	2383      	movs	r3, #131	; 0x83
 8003cb0:	f8ad 300a 	strh.w	r3, [sp, #10]
  indx +=  2;    
 8003cb4:	3404      	adds	r4, #4
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 8003cb6:	f10d 0307 	add.w	r3, sp, #7
 8003cba:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8003cbc:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8003cbe:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 8003cc4:	9604      	str	r6, [sp, #16]
  rq.clen = indx;
 8003cc6:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003cc8:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003cca:	f000 fb83 	bl	80043d4 <hci_send_req>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	db05      	blt.n	8003cde <aci_gap_set_discoverable+0xb6>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8003cd2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 8003cd6:	b012      	add	sp, #72	; 0x48
 8003cd8:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8003cda:	2042      	movs	r0, #66	; 0x42
 8003cdc:	e7fb      	b.n	8003cd6 <aci_gap_set_discoverable+0xae>
    return BLE_STATUS_TIMEOUT;
 8003cde:	20ff      	movs	r0, #255	; 0xff
 8003ce0:	e7f9      	b.n	8003cd6 <aci_gap_set_discoverable+0xae>

08003ce2 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8003ce2:	b510      	push	{r4, lr}
 8003ce4:	b08e      	sub	sp, #56	; 0x38
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8003ce6:	f88d 001c 	strb.w	r0, [sp, #28]
  cp.oob_enable = oob_enable;
 8003cea:	f88d 101d 	strb.w	r1, [sp, #29]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 8003cee:	f102 0010 	add.w	r0, r2, #16
 8003cf2:	f10d 011e 	add.w	r1, sp, #30
 8003cf6:	f852 4b04 	ldr.w	r4, [r2], #4
 8003cfa:	f841 4b04 	str.w	r4, [r1], #4
 8003cfe:	4282      	cmp	r2, r0
 8003d00:	d1f9      	bne.n	8003cf6 <aci_gap_set_auth_requirement+0x14>
  cp.min_encryption_key_size = min_encryption_key_size;
 8003d02:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp.max_encryption_key_size = max_encryption_key_size;
 8003d06:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8003d0a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 8003d0e:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8003d12:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 8003d16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003d18:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003d1c:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 8003d1e:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8003d22:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003d26:	2100      	movs	r1, #0
 8003d28:	a801      	add	r0, sp, #4
 8003d2a:	f003 fd64 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003d2e:	233f      	movs	r3, #63	; 0x3f
 8003d30:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8003d34:	2386      	movs	r3, #134	; 0x86
 8003d36:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 8003d3a:	ab07      	add	r3, sp, #28
 8003d3c:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 8003d3e:	231a      	movs	r3, #26
 8003d40:	9304      	str	r3, [sp, #16]
  rq.rparam = &status;
 8003d42:	f10d 0303 	add.w	r3, sp, #3
 8003d46:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8003d48:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003d4a:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003d4c:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 8003d4e:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8003d50:	f000 fb40 	bl	80043d4 <hci_send_req>
 8003d54:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8003d56:	bfac      	ite	ge
 8003d58:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8003d5c:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 8003d5e:	b00e      	add	sp, #56	; 0x38
 8003d60:	bd10      	pop	{r4, pc}

08003d62 <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 8003d62:	b510      	push	{r4, lr}
 8003d64:	b08e      	sub	sp, #56	; 0x38
  cp.conn_latency = htobs(conn_latency);
  cp.supervision_timeout = htobs(supervision_timeout);
  cp.min_conn_length = htobs(min_conn_length);
  cp.max_conn_length = htobs(max_conn_length);

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003d66:	2418      	movs	r4, #24
  cp.peer_bdaddr_type = peer_bdaddr_type;
 8003d68:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	889b      	ldrh	r3, [r3, #4]
 8003d70:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
  cp.own_bdaddr_type = own_bdaddr_type;
 8003d74:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8003d78:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  cp.conn_min_interval = htobs(conn_min_interval);
 8003d7c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8003d80:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  cp.conn_max_interval = htobs(conn_max_interval);
 8003d84:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8003d88:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  cp.conn_latency = htobs(conn_latency);
 8003d8c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8003d90:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  cp.supervision_timeout = htobs(supervision_timeout);
 8003d94:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8003d98:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  cp.min_conn_length = htobs(min_conn_length);
 8003d9c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
  cp.scanInterval = htobs(scanInterval);
 8003da0:	f8ad 0020 	strh.w	r0, [sp, #32]
  cp.scanWindow = htobs(scanWindow);
 8003da4:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8003da8:	f8cd 2025 	str.w	r2, [sp, #37]	; 0x25
  cp.min_conn_length = htobs(min_conn_length);
 8003dac:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003db0:	4622      	mov	r2, r4
  cp.max_conn_length = htobs(max_conn_length);
 8003db2:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8003db6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003dba:	2100      	movs	r1, #0
 8003dbc:	a802      	add	r0, sp, #8
 8003dbe:	f003 fd1a 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003dc2:	233f      	movs	r3, #63	; 0x3f
 8003dc4:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8003dc8:	239c      	movs	r3, #156	; 0x9c
 8003dca:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8003dce:	ab08      	add	r3, sp, #32
 8003dd0:	9304      	str	r3, [sp, #16]
  rq.clen = sizeof(cp);
  rq.event = EVT_CMD_STATUS;
 8003dd2:	230f      	movs	r3, #15
 8003dd4:	9303      	str	r3, [sp, #12]
  rq.rparam = &status;
 8003dd6:	f10d 0307 	add.w	r3, sp, #7
 8003dda:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003ddc:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003dde:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003de0:	a802      	add	r0, sp, #8
  rq.clen = sizeof(cp);
 8003de2:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003de4:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003de6:	f000 faf5 	bl	80043d4 <hci_send_req>
 8003dea:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8003dec:	bfac      	ite	ge
 8003dee:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8003df2:	20ff      	movlt	r0, #255	; 0xff
}
 8003df4:	b00e      	add	sp, #56	; 0x38
 8003df6:	bd10      	pop	{r4, pc}

08003df8 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8003df8:	b500      	push	{lr}
 8003dfa:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003dfc:	2218      	movs	r2, #24
 8003dfe:	2100      	movs	r1, #0
 8003e00:	a802      	add	r0, sp, #8
 8003e02:	f003 fcf8 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003e06:	233f      	movs	r3, #63	; 0x3f
 8003e08:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 8003e0c:	f240 1301 	movw	r3, #257	; 0x101
 8003e10:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8003e14:	f10d 0307 	add.w	r3, sp, #7
 8003e18:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8003e1a:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003e1c:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003e1e:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8003e20:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003e22:	f000 fad7 	bl	80043d4 <hci_send_req>
 8003e26:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8003e28:	bfac      	ite	ge
 8003e2a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8003e2e:	20ff      	movlt	r0, #255	; 0xff
}
 8003e30:	b009      	add	sp, #36	; 0x24
 8003e32:	f85d fb04 	ldr.w	pc, [sp], #4

08003e36 <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 8003e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e38:	b08d      	sub	sp, #52	; 0x34
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8003e3a:	2801      	cmp	r0, #1
  buffer[indx] = service_uuid_type;
 8003e3c:	ae0c      	add	r6, sp, #48	; 0x30
    uuid_len = 16;
 8003e3e:	bf0c      	ite	eq
 8003e40:	2402      	moveq	r4, #2
 8003e42:	2410      	movne	r4, #16
  buffer[indx] = service_uuid_type;
 8003e44:	f806 0d2c 	strb.w	r0, [r6, #-44]!
{
 8003e48:	4617      	mov	r7, r2
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8003e4a:	f10d 0005 	add.w	r0, sp, #5
 8003e4e:	4622      	mov	r2, r4
{
 8003e50:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8003e52:	f003 fcc5 	bl	80077e0 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 8003e56:	ab0c      	add	r3, sp, #48	; 0x30
 8003e58:	4423      	add	r3, r4
 8003e5a:	f803 7c2b 	strb.w	r7, [r3, #-43]
  indx++;
    
  buffer[indx] = max_attr_records;
 8003e5e:	ab0c      	add	r3, sp, #48	; 0x30
 8003e60:	191a      	adds	r2, r3, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8003e62:	3403      	adds	r4, #3
  buffer[indx] = max_attr_records;
 8003e64:	f802 5c2a 	strb.w	r5, [r2, #-42]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003e68:	2500      	movs	r5, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003e6a:	2218      	movs	r2, #24
 8003e6c:	4629      	mov	r1, r5
 8003e6e:	eb0d 0002 	add.w	r0, sp, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003e72:	f8ad 5000 	strh.w	r5, [sp]
 8003e76:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003e7a:	f003 fcbc 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003e7e:	233f      	movs	r3, #63	; 0x3f
 8003e80:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 8003e84:	f44f 7381 	mov.w	r3, #258	; 0x102
 8003e88:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;

  if (hci_send_req(&rq, FALSE) < 0)
 8003e8c:	4629      	mov	r1, r5
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8003e8e:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8003e90:	a806      	add	r0, sp, #24
  rq.cparam = (void *)buffer;
 8003e92:	9608      	str	r6, [sp, #32]
  rq.clen = indx;
 8003e94:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 8003e96:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8003e9a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 8003e9c:	f000 fa9a 	bl	80043d4 <hci_send_req>
 8003ea0:	42a8      	cmp	r0, r5
 8003ea2:	db09      	blt.n	8003eb8 <aci_gatt_add_serv+0x82>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8003ea4:	f89d 0000 	ldrb.w	r0, [sp]
 8003ea8:	b920      	cbnz	r0, 8003eb4 <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 8003eaa:	9b00      	ldr	r3, [sp, #0]
 8003eac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003eae:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8003eb2:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8003eb4:	b00d      	add	sp, #52	; 0x34
 8003eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 8003eb8:	20ff      	movs	r0, #255	; 0xff
 8003eba:	e7fb      	b.n	8003eb4 <aci_gatt_add_serv+0x7e>

08003ebc <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 8003ebc:	b570      	push	{r4, r5, r6, lr}
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8003ebe:	2901      	cmp	r1, #1
{
 8003ec0:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 16;
 8003ec2:	bf0c      	ite	eq
 8003ec4:	2402      	moveq	r4, #2
 8003ec6:	2410      	movne	r4, #16
{
 8003ec8:	4616      	mov	r6, r2
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 8003eca:	f8ad 001c 	strh.w	r0, [sp, #28]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8003ece:	4622      	mov	r2, r4
  buffer[indx] = charUuidType;
 8003ed0:	f88d 101e 	strb.w	r1, [sp, #30]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8003ed4:	f10d 001f 	add.w	r0, sp, #31
 8003ed8:	4631      	mov	r1, r6
{
 8003eda:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8003edc:	f003 fc80 	bl	80077e0 <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 8003ee0:	ab0e      	add	r3, sp, #56	; 0x38
 8003ee2:	191a      	adds	r2, r3, r4
  indx++;
    
  buffer[indx] = charProperties;
 8003ee4:	4613      	mov	r3, r2
  buffer[indx] = charValueLen;
 8003ee6:	f802 5c19 	strb.w	r5, [r2, #-25]
  buffer[indx] = charProperties;
 8003eea:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 8003eee:	f803 2c18 	strb.w	r2, [r3, #-24]
  indx++;
    
  buffer[indx] = secPermissions;
 8003ef2:	ab0e      	add	r3, sp, #56	; 0x38
 8003ef4:	4423      	add	r3, r4
 8003ef6:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8003efa:	f803 2c17 	strb.w	r2, [r3, #-23]
  indx++;
    
  buffer[indx] = gattEvtMask;
 8003efe:	ab0e      	add	r3, sp, #56	; 0x38
 8003f00:	4423      	add	r3, r4
 8003f02:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8003f06:	f803 2c16 	strb.w	r2, [r3, #-22]
  indx++;
    
  buffer[indx] = encryKeySize;
 8003f0a:	ab0e      	add	r3, sp, #56	; 0x38
 8003f0c:	4423      	add	r3, r4
 8003f0e:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8003f12:	f803 2c15 	strb.w	r2, [r3, #-21]
  indx++;
    
  buffer[indx] = isVariable;
 8003f16:	ab0e      	add	r3, sp, #56	; 0x38
 8003f18:	4423      	add	r3, r4
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003f1a:	2500      	movs	r5, #0
  buffer[indx] = isVariable;
 8003f1c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8003f20:	f803 2c14 	strb.w	r2, [r3, #-20]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003f24:	4629      	mov	r1, r5
 8003f26:	2218      	movs	r2, #24
 8003f28:	a801      	add	r0, sp, #4
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003f2a:	f8ad 5000 	strh.w	r5, [sp]
 8003f2e:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003f32:	f003 fc60 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003f36:	233f      	movs	r3, #63	; 0x3f
 8003f38:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_ADD_CHAR;
 8003f3c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003f40:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = (void *)buffer;
 8003f44:	ab07      	add	r3, sp, #28
 8003f46:	9303      	str	r3, [sp, #12]
  rq.clen = indx;
 8003f48:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8003f4a:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	a801      	add	r0, sp, #4
  rq.clen = indx;
 8003f50:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 8003f52:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8003f56:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 8003f58:	f000 fa3c 	bl	80043d4 <hci_send_req>
 8003f5c:	42a8      	cmp	r0, r5
 8003f5e:	db09      	blt.n	8003f74 <aci_gatt_add_char+0xb8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8003f60:	f89d 0000 	ldrb.w	r0, [sp]
 8003f64:	b920      	cbnz	r0, 8003f70 <aci_gatt_add_char+0xb4>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 8003f66:	9b00      	ldr	r3, [sp, #0]
 8003f68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003f6a:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8003f6e:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8003f70:	b00e      	add	sp, #56	; 0x38
 8003f72:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 8003f74:	20ff      	movs	r0, #255	; 0xff
 8003f76:	e7fb      	b.n	8003f70 <aci_gatt_add_char+0xb4>

08003f78 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 8003f78:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8003f7a:	2b7a      	cmp	r3, #122	; 0x7a
{
 8003f7c:	b0a8      	sub	sp, #160	; 0xa0
 8003f7e:	461c      	mov	r4, r3
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8003f80:	dc2d      	bgt.n	8003fde <aci_gatt_update_char_value+0x66>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  /* memcpy: destination, source, size */
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8003f82:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 8003f86:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;
    
  buffer[indx] = charValOffset;
 8003f8a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8003f8e:	992a      	ldr	r1, [sp, #168]	; 0xa8
  buffer[indx] = charValueLen;
 8003f90:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8003f94:	461a      	mov	r2, r3
 8003f96:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 8003f9a:	f003 fc21 	bl	80077e0 <memcpy>
  indx +=  charValueLen;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003f9e:	2218      	movs	r2, #24
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	a802      	add	r0, sp, #8
 8003fa4:	f003 fc27 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003fa8:	233f      	movs	r3, #63	; 0x3f
 8003faa:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 8003fae:	f44f 7383 	mov.w	r3, #262	; 0x106
 8003fb2:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 8003fb6:	ab08      	add	r3, sp, #32
 8003fb8:	9304      	str	r3, [sp, #16]
  indx +=  charValueLen;
 8003fba:	3406      	adds	r4, #6
  rq.clen = indx;
  rq.rparam = &status;
 8003fbc:	f10d 0307 	add.w	r3, sp, #7
 8003fc0:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8003fc2:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8003fc4:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	a802      	add	r0, sp, #8
  rq.clen = indx;
 8003fca:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003fcc:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003fce:	f000 fa01 	bl	80043d4 <hci_send_req>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	db05      	blt.n	8003fe2 <aci_gatt_update_char_value+0x6a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8003fd6:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 8003fda:	b028      	add	sp, #160	; 0xa0
 8003fdc:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8003fde:	2042      	movs	r0, #66	; 0x42
 8003fe0:	e7fb      	b.n	8003fda <aci_gatt_update_char_value+0x62>
    return BLE_STATUS_TIMEOUT;
 8003fe2:	20ff      	movs	r0, #255	; 0xff
 8003fe4:	e7f9      	b.n	8003fda <aci_gatt_update_char_value+0x62>

08003fe6 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 8003fe6:	b510      	push	{r4, lr}
  indx += 2;
  
  buffer[indx] = charUuidType;
  indx++;
    
  if(charUuidType == 0x01){
 8003fe8:	2b01      	cmp	r3, #1
{
 8003fea:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8003fec:	bf0c      	ite	eq
 8003fee:	2402      	moveq	r4, #2
 8003ff0:	2410      	movne	r4, #16
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8003ff2:	f8ad 0008 	strh.w	r0, [sp, #8]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 8003ff6:	f8ad 100a 	strh.w	r1, [sp, #10]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 8003ffa:	f8ad 200c 	strh.w	r2, [sp, #12]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8003ffe:	9910      	ldr	r1, [sp, #64]	; 0x40
  buffer[indx] = charUuidType;
 8004000:	f88d 300e 	strb.w	r3, [sp, #14]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 8004004:	4622      	mov	r2, r4
 8004006:	f10d 000f 	add.w	r0, sp, #15
 800400a:	f003 fbe9 	bl	80077e0 <memcpy>
  indx +=  uuid_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800400e:	2218      	movs	r2, #24
 8004010:	2100      	movs	r1, #0
 8004012:	a808      	add	r0, sp, #32
 8004014:	f003 fbef 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004018:	233f      	movs	r3, #63	; 0x3f
 800401a:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 800401e:	f44f 738b 	mov.w	r3, #278	; 0x116
 8004022:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 8004026:	ab02      	add	r3, sp, #8
 8004028:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS;
 800402a:	230f      	movs	r3, #15
 800402c:	9309      	str	r3, [sp, #36]	; 0x24
  rq.rparam = &status;
 800402e:	f10d 0307 	add.w	r3, sp, #7
 8004032:	930c      	str	r3, [sp, #48]	; 0x30
  rq.clen = indx;
 8004034:	3407      	adds	r4, #7
  rq.rlen = 1;
 8004036:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 8004038:	2100      	movs	r1, #0
 800403a:	a808      	add	r0, sp, #32
  rq.clen = indx;
 800403c:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rlen = 1;
 800403e:	930d      	str	r3, [sp, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 8004040:	f000 f9c8 	bl	80043d4 <hci_send_req>
 8004044:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8004046:	bfac      	ite	ge
 8004048:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800404c:	20ff      	movlt	r0, #255	; 0xff
}
 800404e:	b00e      	add	sp, #56	; 0x38
 8004050:	bd10      	pop	{r4, pc}

08004052 <aci_gatt_write_charac_value>:



tBleStatus aci_gatt_write_charac_value(uint16_t conn_handle, uint16_t attr_handle, 
				       uint8_t value_len, uint8_t *attr_value)
{
 8004052:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8004054:	2a7b      	cmp	r2, #123	; 0x7b
{
 8004056:	b0a8      	sub	sp, #160	; 0xa0
 8004058:	4614      	mov	r4, r2
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 800405a:	dc2c      	bgt.n	80040b6 <aci_gatt_write_charac_value+0x64>
    return BLE_STATUS_INVALID_PARAMS;

  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 800405c:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  attr_handle = htobs(attr_handle);
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 8004060:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;

  buffer[indx] = value_len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 8004064:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8004068:	4619      	mov	r1, r3
  buffer[indx] = value_len;
 800406a:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800406e:	f003 fbb7 	bl	80077e0 <memcpy>
  indx +=  value_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004072:	2218      	movs	r2, #24
 8004074:	2100      	movs	r1, #0
 8004076:	a802      	add	r0, sp, #8
 8004078:	f003 fbbd 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800407c:	233f      	movs	r3, #63	; 0x3f
 800407e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_WRITE_CHAR_VALUE;
 8004082:	f44f 738e 	mov.w	r3, #284	; 0x11c
 8004086:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 800408a:	ab08      	add	r3, sp, #32
 800408c:	9304      	str	r3, [sp, #16]
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS;
 800408e:	230f      	movs	r3, #15
 8004090:	9303      	str	r3, [sp, #12]
  indx +=  value_len;
 8004092:	3405      	adds	r4, #5
  rq.rparam = &status;
 8004094:	f10d 0307 	add.w	r3, sp, #7
 8004098:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800409a:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800409c:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800409e:	2100      	movs	r1, #0
 80040a0:	a802      	add	r0, sp, #8
  rq.clen = indx;
 80040a2:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 80040a4:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80040a6:	f000 f995 	bl	80043d4 <hci_send_req>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	db05      	blt.n	80040ba <aci_gatt_write_charac_value+0x68>
    return BLE_STATUS_TIMEOUT;

  return status;
 80040ae:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80040b2:	b028      	add	sp, #160	; 0xa0
 80040b4:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80040b6:	2042      	movs	r0, #66	; 0x42
 80040b8:	e7fb      	b.n	80040b2 <aci_gatt_write_charac_value+0x60>
    return BLE_STATUS_TIMEOUT;
 80040ba:	20ff      	movs	r0, #255	; 0xff
 80040bc:	e7f9      	b.n	80040b2 <aci_gatt_write_charac_value+0x60>

080040be <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 80040be:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 80040c0:	2a7b      	cmp	r2, #123	; 0x7b
{
 80040c2:	b0a8      	sub	sp, #160	; 0xa0
 80040c4:	4614      	mov	r4, r2
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 80040c6:	dc2c      	bgt.n	8004122 <aci_gatt_write_charac_descriptor+0x64>
    return BLE_STATUS_INVALID_PARAMS;

  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80040c8:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  attr_handle = htobs(attr_handle);
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 80040cc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;

  buffer[indx] = value_len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 80040d0:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 80040d4:	4619      	mov	r1, r3
  buffer[indx] = value_len;
 80040d6:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 80040da:	f003 fb81 	bl	80077e0 <memcpy>
  indx +=  value_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80040de:	2218      	movs	r2, #24
 80040e0:	2100      	movs	r1, #0
 80040e2:	a802      	add	r0, sp, #8
 80040e4:	f003 fb87 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80040e8:	233f      	movs	r3, #63	; 0x3f
 80040ea:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 80040ee:	f240 1321 	movw	r3, #289	; 0x121
 80040f2:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 80040f6:	ab08      	add	r3, sp, #32
 80040f8:	9304      	str	r3, [sp, #16]
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS; 
 80040fa:	230f      	movs	r3, #15
 80040fc:	9303      	str	r3, [sp, #12]
  indx +=  value_len;
 80040fe:	3405      	adds	r4, #5
  rq.rparam = &status;
 8004100:	f10d 0307 	add.w	r3, sp, #7
 8004104:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8004106:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8004108:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800410a:	2100      	movs	r1, #0
 800410c:	a802      	add	r0, sp, #8
  rq.clen = indx;
 800410e:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8004110:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004112:	f000 f95f 	bl	80043d4 <hci_send_req>
 8004116:	2800      	cmp	r0, #0
 8004118:	db05      	blt.n	8004126 <aci_gatt_write_charac_descriptor+0x68>
    return BLE_STATUS_TIMEOUT;

  return status;
 800411a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800411e:	b028      	add	sp, #160	; 0xa0
 8004120:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8004122:	2042      	movs	r0, #66	; 0x42
 8004124:	e7fb      	b.n	800411e <aci_gatt_write_charac_descriptor+0x60>
    return BLE_STATUS_TIMEOUT;
 8004126:	20ff      	movs	r0, #255	; 0xff
 8004128:	e7f9      	b.n	800411e <aci_gatt_write_charac_descriptor+0x60>

0800412a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800412a:	b510      	push	{r4, lr}
 800412c:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800412e:	2c7e      	cmp	r4, #126	; 0x7e
{
 8004130:	b0a8      	sub	sp, #160	; 0xa0
 8004132:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8004134:	dc27      	bgt.n	8004186 <aci_hal_write_config_data+0x5c>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8004136:	4622      	mov	r2, r4
  buffer[indx] = offset;
 8004138:	f88d 0020 	strb.w	r0, [sp, #32]
  BLUENRG_memcpy(buffer + indx, val, len);
 800413c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 8004140:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  BLUENRG_memcpy(buffer + indx, val, len);
 8004144:	f003 fb4c 	bl	80077e0 <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004148:	2218      	movs	r2, #24
 800414a:	2100      	movs	r1, #0
 800414c:	a802      	add	r0, sp, #8
 800414e:	f003 fb52 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8004152:	233f      	movs	r3, #63	; 0x3f
 8004154:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8004158:	230c      	movs	r3, #12
 800415a:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 800415e:	ab08      	add	r3, sp, #32
 8004160:	9304      	str	r3, [sp, #16]
  indx +=  len;
 8004162:	3402      	adds	r4, #2
  rq.clen = indx;
  rq.rparam = &status;
 8004164:	f10d 0307 	add.w	r3, sp, #7
 8004168:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 800416a:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 800416c:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800416e:	2100      	movs	r1, #0
 8004170:	a802      	add	r0, sp, #8
  rq.clen = indx;
 8004172:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8004174:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004176:	f000 f92d 	bl	80043d4 <hci_send_req>
 800417a:	2800      	cmp	r0, #0
 800417c:	db05      	blt.n	800418a <aci_hal_write_config_data+0x60>
    return BLE_STATUS_TIMEOUT;

  return status;
 800417e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8004182:	b028      	add	sp, #160	; 0xa0
 8004184:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8004186:	2042      	movs	r0, #66	; 0x42
 8004188:	e7fb      	b.n	8004182 <aci_hal_write_config_data+0x58>
    return BLE_STATUS_TIMEOUT;
 800418a:	20ff      	movs	r0, #255	; 0xff
 800418c:	e7f9      	b.n	8004182 <aci_hal_write_config_data+0x58>

0800418e <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800418e:	b500      	push	{lr}
 8004190:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004192:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 8004194:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 8004198:	f88d 1005 	strb.w	r1, [sp, #5]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800419c:	a802      	add	r0, sp, #8
 800419e:	2100      	movs	r1, #0
 80041a0:	f003 fb29 	bl	80077f6 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80041a4:	233f      	movs	r3, #63	; 0x3f
 80041a6:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80041aa:	230f      	movs	r3, #15
 80041ac:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 80041b0:	ab01      	add	r3, sp, #4
 80041b2:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80041b4:	2302      	movs	r3, #2
 80041b6:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 80041b8:	f10d 0303 	add.w	r3, sp, #3
 80041bc:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80041be:	2100      	movs	r1, #0
  rq.rlen = 1;
 80041c0:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80041c2:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80041c4:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80041c6:	f000 f905 	bl	80043d4 <hci_send_req>
 80041ca:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80041cc:	bfac      	ite	ge
 80041ce:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 80041d2:	20ff      	movlt	r0, #255	; 0xff
}
 80041d4:	b009      	add	sp, #36	; 0x24
 80041d6:	f85d fb04 	ldr.w	pc, [sp], #4

080041da <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80041da:	b530      	push	{r4, r5, lr}
 80041dc:	b085      	sub	sp, #20
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 80041de:	f10d 030e 	add.w	r3, sp, #14
 80041e2:	9300      	str	r3, [sp, #0]
{
 80041e4:	4605      	mov	r5, r0
 80041e6:	460c      	mov	r4, r1
  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 80041e8:	ab03      	add	r3, sp, #12
 80041ea:	f10d 0209 	add.w	r2, sp, #9
 80041ee:	f10d 010a 	add.w	r1, sp, #10
 80041f2:	a802      	add	r0, sp, #8
 80041f4:	f000 f82f 	bl	8004256 <hci_le_read_local_version>
 80041f8:	b2c0      	uxtb	r0, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 80041fa:	b968      	cbnz	r0, 8004218 <getBlueNRGVersion+0x3e>
    *hwVersion = hci_revision >> 8;
 80041fc:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8004200:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    *hwVersion = hci_revision >> 8;
 8004204:	0a0b      	lsrs	r3, r1, #8
 8004206:	702b      	strb	r3, [r5, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8004208:	f002 030f 	and.w	r3, r2, #15
 800420c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8004210:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8004214:	4313      	orrs	r3, r2
 8004216:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 8004218:	b005      	add	sp, #20
 800421a:	bd30      	pop	{r4, r5, pc}

0800421c <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800421c:	b500      	push	{lr}
 800421e:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004220:	2218      	movs	r2, #24
 8004222:	2100      	movs	r1, #0
 8004224:	a802      	add	r0, sp, #8
 8004226:	f003 fae6 	bl	80077f6 <memset>
  rq.ogf = OGF_HOST_CTL;
 800422a:	2303      	movs	r3, #3
 800422c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 8004230:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8004234:	f10d 0307 	add.w	r3, sp, #7
 8004238:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800423a:	2100      	movs	r1, #0
  rq.rlen = 1;
 800423c:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800423e:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8004240:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8004242:	f000 f8c7 	bl	80043d4 <hci_send_req>
 8004246:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 8004248:	bfac      	ite	ge
 800424a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 800424e:	20ff      	movlt	r0, #255	; 0xff
}
 8004250:	b009      	add	sp, #36	; 0x24
 8004252:	f85d fb04 	ldr.w	pc, [sp], #4

08004256 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8004256:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800425a:	2400      	movs	r4, #0
{
 800425c:	b08b      	sub	sp, #44	; 0x2c
 800425e:	4681      	mov	r9, r0
 8004260:	4688      	mov	r8, r1
 8004262:	4617      	mov	r7, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004264:	4621      	mov	r1, r4
 8004266:	2218      	movs	r2, #24
 8004268:	a804      	add	r0, sp, #16
{
 800426a:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800426c:	9401      	str	r4, [sp, #4]
 800426e:	9402      	str	r4, [sp, #8]
 8004270:	f88d 400c 	strb.w	r4, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004274:	f003 fabf 	bl	80077f6 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8004278:	2304      	movs	r3, #4
 800427a:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800427e:	2301      	movs	r3, #1
 8004280:	f8ad 3012 	strh.w	r3, [sp, #18]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8004284:	ad01      	add	r5, sp, #4
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8004286:	2309      	movs	r3, #9
  
  if (hci_send_req(&rq, FALSE) < 0)
 8004288:	4621      	mov	r1, r4
 800428a:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 800428c:	9508      	str	r5, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800428e:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8004290:	f000 f8a0 	bl	80043d4 <hci_send_req>
 8004294:	42a0      	cmp	r0, r4
 8004296:	db1c      	blt.n	80042d2 <hci_le_read_local_version+0x7c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8004298:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800429c:	b9b0      	cbnz	r0, 80042cc <hci_le_read_local_version+0x76>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 800429e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80042a2:	f889 3000 	strb.w	r3, [r9]
  *hci_revision =  btohs(resp.hci_revision);
 80042a6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80042aa:	f8a8 3000 	strh.w	r3, [r8]
  *lmp_pal_version = resp.lmp_pal_version;
 80042ae:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80042b2:	703b      	strb	r3, [r7, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 80042b4:	9a02      	ldr	r2, [sp, #8]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 80042b6:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *manufacturer_name = btohs(resp.manufacturer_name);
 80042ba:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80042be:	8032      	strh	r2, [r6, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 80042c0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80042c4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80042c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80042ca:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 80042cc:	b00b      	add	sp, #44	; 0x2c
 80042ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return BLE_STATUS_TIMEOUT;
 80042d2:	20ff      	movs	r0, #255	; 0xff
 80042d4:	e7fa      	b.n	80042cc <hci_le_read_local_version+0x76>

080042d6 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 80042d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d8:	b091      	sub	sp, #68	; 0x44
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 80042da:	ad08      	add	r5, sp, #32
 80042dc:	2420      	movs	r4, #32
{
 80042de:	4606      	mov	r6, r0
 80042e0:	460f      	mov	r7, r1
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 80042e2:	4622      	mov	r2, r4
 80042e4:	2100      	movs	r1, #0
 80042e6:	4628      	mov	r0, r5
 80042e8:	f003 fa85 	bl	80077f6 <memset>
  scan_resp_cp.length = length;
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 80042ec:	2e1f      	cmp	r6, #31
 80042ee:	4632      	mov	r2, r6
 80042f0:	4639      	mov	r1, r7
 80042f2:	bf28      	it	cs
 80042f4:	221f      	movcs	r2, #31
 80042f6:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  scan_resp_cp.length = length;
 80042fa:	f88d 6020 	strb.w	r6, [sp, #32]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 80042fe:	f003 fa6f 	bl	80077e0 <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8004302:	2218      	movs	r2, #24
 8004304:	2100      	movs	r1, #0
 8004306:	a802      	add	r0, sp, #8
 8004308:	f003 fa75 	bl	80077f6 <memset>
  rq.ogf = OGF_LE_CTL;
 800430c:	2308      	movs	r3, #8
 800430e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 8004312:	2309      	movs	r3, #9
 8004314:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &scan_resp_cp;
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
  rq.rparam = &status;
 8004318:	f10d 0307 	add.w	r3, sp, #7
 800431c:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800431e:	2100      	movs	r1, #0
  rq.rlen = 1;
 8004320:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8004322:	a802      	add	r0, sp, #8
  rq.cparam = &scan_resp_cp;
 8004324:	9504      	str	r5, [sp, #16]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8004326:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8004328:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800432a:	f000 f853 	bl	80043d4 <hci_send_req>
 800432e:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 8004330:	bfac      	ite	ge
 8004332:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 8004336:	20ff      	movlt	r0, #255	; 0xff
}
 8004338:	b011      	add	sp, #68	; 0x44
 800433a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800433c <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 800433c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 800433e:	4d08      	ldr	r5, [pc, #32]	; (8004360 <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 8004340:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 8004342:	4620      	mov	r0, r4
 8004344:	f000 f959 	bl	80045fa <list_is_empty>
 8004348:	b108      	cbz	r0, 800434e <move_list.constprop.0+0x12>
  }
}
 800434a:	b003      	add	sp, #12
 800434c:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 800434e:	a901      	add	r1, sp, #4
 8004350:	4620      	mov	r0, r4
 8004352:	f000 f991 	bl	8004678 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8004356:	9901      	ldr	r1, [sp, #4]
 8004358:	4628      	mov	r0, r5
 800435a:	f000 f958 	bl	800460e <list_insert_head>
 800435e:	e7f0      	b.n	8004342 <move_list.constprop.0+0x6>
 8004360:	200014d4 	.word	0x200014d4

08004364 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8004364:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;
  
  /* Podczepianie wskaznika na funkcje sprawdzajaca typ eventu ktory przyszedl i wywolujaca odp. funkcje */
  /* Typy eventow: connection/disconnection/attribute modified(?)/gatt_notification(dane!)/read_char/procedure_complete */
  if(UserEvtRx != NULL)
 8004366:	b108      	cbz	r0, 800436c <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <hci_init+0x44>)
 800436a:	61d8      	str	r0, [r3, #28]
  }
  
  /* Initialize TL BLE layer */
  /* Ustawianie parametrow niskopoziomowej warstwy transportowej */
  hci_tl_lowlevel_init();
 800436c:	f002 f802 	bl	8006374 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 8004370:	480e      	ldr	r0, [pc, #56]	; (80043ac <hci_init+0x48>)
  
  /* Initialize the queue of free hci data packets */
  /* ?Tworzy pusta liste pakietow(?) do wypelnienia? */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8004372:	4e0f      	ldr	r6, [pc, #60]	; (80043b0 <hci_init+0x4c>)
 8004374:	4d0d      	ldr	r5, [pc, #52]	; (80043ac <hci_init+0x48>)
  list_init_head(&hciReadPktPool);
 8004376:	f000 f93d 	bl	80045f4 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 800437a:	480e      	ldr	r0, [pc, #56]	; (80043b4 <hci_init+0x50>)
 800437c:	f000 f93a 	bl	80045f4 <list_init_head>
 8004380:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 8004382:	1931      	adds	r1, r6, r4
 8004384:	4628      	mov	r0, r5
 8004386:	348c      	adds	r4, #140	; 0x8c
 8004388:	f000 f94d 	bl	8004626 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 800438c:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 8004390:	d1f7      	bne.n	8004382 <hci_init+0x1e>
  } 
  
  /* Initialize low level driver */
  /* Inicjalizacja niskopoziomowej warstwy transportowej ustawianej wyzej */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 8004392:	4c05      	ldr	r4, [pc, #20]	; (80043a8 <hci_init+0x44>)
 8004394:	6822      	ldr	r2, [r4, #0]
 8004396:	b10a      	cbz	r2, 800439c <hci_init+0x38>
 8004398:	2000      	movs	r0, #0
 800439a:	4790      	blx	r2
  if (hciContext.io.Reset) hciContext.io.Reset();
 800439c:	68a3      	ldr	r3, [r4, #8]
 800439e:	b113      	cbz	r3, 80043a6 <hci_init+0x42>
}
 80043a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 80043a4:	4718      	bx	r3
 80043a6:	bd70      	pop	{r4, r5, r6, pc}
 80043a8:	20000178 	.word	0x20000178
 80043ac:	200014cc 	.word	0x200014cc
 80043b0:	20000198 	.word	0x20000198
 80043b4:	200014d4 	.word	0x200014d4

080043b8 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <hci_register_io_bus+0x18>)
 80043ba:	6802      	ldr	r2, [r0, #0]
 80043bc:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 80043be:	68c2      	ldr	r2, [r0, #12]
 80043c0:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 80043c2:	6902      	ldr	r2, [r0, #16]
 80043c4:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 80043c6:	6982      	ldr	r2, [r0, #24]
 80043c8:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;    
 80043ca:	6882      	ldr	r2, [r0, #8]
 80043cc:	609a      	str	r2, [r3, #8]
 80043ce:	4770      	bx	lr
 80043d0:	20000178 	.word	0x20000178

080043d4 <hci_send_req>:
}

int hci_send_req(struct hci_request* r, BOOL async)
{
 80043d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80043d8:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80043da:	8846      	ldrh	r6, [r0, #2]
 80043dc:	f8b0 8000 	ldrh.w	r8, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80043e0:	4f59      	ldr	r7, [pc, #356]	; (8004548 <hci_send_req+0x174>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80043e2:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8004550 <hci_send_req+0x17c>
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80043e6:	2300      	movs	r3, #0
{
 80043e8:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80043ea:	a802      	add	r0, sp, #8
{
 80043ec:	460d      	mov	r5, r1
  tHciDataPacket * hciReadPacket = NULL;
 80043ee:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 80043f0:	f000 f900 	bl	80045f4 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80043f4:	4638      	mov	r0, r7
 80043f6:	f000 f951 	bl	800469c <list_get_size>
 80043fa:	2801      	cmp	r0, #1
 80043fc:	dd53      	ble.n	80044a6 <hci_send_req+0xd2>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80043fe:	8863      	ldrh	r3, [r4, #2]
 8004400:	8822      	ldrh	r2, [r4, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 8004402:	7b27      	ldrb	r7, [r4, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8004404:	68a1      	ldr	r1, [r4, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8004406:	f88d 7013 	strb.w	r7, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800440a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800440e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 8004412:	2201      	movs	r2, #1
 8004414:	f88d 2010 	strb.w	r2, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8004418:	a805      	add	r0, sp, #20
 800441a:	463a      	mov	r2, r7
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 800441c:	f8ad 3011 	strh.w	r3, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8004420:	f003 f9de 	bl	80077e0 <memcpy>
  if (hciContext.io.Send)
 8004424:	4b49      	ldr	r3, [pc, #292]	; (800454c <hci_send_req+0x178>)
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	b113      	cbz	r3, 8004430 <hci_send_req+0x5c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 800442a:	1d39      	adds	r1, r7, #4
 800442c:	a804      	add	r0, sp, #16
 800442e:	4798      	blx	r3
  
  if (async)
 8004430:	2d00      	cmp	r5, #0
 8004432:	d178      	bne.n	8004526 <hci_send_req+0x152>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8004434:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8004438:	ea45 2588 	orr.w	r5, r5, r8, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 800443c:	4e44      	ldr	r6, [pc, #272]	; (8004550 <hci_send_req+0x17c>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800443e:	4f42      	ldr	r7, [pc, #264]	; (8004548 <hci_send_req+0x174>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8004440:	b2ad      	uxth	r5, r5
    uint32_t tickstart = HAL_GetTick();
 8004442:	f7fd fc25 	bl	8001c90 <HAL_GetTick>
 8004446:	4680      	mov	r8, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8004448:	f7fd fc22 	bl	8001c90 <HAL_GetTick>
 800444c:	eba0 0008 	sub.w	r0, r0, r8
 8004450:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004454:	d84a      	bhi.n	80044ec <hci_send_req+0x118>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8004456:	4630      	mov	r0, r6
 8004458:	f000 f8cf 	bl	80045fa <list_is_empty>
 800445c:	2800      	cmp	r0, #0
 800445e:	d1f3      	bne.n	8004448 <hci_send_req+0x74>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 8004460:	a901      	add	r1, sp, #4
 8004462:	4630      	mov	r0, r6
 8004464:	f000 f8f6 	bl	8004654 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8004468:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 800446a:	7a0b      	ldrb	r3, [r1, #8]
 800446c:	2b04      	cmp	r3, #4
 800446e:	d109      	bne.n	8004484 <hci_send_req+0xb0>
      switch (event_pckt->evt) 
 8004470:	7a48      	ldrb	r0, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8004472:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 8004476:	280f      	cmp	r0, #15
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8004478:	f1a3 0203 	sub.w	r2, r3, #3
      switch (event_pckt->evt) 
 800447c:	d02c      	beq.n	80044d8 <hci_send_req+0x104>
 800447e:	d81b      	bhi.n	80044b8 <hci_send_req+0xe4>
 8004480:	280e      	cmp	r0, #14
 8004482:	d052      	beq.n	800452a <hci_send_req+0x156>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8004484:	4638      	mov	r0, r7
 8004486:	f000 f8b8 	bl	80045fa <list_is_empty>
 800448a:	2800      	cmp	r0, #0
 800448c:	d058      	beq.n	8004540 <hci_send_req+0x16c>
 800448e:	4630      	mov	r0, r6
 8004490:	f000 f8b3 	bl	80045fa <list_is_empty>
 8004494:	2800      	cmp	r0, #0
 8004496:	d053      	beq.n	8004540 <hci_send_req+0x16c>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8004498:	9901      	ldr	r1, [sp, #4]
 800449a:	4638      	mov	r0, r7
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800449c:	f000 f8c3 	bl	8004626 <list_insert_tail>
      hciReadPacket=NULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	e7cd      	b.n	8004442 <hci_send_req+0x6e>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80044a6:	a904      	add	r1, sp, #16
 80044a8:	4648      	mov	r0, r9
 80044aa:	f000 f8d3 	bl	8004654 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80044ae:	9904      	ldr	r1, [sp, #16]
 80044b0:	4638      	mov	r0, r7
 80044b2:	f000 f8b8 	bl	8004626 <list_insert_tail>
 80044b6:	e79d      	b.n	80043f4 <hci_send_req+0x20>
      switch (event_pckt->evt) 
 80044b8:	2810      	cmp	r0, #16
 80044ba:	d017      	beq.n	80044ec <hci_send_req+0x118>
 80044bc:	283e      	cmp	r0, #62	; 0x3e
 80044be:	d1e1      	bne.n	8004484 <hci_send_req+0xb0>
        if (me->subevent != r->event)
 80044c0:	7ac8      	ldrb	r0, [r1, #11]
 80044c2:	6862      	ldr	r2, [r4, #4]
 80044c4:	4290      	cmp	r0, r2
 80044c6:	d1dd      	bne.n	8004484 <hci_send_req+0xb0>
        len -= 1;
 80044c8:	1f1a      	subs	r2, r3, #4
        r->rlen = MIN(len, r->rlen);
 80044ca:	6963      	ldr	r3, [r4, #20]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	bf28      	it	cs
 80044d0:	461a      	movcs	r2, r3
 80044d2:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80044d4:	310c      	adds	r1, #12
 80044d6:	e01c      	b.n	8004512 <hci_send_req+0x13e>
        if (cs->opcode != opcode)
 80044d8:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 80044dc:	42ab      	cmp	r3, r5
 80044de:	d105      	bne.n	80044ec <hci_send_req+0x118>
        if (r->event != EVT_CMD_STATUS) {
 80044e0:	6863      	ldr	r3, [r4, #4]
 80044e2:	2b0f      	cmp	r3, #15
 80044e4:	d00f      	beq.n	8004506 <hci_send_req+0x132>
          if (cs->status) {
 80044e6:	7acb      	ldrb	r3, [r1, #11]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0cb      	beq.n	8004484 <hci_send_req+0xb0>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80044ec:	9901      	ldr	r1, [sp, #4]
 80044ee:	b111      	cbz	r1, 80044f6 <hci_send_req+0x122>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80044f0:	4815      	ldr	r0, [pc, #84]	; (8004548 <hci_send_req+0x174>)
 80044f2:	f000 f88c 	bl	800460e <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 80044f6:	a802      	add	r0, sp, #8
 80044f8:	f7ff ff20 	bl	800433c <move_list.constprop.0>
  return -1;
 80044fc:	f04f 30ff 	mov.w	r0, #4294967295
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);
  return 0;
}
 8004500:	b025      	add	sp, #148	; 0x94
 8004502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        r->rlen = MIN(len, r->rlen);
 8004506:	6963      	ldr	r3, [r4, #20]
 8004508:	429a      	cmp	r2, r3
 800450a:	bf28      	it	cs
 800450c:	461a      	movcs	r2, r3
 800450e:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8004510:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 8004512:	6920      	ldr	r0, [r4, #16]
 8004514:	f003 f964 	bl	80077e0 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8004518:	480b      	ldr	r0, [pc, #44]	; (8004548 <hci_send_req+0x174>)
 800451a:	9901      	ldr	r1, [sp, #4]
 800451c:	f000 f877 	bl	800460e <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 8004520:	a802      	add	r0, sp, #8
 8004522:	f7ff ff0b 	bl	800433c <move_list.constprop.0>
    return 0;
 8004526:	2000      	movs	r0, #0
 8004528:	e7ea      	b.n	8004500 <hci_send_req+0x12c>
        if (cc->opcode != opcode)
 800452a:	898a      	ldrh	r2, [r1, #12]
 800452c:	42aa      	cmp	r2, r5
 800452e:	d1dd      	bne.n	80044ec <hci_send_req+0x118>
        len -= EVT_CMD_COMPLETE_SIZE;
 8004530:	1f9a      	subs	r2, r3, #6
        r->rlen = MIN(len, r->rlen);
 8004532:	6963      	ldr	r3, [r4, #20]
 8004534:	429a      	cmp	r2, r3
 8004536:	bf28      	it	cs
 8004538:	461a      	movcs	r2, r3
 800453a:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800453c:	310e      	adds	r1, #14
 800453e:	e7e8      	b.n	8004512 <hci_send_req+0x13e>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8004540:	9901      	ldr	r1, [sp, #4]
 8004542:	a802      	add	r0, sp, #8
 8004544:	e7aa      	b.n	800449c <hci_send_req+0xc8>
 8004546:	bf00      	nop
 8004548:	200014cc 	.word	0x200014cc
 800454c:	20000178 	.word	0x20000178
 8004550:	200014d4 	.word	0x200014d4

08004554 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8004554:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8004556:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8004558:	4c0b      	ldr	r4, [pc, #44]	; (8004588 <hci_user_evt_proc+0x34>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket); /* Tu jest otrzymany pakiet */
    if (hciContext.UserEvtRx != NULL)
 800455a:	4d0c      	ldr	r5, [pc, #48]	; (800458c <hci_user_evt_proc+0x38>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff); /* Przeparsuj otrzymane dane! UserEvtRx to user_notify, funkcja od parsowania eventu */
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket); /* Dolacz do odczytanych (przeparsowanych) pakietow */
 800455c:	4e0c      	ldr	r6, [pc, #48]	; (8004590 <hci_user_evt_proc+0x3c>)
  tHciDataPacket * hciReadPacket = NULL;
 800455e:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8004560:	4620      	mov	r0, r4
 8004562:	f000 f84a 	bl	80045fa <list_is_empty>
 8004566:	b108      	cbz	r0, 800456c <hci_user_evt_proc+0x18>
  }
}
 8004568:	b002      	add	sp, #8
 800456a:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket); /* Tu jest otrzymany pakiet */
 800456c:	a901      	add	r1, sp, #4
 800456e:	4620      	mov	r0, r4
 8004570:	f000 f870 	bl	8004654 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8004574:	69eb      	ldr	r3, [r5, #28]
 8004576:	b113      	cbz	r3, 800457e <hci_user_evt_proc+0x2a>
      hciContext.UserEvtRx(hciReadPacket->dataBuff); /* Przeparsuj otrzymane dane! UserEvtRx to user_notify, funkcja od parsowania eventu */
 8004578:	9801      	ldr	r0, [sp, #4]
 800457a:	3008      	adds	r0, #8
 800457c:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket); /* Dolacz do odczytanych (przeparsowanych) pakietow */
 800457e:	9901      	ldr	r1, [sp, #4]
 8004580:	4630      	mov	r0, r6
 8004582:	f000 f850 	bl	8004626 <list_insert_tail>
 8004586:	e7eb      	b.n	8004560 <hci_user_evt_proc+0xc>
 8004588:	200014d4 	.word	0x200014d4
 800458c:	20000178 	.word	0x20000178
 8004590:	200014cc 	.word	0x200014cc

08004594 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8004594:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8004596:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8004598:	4813      	ldr	r0, [pc, #76]	; (80045e8 <hci_notify_asynch_evt+0x54>)
  tHciDataPacket * hciReadPacket = NULL;
 800459a:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 800459c:	f000 f82d 	bl	80045fa <list_is_empty>
 80045a0:	b9d8      	cbnz	r0, 80045da <hci_notify_asynch_evt+0x46>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80045a2:	a901      	add	r1, sp, #4
 80045a4:	4810      	ldr	r0, [pc, #64]	; (80045e8 <hci_notify_asynch_evt+0x54>)
 80045a6:	f000 f855 	bl	8004654 <list_remove_head>
    
    if (hciContext.io.Receive)
 80045aa:	4b10      	ldr	r3, [pc, #64]	; (80045ec <hci_notify_asynch_evt+0x58>)
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	b193      	cbz	r3, 80045d6 <hci_notify_asynch_evt+0x42>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80045b0:	9801      	ldr	r0, [sp, #4]
 80045b2:	2180      	movs	r1, #128	; 0x80
 80045b4:	3008      	adds	r0, #8
 80045b6:	4798      	blx	r3
 80045b8:	b2c5      	uxtb	r5, r0
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
 80045ba:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 80045bc:	b185      	cbz	r5, 80045e0 <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80045be:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 80045c0:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80045c4:	2b04      	cmp	r3, #4
 80045c6:	d10b      	bne.n	80045e0 <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80045c8:	7a8b      	ldrb	r3, [r1, #10]
 80045ca:	1ee8      	subs	r0, r5, #3
 80045cc:	4283      	cmp	r3, r0
 80045ce:	d107      	bne.n	80045e0 <hci_notify_asynch_evt+0x4c>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80045d0:	4807      	ldr	r0, [pc, #28]	; (80045f0 <hci_notify_asynch_evt+0x5c>)
 80045d2:	f000 f828 	bl	8004626 <list_insert_tail>
  int32_t ret = 0;
 80045d6:	2000      	movs	r0, #0
 80045d8:	e000      	b.n	80045dc <hci_notify_asynch_evt+0x48>
      }
    }
  }
  else 
  {
    ret = 1;
 80045da:	2001      	movs	r0, #1
  }
  return ret;

}
 80045dc:	b003      	add	sp, #12
 80045de:	bd30      	pop	{r4, r5, pc}
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80045e0:	4801      	ldr	r0, [pc, #4]	; (80045e8 <hci_notify_asynch_evt+0x54>)
 80045e2:	f000 f814 	bl	800460e <list_insert_head>
 80045e6:	e7f6      	b.n	80045d6 <hci_notify_asynch_evt+0x42>
 80045e8:	200014cc 	.word	0x200014cc
 80045ec:	20000178 	.word	0x20000178
 80045f0:	200014d4 	.word	0x200014d4

080045f4 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 80045f4:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 80045f6:	6040      	str	r0, [r0, #4]
 80045f8:	4770      	bx	lr

080045fa <list_is_empty>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045fa:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80045fe:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8004600:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 8004602:	1a1b      	subs	r3, r3, r0
 8004604:	4258      	negs	r0, r3
 8004606:	4158      	adcs	r0, r3
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004608:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 800460c:	4770      	bx	lr

0800460e <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800460e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004612:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8004614:	6802      	ldr	r2, [r0, #0]
 8004616:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8004618:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 800461a:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 800461c:	680a      	ldr	r2, [r1, #0]
 800461e:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004620:	f383 8810 	msr	PRIMASK, r3
 8004624:	4770      	bx	lr

08004626 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004626:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800462a:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 800462c:	6842      	ldr	r2, [r0, #4]
 800462e:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 8004630:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 8004632:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8004634:	684a      	ldr	r2, [r1, #4]
 8004636:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004638:	f383 8810 	msr	PRIMASK, r3
 800463c:	4770      	bx	lr

0800463e <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004642:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8004644:	e890 000a 	ldmia.w	r0, {r1, r3}
 8004648:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 800464a:	6801      	ldr	r1, [r0, #0]
 800464c:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464e:	f382 8810 	msr	PRIMASK, r2
 8004652:	4770      	bx	lr

08004654 <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8004654:	b538      	push	{r3, r4, r5, lr}
 8004656:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004658:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800465c:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 800465e:	6803      	ldr	r3, [r0, #0]
 8004660:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->next);
 8004662:	6800      	ldr	r0, [r0, #0]
 8004664:	f7ff ffeb 	bl	800463e <list_remove_node>
  (*node)->next = NULL;
 8004668:	6822      	ldr	r2, [r4, #0]
 800466a:	2300      	movs	r3, #0
 800466c:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 800466e:	6822      	ldr	r2, [r4, #0]
 8004670:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004672:	f385 8810 	msr	PRIMASK, r5
 8004676:	bd38      	pop	{r3, r4, r5, pc}

08004678 <list_remove_tail>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8004678:	b538      	push	{r3, r4, r5, lr}
 800467a:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800467c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8004680:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8004682:	6843      	ldr	r3, [r0, #4]
 8004684:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->prev);
 8004686:	6840      	ldr	r0, [r0, #4]
 8004688:	f7ff ffd9 	bl	800463e <list_remove_node>
  (*node)->next = NULL;
 800468c:	6822      	ldr	r2, [r4, #0]
 800468e:	2300      	movs	r3, #0
 8004690:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8004692:	6822      	ldr	r2, [r4, #0]
 8004694:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004696:	f385 8810 	msr	PRIMASK, r5
 800469a:	bd38      	pop	{r3, r4, r5, pc}

0800469c <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80046a0:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 80046a2:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 80046a4:	2300      	movs	r3, #0
  while (temp != listHead)
 80046a6:	4282      	cmp	r2, r0
 80046a8:	d103      	bne.n	80046b2 <list_get_size+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046aa:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	4770      	bx	lr
    size++;
 80046b2:	3301      	adds	r3, #1
    temp = temp->next;		
 80046b4:	6812      	ldr	r2, [r2, #0]
 80046b6:	e7f6      	b.n	80046a6 <list_get_size+0xa>

080046b8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80046b8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80046ba:	f000 ffd7 	bl	800566c <vTaskStartScheduler>
  
  return osOK;
}
 80046be:	2000      	movs	r0, #0
 80046c0:	bd08      	pop	{r3, pc}

080046c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80046c2:	b570      	push	{r4, r5, r6, lr}
 80046c4:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80046c6:	6946      	ldr	r6, [r0, #20]
 80046c8:	692a      	ldr	r2, [r5, #16]
 80046ca:	6840      	ldr	r0, [r0, #4]
 80046cc:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80046d0:	460b      	mov	r3, r1
 80046d2:	b086      	sub	sp, #24
 80046d4:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80046d6:	b176      	cbz	r6, 80046f6 <osThreadCreate+0x34>
 80046d8:	69ad      	ldr	r5, [r5, #24]
 80046da:	b165      	cbz	r5, 80046f6 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80046dc:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80046de:	bf14      	ite	ne
 80046e0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80046e2:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046e4:	9502      	str	r5, [sp, #8]
 80046e6:	e88d 0050 	stmia.w	sp, {r4, r6}
 80046ea:	f000 ff60 	bl	80055ae <xTaskCreateStatic>
 80046ee:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046f0:	9805      	ldr	r0, [sp, #20]
}
 80046f2:	b006      	add	sp, #24
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80046f6:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80046f8:	bf14      	ite	ne
 80046fa:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80046fc:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046fe:	ad05      	add	r5, sp, #20
 8004700:	b292      	uxth	r2, r2
 8004702:	e88d 0030 	stmia.w	sp, {r4, r5}
 8004706:	f000 ff83 	bl	8005610 <xTaskCreate>
 800470a:	2801      	cmp	r0, #1
 800470c:	d0f0      	beq.n	80046f0 <osThreadCreate+0x2e>
      return NULL;
 800470e:	2000      	movs	r0, #0
 8004710:	e7ef      	b.n	80046f2 <osThreadCreate+0x30>

08004712 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004712:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004714:	2800      	cmp	r0, #0
 8004716:	bf08      	it	eq
 8004718:	2001      	moveq	r0, #1
 800471a:	f001 f8ef 	bl	80058fc <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800471e:	2000      	movs	r0, #0
 8004720:	bd08      	pop	{r3, pc}
	...

08004724 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004724:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004726:	4b0f      	ldr	r3, [pc, #60]	; (8004764 <prvInsertBlockIntoFreeList+0x40>)
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	4282      	cmp	r2, r0
 800472c:	d318      	bcc.n	8004760 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800472e:	685c      	ldr	r4, [r3, #4]
 8004730:	1919      	adds	r1, r3, r4
 8004732:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004734:	bf01      	itttt	eq
 8004736:	6841      	ldreq	r1, [r0, #4]
 8004738:	4618      	moveq	r0, r3
 800473a:	1909      	addeq	r1, r1, r4
 800473c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800473e:	6844      	ldr	r4, [r0, #4]
 8004740:	1901      	adds	r1, r0, r4
 8004742:	428a      	cmp	r2, r1
 8004744:	d107      	bne.n	8004756 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004746:	4908      	ldr	r1, [pc, #32]	; (8004768 <prvInsertBlockIntoFreeList+0x44>)
 8004748:	6809      	ldr	r1, [r1, #0]
 800474a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800474c:	bf1f      	itttt	ne
 800474e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004750:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004752:	1909      	addne	r1, r1, r4
 8004754:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004756:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004758:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800475a:	bf18      	it	ne
 800475c:	6018      	strne	r0, [r3, #0]
 800475e:	bd10      	pop	{r4, pc}
 8004760:	4613      	mov	r3, r2
 8004762:	e7e1      	b.n	8004728 <prvInsertBlockIntoFreeList+0x4>
 8004764:	2000101c 	.word	0x2000101c
 8004768:	20000454 	.word	0x20000454

0800476c <pvPortMalloc>:
{
 800476c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004770:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004772:	f000 ffb1 	bl	80056d8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004776:	493e      	ldr	r1, [pc, #248]	; (8004870 <pvPortMalloc+0x104>)
 8004778:	4d3e      	ldr	r5, [pc, #248]	; (8004874 <pvPortMalloc+0x108>)
 800477a:	680b      	ldr	r3, [r1, #0]
 800477c:	bb0b      	cbnz	r3, 80047c2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800477e:	4a3e      	ldr	r2, [pc, #248]	; (8004878 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004780:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004782:	bf1f      	itttt	ne
 8004784:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004786:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800478a:	f602 33b8 	addwne	r3, r2, #3000	; 0xbb8
 800478e:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004790:	bf14      	ite	ne
 8004792:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004794:	f640 33b8 	movweq	r3, #3000	; 0xbb8
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004798:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800479a:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800479c:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047a0:	4e36      	ldr	r6, [pc, #216]	; (800487c <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 80047a2:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80047a4:	2000      	movs	r0, #0
 80047a6:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80047a8:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 80047aa:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80047ac:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047ae:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80047b0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047b2:	4b33      	ldr	r3, [pc, #204]	; (8004880 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80047b4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047b6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80047b8:	4b32      	ldr	r3, [pc, #200]	; (8004884 <pvPortMalloc+0x118>)
 80047ba:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80047bc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80047c0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80047c2:	682f      	ldr	r7, [r5, #0]
 80047c4:	4227      	tst	r7, r4
 80047c6:	d116      	bne.n	80047f6 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80047c8:	2c00      	cmp	r4, #0
 80047ca:	d041      	beq.n	8004850 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 80047cc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80047d0:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80047d2:	bf1c      	itt	ne
 80047d4:	f023 0307 	bicne.w	r3, r3, #7
 80047d8:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80047da:	b163      	cbz	r3, 80047f6 <pvPortMalloc+0x8a>
 80047dc:	4a29      	ldr	r2, [pc, #164]	; (8004884 <pvPortMalloc+0x118>)
 80047de:	6816      	ldr	r6, [r2, #0]
 80047e0:	42b3      	cmp	r3, r6
 80047e2:	4690      	mov	r8, r2
 80047e4:	d807      	bhi.n	80047f6 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 80047e6:	4a25      	ldr	r2, [pc, #148]	; (800487c <pvPortMalloc+0x110>)
 80047e8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047ea:	6868      	ldr	r0, [r5, #4]
 80047ec:	4283      	cmp	r3, r0
 80047ee:	d804      	bhi.n	80047fa <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 80047f0:	6809      	ldr	r1, [r1, #0]
 80047f2:	428d      	cmp	r5, r1
 80047f4:	d107      	bne.n	8004806 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 80047f6:	2400      	movs	r4, #0
 80047f8:	e02a      	b.n	8004850 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047fa:	682c      	ldr	r4, [r5, #0]
 80047fc:	2c00      	cmp	r4, #0
 80047fe:	d0f7      	beq.n	80047f0 <pvPortMalloc+0x84>
 8004800:	462a      	mov	r2, r5
 8004802:	4625      	mov	r5, r4
 8004804:	e7f1      	b.n	80047ea <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004806:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004808:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800480a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800480c:	1ac2      	subs	r2, r0, r3
 800480e:	2a10      	cmp	r2, #16
 8004810:	d90f      	bls.n	8004832 <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004812:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004814:	0741      	lsls	r1, r0, #29
 8004816:	d008      	beq.n	800482a <pvPortMalloc+0xbe>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	f383 8811 	msr	BASEPRI, r3
 8004820:	f3bf 8f6f 	isb	sy
 8004824:	f3bf 8f4f 	dsb	sy
 8004828:	e7fe      	b.n	8004828 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800482a:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800482c:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800482e:	f7ff ff79 	bl	8004724 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004832:	4913      	ldr	r1, [pc, #76]	; (8004880 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004834:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004836:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004838:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800483a:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800483c:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 800483e:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004842:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004846:	bf38      	it	cc
 8004848:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800484a:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800484c:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800484e:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8004850:	f000 ffdc 	bl	800580c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004854:	0763      	lsls	r3, r4, #29
 8004856:	d008      	beq.n	800486a <pvPortMalloc+0xfe>
 8004858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485c:	f383 8811 	msr	BASEPRI, r3
 8004860:	f3bf 8f6f 	isb	sy
 8004864:	f3bf 8f4f 	dsb	sy
 8004868:	e7fe      	b.n	8004868 <pvPortMalloc+0xfc>
}
 800486a:	4620      	mov	r0, r4
 800486c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004870:	20000454 	.word	0x20000454
 8004874:	20001010 	.word	0x20001010
 8004878:	20000458 	.word	0x20000458
 800487c:	2000101c 	.word	0x2000101c
 8004880:	20001018 	.word	0x20001018
 8004884:	20001014 	.word	0x20001014

08004888 <vPortFree>:
{
 8004888:	b510      	push	{r4, lr}
	if( pv != NULL )
 800488a:	4604      	mov	r4, r0
 800488c:	b370      	cbz	r0, 80048ec <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800488e:	4a18      	ldr	r2, [pc, #96]	; (80048f0 <vPortFree+0x68>)
 8004890:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	4213      	tst	r3, r2
 8004898:	d108      	bne.n	80048ac <vPortFree+0x24>
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	e7fe      	b.n	80048aa <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80048ac:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80048b0:	b141      	cbz	r1, 80048c4 <vPortFree+0x3c>
 80048b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	e7fe      	b.n	80048c2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80048c4:	ea23 0302 	bic.w	r3, r3, r2
 80048c8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 80048cc:	f000 ff04 	bl	80056d8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048d0:	4a08      	ldr	r2, [pc, #32]	; (80048f4 <vPortFree+0x6c>)
 80048d2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80048d6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048d8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80048dc:	440b      	add	r3, r1
 80048de:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80048e0:	f7ff ff20 	bl	8004724 <prvInsertBlockIntoFreeList>
}
 80048e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80048e8:	f000 bf90 	b.w	800580c <xTaskResumeAll>
 80048ec:	bd10      	pop	{r4, pc}
 80048ee:	bf00      	nop
 80048f0:	20001010 	.word	0x20001010
 80048f4:	20001014 	.word	0x20001014

080048f8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048f8:	f100 0308 	add.w	r3, r0, #8
 80048fc:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048fe:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004902:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004904:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004906:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004908:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800490a:	6003      	str	r3, [r0, #0]
 800490c:	4770      	bx	lr

0800490e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	6103      	str	r3, [r0, #16]
 8004912:	4770      	bx	lr

08004914 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004914:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004916:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800491c:	689a      	ldr	r2, [r3, #8]
 800491e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004920:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004922:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004924:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004926:	3301      	adds	r3, #1
 8004928:	6003      	str	r3, [r0, #0]
 800492a:	4770      	bx	lr

0800492c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800492c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800492e:	1c53      	adds	r3, r2, #1
{
 8004930:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8004932:	d10a      	bne.n	800494a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004934:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800493a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800493c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800493e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004940:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004942:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004944:	3301      	adds	r3, #1
 8004946:	6003      	str	r3, [r0, #0]
 8004948:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800494a:	f100 0308 	add.w	r3, r0, #8
 800494e:	685c      	ldr	r4, [r3, #4]
 8004950:	6825      	ldr	r5, [r4, #0]
 8004952:	42aa      	cmp	r2, r5
 8004954:	d3ef      	bcc.n	8004936 <vListInsert+0xa>
 8004956:	4623      	mov	r3, r4
 8004958:	e7f9      	b.n	800494e <vListInsert+0x22>

0800495a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800495a:	6841      	ldr	r1, [r0, #4]
 800495c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 800495e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004960:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004962:	6882      	ldr	r2, [r0, #8]
 8004964:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004966:	6859      	ldr	r1, [r3, #4]
 8004968:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800496a:	bf08      	it	eq
 800496c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800496e:	2200      	movs	r2, #0
 8004970:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	3a01      	subs	r2, #1
 8004976:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004978:	6818      	ldr	r0, [r3, #0]
}
 800497a:	4770      	bx	lr

0800497c <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800497c:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800497e:	2300      	movs	r3, #0
 8004980:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004982:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <prvTaskExitError+0x3c>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3301      	adds	r3, #1
 8004988:	d008      	beq.n	800499c <prvTaskExitError+0x20>
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	e7fe      	b.n	800499a <prvTaskExitError+0x1e>
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80049ac:	9b01      	ldr	r3, [sp, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0fc      	beq.n	80049ac <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80049b2:	b002      	add	sp, #8
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000008 	.word	0x20000008

080049bc <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80049bc:	4808      	ldr	r0, [pc, #32]	; (80049e0 <prvPortStartFirstTask+0x24>)
 80049be:	6800      	ldr	r0, [r0, #0]
 80049c0:	6800      	ldr	r0, [r0, #0]
 80049c2:	f380 8808 	msr	MSP, r0
 80049c6:	f04f 0000 	mov.w	r0, #0
 80049ca:	f380 8814 	msr	CONTROL, r0
 80049ce:	b662      	cpsie	i
 80049d0:	b661      	cpsie	f
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	df00      	svc	0
 80049dc:	bf00      	nop
 80049de:	0000      	.short	0x0000
 80049e0:	e000ed08 	.word	0xe000ed08

080049e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049f4 <vPortEnableVFP+0x10>
 80049e8:	6801      	ldr	r1, [r0, #0]
 80049ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049ee:	6001      	str	r1, [r0, #0]
 80049f0:	4770      	bx	lr
 80049f2:	0000      	.short	0x0000
 80049f4:	e000ed88 	.word	0xe000ed88

080049f8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049fc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004a00:	4b07      	ldr	r3, [pc, #28]	; (8004a20 <pxPortInitialiseStack+0x28>)
 8004a02:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a06:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a0a:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004a0e:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004a12:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a16:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8004a1a:	3844      	subs	r0, #68	; 0x44
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	0800497d 	.word	0x0800497d
	...

08004a30 <SVC_Handler>:
	__asm volatile (
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <pxCurrentTCBConst2>)
 8004a32:	6819      	ldr	r1, [r3, #0]
 8004a34:	6808      	ldr	r0, [r1, #0]
 8004a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3a:	f380 8809 	msr	PSP, r0
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f380 8811 	msr	BASEPRI, r0
 8004a4a:	4770      	bx	lr
 8004a4c:	f3af 8000 	nop.w

08004a50 <pxCurrentTCBConst2>:
 8004a50:	2000102c 	.word	0x2000102c

08004a54 <vPortEnterCritical>:
 8004a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a58:	f383 8811 	msr	BASEPRI, r3
 8004a5c:	f3bf 8f6f 	isb	sy
 8004a60:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8004a64:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <vPortEnterCritical+0x3c>)
 8004a66:	6813      	ldr	r3, [r2, #0]
 8004a68:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8004a6a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004a6c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004a6e:	d10d      	bne.n	8004a8c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a70:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <vPortEnterCritical+0x40>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004a78:	d008      	beq.n	8004a8c <vPortEnterCritical+0x38>
 8004a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	e7fe      	b.n	8004a8a <vPortEnterCritical+0x36>
 8004a8c:	4770      	bx	lr
 8004a8e:	bf00      	nop
 8004a90:	20000008 	.word	0x20000008
 8004a94:	e000ed04 	.word	0xe000ed04

08004a98 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8004a98:	4a08      	ldr	r2, [pc, #32]	; (8004abc <vPortExitCritical+0x24>)
 8004a9a:	6813      	ldr	r3, [r2, #0]
 8004a9c:	b943      	cbnz	r3, 8004ab0 <vPortExitCritical+0x18>
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	e7fe      	b.n	8004aae <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ab4:	b90b      	cbnz	r3, 8004aba <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	4770      	bx	lr
 8004abc:	20000008 	.word	0x20000008

08004ac0 <PendSV_Handler>:
	__asm volatile
 8004ac0:	f3ef 8009 	mrs	r0, PSP
 8004ac4:	f3bf 8f6f 	isb	sy
 8004ac8:	4b15      	ldr	r3, [pc, #84]	; (8004b20 <pxCurrentTCBConst>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	f01e 0f10 	tst.w	lr, #16
 8004ad0:	bf08      	it	eq
 8004ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ada:	6010      	str	r0, [r2, #0]
 8004adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ae0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ae4:	f380 8811 	msr	BASEPRI, r0
 8004ae8:	f3bf 8f4f 	dsb	sy
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f000 ff28 	bl	8005944 <vTaskSwitchContext>
 8004af4:	f04f 0000 	mov.w	r0, #0
 8004af8:	f380 8811 	msr	BASEPRI, r0
 8004afc:	bc09      	pop	{r0, r3}
 8004afe:	6819      	ldr	r1, [r3, #0]
 8004b00:	6808      	ldr	r0, [r1, #0]
 8004b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b06:	f01e 0f10 	tst.w	lr, #16
 8004b0a:	bf08      	it	eq
 8004b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b10:	f380 8809 	msr	PSP, r0
 8004b14:	f3bf 8f6f 	isb	sy
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	f3af 8000 	nop.w

08004b20 <pxCurrentTCBConst>:
 8004b20:	2000102c 	.word	0x2000102c

08004b24 <SysTick_Handler>:
{
 8004b24:	b508      	push	{r3, lr}
	__asm volatile
 8004b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2a:	f383 8811 	msr	BASEPRI, r3
 8004b2e:	f3bf 8f6f 	isb	sy
 8004b32:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004b36:	f000 fdd7 	bl	80056e8 <xTaskIncrementTick>
 8004b3a:	b118      	cbz	r0, 8004b44 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b3c:	4b03      	ldr	r3, [pc, #12]	; (8004b4c <SysTick_Handler+0x28>)
 8004b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b42:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004b44:	2300      	movs	r3, #0
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	bd08      	pop	{r3, pc}
 8004b4c:	e000ed04 	.word	0xe000ed04

08004b50 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b50:	4a08      	ldr	r2, [pc, #32]	; (8004b74 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b52:	4909      	ldr	r1, [pc, #36]	; (8004b78 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004b54:	2300      	movs	r3, #0
 8004b56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004b58:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b5a:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <vPortSetupTimerInterrupt+0x2c>)
 8004b5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b66:	4906      	ldr	r1, [pc, #24]	; (8004b80 <vPortSetupTimerInterrupt+0x30>)
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004b6c:	2307      	movs	r3, #7
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	e000e010 	.word	0xe000e010
 8004b78:	e000e018 	.word	0xe000e018
 8004b7c:	2000001c 	.word	0x2000001c
 8004b80:	e000e014 	.word	0xe000e014

08004b84 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b84:	4b39      	ldr	r3, [pc, #228]	; (8004c6c <xPortStartScheduler+0xe8>)
 8004b86:	4a3a      	ldr	r2, [pc, #232]	; (8004c70 <xPortStartScheduler+0xec>)
{
 8004b88:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004b8a:	6819      	ldr	r1, [r3, #0]
 8004b8c:	4291      	cmp	r1, r2
 8004b8e:	d108      	bne.n	8004ba2 <xPortStartScheduler+0x1e>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	e7fe      	b.n	8004ba0 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4b33      	ldr	r3, [pc, #204]	; (8004c74 <xPortStartScheduler+0xf0>)
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d108      	bne.n	8004bbc <xPortStartScheduler+0x38>
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	e7fe      	b.n	8004bba <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004bbc:	4b2e      	ldr	r3, [pc, #184]	; (8004c78 <xPortStartScheduler+0xf4>)
 8004bbe:	781a      	ldrb	r2, [r3, #0]
 8004bc0:	b2d2      	uxtb	r2, r2
 8004bc2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004bc4:	22ff      	movs	r2, #255	; 0xff
 8004bc6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bc8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bca:	4a2c      	ldr	r2, [pc, #176]	; (8004c7c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004bd2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004bd6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004bda:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004bdc:	4b28      	ldr	r3, [pc, #160]	; (8004c80 <xPortStartScheduler+0xfc>)
 8004bde:	2207      	movs	r2, #7
 8004be0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004be2:	2100      	movs	r1, #0
 8004be4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8004be8:	0600      	lsls	r0, r0, #24
 8004bea:	f102 34ff 	add.w	r4, r2, #4294967295
 8004bee:	d40d      	bmi.n	8004c0c <xPortStartScheduler+0x88>
 8004bf0:	b101      	cbz	r1, 8004bf4 <xPortStartScheduler+0x70>
 8004bf2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	2a03      	cmp	r2, #3
 8004bf8:	d011      	beq.n	8004c1e <xPortStartScheduler+0x9a>
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	e7fe      	b.n	8004c0a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c0c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004c10:	0052      	lsls	r2, r2, #1
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	f88d 2003 	strb.w	r2, [sp, #3]
 8004c18:	2101      	movs	r1, #1
 8004c1a:	4622      	mov	r2, r4
 8004c1c:	e7e2      	b.n	8004be4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c1e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c20:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8004c24:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c26:	9b01      	ldr	r3, [sp, #4]
 8004c28:	4a13      	ldr	r2, [pc, #76]	; (8004c78 <xPortStartScheduler+0xf4>)
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004c2e:	4b15      	ldr	r3, [pc, #84]	; (8004c84 <xPortStartScheduler+0x100>)
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004c36:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004c3e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004c40:	f7ff ff86 	bl	8004b50 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004c44:	4b10      	ldr	r3, [pc, #64]	; (8004c88 <xPortStartScheduler+0x104>)
 8004c46:	2400      	movs	r4, #0
 8004c48:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8004c4a:	f7ff fecb 	bl	80049e4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004c4e:	4a0f      	ldr	r2, [pc, #60]	; (8004c8c <xPortStartScheduler+0x108>)
 8004c50:	6813      	ldr	r3, [r2, #0]
 8004c52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004c56:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004c58:	f7ff feb0 	bl	80049bc <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004c5c:	f000 fe72 	bl	8005944 <vTaskSwitchContext>
	prvTaskExitError();
 8004c60:	f7ff fe8c 	bl	800497c <prvTaskExitError>
}
 8004c64:	4620      	mov	r0, r4
 8004c66:	b002      	add	sp, #8
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	bf00      	nop
 8004c6c:	e000ed00 	.word	0xe000ed00
 8004c70:	410fc271 	.word	0x410fc271
 8004c74:	410fc270 	.word	0x410fc270
 8004c78:	e000e400 	.word	0xe000e400
 8004c7c:	20001024 	.word	0x20001024
 8004c80:	20001028 	.word	0x20001028
 8004c84:	e000ed20 	.word	0xe000ed20
 8004c88:	20000008 	.word	0x20000008
 8004c8c:	e000ef34 	.word	0xe000ef34

08004c90 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c90:	b510      	push	{r4, lr}
 8004c92:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c94:	f7ff fede 	bl	8004a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c98:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004c9a:	f7ff fefd 	bl	8004a98 <vPortExitCritical>

	return xReturn;
}
 8004c9e:	fab4 f084 	clz	r0, r4
 8004ca2:	0940      	lsrs	r0, r0, #5
 8004ca4:	bd10      	pop	{r4, pc}

08004ca6 <prvCopyDataToQueue>:
{
 8004ca6:	b570      	push	{r4, r5, r6, lr}
 8004ca8:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004caa:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cac:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8004cae:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cb0:	b942      	cbnz	r2, 8004cc4 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cb2:	6805      	ldr	r5, [r0, #0]
 8004cb4:	b99d      	cbnz	r5, 8004cde <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cb6:	6880      	ldr	r0, [r0, #8]
 8004cb8:	f000 ff8c 	bl	8005bd4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cbc:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004cbe:	3601      	adds	r6, #1
 8004cc0:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8004cc2:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8004cc4:	b96d      	cbnz	r5, 8004ce2 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cc6:	6840      	ldr	r0, [r0, #4]
 8004cc8:	f002 fd8a 	bl	80077e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ccc:	6863      	ldr	r3, [r4, #4]
 8004cce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8004cd0:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cd2:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cd4:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d301      	bcc.n	8004cde <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8004cde:	2000      	movs	r0, #0
 8004ce0:	e7ed      	b.n	8004cbe <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ce2:	68c0      	ldr	r0, [r0, #12]
 8004ce4:	f002 fd7c 	bl	80077e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ce8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cea:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cec:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004cee:	425b      	negs	r3, r3
 8004cf0:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cf2:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004cf4:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004cf6:	bf3e      	ittt	cc
 8004cf8:	68a2      	ldrcc	r2, [r4, #8]
 8004cfa:	189b      	addcc	r3, r3, r2
 8004cfc:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8004cfe:	2d02      	cmp	r5, #2
 8004d00:	d1ed      	bne.n	8004cde <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d02:	b10e      	cbz	r6, 8004d08 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8004d04:	3e01      	subs	r6, #1
 8004d06:	e7ea      	b.n	8004cde <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8004d08:	4630      	mov	r0, r6
 8004d0a:	e7d8      	b.n	8004cbe <prvCopyDataToQueue+0x18>

08004d0c <prvCopyDataFromQueue>:
{
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8004d12:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d14:	b162      	cbz	r2, 8004d30 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d16:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d18:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d1a:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d1c:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d1e:	60d9      	str	r1, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d20:	bf24      	itt	cs
 8004d22:	6819      	ldrcs	r1, [r3, #0]
 8004d24:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d26:	68d9      	ldr	r1, [r3, #12]
}
 8004d28:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d2c:	f002 bd58 	b.w	80077e0 <memcpy>
}
 8004d30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <prvUnlockQueue>:
{
 8004d36:	b570      	push	{r4, r5, r6, lr}
 8004d38:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004d3a:	f7ff fe8b 	bl	8004a54 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8004d3e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d42:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8004d46:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	dc14      	bgt.n	8004d76 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8004d4c:	23ff      	movs	r3, #255	; 0xff
 8004d4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004d52:	f7ff fea1 	bl	8004a98 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004d56:	f7ff fe7d 	bl	8004a54 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8004d5a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d5e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8004d62:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d64:	2d00      	cmp	r5, #0
 8004d66:	dc12      	bgt.n	8004d8e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8004d68:	23ff      	movs	r3, #255	; 0xff
 8004d6a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8004d6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004d72:	f7ff be91 	b.w	8004a98 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0e7      	beq.n	8004d4c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	f000 fe35 	bl	80059ec <xTaskRemoveFromEventList>
 8004d82:	b108      	cbz	r0, 8004d88 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8004d84:	f000 febc 	bl	8005b00 <vTaskMissedYield>
 8004d88:	3d01      	subs	r5, #1
 8004d8a:	b26d      	sxtb	r5, r5
 8004d8c:	e7dc      	b.n	8004d48 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d8e:	6923      	ldr	r3, [r4, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0e9      	beq.n	8004d68 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d94:	4630      	mov	r0, r6
 8004d96:	f000 fe29 	bl	80059ec <xTaskRemoveFromEventList>
 8004d9a:	b108      	cbz	r0, 8004da0 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8004d9c:	f000 feb0 	bl	8005b00 <vTaskMissedYield>
 8004da0:	3d01      	subs	r5, #1
 8004da2:	b26d      	sxtb	r5, r5
 8004da4:	e7de      	b.n	8004d64 <prvUnlockQueue+0x2e>
	...

08004da8 <xQueueGenericReset>:
{
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004dac:	4604      	mov	r4, r0
 8004dae:	b940      	cbnz	r0, 8004dc2 <xQueueGenericReset+0x1a>
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	e7fe      	b.n	8004dc0 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8004dc2:	f7ff fe47 	bl	8004a54 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dc6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004dc8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004dca:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dcc:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dce:	4343      	muls	r3, r0
 8004dd0:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dd2:	1a1b      	subs	r3, r3, r0
 8004dd4:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dd6:	60a1      	str	r1, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dd8:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004dda:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8004ddc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004dde:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004de0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004de4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004de8:	b995      	cbnz	r5, 8004e10 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dea:	6923      	ldr	r3, [r4, #16]
 8004dec:	b163      	cbz	r3, 8004e08 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dee:	f104 0010 	add.w	r0, r4, #16
 8004df2:	f000 fdfb 	bl	80059ec <xTaskRemoveFromEventList>
 8004df6:	b138      	cbz	r0, 8004e08 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8004df8:	4b0a      	ldr	r3, [pc, #40]	; (8004e24 <xQueueGenericReset+0x7c>)
 8004dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004e08:	f7ff fe46 	bl	8004a98 <vPortExitCritical>
}
 8004e0c:	2001      	movs	r0, #1
 8004e0e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e10:	f104 0010 	add.w	r0, r4, #16
 8004e14:	f7ff fd70 	bl	80048f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e18:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e1c:	f7ff fd6c 	bl	80048f8 <vListInitialise>
 8004e20:	e7f2      	b.n	8004e08 <xQueueGenericReset+0x60>
 8004e22:	bf00      	nop
 8004e24:	e000ed04 	.word	0xe000ed04

08004e28 <xQueueGenericCreate>:
	{
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	b940      	cbnz	r0, 8004e42 <xQueueGenericCreate+0x1a>
 8004e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e34:	f383 8811 	msr	BASEPRI, r3
 8004e38:	f3bf 8f6f 	isb	sy
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	e7fe      	b.n	8004e40 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e42:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e44:	3048      	adds	r0, #72	; 0x48
 8004e46:	f7ff fc91 	bl	800476c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	b150      	cbz	r0, 8004e64 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004e54:	b945      	cbnz	r5, 8004e68 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004e56:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004e58:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004e5a:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	4620      	mov	r0, r4
 8004e60:	f7ff ffa2 	bl	8004da8 <xQueueGenericReset>
	}
 8004e64:	4620      	mov	r0, r4
 8004e66:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e68:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004e6c:	6003      	str	r3, [r0, #0]
 8004e6e:	e7f3      	b.n	8004e58 <xQueueGenericCreate+0x30>

08004e70 <xQueueGenericSend>:
{
 8004e70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e74:	4689      	mov	r9, r1
 8004e76:	9201      	str	r2, [sp, #4]
 8004e78:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	b940      	cbnz	r0, 8004e90 <xQueueGenericSend+0x20>
 8004e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	e7fe      	b.n	8004e8e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e90:	2900      	cmp	r1, #0
 8004e92:	f040 8088 	bne.w	8004fa6 <xQueueGenericSend+0x136>
 8004e96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 8084 	beq.w	8004fa6 <xQueueGenericSend+0x136>
 8004e9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	e7fe      	b.n	8004eae <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004eb0:	9e01      	ldr	r6, [sp, #4]
 8004eb2:	2e00      	cmp	r6, #0
 8004eb4:	f000 8082 	beq.w	8004fbc <xQueueGenericSend+0x14c>
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	f383 8811 	msr	BASEPRI, r3
 8004ec0:	f3bf 8f6f 	isb	sy
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	e7fe      	b.n	8004ec8 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004eca:	9d01      	ldr	r5, [sp, #4]
 8004ecc:	b91d      	cbnz	r5, 8004ed6 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 8004ece:	f7ff fde3 	bl	8004a98 <vPortExitCritical>
			return errQUEUE_FULL;
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	e058      	b.n	8004f88 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8004ed6:	b916      	cbnz	r6, 8004ede <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ed8:	a802      	add	r0, sp, #8
 8004eda:	f000 fdc9 	bl	8005a70 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004ede:	f7ff fddb 	bl	8004a98 <vPortExitCritical>
		vTaskSuspendAll();
 8004ee2:	f000 fbf9 	bl	80056d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ee6:	f7ff fdb5 	bl	8004a54 <vPortEnterCritical>
 8004eea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004eee:	2bff      	cmp	r3, #255	; 0xff
 8004ef0:	bf08      	it	eq
 8004ef2:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8004ef6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004efa:	2bff      	cmp	r3, #255	; 0xff
 8004efc:	bf08      	it	eq
 8004efe:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8004f02:	f7ff fdc9 	bl	8004a98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f06:	a901      	add	r1, sp, #4
 8004f08:	a802      	add	r0, sp, #8
 8004f0a:	f000 fdbd 	bl	8005a88 <xTaskCheckForTimeOut>
 8004f0e:	2800      	cmp	r0, #0
 8004f10:	d143      	bne.n	8004f9a <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f12:	f7ff fd9f 	bl	8004a54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f16:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004f18:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004f1a:	f7ff fdbd 	bl	8004a98 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f1e:	42ae      	cmp	r6, r5
 8004f20:	d135      	bne.n	8004f8e <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f22:	9901      	ldr	r1, [sp, #4]
 8004f24:	f104 0010 	add.w	r0, r4, #16
 8004f28:	f000 fd46 	bl	80059b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f2c:	4620      	mov	r0, r4
 8004f2e:	f7ff ff02 	bl	8004d36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f32:	f000 fc6b 	bl	800580c <xTaskResumeAll>
 8004f36:	b938      	cbnz	r0, 8004f48 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 8004f38:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f3c:	f8ca 3000 	str.w	r3, [sl]
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	f3bf 8f6f 	isb	sy
 8004f48:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004f4a:	f7ff fd83 	bl	8004a54 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f4e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f50:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d301      	bcc.n	8004f5a <xQueueGenericSend+0xea>
 8004f56:	2f02      	cmp	r7, #2
 8004f58:	d1b7      	bne.n	8004eca <xQueueGenericSend+0x5a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f5a:	463a      	mov	r2, r7
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f7ff fea1 	bl	8004ca6 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f66:	b11b      	cbz	r3, 8004f70 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f68:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004f6c:	f000 fd3e 	bl	80059ec <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004f70:	b138      	cbz	r0, 8004f82 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8004f72:	4b19      	ldr	r3, [pc, #100]	; (8004fd8 <xQueueGenericSend+0x168>)
 8004f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004f82:	f7ff fd89 	bl	8004a98 <vPortExitCritical>
				return pdPASS;
 8004f86:	2001      	movs	r0, #1
}
 8004f88:	b004      	add	sp, #16
 8004f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f7ff fed1 	bl	8004d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f94:	f000 fc3a 	bl	800580c <xTaskResumeAll>
 8004f98:	e7d6      	b.n	8004f48 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f7ff fecb 	bl	8004d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fa0:	f000 fc34 	bl	800580c <xTaskResumeAll>
 8004fa4:	e795      	b.n	8004ed2 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fa6:	2f02      	cmp	r7, #2
 8004fa8:	d102      	bne.n	8004fb0 <xQueueGenericSend+0x140>
 8004faa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d10a      	bne.n	8004fc6 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004fb0:	f000 fdac 	bl	8005b0c <xTaskGetSchedulerState>
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	f43f af7b 	beq.w	8004eb0 <xQueueGenericSend+0x40>
 8004fba:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004fbc:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004fc0:	f8df a014 	ldr.w	sl, [pc, #20]	; 8004fd8 <xQueueGenericSend+0x168>
 8004fc4:	e7c1      	b.n	8004f4a <xQueueGenericSend+0xda>
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	e7fe      	b.n	8004fd6 <xQueueGenericSend+0x166>
 8004fd8:	e000ed04 	.word	0xe000ed04

08004fdc <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 8004fdc:	b138      	cbz	r0, 8004fee <prvInitialiseMutex+0x12>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004fe2:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004fe4:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4619      	mov	r1, r3
 8004fea:	f7ff bf41 	b.w	8004e70 <xQueueGenericSend>
 8004fee:	4770      	bx	lr

08004ff0 <xQueueCreateMutex>:
	{
 8004ff0:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	2001      	movs	r0, #1
 8004ff8:	f7ff ff16 	bl	8004e28 <xQueueGenericCreate>
 8004ffc:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004ffe:	f7ff ffed 	bl	8004fdc <prvInitialiseMutex>
	}
 8005002:	4620      	mov	r0, r4
 8005004:	bd10      	pop	{r4, pc}
	...

08005008 <xQueueReceive>:
{
 8005008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800500c:	b085      	sub	sp, #20
 800500e:	4688      	mov	r8, r1
 8005010:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005012:	4604      	mov	r4, r0
 8005014:	b940      	cbnz	r0, 8005028 <xQueueReceive+0x20>
 8005016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501a:	f383 8811 	msr	BASEPRI, r3
 800501e:	f3bf 8f6f 	isb	sy
 8005022:	f3bf 8f4f 	dsb	sy
 8005026:	e7fe      	b.n	8005026 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005028:	2900      	cmp	r1, #0
 800502a:	f040 8086 	bne.w	800513a <xQueueReceive+0x132>
 800502e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8082 	beq.w	800513a <xQueueReceive+0x132>
 8005036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503a:	f383 8811 	msr	BASEPRI, r3
 800503e:	f3bf 8f6f 	isb	sy
 8005042:	f3bf 8f4f 	dsb	sy
 8005046:	e7fe      	b.n	8005046 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005048:	9e01      	ldr	r6, [sp, #4]
 800504a:	2e00      	cmp	r6, #0
 800504c:	d07a      	beq.n	8005144 <xQueueReceive+0x13c>
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	e7fe      	b.n	800505e <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 8005060:	9d01      	ldr	r5, [sp, #4]
 8005062:	b91d      	cbnz	r5, 800506c <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 8005064:	f7ff fd18 	bl	8004a98 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8005068:	2000      	movs	r0, #0
 800506a:	e052      	b.n	8005112 <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 800506c:	b916      	cbnz	r6, 8005074 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800506e:	a802      	add	r0, sp, #8
 8005070:	f000 fcfe 	bl	8005a70 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005074:	f7ff fd10 	bl	8004a98 <vPortExitCritical>
		vTaskSuspendAll();
 8005078:	f000 fb2e 	bl	80056d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800507c:	f7ff fcea 	bl	8004a54 <vPortEnterCritical>
 8005080:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005084:	2bff      	cmp	r3, #255	; 0xff
 8005086:	bf08      	it	eq
 8005088:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 800508c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005090:	2bff      	cmp	r3, #255	; 0xff
 8005092:	bf08      	it	eq
 8005094:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005098:	f7ff fcfe 	bl	8004a98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800509c:	a901      	add	r1, sp, #4
 800509e:	a802      	add	r0, sp, #8
 80050a0:	f000 fcf2 	bl	8005a88 <xTaskCheckForTimeOut>
 80050a4:	2800      	cmp	r0, #0
 80050a6:	d13d      	bne.n	8005124 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050a8:	4620      	mov	r0, r4
 80050aa:	f7ff fdf1 	bl	8004c90 <prvIsQueueEmpty>
 80050ae:	b398      	cbz	r0, 8005118 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050b0:	9901      	ldr	r1, [sp, #4]
 80050b2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80050b6:	f000 fc7f 	bl	80059b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050ba:	4620      	mov	r0, r4
 80050bc:	f7ff fe3b 	bl	8004d36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050c0:	f000 fba4 	bl	800580c <xTaskResumeAll>
 80050c4:	b938      	cbnz	r0, 80050d6 <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 80050c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80050ca:	f8c9 3000 	str.w	r3, [r9]
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80050d8:	f7ff fcbc 	bl	8004a54 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050dc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050de:	2d00      	cmp	r5, #0
 80050e0:	d0be      	beq.n	8005060 <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050e2:	4641      	mov	r1, r8
 80050e4:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050e6:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80050e8:	f7ff fe10 	bl	8004d0c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80050ec:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050ee:	6923      	ldr	r3, [r4, #16]
 80050f0:	b163      	cbz	r3, 800510c <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050f2:	f104 0010 	add.w	r0, r4, #16
 80050f6:	f000 fc79 	bl	80059ec <xTaskRemoveFromEventList>
 80050fa:	b138      	cbz	r0, 800510c <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 80050fc:	4b13      	ldr	r3, [pc, #76]	; (800514c <xQueueReceive+0x144>)
 80050fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	f3bf 8f4f 	dsb	sy
 8005108:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800510c:	f7ff fcc4 	bl	8004a98 <vPortExitCritical>
				return pdPASS;
 8005110:	2001      	movs	r0, #1
}
 8005112:	b005      	add	sp, #20
 8005114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8005118:	4620      	mov	r0, r4
 800511a:	f7ff fe0c 	bl	8004d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800511e:	f000 fb75 	bl	800580c <xTaskResumeAll>
 8005122:	e7d8      	b.n	80050d6 <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 8005124:	4620      	mov	r0, r4
 8005126:	f7ff fe06 	bl	8004d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800512a:	f000 fb6f 	bl	800580c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800512e:	4620      	mov	r0, r4
 8005130:	f7ff fdae 	bl	8004c90 <prvIsQueueEmpty>
 8005134:	2800      	cmp	r0, #0
 8005136:	d0ce      	beq.n	80050d6 <xQueueReceive+0xce>
 8005138:	e796      	b.n	8005068 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800513a:	f000 fce7 	bl	8005b0c <xTaskGetSchedulerState>
 800513e:	2800      	cmp	r0, #0
 8005140:	d082      	beq.n	8005048 <xQueueReceive+0x40>
 8005142:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8005144:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8005146:	f8df 9004 	ldr.w	r9, [pc, #4]	; 800514c <xQueueReceive+0x144>
 800514a:	e7c5      	b.n	80050d8 <xQueueReceive+0xd0>
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <xQueueSemaphoreTake>:
{
 8005150:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8005154:	4604      	mov	r4, r0
{
 8005156:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8005158:	b940      	cbnz	r0, 800516c <xQueueSemaphoreTake+0x1c>
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	e7fe      	b.n	800516a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800516c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800516e:	b145      	cbz	r5, 8005182 <xQueueSemaphoreTake+0x32>
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	e7fe      	b.n	8005180 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005182:	f000 fcc3 	bl	8005b0c <xTaskGetSchedulerState>
 8005186:	b918      	cbnz	r0, 8005190 <xQueueSemaphoreTake+0x40>
 8005188:	9d01      	ldr	r5, [sp, #4]
 800518a:	2d00      	cmp	r5, #0
 800518c:	f040 8095 	bne.w	80052ba <xQueueSemaphoreTake+0x16a>
					portYIELD_WITHIN_API();
 8005190:	f8df 8138 	ldr.w	r8, [pc, #312]	; 80052cc <xQueueSemaphoreTake+0x17c>
 8005194:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8005196:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 8005198:	f7ff fc5c 	bl	8004a54 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800519c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800519e:	b1e3      	cbz	r3, 80051da <xQueueSemaphoreTake+0x8a>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80051a0:	3b01      	subs	r3, #1
 80051a2:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	b913      	cbnz	r3, 80051ae <xQueueSemaphoreTake+0x5e>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80051a8:	f000 fdbe 	bl	8005d28 <pvTaskIncrementMutexHeldCount>
 80051ac:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ae:	6923      	ldr	r3, [r4, #16]
 80051b0:	b163      	cbz	r3, 80051cc <xQueueSemaphoreTake+0x7c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051b2:	f104 0010 	add.w	r0, r4, #16
 80051b6:	f000 fc19 	bl	80059ec <xTaskRemoveFromEventList>
 80051ba:	b138      	cbz	r0, 80051cc <xQueueSemaphoreTake+0x7c>
						queueYIELD_IF_USING_PREEMPTION();
 80051bc:	4b43      	ldr	r3, [pc, #268]	; (80052cc <xQueueSemaphoreTake+0x17c>)
 80051be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80051cc:	f7ff fc64 	bl	8004a98 <vPortExitCritical>
				return pdPASS;
 80051d0:	2501      	movs	r5, #1
}
 80051d2:	4628      	mov	r0, r5
 80051d4:	b004      	add	sp, #16
 80051d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( xTicksToWait == ( TickType_t ) 0 )
 80051da:	9b01      	ldr	r3, [sp, #4]
 80051dc:	b963      	cbnz	r3, 80051f8 <xQueueSemaphoreTake+0xa8>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80051de:	b145      	cbz	r5, 80051f2 <xQueueSemaphoreTake+0xa2>
 80051e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	e7fe      	b.n	80051f0 <xQueueSemaphoreTake+0xa0>
					taskEXIT_CRITICAL();
 80051f2:	f7ff fc51 	bl	8004a98 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80051f6:	e7ec      	b.n	80051d2 <xQueueSemaphoreTake+0x82>
				else if( xEntryTimeSet == pdFALSE )
 80051f8:	b916      	cbnz	r6, 8005200 <xQueueSemaphoreTake+0xb0>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051fa:	a802      	add	r0, sp, #8
 80051fc:	f000 fc38 	bl	8005a70 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8005200:	f7ff fc4a 	bl	8004a98 <vPortExitCritical>
		vTaskSuspendAll();
 8005204:	f000 fa68 	bl	80056d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005208:	f7ff fc24 	bl	8004a54 <vPortEnterCritical>
 800520c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005210:	2bff      	cmp	r3, #255	; 0xff
 8005212:	bf08      	it	eq
 8005214:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8005218:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800521c:	2bff      	cmp	r3, #255	; 0xff
 800521e:	bf08      	it	eq
 8005220:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8005224:	f7ff fc38 	bl	8004a98 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005228:	a901      	add	r1, sp, #4
 800522a:	a802      	add	r0, sp, #8
 800522c:	f000 fc2c 	bl	8005a88 <xTaskCheckForTimeOut>
 8005230:	bb40      	cbnz	r0, 8005284 <xQueueSemaphoreTake+0x134>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005232:	4620      	mov	r0, r4
 8005234:	f7ff fd2c 	bl	8004c90 <prvIsQueueEmpty>
 8005238:	b1f0      	cbz	r0, 8005278 <xQueueSemaphoreTake+0x128>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	b93b      	cbnz	r3, 800524e <xQueueSemaphoreTake+0xfe>
						taskENTER_CRITICAL();
 800523e:	f7ff fc09 	bl	8004a54 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005242:	68a0      	ldr	r0, [r4, #8]
 8005244:	f000 fc72 	bl	8005b2c <xTaskPriorityInherit>
 8005248:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800524a:	f7ff fc25 	bl	8004a98 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800524e:	9901      	ldr	r1, [sp, #4]
 8005250:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8005254:	f000 fbb0 	bl	80059b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005258:	4620      	mov	r0, r4
 800525a:	f7ff fd6c 	bl	8004d36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800525e:	f000 fad5 	bl	800580c <xTaskResumeAll>
 8005262:	b938      	cbnz	r0, 8005274 <xQueueSemaphoreTake+0x124>
					portYIELD_WITHIN_API();
 8005264:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8005268:	f8c8 3000 	str.w	r3, [r8]
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	2601      	movs	r6, #1
 8005276:	e78f      	b.n	8005198 <xQueueSemaphoreTake+0x48>
				prvUnlockQueue( pxQueue );
 8005278:	4620      	mov	r0, r4
 800527a:	f7ff fd5c 	bl	8004d36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800527e:	f000 fac5 	bl	800580c <xTaskResumeAll>
 8005282:	e7f7      	b.n	8005274 <xQueueSemaphoreTake+0x124>
			prvUnlockQueue( pxQueue );
 8005284:	4620      	mov	r0, r4
 8005286:	f7ff fd56 	bl	8004d36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800528a:	f000 fabf 	bl	800580c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800528e:	4620      	mov	r0, r4
 8005290:	f7ff fcfe 	bl	8004c90 <prvIsQueueEmpty>
 8005294:	2800      	cmp	r0, #0
 8005296:	d0ed      	beq.n	8005274 <xQueueSemaphoreTake+0x124>
					if( xInheritanceOccurred != pdFALSE )
 8005298:	2d00      	cmp	r5, #0
 800529a:	d09a      	beq.n	80051d2 <xQueueSemaphoreTake+0x82>
						taskENTER_CRITICAL();
 800529c:	f7ff fbda 	bl	8004a54 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80052a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80052a2:	b119      	cbz	r1, 80052ac <xQueueSemaphoreTake+0x15c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80052a4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80052a6:	6819      	ldr	r1, [r3, #0]
 80052a8:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80052ac:	68a0      	ldr	r0, [r4, #8]
 80052ae:	f000 fce1 	bl	8005c74 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 80052b2:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 80052b4:	f7ff fbf0 	bl	8004a98 <vPortExitCritical>
 80052b8:	e78b      	b.n	80051d2 <xQueueSemaphoreTake+0x82>
 80052ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052be:	f383 8811 	msr	BASEPRI, r3
 80052c2:	f3bf 8f6f 	isb	sy
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	e7fe      	b.n	80052ca <xQueueSemaphoreTake+0x17a>
 80052cc:	e000ed04 	.word	0xe000ed04

080052d0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052d4:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052d6:	f7ff fbbd 	bl	8004a54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052da:	4b2d      	ldr	r3, [pc, #180]	; (8005390 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 80052dc:	4c2d      	ldr	r4, [pc, #180]	; (8005394 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 80052de:	681a      	ldr	r2, [r3, #0]
 80052e0:	4f2d      	ldr	r7, [pc, #180]	; (8005398 <prvAddNewTaskToReadyList+0xc8>)
 80052e2:	3201      	adds	r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80052e6:	6825      	ldr	r5, [r4, #0]
 80052e8:	2d00      	cmp	r5, #0
 80052ea:	d145      	bne.n	8005378 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052ec:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d11c      	bne.n	800532e <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80052f4:	1978      	adds	r0, r7, r5
 80052f6:	3514      	adds	r5, #20
 80052f8:	f7ff fafe 	bl	80048f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80052fc:	2d8c      	cmp	r5, #140	; 0x8c
 80052fe:	d1f9      	bne.n	80052f4 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005300:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 80053c4 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8005304:	4d25      	ldr	r5, [pc, #148]	; (800539c <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8005306:	4640      	mov	r0, r8
 8005308:	f7ff faf6 	bl	80048f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800530c:	4628      	mov	r0, r5
 800530e:	f7ff faf3 	bl	80048f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005312:	4823      	ldr	r0, [pc, #140]	; (80053a0 <prvAddNewTaskToReadyList+0xd0>)
 8005314:	f7ff faf0 	bl	80048f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005318:	4822      	ldr	r0, [pc, #136]	; (80053a4 <prvAddNewTaskToReadyList+0xd4>)
 800531a:	f7ff faed 	bl	80048f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800531e:	4822      	ldr	r0, [pc, #136]	; (80053a8 <prvAddNewTaskToReadyList+0xd8>)
 8005320:	f7ff faea 	bl	80048f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005324:	4b21      	ldr	r3, [pc, #132]	; (80053ac <prvAddNewTaskToReadyList+0xdc>)
 8005326:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800532a:	4b21      	ldr	r3, [pc, #132]	; (80053b0 <prvAddNewTaskToReadyList+0xe0>)
 800532c:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800532e:	4a21      	ldr	r2, [pc, #132]	; (80053b4 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8005330:	4921      	ldr	r1, [pc, #132]	; (80053b8 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8005332:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8005334:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8005336:	3301      	adds	r3, #1
 8005338:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800533a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 800533c:	2301      	movs	r3, #1
 800533e:	4093      	lsls	r3, r2
 8005340:	4303      	orrs	r3, r0
 8005342:	2014      	movs	r0, #20
 8005344:	600b      	str	r3, [r1, #0]
 8005346:	fb00 7002 	mla	r0, r0, r2, r7
 800534a:	1d31      	adds	r1, r6, #4
 800534c:	f7ff fae2 	bl	8004914 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8005350:	f7ff fba2 	bl	8004a98 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8005354:	4b19      	ldr	r3, [pc, #100]	; (80053bc <prvAddNewTaskToReadyList+0xec>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	b163      	cbz	r3, 8005374 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800535e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005360:	429a      	cmp	r2, r3
 8005362:	d207      	bcs.n	8005374 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8005364:	4b16      	ldr	r3, [pc, #88]	; (80053c0 <prvAddNewTaskToReadyList+0xf0>)
 8005366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	f3bf 8f6f 	isb	sy
 8005374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8005378:	4b10      	ldr	r3, [pc, #64]	; (80053bc <prvAddNewTaskToReadyList+0xec>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1d6      	bne.n	800532e <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005380:	6823      	ldr	r3, [r4, #0]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005386:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8005388:	bf98      	it	ls
 800538a:	6026      	strls	r6, [r4, #0]
 800538c:	e7cf      	b.n	800532e <prvAddNewTaskToReadyList+0x5e>
 800538e:	bf00      	nop
 8005390:	200010c4 	.word	0x200010c4
 8005394:	2000102c 	.word	0x2000102c
 8005398:	20001038 	.word	0x20001038
 800539c:	200010f0 	.word	0x200010f0
 80053a0:	2000110c 	.word	0x2000110c
 80053a4:	20001138 	.word	0x20001138
 80053a8:	20001124 	.word	0x20001124
 80053ac:	20001030 	.word	0x20001030
 80053b0:	20001034 	.word	0x20001034
 80053b4:	200010d4 	.word	0x200010d4
 80053b8:	200010d8 	.word	0x200010d8
 80053bc:	20001120 	.word	0x20001120
 80053c0:	e000ed04 	.word	0xe000ed04
 80053c4:	200010dc 	.word	0x200010dc

080053c8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053c8:	4a06      	ldr	r2, [pc, #24]	; (80053e4 <prvResetNextTaskUnblockTime+0x1c>)
 80053ca:	6813      	ldr	r3, [r2, #0]
 80053cc:	6819      	ldr	r1, [r3, #0]
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <prvResetNextTaskUnblockTime+0x20>)
 80053d0:	b919      	cbnz	r1, 80053da <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80053d2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053da:	6812      	ldr	r2, [r2, #0]
 80053dc:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80053de:	68d2      	ldr	r2, [r2, #12]
 80053e0:	6852      	ldr	r2, [r2, #4]
 80053e2:	e7f8      	b.n	80053d6 <prvResetNextTaskUnblockTime+0xe>
 80053e4:	20001030 	.word	0x20001030
 80053e8:	20001104 	.word	0x20001104

080053ec <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80053ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053f0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80053f4:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80053f6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80053fa:	3a01      	subs	r2, #1
 80053fc:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005400:	4680      	mov	r8, r0
 8005402:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005404:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8005408:	b391      	cbz	r1, 8005470 <prvInitialiseNewTask.isra.2+0x84>
 800540a:	1e4b      	subs	r3, r1, #1
 800540c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8005410:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005412:	7858      	ldrb	r0, [r3, #1]
 8005414:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8005418:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800541c:	b108      	cbz	r0, 8005422 <prvInitialiseNewTask.isra.2+0x36>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800541e:	428b      	cmp	r3, r1
 8005420:	d1f7      	bne.n	8005412 <prvInitialiseNewTask.isra.2+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005422:	2300      	movs	r3, #0
 8005424:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005428:	9d08      	ldr	r5, [sp, #32]
 800542a:	2d06      	cmp	r5, #6
 800542c:	bf28      	it	cs
 800542e:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8005430:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8005434:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8005436:	6465      	str	r5, [r4, #68]	; 0x44
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005438:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800543a:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800543e:	f7ff fa66 	bl	800490e <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005442:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005446:	f104 0018 	add.w	r0, r4, #24
 800544a:	f7ff fa60 	bl	800490e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800544e:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005452:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005454:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005456:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005458:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800545c:	464a      	mov	r2, r9
 800545e:	4641      	mov	r1, r8
 8005460:	4630      	mov	r0, r6
 8005462:	f7ff fac9 	bl	80049f8 <pxPortInitialiseStack>
 8005466:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 8005468:	b107      	cbz	r7, 800546c <prvInitialiseNewTask.isra.2+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800546a:	603c      	str	r4, [r7, #0]
 800546c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005470:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8005474:	e7d8      	b.n	8005428 <prvInitialiseNewTask.isra.2+0x3c>

08005476 <prvDeleteTCB>:
	{
 8005476:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005478:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 800547c:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800547e:	b93b      	cbnz	r3, 8005490 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8005480:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8005482:	f7ff fa01 	bl	8004888 <vPortFree>
				vPortFree( pxTCB );
 8005486:	4620      	mov	r0, r4
	}
 8005488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800548c:	f7ff b9fc 	b.w	8004888 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005490:	2b01      	cmp	r3, #1
 8005492:	d0f9      	beq.n	8005488 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005494:	2b02      	cmp	r3, #2
 8005496:	d008      	beq.n	80054aa <prvDeleteTCB+0x34>
 8005498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	e7fe      	b.n	80054a8 <prvDeleteTCB+0x32>
 80054aa:	bd10      	pop	{r4, pc}

080054ac <prvIdleTask>:
{
 80054ac:	b580      	push	{r7, lr}
				taskYIELD();
 80054ae:	f8df 805c 	ldr.w	r8, [pc, #92]	; 800550c <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b2:	4f12      	ldr	r7, [pc, #72]	; (80054fc <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054b4:	4c12      	ldr	r4, [pc, #72]	; (8005500 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80054b6:	4d13      	ldr	r5, [pc, #76]	; (8005504 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054b8:	6823      	ldr	r3, [r4, #0]
 80054ba:	b963      	cbnz	r3, 80054d6 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054bc:	4b12      	ldr	r3, [pc, #72]	; (8005508 <prvIdleTask+0x5c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	2b01      	cmp	r3, #1
 80054c2:	d9f8      	bls.n	80054b6 <prvIdleTask+0xa>
				taskYIELD();
 80054c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80054c8:	f8c8 3000 	str.w	r3, [r8]
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	f3bf 8f6f 	isb	sy
 80054d4:	e7ee      	b.n	80054b4 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80054d6:	f7ff fabd 	bl	8004a54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054de:	1d30      	adds	r0, r6, #4
 80054e0:	f7ff fa3b 	bl	800495a <uxListRemove>
				--uxCurrentNumberOfTasks;
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	3b01      	subs	r3, #1
 80054e8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	3b01      	subs	r3, #1
 80054ee:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80054f0:	f7ff fad2 	bl	8004a98 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80054f4:	4630      	mov	r0, r6
 80054f6:	f7ff ffbe 	bl	8005476 <prvDeleteTCB>
 80054fa:	e7dd      	b.n	80054b8 <prvIdleTask+0xc>
 80054fc:	20001138 	.word	0x20001138
 8005500:	200010c8 	.word	0x200010c8
 8005504:	200010c4 	.word	0x200010c4
 8005508:	20001038 	.word	0x20001038
 800550c:	e000ed04 	.word	0xe000ed04

08005510 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005512:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005514:	4e1b      	ldr	r6, [pc, #108]	; (8005584 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 8005516:	681d      	ldr	r5, [r3, #0]
{
 8005518:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800551a:	6830      	ldr	r0, [r6, #0]
 800551c:	3004      	adds	r0, #4
{
 800551e:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005520:	f7ff fa1b 	bl	800495a <uxListRemove>
 8005524:	4633      	mov	r3, r6
 8005526:	b940      	cbnz	r0, 800553a <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005528:	6831      	ldr	r1, [r6, #0]
 800552a:	4e17      	ldr	r6, [pc, #92]	; (8005588 <prvAddCurrentTaskToDelayedList+0x78>)
 800552c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800552e:	6832      	ldr	r2, [r6, #0]
 8005530:	2001      	movs	r0, #1
 8005532:	4088      	lsls	r0, r1
 8005534:	ea22 0200 	bic.w	r2, r2, r0
 8005538:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800553a:	1c62      	adds	r2, r4, #1
 800553c:	d107      	bne.n	800554e <prvAddCurrentTaskToDelayedList+0x3e>
 800553e:	b137      	cbz	r7, 800554e <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005540:	6819      	ldr	r1, [r3, #0]
 8005542:	4812      	ldr	r0, [pc, #72]	; (800558c <prvAddCurrentTaskToDelayedList+0x7c>)
 8005544:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005546:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800554a:	f7ff b9e3 	b.w	8004914 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800554e:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005550:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8005552:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005554:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8005556:	d907      	bls.n	8005568 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005558:	4a0d      	ldr	r2, [pc, #52]	; (8005590 <prvAddCurrentTaskToDelayedList+0x80>)
 800555a:	6810      	ldr	r0, [r2, #0]
 800555c:	6819      	ldr	r1, [r3, #0]
}
 800555e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005562:	3104      	adds	r1, #4
 8005564:	f7ff b9e2 	b.w	800492c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005568:	4a0a      	ldr	r2, [pc, #40]	; (8005594 <prvAddCurrentTaskToDelayedList+0x84>)
 800556a:	6810      	ldr	r0, [r2, #0]
 800556c:	6819      	ldr	r1, [r3, #0]
 800556e:	3104      	adds	r1, #4
 8005570:	f7ff f9dc 	bl	800492c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005574:	4b08      	ldr	r3, [pc, #32]	; (8005598 <prvAddCurrentTaskToDelayedList+0x88>)
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800557a:	bf38      	it	cc
 800557c:	601c      	strcc	r4, [r3, #0]
 800557e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005580:	2000114c 	.word	0x2000114c
 8005584:	2000102c 	.word	0x2000102c
 8005588:	200010d8 	.word	0x200010d8
 800558c:	20001124 	.word	0x20001124
 8005590:	20001034 	.word	0x20001034
 8005594:	20001030 	.word	0x20001030
 8005598:	20001104 	.word	0x20001104

0800559c <prvTaskIsTaskSuspended.part.0>:
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	e7fe      	b.n	80055ac <prvTaskIsTaskSuspended.part.0+0x10>

080055ae <xTaskCreateStatic>:
	{
 80055ae:	b570      	push	{r4, r5, r6, lr}
 80055b0:	b086      	sub	sp, #24
 80055b2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80055b4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80055b6:	b90d      	cbnz	r5, 80055bc <xTaskCreateStatic+0xe>
 80055b8:	f7ff fff0 	bl	800559c <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 80055bc:	b944      	cbnz	r4, 80055d0 <xTaskCreateStatic+0x22>
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	e7fe      	b.n	80055ce <xTaskCreateStatic+0x20>
			volatile size_t xSize = sizeof( StaticTask_t );
 80055d0:	2654      	movs	r6, #84	; 0x54
 80055d2:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80055d4:	9e05      	ldr	r6, [sp, #20]
 80055d6:	2e54      	cmp	r6, #84	; 0x54
 80055d8:	d008      	beq.n	80055ec <xTaskCreateStatic+0x3e>
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	e7fe      	b.n	80055ea <xTaskCreateStatic+0x3c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80055ec:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80055ee:	2502      	movs	r5, #2
 80055f0:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80055f4:	ad04      	add	r5, sp, #16
 80055f6:	9501      	str	r5, [sp, #4]
 80055f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80055fa:	9402      	str	r4, [sp, #8]
 80055fc:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80055fe:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005600:	f7ff fef4 	bl	80053ec <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005604:	4620      	mov	r0, r4
 8005606:	f7ff fe63 	bl	80052d0 <prvAddNewTaskToReadyList>
	}
 800560a:	9804      	ldr	r0, [sp, #16]
 800560c:	b006      	add	sp, #24
 800560e:	bd70      	pop	{r4, r5, r6, pc}

08005610 <xTaskCreate>:
	{
 8005610:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005614:	4607      	mov	r7, r0
 8005616:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005618:	0090      	lsls	r0, r2, #2
	{
 800561a:	4688      	mov	r8, r1
 800561c:	4616      	mov	r6, r2
 800561e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005620:	f7ff f8a4 	bl	800476c <pvPortMalloc>
			if( pxStack != NULL )
 8005624:	4605      	mov	r5, r0
 8005626:	b1e8      	cbz	r0, 8005664 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005628:	2054      	movs	r0, #84	; 0x54
 800562a:	f7ff f89f 	bl	800476c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800562e:	4604      	mov	r4, r0
 8005630:	b1a8      	cbz	r0, 800565e <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005632:	2300      	movs	r3, #0
 8005634:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005638:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 800563a:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800563c:	9301      	str	r3, [sp, #4]
 800563e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005640:	9002      	str	r0, [sp, #8]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	4632      	mov	r2, r6
 8005646:	464b      	mov	r3, r9
 8005648:	4641      	mov	r1, r8
 800564a:	4638      	mov	r0, r7
 800564c:	f7ff fece 	bl	80053ec <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005650:	4620      	mov	r0, r4
 8005652:	f7ff fe3d 	bl	80052d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005656:	2001      	movs	r0, #1
	}
 8005658:	b005      	add	sp, #20
 800565a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 800565e:	4628      	mov	r0, r5
 8005660:	f7ff f912 	bl	8004888 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005664:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8005668:	e7f6      	b.n	8005658 <xTaskCreate+0x48>
	...

0800566c <vTaskStartScheduler>:
{
 800566c:	b510      	push	{r4, lr}
 800566e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005670:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005672:	aa07      	add	r2, sp, #28
 8005674:	a906      	add	r1, sp, #24
 8005676:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005678:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800567a:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800567c:	f000 fd70 	bl	8006160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005680:	9b05      	ldr	r3, [sp, #20]
 8005682:	9302      	str	r3, [sp, #8]
 8005684:	9b06      	ldr	r3, [sp, #24]
 8005686:	9301      	str	r3, [sp, #4]
 8005688:	9400      	str	r4, [sp, #0]
 800568a:	4623      	mov	r3, r4
 800568c:	9a07      	ldr	r2, [sp, #28]
 800568e:	490d      	ldr	r1, [pc, #52]	; (80056c4 <vTaskStartScheduler+0x58>)
 8005690:	480d      	ldr	r0, [pc, #52]	; (80056c8 <vTaskStartScheduler+0x5c>)
 8005692:	f7ff ff8c 	bl	80055ae <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8005696:	b190      	cbz	r0, 80056be <vTaskStartScheduler+0x52>
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80056a8:	4b08      	ldr	r3, [pc, #32]	; (80056cc <vTaskStartScheduler+0x60>)
 80056aa:	f04f 32ff 	mov.w	r2, #4294967295
 80056ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80056b0:	4b07      	ldr	r3, [pc, #28]	; (80056d0 <vTaskStartScheduler+0x64>)
 80056b2:	2201      	movs	r2, #1
 80056b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80056b6:	4b07      	ldr	r3, [pc, #28]	; (80056d4 <vTaskStartScheduler+0x68>)
 80056b8:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80056ba:	f7ff fa63 	bl	8004b84 <xPortStartScheduler>
}
 80056be:	b008      	add	sp, #32
 80056c0:	bd10      	pop	{r4, pc}
 80056c2:	bf00      	nop
 80056c4:	0800864d 	.word	0x0800864d
 80056c8:	080054ad 	.word	0x080054ad
 80056cc:	20001104 	.word	0x20001104
 80056d0:	20001120 	.word	0x20001120
 80056d4:	2000114c 	.word	0x2000114c

080056d8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80056d8:	4a02      	ldr	r2, [pc, #8]	; (80056e4 <vTaskSuspendAll+0xc>)
 80056da:	6813      	ldr	r3, [r2, #0]
 80056dc:	3301      	adds	r3, #1
 80056de:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	200010d0 	.word	0x200010d0

080056e8 <xTaskIncrementTick>:
{
 80056e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056ec:	4b3c      	ldr	r3, [pc, #240]	; (80057e0 <xTaskIncrementTick+0xf8>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d16d      	bne.n	80057d0 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056f4:	4b3b      	ldr	r3, [pc, #236]	; (80057e4 <xTaskIncrementTick+0xfc>)
 80056f6:	681c      	ldr	r4, [r3, #0]
 80056f8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80056fa:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056fc:	b9bc      	cbnz	r4, 800572e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80056fe:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <xTaskIncrementTick+0x100>)
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	6812      	ldr	r2, [r2, #0]
 8005704:	b142      	cbz	r2, 8005718 <xTaskIncrementTick+0x30>
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	e7fe      	b.n	8005716 <xTaskIncrementTick+0x2e>
 8005718:	4a34      	ldr	r2, [pc, #208]	; (80057ec <xTaskIncrementTick+0x104>)
 800571a:	6819      	ldr	r1, [r3, #0]
 800571c:	6810      	ldr	r0, [r2, #0]
 800571e:	6018      	str	r0, [r3, #0]
 8005720:	6011      	str	r1, [r2, #0]
 8005722:	4a33      	ldr	r2, [pc, #204]	; (80057f0 <xTaskIncrementTick+0x108>)
 8005724:	6813      	ldr	r3, [r2, #0]
 8005726:	3301      	adds	r3, #1
 8005728:	6013      	str	r3, [r2, #0]
 800572a:	f7ff fe4d 	bl	80053c8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800572e:	4d31      	ldr	r5, [pc, #196]	; (80057f4 <xTaskIncrementTick+0x10c>)
 8005730:	4f31      	ldr	r7, [pc, #196]	; (80057f8 <xTaskIncrementTick+0x110>)
 8005732:	682b      	ldr	r3, [r5, #0]
 8005734:	429c      	cmp	r4, r3
 8005736:	f04f 0b00 	mov.w	fp, #0
 800573a:	d30a      	bcc.n	8005752 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800573c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80057e8 <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8005740:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8005808 <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005744:	f8da 2000 	ldr.w	r2, [sl]
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	b9a2      	cbnz	r2, 8005776 <xTaskIncrementTick+0x8e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800574c:	f04f 32ff 	mov.w	r2, #4294967295
 8005750:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	4b29      	ldr	r3, [pc, #164]	; (80057fc <xTaskIncrementTick+0x114>)
 8005756:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005758:	2214      	movs	r2, #20
 800575a:	434a      	muls	r2, r1
 800575c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 800575e:	2a02      	cmp	r2, #2
 8005760:	bf28      	it	cs
 8005762:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8005766:	4a26      	ldr	r2, [pc, #152]	; (8005800 <xTaskIncrementTick+0x118>)
 8005768:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800576a:	2a00      	cmp	r2, #0
}
 800576c:	bf0c      	ite	eq
 800576e:	4658      	moveq	r0, fp
 8005770:	2001      	movne	r0, #1
 8005772:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005776:	f8da 2000 	ldr.w	r2, [sl]
 800577a:	68d2      	ldr	r2, [r2, #12]
 800577c:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800577e:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8005780:	428c      	cmp	r4, r1
 8005782:	d201      	bcs.n	8005788 <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = xItemValue;
 8005784:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005786:	e7e4      	b.n	8005752 <xTaskIncrementTick+0x6a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005788:	f106 0804 	add.w	r8, r6, #4
 800578c:	4640      	mov	r0, r8
 800578e:	f7ff f8e4 	bl	800495a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005792:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8005794:	b119      	cbz	r1, 800579e <xTaskIncrementTick+0xb6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005796:	f106 0018 	add.w	r0, r6, #24
 800579a:	f7ff f8de 	bl	800495a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800579e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80057a0:	f8d9 3000 	ldr.w	r3, [r9]
 80057a4:	2201      	movs	r2, #1
 80057a6:	fa02 f100 	lsl.w	r1, r2, r0
 80057aa:	4319      	orrs	r1, r3
 80057ac:	4b13      	ldr	r3, [pc, #76]	; (80057fc <xTaskIncrementTick+0x114>)
 80057ae:	f8c9 1000 	str.w	r1, [r9]
 80057b2:	f04f 0e14 	mov.w	lr, #20
 80057b6:	4641      	mov	r1, r8
 80057b8:	fb0e 3000 	mla	r0, lr, r0, r3
 80057bc:	f7ff f8aa 	bl	8004914 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057c0:	6838      	ldr	r0, [r7, #0]
 80057c2:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80057c4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80057c6:	4291      	cmp	r1, r2
 80057c8:	bf28      	it	cs
 80057ca:	f04f 0b01 	movcs.w	fp, #1
 80057ce:	e7b9      	b.n	8005744 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80057d0:	4a0c      	ldr	r2, [pc, #48]	; (8005804 <xTaskIncrementTick+0x11c>)
 80057d2:	6813      	ldr	r3, [r2, #0]
 80057d4:	3301      	adds	r3, #1
 80057d6:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80057d8:	f04f 0b00 	mov.w	fp, #0
 80057dc:	e7c3      	b.n	8005766 <xTaskIncrementTick+0x7e>
 80057de:	bf00      	nop
 80057e0:	200010d0 	.word	0x200010d0
 80057e4:	2000114c 	.word	0x2000114c
 80057e8:	20001030 	.word	0x20001030
 80057ec:	20001034 	.word	0x20001034
 80057f0:	20001108 	.word	0x20001108
 80057f4:	20001104 	.word	0x20001104
 80057f8:	2000102c 	.word	0x2000102c
 80057fc:	20001038 	.word	0x20001038
 8005800:	20001150 	.word	0x20001150
 8005804:	200010cc 	.word	0x200010cc
 8005808:	200010d8 	.word	0x200010d8

0800580c <xTaskResumeAll>:
{
 800580c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8005810:	4c31      	ldr	r4, [pc, #196]	; (80058d8 <xTaskResumeAll+0xcc>)
 8005812:	6823      	ldr	r3, [r4, #0]
 8005814:	b943      	cbnz	r3, 8005828 <xTaskResumeAll+0x1c>
 8005816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	e7fe      	b.n	8005826 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8005828:	f7ff f914 	bl	8004a54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	3b01      	subs	r3, #1
 8005830:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005832:	6824      	ldr	r4, [r4, #0]
 8005834:	b12c      	cbz	r4, 8005842 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8005836:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005838:	f7ff f92e 	bl	8004a98 <vPortExitCritical>
}
 800583c:	4620      	mov	r0, r4
 800583e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005842:	4b26      	ldr	r3, [pc, #152]	; (80058dc <xTaskResumeAll+0xd0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d0f5      	beq.n	8005836 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800584a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80058f4 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 800584e:	4f24      	ldr	r7, [pc, #144]	; (80058e0 <xTaskResumeAll+0xd4>)
 8005850:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80058f8 <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005854:	f8d9 3000 	ldr.w	r3, [r9]
 8005858:	b9e3      	cbnz	r3, 8005894 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800585a:	b10c      	cbz	r4, 8005860 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 800585c:	f7ff fdb4 	bl	80053c8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005860:	4d20      	ldr	r5, [pc, #128]	; (80058e4 <xTaskResumeAll+0xd8>)
 8005862:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005864:	b144      	cbz	r4, 8005878 <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 8005866:	4e20      	ldr	r6, [pc, #128]	; (80058e8 <xTaskResumeAll+0xdc>)
 8005868:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800586a:	f7ff ff3d 	bl	80056e8 <xTaskIncrementTick>
 800586e:	b100      	cbz	r0, 8005872 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8005870:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005872:	3c01      	subs	r4, #1
 8005874:	d1f9      	bne.n	800586a <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 8005876:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8005878:	4b1b      	ldr	r3, [pc, #108]	; (80058e8 <xTaskResumeAll+0xdc>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0da      	beq.n	8005836 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8005880:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <xTaskResumeAll+0xe0>)
 8005882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8005890:	2401      	movs	r4, #1
 8005892:	e7d1      	b.n	8005838 <xTaskResumeAll+0x2c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005894:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8005898:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800589a:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800589c:	f104 0018 	add.w	r0, r4, #24
 80058a0:	f7ff f85b 	bl	800495a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a4:	4630      	mov	r0, r6
 80058a6:	f7ff f858 	bl	800495a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80058ac:	6839      	ldr	r1, [r7, #0]
 80058ae:	2501      	movs	r5, #1
 80058b0:	fa05 f302 	lsl.w	r3, r5, r2
 80058b4:	2014      	movs	r0, #20
 80058b6:	430b      	orrs	r3, r1
 80058b8:	fb00 8002 	mla	r0, r0, r2, r8
 80058bc:	4631      	mov	r1, r6
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	f7ff f828 	bl	8004914 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058c4:	4b0a      	ldr	r3, [pc, #40]	; (80058f0 <xTaskResumeAll+0xe4>)
 80058c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80058ce:	bf24      	itt	cs
 80058d0:	4b05      	ldrcs	r3, [pc, #20]	; (80058e8 <xTaskResumeAll+0xdc>)
 80058d2:	601d      	strcs	r5, [r3, #0]
 80058d4:	e7be      	b.n	8005854 <xTaskResumeAll+0x48>
 80058d6:	bf00      	nop
 80058d8:	200010d0 	.word	0x200010d0
 80058dc:	200010c4 	.word	0x200010c4
 80058e0:	200010d8 	.word	0x200010d8
 80058e4:	200010cc 	.word	0x200010cc
 80058e8:	20001150 	.word	0x20001150
 80058ec:	e000ed04 	.word	0xe000ed04
 80058f0:	2000102c 	.word	0x2000102c
 80058f4:	2000110c 	.word	0x2000110c
 80058f8:	20001038 	.word	0x20001038

080058fc <vTaskDelay>:
	{
 80058fc:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80058fe:	b940      	cbnz	r0, 8005912 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8005900:	4b0e      	ldr	r3, [pc, #56]	; (800593c <vTaskDelay+0x40>)
 8005902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005906:	601a      	str	r2, [r3, #0]
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <vTaskDelay+0x44>)
 8005914:	6819      	ldr	r1, [r3, #0]
 8005916:	b141      	cbz	r1, 800592a <vTaskDelay+0x2e>
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	e7fe      	b.n	8005928 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800592a:	f7ff fed5 	bl	80056d8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800592e:	f7ff fdef 	bl	8005510 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8005932:	f7ff ff6b 	bl	800580c <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8005936:	2800      	cmp	r0, #0
 8005938:	d0e2      	beq.n	8005900 <vTaskDelay+0x4>
 800593a:	bd08      	pop	{r3, pc}
 800593c:	e000ed04 	.word	0xe000ed04
 8005940:	200010d0 	.word	0x200010d0

08005944 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005944:	4b17      	ldr	r3, [pc, #92]	; (80059a4 <vTaskSwitchContext+0x60>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b17      	ldr	r3, [pc, #92]	; (80059a8 <vTaskSwitchContext+0x64>)
{
 800594a:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800594c:	b112      	cbz	r2, 8005954 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800594e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8005954:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005956:	4b15      	ldr	r3, [pc, #84]	; (80059ac <vTaskSwitchContext+0x68>)
 8005958:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800595a:	fab3 f383 	clz	r3, r3
 800595e:	b2db      	uxtb	r3, r3
 8005960:	f1c3 031f 	rsb	r3, r3, #31
 8005964:	2214      	movs	r2, #20
 8005966:	4912      	ldr	r1, [pc, #72]	; (80059b0 <vTaskSwitchContext+0x6c>)
 8005968:	435a      	muls	r2, r3
 800596a:	1888      	adds	r0, r1, r2
 800596c:	588c      	ldr	r4, [r1, r2]
 800596e:	b944      	cbnz	r4, 8005982 <vTaskSwitchContext+0x3e>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	e7fe      	b.n	8005980 <vTaskSwitchContext+0x3c>
 8005982:	6844      	ldr	r4, [r0, #4]
 8005984:	3208      	adds	r2, #8
 8005986:	6864      	ldr	r4, [r4, #4]
 8005988:	6044      	str	r4, [r0, #4]
 800598a:	440a      	add	r2, r1
 800598c:	4294      	cmp	r4, r2
 800598e:	bf04      	itt	eq
 8005990:	6862      	ldreq	r2, [r4, #4]
 8005992:	6042      	streq	r2, [r0, #4]
 8005994:	2214      	movs	r2, #20
 8005996:	fb02 1303 	mla	r3, r2, r3, r1
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	68da      	ldr	r2, [r3, #12]
 800599e:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <vTaskSwitchContext+0x70>)
 80059a0:	e7d6      	b.n	8005950 <vTaskSwitchContext+0xc>
 80059a2:	bf00      	nop
 80059a4:	200010d0 	.word	0x200010d0
 80059a8:	20001150 	.word	0x20001150
 80059ac:	200010d8 	.word	0x200010d8
 80059b0:	20001038 	.word	0x20001038
 80059b4:	2000102c 	.word	0x2000102c

080059b8 <vTaskPlaceOnEventList>:
{
 80059b8:	b510      	push	{r4, lr}
 80059ba:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80059bc:	b940      	cbnz	r0, 80059d0 <vTaskPlaceOnEventList+0x18>
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	e7fe      	b.n	80059ce <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059d0:	4b05      	ldr	r3, [pc, #20]	; (80059e8 <vTaskPlaceOnEventList+0x30>)
 80059d2:	6819      	ldr	r1, [r3, #0]
 80059d4:	3118      	adds	r1, #24
 80059d6:	f7fe ffa9 	bl	800492c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059da:	4620      	mov	r0, r4
 80059dc:	2101      	movs	r1, #1
}
 80059de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059e2:	f7ff bd95 	b.w	8005510 <prvAddCurrentTaskToDelayedList>
 80059e6:	bf00      	nop
 80059e8:	2000102c 	.word	0x2000102c

080059ec <xTaskRemoveFromEventList>:
{
 80059ec:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059ee:	68c3      	ldr	r3, [r0, #12]
 80059f0:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80059f2:	b944      	cbnz	r4, 8005a06 <xTaskRemoveFromEventList+0x1a>
 80059f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f8:	f383 8811 	msr	BASEPRI, r3
 80059fc:	f3bf 8f6f 	isb	sy
 8005a00:	f3bf 8f4f 	dsb	sy
 8005a04:	e7fe      	b.n	8005a04 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a06:	f104 0518 	add.w	r5, r4, #24
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	f7fe ffa5 	bl	800495a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a10:	4b11      	ldr	r3, [pc, #68]	; (8005a58 <xTaskRemoveFromEventList+0x6c>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	b9e3      	cbnz	r3, 8005a50 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a16:	1d25      	adds	r5, r4, #4
 8005a18:	4628      	mov	r0, r5
 8005a1a:	f7fe ff9e 	bl	800495a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a1e:	490f      	ldr	r1, [pc, #60]	; (8005a5c <xTaskRemoveFromEventList+0x70>)
 8005a20:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a22:	6808      	ldr	r0, [r1, #0]
 8005a24:	2301      	movs	r3, #1
 8005a26:	4093      	lsls	r3, r2
 8005a28:	4303      	orrs	r3, r0
 8005a2a:	600b      	str	r3, [r1, #0]
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	; (8005a60 <xTaskRemoveFromEventList+0x74>)
 8005a2e:	2014      	movs	r0, #20
 8005a30:	4629      	mov	r1, r5
 8005a32:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a36:	f7fe ff6d 	bl	8004914 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a3a:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <xTaskRemoveFromEventList+0x78>)
 8005a3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8005a44:	bf83      	ittte	hi
 8005a46:	4b08      	ldrhi	r3, [pc, #32]	; (8005a68 <xTaskRemoveFromEventList+0x7c>)
 8005a48:	2001      	movhi	r0, #1
 8005a4a:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8005a4c:	2000      	movls	r0, #0
}
 8005a4e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a50:	4629      	mov	r1, r5
 8005a52:	4806      	ldr	r0, [pc, #24]	; (8005a6c <xTaskRemoveFromEventList+0x80>)
 8005a54:	e7ef      	b.n	8005a36 <xTaskRemoveFromEventList+0x4a>
 8005a56:	bf00      	nop
 8005a58:	200010d0 	.word	0x200010d0
 8005a5c:	200010d8 	.word	0x200010d8
 8005a60:	20001038 	.word	0x20001038
 8005a64:	2000102c 	.word	0x2000102c
 8005a68:	20001150 	.word	0x20001150
 8005a6c:	2000110c 	.word	0x2000110c

08005a70 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a70:	4b03      	ldr	r3, [pc, #12]	; (8005a80 <vTaskInternalSetTimeOutState+0x10>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a76:	4b03      	ldr	r3, [pc, #12]	; (8005a84 <vTaskInternalSetTimeOutState+0x14>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6043      	str	r3, [r0, #4]
 8005a7c:	4770      	bx	lr
 8005a7e:	bf00      	nop
 8005a80:	20001108 	.word	0x20001108
 8005a84:	2000114c 	.word	0x2000114c

08005a88 <xTaskCheckForTimeOut>:
{
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8005a8c:	4605      	mov	r5, r0
 8005a8e:	b940      	cbnz	r0, 8005aa2 <xTaskCheckForTimeOut+0x1a>
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	e7fe      	b.n	8005aa0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8005aa2:	b941      	cbnz	r1, 8005ab6 <xTaskCheckForTimeOut+0x2e>
 8005aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	e7fe      	b.n	8005ab4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8005ab6:	f7fe ffcd 	bl	8004a54 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8005aba:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005abc:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8005abe:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005ac0:	6823      	ldr	r3, [r4, #0]
 8005ac2:	1c58      	adds	r0, r3, #1
 8005ac4:	d00e      	beq.n	8005ae4 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005ac6:	480d      	ldr	r0, [pc, #52]	; (8005afc <xTaskCheckForTimeOut+0x74>)
 8005ac8:	682e      	ldr	r6, [r5, #0]
 8005aca:	6800      	ldr	r0, [r0, #0]
 8005acc:	4286      	cmp	r6, r0
 8005ace:	d001      	beq.n	8005ad4 <xTaskCheckForTimeOut+0x4c>
 8005ad0:	428a      	cmp	r2, r1
 8005ad2:	d20e      	bcs.n	8005af2 <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ad4:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d209      	bcs.n	8005aee <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ade:	4628      	mov	r0, r5
 8005ae0:	f7ff ffc6 	bl	8005a70 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8005ae4:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8005ae6:	f7fe ffd7 	bl	8004a98 <vPortExitCritical>
}
 8005aea:	4620      	mov	r0, r4
 8005aec:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8005aee:	2300      	movs	r3, #0
 8005af0:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8005af2:	2401      	movs	r4, #1
 8005af4:	e7f7      	b.n	8005ae6 <xTaskCheckForTimeOut+0x5e>
 8005af6:	bf00      	nop
 8005af8:	2000114c 	.word	0x2000114c
 8005afc:	20001108 	.word	0x20001108

08005b00 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8005b00:	4b01      	ldr	r3, [pc, #4]	; (8005b08 <vTaskMissedYield+0x8>)
 8005b02:	2201      	movs	r2, #1
 8005b04:	601a      	str	r2, [r3, #0]
 8005b06:	4770      	bx	lr
 8005b08:	20001150 	.word	0x20001150

08005b0c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <xTaskGetSchedulerState+0x18>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	b133      	cbz	r3, 8005b20 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b12:	4b05      	ldr	r3, [pc, #20]	; (8005b28 <xTaskGetSchedulerState+0x1c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b18:	bf0c      	ite	eq
 8005b1a:	2002      	moveq	r0, #2
 8005b1c:	2000      	movne	r0, #0
 8005b1e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b20:	2001      	movs	r0, #1
	}
 8005b22:	4770      	bx	lr
 8005b24:	20001120 	.word	0x20001120
 8005b28:	200010d0 	.word	0x200010d0

08005b2c <xTaskPriorityInherit>:
	{
 8005b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8005b30:	4604      	mov	r4, r0
 8005b32:	2800      	cmp	r0, #0
 8005b34:	d035      	beq.n	8005ba2 <xTaskPriorityInherit+0x76>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005b36:	4a24      	ldr	r2, [pc, #144]	; (8005bc8 <xTaskPriorityInherit+0x9c>)
 8005b38:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005b3a:	6811      	ldr	r1, [r2, #0]
 8005b3c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8005b3e:	428b      	cmp	r3, r1
 8005b40:	4617      	mov	r7, r2
 8005b42:	d237      	bcs.n	8005bb4 <xTaskPriorityInherit+0x88>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b44:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b46:	4d21      	ldr	r5, [pc, #132]	; (8005bcc <xTaskPriorityInherit+0xa0>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b48:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b4a:	bfa1      	itttt	ge
 8005b4c:	683a      	ldrge	r2, [r7, #0]
 8005b4e:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8005b50:	f1c2 0207 	rsbge	r2, r2, #7
 8005b54:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005b56:	2614      	movs	r6, #20
 8005b58:	6942      	ldr	r2, [r0, #20]
 8005b5a:	fb06 5303 	mla	r3, r6, r3, r5
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d122      	bne.n	8005ba8 <xTaskPriorityInherit+0x7c>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b62:	f100 0804 	add.w	r8, r0, #4
 8005b66:	4640      	mov	r0, r8
 8005b68:	f7fe fef7 	bl	800495a <uxListRemove>
 8005b6c:	4b18      	ldr	r3, [pc, #96]	; (8005bd0 <xTaskPriorityInherit+0xa4>)
 8005b6e:	b948      	cbnz	r0, 8005b84 <xTaskPriorityInherit+0x58>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005b70:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8005b72:	4346      	muls	r6, r0
 8005b74:	59aa      	ldr	r2, [r5, r6]
 8005b76:	b92a      	cbnz	r2, 8005b84 <xTaskPriorityInherit+0x58>
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	2101      	movs	r1, #1
 8005b7c:	4081      	lsls	r1, r0
 8005b7e:	ea22 0201 	bic.w	r2, r2, r1
 8005b82:	601a      	str	r2, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b84:	683a      	ldr	r2, [r7, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005b86:	6819      	ldr	r1, [r3, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005b8a:	62e2      	str	r2, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005b8c:	2401      	movs	r4, #1
 8005b8e:	fa04 f002 	lsl.w	r0, r4, r2
 8005b92:	4308      	orrs	r0, r1
 8005b94:	6018      	str	r0, [r3, #0]
 8005b96:	2014      	movs	r0, #20
 8005b98:	4641      	mov	r1, r8
 8005b9a:	fb00 5002 	mla	r0, r0, r2, r5
 8005b9e:	f7fe feb9 	bl	8004914 <vListInsertEnd>
	BaseType_t xReturn = pdFALSE;
 8005ba2:	4620      	mov	r0, r4
	}
 8005ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 8005bae:	2001      	movs	r0, #1
 8005bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005bb4:	6813      	ldr	r3, [r2, #0]
 8005bb6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8005bb8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8005bba:	42a0      	cmp	r0, r4
 8005bbc:	bf2c      	ite	cs
 8005bbe:	2000      	movcs	r0, #0
 8005bc0:	2001      	movcc	r0, #1
 8005bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bc6:	bf00      	nop
 8005bc8:	2000102c 	.word	0x2000102c
 8005bcc:	20001038 	.word	0x20001038
 8005bd0:	200010d8 	.word	0x200010d8

08005bd4 <xTaskPriorityDisinherit>:
	{
 8005bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	b908      	cbnz	r0, 8005bde <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8005bda:	2000      	movs	r0, #0
 8005bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8005bde:	4b22      	ldr	r3, [pc, #136]	; (8005c68 <xTaskPriorityDisinherit+0x94>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	4298      	cmp	r0, r3
 8005be4:	d008      	beq.n	8005bf8 <xTaskPriorityDisinherit+0x24>
 8005be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	e7fe      	b.n	8005bf6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005bf8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8005bfa:	b943      	cbnz	r3, 8005c0e <xTaskPriorityDisinherit+0x3a>
 8005bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	e7fe      	b.n	8005c0c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c0e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005c10:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8005c12:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c14:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8005c16:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c18:	d0df      	beq.n	8005bda <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1dd      	bne.n	8005bda <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c1e:	1d05      	adds	r5, r0, #4
 8005c20:	4628      	mov	r0, r5
 8005c22:	f7fe fe9a 	bl	800495a <uxListRemove>
 8005c26:	4e11      	ldr	r6, [pc, #68]	; (8005c6c <xTaskPriorityDisinherit+0x98>)
 8005c28:	4a11      	ldr	r2, [pc, #68]	; (8005c70 <xTaskPriorityDisinherit+0x9c>)
 8005c2a:	b950      	cbnz	r0, 8005c42 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c2c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005c2e:	2114      	movs	r1, #20
 8005c30:	4379      	muls	r1, r7
 8005c32:	5873      	ldr	r3, [r6, r1]
 8005c34:	b92b      	cbnz	r3, 8005c42 <xTaskPriorityDisinherit+0x6e>
 8005c36:	6813      	ldr	r3, [r2, #0]
 8005c38:	2001      	movs	r0, #1
 8005c3a:	40b8      	lsls	r0, r7
 8005c3c:	ea23 0300 	bic.w	r3, r3, r0
 8005c40:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c42:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005c44:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c46:	f1c3 0107 	rsb	r1, r3, #7
 8005c4a:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005c4c:	6811      	ldr	r1, [r2, #0]
 8005c4e:	2401      	movs	r4, #1
 8005c50:	fa04 f003 	lsl.w	r0, r4, r3
 8005c54:	4308      	orrs	r0, r1
 8005c56:	6010      	str	r0, [r2, #0]
 8005c58:	2014      	movs	r0, #20
 8005c5a:	fb00 6003 	mla	r0, r0, r3, r6
 8005c5e:	4629      	mov	r1, r5
 8005c60:	f7fe fe58 	bl	8004914 <vListInsertEnd>
					xReturn = pdTRUE;
 8005c64:	4620      	mov	r0, r4
	}
 8005c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c68:	2000102c 	.word	0x2000102c
 8005c6c:	20001038 	.word	0x20001038
 8005c70:	200010d8 	.word	0x200010d8

08005c74 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8005c76:	4604      	mov	r4, r0
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	d04d      	beq.n	8005d18 <vTaskPriorityDisinheritAfterTimeout+0xa4>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c7c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8005c7e:	b942      	cbnz	r2, 8005c92 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	e7fe      	b.n	8005c90 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8005c92:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005c94:	4299      	cmp	r1, r3
 8005c96:	bf38      	it	cc
 8005c98:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	d03b      	beq.n	8005d18 <vTaskPriorityDisinheritAfterTimeout+0xa4>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ca0:	2a01      	cmp	r2, #1
 8005ca2:	d139      	bne.n	8005d18 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					configASSERT( pxTCB != pxCurrentTCB );
 8005ca4:	4a1d      	ldr	r2, [pc, #116]	; (8005d1c <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	4290      	cmp	r0, r2
 8005caa:	d108      	bne.n	8005cbe <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8005cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	e7fe      	b.n	8005cbc <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cbe:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cc0:	4d17      	ldr	r5, [pc, #92]	; (8005d20 <vTaskPriorityDisinheritAfterTimeout+0xac>)
					pxTCB->uxPriority = uxPriorityToUse;
 8005cc2:	62c1      	str	r1, [r0, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005cc4:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cc6:	f04f 0614 	mov.w	r6, #20
 8005cca:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ccc:	bfa8      	it	ge
 8005cce:	f1c1 0107 	rsbge	r1, r1, #7
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cd2:	fb06 5303 	mla	r3, r6, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd6:	bfa8      	it	ge
 8005cd8:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d11c      	bne.n	8005d18 <vTaskPriorityDisinheritAfterTimeout+0xa4>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cde:	1d07      	adds	r7, r0, #4
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f7fe fe3a 	bl	800495a <uxListRemove>
 8005ce6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005ce8:	4c0e      	ldr	r4, [pc, #56]	; (8005d24 <vTaskPriorityDisinheritAfterTimeout+0xb0>)
 8005cea:	b940      	cbnz	r0, 8005cfe <vTaskPriorityDisinheritAfterTimeout+0x8a>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005cec:	4356      	muls	r6, r2
 8005cee:	59ab      	ldr	r3, [r5, r6]
 8005cf0:	b92b      	cbnz	r3, 8005cfe <vTaskPriorityDisinheritAfterTimeout+0x8a>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	4091      	lsls	r1, r2
 8005cf8:	ea23 0301 	bic.w	r3, r3, r1
 8005cfc:	6023      	str	r3, [r4, #0]
						prvAddTaskToReadyList( pxTCB );
 8005cfe:	6821      	ldr	r1, [r4, #0]
 8005d00:	2301      	movs	r3, #1
 8005d02:	4093      	lsls	r3, r2
 8005d04:	430b      	orrs	r3, r1
 8005d06:	2014      	movs	r0, #20
 8005d08:	6023      	str	r3, [r4, #0]
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	fb00 5002 	mla	r0, r0, r2, r5
	}
 8005d10:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
						prvAddTaskToReadyList( pxTCB );
 8005d14:	f7fe bdfe 	b.w	8004914 <vListInsertEnd>
 8005d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	2000102c 	.word	0x2000102c
 8005d20:	20001038 	.word	0x20001038
 8005d24:	200010d8 	.word	0x200010d8

08005d28 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8005d28:	4b04      	ldr	r3, [pc, #16]	; (8005d3c <pvTaskIncrementMutexHeldCount+0x14>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	b11a      	cbz	r2, 8005d36 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d2e:	6819      	ldr	r1, [r3, #0]
 8005d30:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8005d32:	3201      	adds	r2, #1
 8005d34:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8005d36:	6818      	ldr	r0, [r3, #0]
	}
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	2000102c 	.word	0x2000102c

08005d40 <xTaskNotifyWait>:
	{
 8005d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005d44:	4c1f      	ldr	r4, [pc, #124]	; (8005dc4 <xTaskNotifyWait+0x84>)
	{
 8005d46:	461e      	mov	r6, r3
 8005d48:	4680      	mov	r8, r0
 8005d4a:	460f      	mov	r7, r1
 8005d4c:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 8005d4e:	f7fe fe81 	bl	8004a54 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d014      	beq.n	8005d86 <xTaskNotifyWait+0x46>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d60:	ea22 0208 	bic.w	r2, r2, r8
 8005d64:	64da      	str	r2, [r3, #76]	; 0x4c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005d66:	6823      	ldr	r3, [r4, #0]
 8005d68:	2101      	movs	r1, #1
 8005d6a:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 8005d6e:	b156      	cbz	r6, 8005d86 <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d70:	4630      	mov	r0, r6
 8005d72:	f7ff fbcd 	bl	8005510 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8005d76:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <xTaskNotifyWait+0x88>)
 8005d78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 8005d86:	f7fe fe87 	bl	8004a98 <vPortExitCritical>
		taskENTER_CRITICAL();
 8005d8a:	f7fe fe63 	bl	8004a54 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8005d8e:	b115      	cbz	r5, 8005d96 <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d94:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005d96:	6823      	ldr	r3, [r4, #0]
 8005d98:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d9c:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8005d9e:	bf01      	itttt	eq
 8005da0:	6823      	ldreq	r3, [r4, #0]
 8005da2:	6cd9      	ldreq	r1, [r3, #76]	; 0x4c
 8005da4:	43b9      	biceq	r1, r7
 8005da6:	64d9      	streq	r1, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005da8:	6823      	ldr	r3, [r4, #0]
 8005daa:	f04f 0200 	mov.w	r2, #0
				xReturn = pdTRUE;
 8005dae:	bf0c      	ite	eq
 8005db0:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
 8005db2:	2500      	movne	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005db4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 8005db8:	f7fe fe6e 	bl	8004a98 <vPortExitCritical>
	}
 8005dbc:	4628      	mov	r0, r5
 8005dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005dc2:	bf00      	nop
 8005dc4:	2000102c 	.word	0x2000102c
 8005dc8:	e000ed04 	.word	0xe000ed04

08005dcc <xTaskGenericNotify>:
	{
 8005dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dce:	460e      	mov	r6, r1
 8005dd0:	4617      	mov	r7, r2
 8005dd2:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8005dd4:	4604      	mov	r4, r0
 8005dd6:	b940      	cbnz	r0, 8005dea <xTaskGenericNotify+0x1e>
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	e7fe      	b.n	8005de8 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8005dea:	f7fe fe33 	bl	8004a54 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8005dee:	b10d      	cbz	r5, 8005df4 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005df0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005df2:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005df4:	f894 5050 	ldrb.w	r5, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005df8:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005dfa:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005dfc:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			switch( eAction )
 8005e00:	2f04      	cmp	r7, #4
 8005e02:	d816      	bhi.n	8005e32 <xTaskGenericNotify+0x66>
 8005e04:	e8df f007 	tbb	[pc, r7]
 8005e08:	0507030a 	.word	0x0507030a
 8005e0c:	11          	.byte	0x11
 8005e0d:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 8005e0e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005e10:	430e      	orrs	r6, r1
						pxTCB->ulNotifiedValue = ulValue;
 8005e12:	64e6      	str	r6, [r4, #76]	; 0x4c
 8005e14:	e002      	b.n	8005e1c <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 8005e16:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005e18:	3301      	adds	r3, #1
 8005e1a:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005e1c:	2d01      	cmp	r5, #1
 8005e1e:	d014      	beq.n	8005e4a <xTaskGenericNotify+0x7e>
	{
 8005e20:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8005e22:	f7fe fe39 	bl	8004a98 <vPortExitCritical>
	}
 8005e26:	4628      	mov	r0, r5
 8005e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005e2a:	2d02      	cmp	r5, #2
 8005e2c:	d1f1      	bne.n	8005e12 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 8005e2e:	2500      	movs	r5, #0
 8005e30:	e7f7      	b.n	8005e22 <xTaskGenericNotify+0x56>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005e32:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005e34:	3301      	adds	r3, #1
 8005e36:	d0f1      	beq.n	8005e1c <xTaskGenericNotify+0x50>
 8005e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3c:	f383 8811 	msr	BASEPRI, r3
 8005e40:	f3bf 8f6f 	isb	sy
 8005e44:	f3bf 8f4f 	dsb	sy
 8005e48:	e7fe      	b.n	8005e48 <xTaskGenericNotify+0x7c>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e4a:	1d26      	adds	r6, r4, #4
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f7fe fd84 	bl	800495a <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005e52:	4914      	ldr	r1, [pc, #80]	; (8005ea4 <xTaskGenericNotify+0xd8>)
 8005e54:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e56:	6808      	ldr	r0, [r1, #0]
 8005e58:	fa05 f302 	lsl.w	r3, r5, r2
 8005e5c:	4303      	orrs	r3, r0
 8005e5e:	600b      	str	r3, [r1, #0]
 8005e60:	4b11      	ldr	r3, [pc, #68]	; (8005ea8 <xTaskGenericNotify+0xdc>)
 8005e62:	2014      	movs	r0, #20
 8005e64:	fb00 3002 	mla	r0, r0, r2, r3
 8005e68:	4631      	mov	r1, r6
 8005e6a:	f7fe fd53 	bl	8004914 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005e6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005e70:	b143      	cbz	r3, 8005e84 <xTaskGenericNotify+0xb8>
 8005e72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	e7fe      	b.n	8005e82 <xTaskGenericNotify+0xb6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005e84:	4b09      	ldr	r3, [pc, #36]	; (8005eac <xTaskGenericNotify+0xe0>)
 8005e86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	429a      	cmp	r2, r3
 8005e8e:	d9c7      	bls.n	8005e20 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 8005e90:	4b07      	ldr	r3, [pc, #28]	; (8005eb0 <xTaskGenericNotify+0xe4>)
 8005e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	f3bf 8f4f 	dsb	sy
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	e7bf      	b.n	8005e22 <xTaskGenericNotify+0x56>
 8005ea2:	bf00      	nop
 8005ea4:	200010d8 	.word	0x200010d8
 8005ea8:	20001038 	.word	0x20001038
 8005eac:	2000102c 	.word	0x2000102c
 8005eb0:	e000ed04 	.word	0xe000ed04

08005eb4 <MX_BlueNRG_MS_Process>:

/*
 * BlueNRG-MS background task
 */
void MX_BlueNRG_MS_Process(void)
{
 8005eb4:	b513      	push	{r0, r1, r4, lr}
 * @param  None
 * @retval None
 */
static void User_Process(void)
{
  if (set_connectable) 
 8005eb6:	4c26      	ldr	r4, [pc, #152]	; (8005f50 <MX_BlueNRG_MS_Process+0x9c>)
 8005eb8:	7823      	ldrb	r3, [r4, #0]
 8005eba:	b143      	cbz	r3, 8005ece <MX_BlueNRG_MS_Process+0x1a>
  {
    /* Establish connection with remote device */
    Make_Connection(); /* Stworzenie (nie nawiazanie) polaczenia (master) lub ustawienie wykrywalnosci (slave) */
 8005ebc:	f000 fdf0 	bl	8006aa0 <Make_Connection>
    set_connectable = FALSE;
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	7020      	strb	r0, [r4, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8005ec4:	f001 f91e 	bl	8007104 <BSP_PB_GetState>
 8005ec8:	4b22      	ldr	r3, [pc, #136]	; (8005f54 <MX_BlueNRG_MS_Process+0xa0>)
 8005eca:	b2c0      	uxtb	r0, r0
 8005ecc:	7018      	strb	r0, [r3, #0]
  }
  
  if (BLE_Role == CLIENT) 
 8005ece:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <MX_BlueNRG_MS_Process+0xa4>)
 8005ed0:	781b      	ldrb	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d12d      	bne.n	8005f32 <MX_BlueNRG_MS_Process+0x7e>
  {
    /* Start TX handle Characteristic dynamic discovery if not yet done */
	/* z user_notify ustawiamy connected po nawiazaniu polaczenia = stamtad jest wywolywane GAP_ConnectionComplete_CB */
    if (connected && !end_read_tx_char_handle){
 8005ed6:	4c21      	ldr	r4, [pc, #132]	; (8005f5c <MX_BlueNRG_MS_Process+0xa8>)
 8005ed8:	6823      	ldr	r3, [r4, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d02d      	beq.n	8005f3a <MX_BlueNRG_MS_Process+0x86>
 8005ede:	4b20      	ldr	r3, [pc, #128]	; (8005f60 <MX_BlueNRG_MS_Process+0xac>)
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	bb53      	cbnz	r3, 8005f3a <MX_BlueNRG_MS_Process+0x86>
      startReadTXCharHandle();
 8005ee4:	f000 fe34 	bl	8006b50 <startReadTXCharHandle>
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){      
      startReadRXCharHandle();
    }
    
    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled) 
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	b173      	cbz	r3, 8005f0a <MX_BlueNRG_MS_Process+0x56>
 8005eec:	4b1c      	ldr	r3, [pc, #112]	; (8005f60 <MX_BlueNRG_MS_Process+0xac>)
 8005eee:	781b      	ldrb	r3, [r3, #0]
 8005ef0:	b15b      	cbz	r3, 8005f0a <MX_BlueNRG_MS_Process+0x56>
 8005ef2:	4b1c      	ldr	r3, [pc, #112]	; (8005f64 <MX_BlueNRG_MS_Process+0xb0>)
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	b143      	cbz	r3, 8005f0a <MX_BlueNRG_MS_Process+0x56>
 8005ef8:	4b1b      	ldr	r3, [pc, #108]	; (8005f68 <MX_BlueNRG_MS_Process+0xb4>)
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8005f00:	b91b      	cbnz	r3, 8005f0a <MX_BlueNRG_MS_Process+0x56>
    {
      BSP_LED_Off(LED2); /* end of the connection and chars discovery phase */
 8005f02:	f001 f8aa 	bl	800705a <BSP_LED_Off>
      enableNotification(); /* Wlacz wymiane danych? */
 8005f06:	f000 fead 	bl	8006c64 <enableNotification>
    }

    //TODO: Client sendData
    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && notification_enabled)
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	b18b      	cbz	r3, 8005f32 <MX_BlueNRG_MS_Process+0x7e>
 8005f0e:	4b14      	ldr	r3, [pc, #80]	; (8005f60 <MX_BlueNRG_MS_Process+0xac>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	b173      	cbz	r3, 8005f32 <MX_BlueNRG_MS_Process+0x7e>
 8005f14:	4b13      	ldr	r3, [pc, #76]	; (8005f64 <MX_BlueNRG_MS_Process+0xb0>)
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	b15b      	cbz	r3, 8005f32 <MX_BlueNRG_MS_Process+0x7e>
 8005f1a:	4b13      	ldr	r3, [pc, #76]	; (8005f68 <MX_BlueNRG_MS_Process+0xb4>)
 8005f1c:	781b      	ldrb	r3, [r3, #0]
 8005f1e:	b143      	cbz	r3, 8005f32 <MX_BlueNRG_MS_Process+0x7e>
    {
		uint8_t buf[] = {'M', 'a', 's', 't', 'e', 'r', '\r', '\n'};
 8005f20:	4a12      	ldr	r2, [pc, #72]	; (8005f6c <MX_BlueNRG_MS_Process+0xb8>)
 8005f22:	6810      	ldr	r0, [r2, #0]
 8005f24:	6851      	ldr	r1, [r2, #4]
 8005f26:	466b      	mov	r3, sp
 8005f28:	c303      	stmia	r3!, {r0, r1}
		sendData(buf, 8);
 8005f2a:	2108      	movs	r1, #8
 8005f2c:	4668      	mov	r0, sp
 8005f2e:	f000 fe71 	bl	8006c14 <sendData>
  hci_user_evt_proc(); /* Przeparsuj otrzymane pakiety i wywolaj odpowiednie funkcje; tu sa odebrane dane */
 8005f32:	f7fe fb0f 	bl	8004554 <hci_user_evt_proc>
}
 8005f36:	b002      	add	sp, #8
 8005f38:	bd10      	pop	{r4, pc}
    else if (connected && !end_read_rx_char_handle){      
 8005f3a:	6823      	ldr	r3, [r4, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d0d3      	beq.n	8005ee8 <MX_BlueNRG_MS_Process+0x34>
 8005f40:	4b08      	ldr	r3, [pc, #32]	; (8005f64 <MX_BlueNRG_MS_Process+0xb0>)
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d1cf      	bne.n	8005ee8 <MX_BlueNRG_MS_Process+0x34>
      startReadRXCharHandle();
 8005f48:	f000 fe28 	bl	8006b9c <startReadRXCharHandle>
 8005f4c:	e7cc      	b.n	8005ee8 <MX_BlueNRG_MS_Process+0x34>
 8005f4e:	bf00      	nop
 8005f50:	2000000d 	.word	0x2000000d
 8005f54:	2000000c 	.word	0x2000000c
 8005f58:	20001154 	.word	0x20001154
 8005f5c:	200014ac 	.word	0x200014ac
 8005f60:	200014b3 	.word	0x200014b3
 8005f64:	200014b2 	.word	0x200014b2
 8005f68:	200014b4 	.word	0x200014b4
 8005f6c:	0800850c 	.word	0x0800850c

08005f70 <BSP_PB_Callback>:
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
  /* Set the User Button flag */
  user_button_pressed = 1;
 8005f70:	4b01      	ldr	r3, [pc, #4]	; (8005f78 <BSP_PB_Callback+0x8>)
 8005f72:	2201      	movs	r2, #1
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	4770      	bx	lr
 8005f78:	20001156 	.word	0x20001156
 8005f7c:	00000000 	.word	0x00000000

08005f80 <delayMicrosecondsBLE>:
}

/* USER CODE BEGIN 0 */
void delayMicrosecondsBLE(uint32_t us){
 8005f80:	b510      	push	{r4, lr}
 8005f82:	4604      	mov	r4, r0
	//Average, experimental time for 1 rotation of the 'for' loop with nops: ~140ns
	//for an 80MHz processor@max speed; that gives ~7.143 loop rotations for 1 ms
	//Use this fact and the processor frequency to adjust the loop counter value for any processor speed
	uint32_t clockFreq = HAL_RCC_GetHCLKFreq();	//Current processor frequency
 8005f84:	f7fc fc72 	bl	800286c <HAL_RCC_GetHCLKFreq>
	float clockFreqRel = clockFreq/(float)80000000.0;//Current processor frequency relative to base of 80MHz
 8005f88:	ee07 0a90 	vmov	s15, r0
 8005f8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f90:	eddf 7a11 	vldr	s15, [pc, #68]	; 8005fd8 <delayMicrosecondsBLE+0x58>
 8005f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
	uint32_t loopCounter = (us > 0 ? (uint32_t)(us*clockFreqRel*7.143) : (uint32_t)(clockFreqRel*7.143));
 8005f98:	b1a4      	cbz	r4, 8005fc4 <delayMicrosecondsBLE+0x44>
 8005f9a:	ee07 4a90 	vmov	s15, r4
 8005f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005fa6:	ee17 0a90 	vmov	r0, s15
 8005faa:	f7fa fac5 	bl	8000538 <__aeabi_f2d>
 8005fae:	a308      	add	r3, pc, #32	; (adr r3, 8005fd0 <delayMicrosecondsBLE+0x50>)
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	f7fa fb14 	bl	80005e0 <__aeabi_dmul>
 8005fb8:	f7fa fd24 	bl	8000a04 <__aeabi_d2uiz>
	//uint32_t loopCounter = (us > 0 ? (uint32_t)(us*7.143) : 7); //A minimum delay of 1 us - 80MHz only
	for(uint32_t tmp = 0; tmp < loopCounter; tmp++) {asm("nop");}
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	4283      	cmp	r3, r0
 8005fc0:	d103      	bne.n	8005fca <delayMicrosecondsBLE+0x4a>
	//previously there was tmp < 800 giving 3200 processor cycles, each lasting 12.5 ns = 40 us delay
	//UINT_MAX	Maximum value for a variable of type unsigned int	4,294,967,295 (0xffffffff)
}
 8005fc2:	bd10      	pop	{r4, pc}
	uint32_t loopCounter = (us > 0 ? (uint32_t)(us*clockFreqRel*7.143) : (uint32_t)(clockFreqRel*7.143));
 8005fc4:	ee17 0a10 	vmov	r0, s14
 8005fc8:	e7ef      	b.n	8005faa <delayMicrosecondsBLE+0x2a>
	for(uint32_t tmp = 0; tmp < loopCounter; tmp++) {asm("nop");}
 8005fca:	bf00      	nop
 8005fcc:	3301      	adds	r3, #1
 8005fce:	e7f6      	b.n	8005fbe <delayMicrosecondsBLE+0x3e>
 8005fd0:	978d4fdf 	.word	0x978d4fdf
 8005fd4:	401c926e 	.word	0x401c926e
 8005fd8:	4c989680 	.word	0x4c989680

08005fdc <MX_BlueNRG_MS_Init>:
{
 8005fdc:	b530      	push	{r4, r5, lr}
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8005fde:	2101      	movs	r1, #1
{
 8005fe0:	b08b      	sub	sp, #44	; 0x2c
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	f001 f842 	bl	800706c <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8005fe8:	2000      	movs	r0, #0
 8005fea:	f001 f809 	bl	8007000 <BSP_LED_Init>
  BSP_COM_Init(COM1); 
 8005fee:	2000      	movs	r0, #0
 8005ff0:	f001 f8b2 	bl	8007158 <BSP_COM_Init>
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	f001 f885 	bl	8007104 <BSP_PB_GetState>
 8005ffa:	4b4a      	ldr	r3, [pc, #296]	; (8006124 <MX_BlueNRG_MS_Init+0x148>)
 8005ffc:	4d4a      	ldr	r5, [pc, #296]	; (8006128 <MX_BlueNRG_MS_Init+0x14c>)
  if (BLE_Role == CLIENT) {
 8005ffe:	4c4b      	ldr	r4, [pc, #300]	; (800612c <MX_BlueNRG_MS_Init+0x150>)
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8006000:	b2c0      	uxtb	r0, r0
 8006002:	7018      	strb	r0, [r3, #0]
  hci_init(user_notify, NULL);
 8006004:	2100      	movs	r1, #0
 8006006:	484a      	ldr	r0, [pc, #296]	; (8006130 <MX_BlueNRG_MS_Init+0x154>)
 8006008:	f7fe f9ac 	bl	8004364 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 800600c:	f10d 011e 	add.w	r1, sp, #30
 8006010:	f10d 0017 	add.w	r0, sp, #23
 8006014:	f7fe f8e1 	bl	80041da <getBlueNRGVersion>
  hci_reset();
 8006018:	f7fe f900 	bl	800421c <hci_reset>
  delayMicrosecondsBLE(100000);
 800601c:	4845      	ldr	r0, [pc, #276]	; (8006134 <MX_BlueNRG_MS_Init+0x158>)
 800601e:	f7ff ffaf 	bl	8005f80 <delayMicrosecondsBLE>
  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8006022:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8006026:	f89d 1017 	ldrb.w	r1, [sp, #23]
 800602a:	4843      	ldr	r0, [pc, #268]	; (8006138 <MX_BlueNRG_MS_Init+0x15c>)
 800602c:	f001 fc98 	bl	8007960 <iprintf>
  if (hwVersion > 0x30) { /* Yes, X-NUCLEO-IDB05A1 expansion board is used */
 8006030:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8006034:	2b30      	cmp	r3, #48	; 0x30
    bnrg_expansion_board = IDB05A1; 
 8006036:	bf84      	itt	hi
 8006038:	2301      	movhi	r3, #1
 800603a:	702b      	strbhi	r3, [r5, #0]
  if (BLE_Role == CLIENT) {
 800603c:	7823      	ldrb	r3, [r4, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d156      	bne.n	80060f0 <MX_BlueNRG_MS_Init+0x114>
    BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8006042:	22bb      	movs	r2, #187	; 0xbb
 8006044:	f88d 2020 	strb.w	r2, [sp, #32]
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8006048:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800604c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8006050:	23e1      	movs	r3, #225	; 0xe1
 8006052:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8006056:	2380      	movs	r3, #128	; 0x80
 8006058:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 800605c:	2106      	movs	r1, #6
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 800605e:	2302      	movs	r3, #2
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8006060:	aa08      	add	r2, sp, #32
 8006062:	2000      	movs	r0, #0
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 8006064:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8006068:	f7fe f85f 	bl	800412a <aci_hal_write_config_data>
  if (ret) {
 800606c:	4601      	mov	r1, r0
 800606e:	b110      	cbz	r0, 8006076 <MX_BlueNRG_MS_Init+0x9a>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8006070:	4832      	ldr	r0, [pc, #200]	; (800613c <MX_BlueNRG_MS_Init+0x160>)
 8006072:	f001 fc75 	bl	8007960 <iprintf>
  ret = aci_gatt_init();    
 8006076:	f7fd febf 	bl	8003df8 <aci_gatt_init>
  if (ret) {
 800607a:	b110      	cbz	r0, 8006082 <MX_BlueNRG_MS_Init+0xa6>
    printf("GATT_Init failed.\n");
 800607c:	4830      	ldr	r0, [pc, #192]	; (8006140 <MX_BlueNRG_MS_Init+0x164>)
 800607e:	f001 fcf7 	bl	8007a70 <puts>
  if (BLE_Role == SERVER) {
 8006082:	7820      	ldrb	r0, [r4, #0]
 8006084:	2801      	cmp	r0, #1
 8006086:	ab07      	add	r3, sp, #28
 8006088:	f10d 021a 	add.w	r2, sp, #26
 800608c:	d139      	bne.n	8006102 <MX_BlueNRG_MS_Init+0x126>
    if (bnrg_expansion_board == IDB05A1) {
 800608e:	782d      	ldrb	r5, [r5, #0]
 8006090:	2d01      	cmp	r5, #1
 8006092:	d132      	bne.n	80060fa <MX_BlueNRG_MS_Init+0x11e>
      ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8006094:	e88d 000c 	stmia.w	sp, {r2, r3}
 8006098:	2100      	movs	r1, #0
 800609a:	ab06      	add	r3, sp, #24
 800609c:	2207      	movs	r2, #7
 800609e:	4628      	mov	r0, r5
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80060a0:	f7fd fd47 	bl	8003b32 <aci_gap_init_IDB05A1>
  if (ret != BLE_STATUS_SUCCESS) {
 80060a4:	b110      	cbz	r0, 80060ac <MX_BlueNRG_MS_Init+0xd0>
    printf("GAP_Init failed.\n");
 80060a6:	4827      	ldr	r0, [pc, #156]	; (8006144 <MX_BlueNRG_MS_Init+0x168>)
 80060a8:	f001 fce2 	bl	8007a70 <puts>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 80060ac:	4b26      	ldr	r3, [pc, #152]	; (8006148 <MX_BlueNRG_MS_Init+0x16c>)
 80060ae:	9302      	str	r3, [sp, #8]
 80060b0:	2200      	movs	r2, #0
 80060b2:	2310      	movs	r3, #16
 80060b4:	2001      	movs	r0, #1
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	9003      	str	r0, [sp, #12]
 80060ba:	9201      	str	r2, [sp, #4]
 80060bc:	2307      	movs	r3, #7
 80060be:	4611      	mov	r1, r2
 80060c0:	f7fd fe0f 	bl	8003ce2 <aci_gap_set_auth_requirement>
  if (ret == BLE_STATUS_SUCCESS) {
 80060c4:	b910      	cbnz	r0, 80060cc <MX_BlueNRG_MS_Init+0xf0>
    printf("BLE Stack Initialized.\n");
 80060c6:	4821      	ldr	r0, [pc, #132]	; (800614c <MX_BlueNRG_MS_Init+0x170>)
 80060c8:	f001 fcd2 	bl	8007a70 <puts>
  if (BLE_Role == SERVER) {
 80060cc:	7823      	ldrb	r3, [r4, #0]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d126      	bne.n	8006120 <MX_BlueNRG_MS_Init+0x144>
    printf("SERVER: BLE Stack Initialized\n");
 80060d2:	481f      	ldr	r0, [pc, #124]	; (8006150 <MX_BlueNRG_MS_Init+0x174>)
 80060d4:	f001 fccc 	bl	8007a70 <puts>
    ret = Add_Sample_Service();
 80060d8:	f000 fc7a 	bl	80069d0 <Add_Sample_Service>
    if (ret == BLE_STATUS_SUCCESS)
 80060dc:	b9f0      	cbnz	r0, 800611c <MX_BlueNRG_MS_Init+0x140>
      printf("Service added successfully.\n");
 80060de:	481d      	ldr	r0, [pc, #116]	; (8006154 <MX_BlueNRG_MS_Init+0x178>)
    printf("CLIENT: BLE Stack Initialized\n");
 80060e0:	f001 fcc6 	bl	8007a70 <puts>
  ret = aci_hal_set_tx_power_level(1,4);
 80060e4:	2104      	movs	r1, #4
 80060e6:	2001      	movs	r0, #1
 80060e8:	f7fe f851 	bl	800418e <aci_hal_set_tx_power_level>
}
 80060ec:	b00b      	add	sp, #44	; 0x2c
 80060ee:	bd30      	pop	{r4, r5, pc}
    BLUENRG_memcpy(bdaddr, SERVER_BDADDR, sizeof(SERVER_BDADDR));
 80060f0:	23aa      	movs	r3, #170	; 0xaa
 80060f2:	f88d 3020 	strb.w	r3, [sp, #32]
 80060f6:	2300      	movs	r3, #0
 80060f8:	e7a6      	b.n	8006048 <MX_BlueNRG_MS_Init+0x6c>
      ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80060fa:	a906      	add	r1, sp, #24
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 80060fc:	f7fd fd57 	bl	8003bae <aci_gap_init_IDB04A1>
 8006100:	e7d0      	b.n	80060a4 <MX_BlueNRG_MS_Init+0xc8>
    if (bnrg_expansion_board == IDB05A1) {
 8006102:	7829      	ldrb	r1, [r5, #0]
 8006104:	2901      	cmp	r1, #1
 8006106:	d106      	bne.n	8006116 <MX_BlueNRG_MS_Init+0x13a>
      ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8006108:	e88d 000c 	stmia.w	sp, {r2, r3}
 800610c:	2100      	movs	r1, #0
 800610e:	ab06      	add	r3, sp, #24
 8006110:	2207      	movs	r2, #7
 8006112:	2004      	movs	r0, #4
 8006114:	e7c4      	b.n	80060a0 <MX_BlueNRG_MS_Init+0xc4>
      ret = aci_gap_init_IDB04A1(GAP_CENTRAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8006116:	a906      	add	r1, sp, #24
 8006118:	2003      	movs	r0, #3
 800611a:	e7ef      	b.n	80060fc <MX_BlueNRG_MS_Init+0x120>
      printf("Error while adding service.\n");
 800611c:	480e      	ldr	r0, [pc, #56]	; (8006158 <MX_BlueNRG_MS_Init+0x17c>)
 800611e:	e7df      	b.n	80060e0 <MX_BlueNRG_MS_Init+0x104>
    printf("CLIENT: BLE Stack Initialized\n");
 8006120:	480e      	ldr	r0, [pc, #56]	; (800615c <MX_BlueNRG_MS_Init+0x180>)
 8006122:	e7dd      	b.n	80060e0 <MX_BlueNRG_MS_Init+0x104>
 8006124:	2000000c 	.word	0x2000000c
 8006128:	20001155 	.word	0x20001155
 800612c:	20001154 	.word	0x20001154
 8006130:	08006db1 	.word	0x08006db1
 8006134:	000186a0 	.word	0x000186a0
 8006138:	08008652 	.word	0x08008652
 800613c:	08008666 	.word	0x08008666
 8006140:	08008686 	.word	0x08008686
 8006144:	08008698 	.word	0x08008698
 8006148:	0001e240 	.word	0x0001e240
 800614c:	080086a9 	.word	0x080086a9
 8006150:	080086c0 	.word	0x080086c0
 8006154:	080086de 	.word	0x080086de
 8006158:	080086fa 	.word	0x080086fa
 800615c:	08008716 	.word	0x08008716

08006160 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8006160:	4b03      	ldr	r3, [pc, #12]	; (8006170 <vApplicationGetIdleTaskMemory+0x10>)
 8006162:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8006164:	4b03      	ldr	r3, [pc, #12]	; (8006174 <vApplicationGetIdleTaskMemory+0x14>)
 8006166:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8006168:	2380      	movs	r3, #128	; 0x80
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	20001358 	.word	0x20001358
 8006174:	20001158 	.word	0x20001158

08006178 <HCI_TL_SPI_Init>:
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006178:	4b17      	ldr	r3, [pc, #92]	; (80061d8 <HCI_TL_SPI_Init+0x60>)
{
 800617a:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800617c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800617e:	f042 0201 	orr.w	r2, r2, #1
 8006182:	64da      	str	r2, [r3, #76]	; 0x4c
 8006184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8006186:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	9300      	str	r3, [sp, #0]
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800618e:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8006190:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006192:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006194:	4b11      	ldr	r3, [pc, #68]	; (80061dc <HCI_TL_SPI_Init+0x64>)
 8006196:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8006198:	a901      	add	r1, sp, #4
 800619a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 800619e:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061a0:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80061a2:	f7fb fe07 	bl	8001db4 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80061a6:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80061aa:	a901      	add	r1, sp, #4
 80061ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 80061b0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061b2:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b4:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061b6:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 80061b8:	f7fb fdfc 	bl	8001db4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80061bc:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 80061be:	a901      	add	r1, sp, #4
 80061c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 80061c4:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061c6:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c8:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ca:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 80061cc:	f7fb fdf2 	bl	8001db4 <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 80061d0:	f001 f850 	bl	8007274 <BSP_SPI1_Init>
}
 80061d4:	b007      	add	sp, #28
 80061d6:	bd30      	pop	{r4, r5, pc}
 80061d8:	40021000 	.word	0x40021000
 80061dc:	10110000 	.word	0x10110000

080061e0 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 80061e0:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 80061e2:	2101      	movs	r1, #1
 80061e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061e8:	f7fb fec0 	bl	8001f6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 80061ec:	2102      	movs	r1, #2
 80061ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061f2:	f7fb febb 	bl	8001f6c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 80061f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061fe:	f7fb feb5 	bl	8001f6c <HAL_GPIO_DeInit>
  return 0;
}
 8006202:	2000      	movs	r0, #0
 8006204:	bd08      	pop	{r3, pc}

08006206 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8006206:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8006208:	2200      	movs	r2, #0
 800620a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800620e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006212:	f7fb ff3b 	bl	800208c <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8006216:	2005      	movs	r0, #5
 8006218:	f7fb fd40 	bl	8001c9c <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 800621c:	2201      	movs	r2, #1
 800621e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006226:	f7fb ff31 	bl	800208c <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 800622a:	2005      	movs	r0, #5
 800622c:	f7fb fd36 	bl	8001c9c <HAL_Delay>
  return 0;
}  
 8006230:	2000      	movs	r0, #0
 8006232:	bd08      	pop	{r3, pc}

08006234 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 8006234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006236:	b087      	sub	sp, #28
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8006238:	2400      	movs	r4, #0
  uint8_t char_ff = 0xff;
 800623a:	23ff      	movs	r3, #255	; 0xff
 800623c:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8006240:	4622      	mov	r2, r4
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 8006242:	230b      	movs	r3, #11
{
 8006244:	4607      	mov	r7, r0
 8006246:	460e      	mov	r6, r1
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8006248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800624c:	2102      	movs	r1, #2
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 800624e:	f88d 3008 	strb.w	r3, [sp, #8]
 8006252:	f88d 4009 	strb.w	r4, [sp, #9]
 8006256:	f88d 400a 	strb.w	r4, [sp, #10]
 800625a:	f88d 400b 	strb.w	r4, [sp, #11]
 800625e:	f88d 400c 	strb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8006262:	f7fb ff13 	bl	800208c <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 8006266:	2205      	movs	r2, #5
 8006268:	a904      	add	r1, sp, #16
 800626a:	a802      	add	r0, sp, #8
 800626c:	f000 ffca 	bl	8007204 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 8006270:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8006274:	2b02      	cmp	r3, #2
 8006276:	d122      	bne.n	80062be <HCI_TL_SPI_Receive+0x8a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 8006278:	f89d 5014 	ldrb.w	r5, [sp, #20]
 800627c:	f89d 3013 	ldrb.w	r3, [sp, #19]
  
    if(byte_count > 0) {
 8006280:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 8006284:	d007      	beq.n	8006296 <HCI_TL_SPI_Receive+0x62>
 8006286:	42ae      	cmp	r6, r5
 8006288:	bf28      	it	cs
 800628a:	462e      	movcs	r6, r5
 800628c:	b2e5      	uxtb	r5, r4

      if (byte_count > size){
        byte_count = size;
      }        
  
      for(len = 0; len < byte_count; len++)
 800628e:	42b5      	cmp	r5, r6
 8006290:	f104 0401 	add.w	r4, r4, #1
 8006294:	d308      	bcc.n	80062a8 <HCI_TL_SPI_Receive+0x74>
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8006296:	2201      	movs	r2, #1
 8006298:	2102      	movs	r1, #2
 800629a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800629e:	f7fb fef5 	bl	800208c <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 80062a2:	4628      	mov	r0, r5
 80062a4:	b007      	add	sp, #28
 80062a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 80062a8:	2201      	movs	r2, #1
 80062aa:	f10d 0107 	add.w	r1, sp, #7
 80062ae:	f10d 0006 	add.w	r0, sp, #6
 80062b2:	f000 ffa7 	bl	8007204 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 80062b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80062ba:	557b      	strb	r3, [r7, r5]
 80062bc:	e7e6      	b.n	800628c <HCI_TL_SPI_Receive+0x58>
  uint8_t len = 0;
 80062be:	4625      	mov	r5, r4
 80062c0:	e7e9      	b.n	8006296 <HCI_TL_SPI_Receive+0x62>
	...

080062c4 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 80062c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80062c8:	230a      	movs	r3, #10
 80062ca:	f88d 3000 	strb.w	r3, [sp]
 80062ce:	2300      	movs	r3, #0
{  
 80062d0:	4607      	mov	r7, r0
 80062d2:	460d      	mov	r5, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 80062d4:	f88d 3001 	strb.w	r3, [sp, #1]
 80062d8:	f88d 3002 	strb.w	r3, [sp, #2]
 80062dc:	f88d 3003 	strb.w	r3, [sp, #3]
 80062e0:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 80062e4:	f7fb fcd4 	bl	8001c90 <HAL_GetTick>
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 80062e8:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8006354 <HCI_TL_SPI_Send+0x90>
  uint32_t tickstart = HAL_GetTick();
 80062ec:	4606      	mov	r6, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80062ee:	2200      	movs	r2, #0
 80062f0:	2102      	movs	r1, #2
 80062f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062f6:	f7fb fec9 	bl	800208c <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80062fa:	2205      	movs	r2, #5
 80062fc:	a902      	add	r1, sp, #8
 80062fe:	4668      	mov	r0, sp
 8006300:	f000 ff80 	bl	8007204 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 8006304:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8006308:	2b02      	cmp	r3, #2
 800630a:	d11a      	bne.n	8006342 <HCI_TL_SPI_Send+0x7e>
      if(header_slave[1] >= size) 
 800630c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8006310:	42ab      	cmp	r3, r5
 8006312:	d319      	bcc.n	8006348 <HCI_TL_SPI_Send+0x84>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8006314:	462a      	mov	r2, r5
 8006316:	4641      	mov	r1, r8
 8006318:	4638      	mov	r0, r7
 800631a:	f000 ff73 	bl	8007204 <BSP_SPI1_SendRecv>
    result = 0;
 800631e:	2400      	movs	r4, #0
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8006320:	2201      	movs	r2, #1
 8006322:	2102      	movs	r1, #2
 8006324:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006328:	f7fb feb0 	bl	800208c <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 800632c:	f7fb fcb0 	bl	8001c90 <HAL_GetTick>
 8006330:	1b80      	subs	r0, r0, r6
 8006332:	280f      	cmp	r0, #15
 8006334:	d80b      	bhi.n	800634e <HCI_TL_SPI_Send+0x8a>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 8006336:	2c00      	cmp	r4, #0
 8006338:	d1d9      	bne.n	80062ee <HCI_TL_SPI_Send+0x2a>
  
  return result;
}
 800633a:	4620      	mov	r0, r4
 800633c:	b004      	add	sp, #16
 800633e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = -1;
 8006342:	f04f 34ff 	mov.w	r4, #4294967295
 8006346:	e7eb      	b.n	8006320 <HCI_TL_SPI_Send+0x5c>
        result = -2;
 8006348:	f06f 0401 	mvn.w	r4, #1
 800634c:	e7e8      	b.n	8006320 <HCI_TL_SPI_Send+0x5c>
      result = -3;
 800634e:	f06f 0402 	mvn.w	r4, #2
  return result;
 8006352:	e7f2      	b.n	800633a <HCI_TL_SPI_Send+0x76>
 8006354:	200013ac 	.word	0x200013ac

08006358 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 8006358:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 800635a:	2101      	movs	r1, #1
 800635c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006360:	f7fb fe8e 	bl	8002080 <HAL_GPIO_ReadPin>
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 8006364:	2801      	cmp	r0, #1
 8006366:	d104      	bne.n	8006372 <hci_tl_lowlevel_isr+0x1a>
  {        
    if (hci_notify_asynch_evt(NULL))
 8006368:	2000      	movs	r0, #0
 800636a:	f7fe f913 	bl	8004594 <hci_notify_asynch_evt>
 800636e:	2800      	cmp	r0, #0
 8006370:	d0f3      	beq.n	800635a <hci_tl_lowlevel_isr+0x2>
 8006372:	bd08      	pop	{r3, pc}

08006374 <hci_tl_lowlevel_init>:
{
 8006374:	b510      	push	{r4, lr}
 8006376:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 8006378:	4b11      	ldr	r3, [pc, #68]	; (80063c0 <hci_tl_lowlevel_init+0x4c>)
 800637a:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 800637c:	4b11      	ldr	r3, [pc, #68]	; (80063c4 <hci_tl_lowlevel_init+0x50>)
 800637e:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8006380:	4b11      	ldr	r3, [pc, #68]	; (80063c8 <hci_tl_lowlevel_init+0x54>)
 8006382:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8006384:	4b11      	ldr	r3, [pc, #68]	; (80063cc <hci_tl_lowlevel_init+0x58>)
 8006386:	9304      	str	r3, [sp, #16]
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8006388:	4c11      	ldr	r4, [pc, #68]	; (80063d0 <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 800638a:	4b12      	ldr	r3, [pc, #72]	; (80063d4 <hci_tl_lowlevel_init+0x60>)
 800638c:	9303      	str	r3, [sp, #12]
  hci_register_io_bus (&fops);
 800638e:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 8006390:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <hci_tl_lowlevel_init+0x64>)
 8006392:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8006394:	f7fe f810 	bl	80043b8 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 8006398:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 800639c:	4620      	mov	r0, r4
 800639e:	f7fb fceb 	bl	8001d78 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 80063a2:	4a0e      	ldr	r2, [pc, #56]	; (80063dc <hci_tl_lowlevel_init+0x68>)
 80063a4:	2100      	movs	r1, #0
 80063a6:	4620      	mov	r0, r4
 80063a8:	f7fb fce0 	bl	8001d6c <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80063ac:	2200      	movs	r2, #0
 80063ae:	4611      	mov	r1, r2
 80063b0:	2006      	movs	r0, #6
 80063b2:	f7fb fc99 	bl	8001ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80063b6:	2006      	movs	r0, #6
 80063b8:	f7fb fcca 	bl	8001d50 <HAL_NVIC_EnableIRQ>
}
 80063bc:	b008      	add	sp, #32
 80063be:	bd10      	pop	{r4, pc}
 80063c0:	08006179 	.word	0x08006179
 80063c4:	080061e1 	.word	0x080061e1
 80063c8:	080062c5 	.word	0x080062c5
 80063cc:	08006235 	.word	0x08006235
 80063d0:	200014dc 	.word	0x200014dc
 80063d4:	08006207 	.word	0x08006207
 80063d8:	0800722d 	.word	0x0800722d
 80063dc:	08006359 	.word	0x08006359

080063e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80063e0:	b5b0      	push	{r4, r5, r7, lr}
 80063e2:	b09c      	sub	sp, #112	; 0x70
 80063e4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80063e6:	f7fb fc31 	bl	8001c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80063ea:	f000 f875 	bl	80064d8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80063ee:	f000 f933 	bl	8006658 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 80063f2:	f000 f8fd 	bl	80065f0 <_ZL19MX_USART3_UART_Initv>
  MX_BlueNRG_MS_Init();
 80063f6:	f7ff fdf1 	bl	8005fdc <MX_BlueNRG_MS_Init>

  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  uartMutexHandle = xSemaphoreCreateMutex();
 80063fa:	2001      	movs	r0, #1
 80063fc:	f7fe fdf8 	bl	8004ff0 <xQueueCreateMutex>
 8006400:	4602      	mov	r2, r0
 8006402:	4b2b      	ldr	r3, [pc, #172]	; (80064b0 <main+0xd0>)
 8006404:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  msgQueueHandle = xQueueCreate(5, sizeof(uartData));
 8006406:	2200      	movs	r2, #0
 8006408:	2132      	movs	r1, #50	; 0x32
 800640a:	2005      	movs	r0, #5
 800640c:	f7fe fd0c 	bl	8004e28 <xQueueGenericCreate>
 8006410:	4602      	mov	r2, r0
 8006412:	4b28      	ldr	r3, [pc, #160]	; (80064b4 <main+0xd4>)
 8006414:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006416:	4b28      	ldr	r3, [pc, #160]	; (80064b8 <main+0xd8>)
 8006418:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800641c:	461d      	mov	r5, r3
 800641e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006420:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006422:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006426:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800642a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800642e:	2100      	movs	r1, #0
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe f946 	bl	80046c2 <osThreadCreate>
 8006436:	4602      	mov	r2, r0
 8006438:	4b20      	ldr	r3, [pc, #128]	; (80064bc <main+0xdc>)
 800643a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	osThreadDef(askForDataTask, AskForDataTaskThread, osPriorityNormal, 0, 128);
 800643c:	4b20      	ldr	r3, [pc, #128]	; (80064c0 <main+0xe0>)
 800643e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8006442:	461d      	mov	r5, r3
 8006444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006448:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800644c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	askForDataTaskHandle = osThreadCreate(osThread(askForDataTask), NULL);
 8006450:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006454:	2100      	movs	r1, #0
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe f933 	bl	80046c2 <osThreadCreate>
 800645c:	4602      	mov	r2, r0
 800645e:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <main+0xe4>)
 8006460:	601a      	str	r2, [r3, #0]

	osThreadDef(presentationTask, PresentationTaskThread, osPriorityNormal, 0, 128);
 8006462:	4b19      	ldr	r3, [pc, #100]	; (80064c8 <main+0xe8>)
 8006464:	f107 041c 	add.w	r4, r7, #28
 8006468:	461d      	mov	r5, r3
 800646a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800646c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800646e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	presentationTaskHandle = osThreadCreate(osThread(presentationTask), NULL);
 8006476:	f107 031c 	add.w	r3, r7, #28
 800647a:	2100      	movs	r1, #0
 800647c:	4618      	mov	r0, r3
 800647e:	f7fe f920 	bl	80046c2 <osThreadCreate>
 8006482:	4602      	mov	r2, r0
 8006484:	4b11      	ldr	r3, [pc, #68]	; (80064cc <main+0xec>)
 8006486:	601a      	str	r2, [r3, #0]

	osThreadDef(communicationTask, CommunicationTaskThread, osPriorityLow, 0, 128);
 8006488:	4b11      	ldr	r3, [pc, #68]	; (80064d0 <main+0xf0>)
 800648a:	463c      	mov	r4, r7
 800648c:	461d      	mov	r5, r3
 800648e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006492:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006496:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	communicationTaskHandle = osThreadCreate(osThread(communicationTask), NULL);
 800649a:	463b      	mov	r3, r7
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe f90f 	bl	80046c2 <osThreadCreate>
 80064a4:	4602      	mov	r2, r0
 80064a6:	4b0b      	ldr	r3, [pc, #44]	; (80064d4 <main+0xf4>)
 80064a8:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80064aa:	f7fe f905 	bl	80046b8 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80064ae:	e7fe      	b.n	80064ae <main+0xce>
 80064b0:	20000138 	.word	0x20000138
 80064b4:	2000013c 	.word	0x2000013c
 80064b8:	08008520 	.word	0x08008520
 80064bc:	20000128 	.word	0x20000128
 80064c0:	0800854c 	.word	0x0800854c
 80064c4:	2000012c 	.word	0x2000012c
 80064c8:	0800857c 	.word	0x0800857c
 80064cc:	20000130 	.word	0x20000130
 80064d0:	080085ac 	.word	0x080085ac
 80064d4:	20000134 	.word	0x20000134

080064d8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b0b8      	sub	sp, #224	; 0xe0
 80064dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80064de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80064e2:	2244      	movs	r2, #68	; 0x44
 80064e4:	2100      	movs	r1, #0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f001 f985 	bl	80077f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80064ec:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	605a      	str	r2, [r3, #4]
 80064f6:	609a      	str	r2, [r3, #8]
 80064f8:	60da      	str	r2, [r3, #12]
 80064fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80064fc:	463b      	mov	r3, r7
 80064fe:	2288      	movs	r2, #136	; 0x88
 8006500:	2100      	movs	r1, #0
 8006502:	4618      	mov	r0, r3
 8006504:	f001 f977 	bl	80077f6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006508:	2302      	movs	r3, #2
 800650a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800650e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006516:	2310      	movs	r3, #16
 8006518:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800651c:	2302      	movs	r3, #2
 800651e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006522:	2302      	movs	r3, #2
 8006524:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006528:	2301      	movs	r3, #1
 800652a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800652e:	230a      	movs	r3, #10
 8006530:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006534:	2307      	movs	r3, #7
 8006536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800653a:	2302      	movs	r3, #2
 800653c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006540:	2302      	movs	r3, #2
 8006542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006546:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800654a:	4618      	mov	r0, r3
 800654c:	f7fb fe72 	bl	8002234 <HAL_RCC_OscConfig>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	bf14      	ite	ne
 8006556:	2301      	movne	r3, #1
 8006558:	2300      	moveq	r3, #0
 800655a:	b2db      	uxtb	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 8006560:	f000 fa2e 	bl	80069c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006564:	230f      	movs	r3, #15
 8006566:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800656a:	2303      	movs	r3, #3
 800656c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006570:	2300      	movs	r3, #0
 8006572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006576:	2300      	movs	r3, #0
 8006578:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800657c:	2300      	movs	r3, #0
 800657e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006582:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8006586:	2104      	movs	r1, #4
 8006588:	4618      	mov	r0, r3
 800658a:	f7fc f8d9 	bl	8002740 <HAL_RCC_ClockConfig>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	bf14      	ite	ne
 8006594:	2301      	movne	r3, #1
 8006596:	2300      	moveq	r3, #0
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 800659e:	f000 fa0f 	bl	80069c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80065a2:	2306      	movs	r3, #6
 80065a4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80065a6:	2300      	movs	r3, #0
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80065aa:	2300      	movs	r3, #0
 80065ac:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80065ae:	463b      	mov	r3, r7
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fc faaf 	bl	8002b14 <HAL_RCCEx_PeriphCLKConfig>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bf14      	ite	ne
 80065bc:	2301      	movne	r3, #1
 80065be:	2300      	moveq	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 80065c6:	f000 f9fb 	bl	80069c0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80065ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80065ce:	f7fb fd6b 	bl	80020a8 <HAL_PWREx_ControlVoltageScaling>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf14      	ite	ne
 80065d8:	2301      	movne	r3, #1
 80065da:	2300      	moveq	r3, #0
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <_Z18SystemClock_Configv+0x10e>
  {
    Error_Handler();
 80065e2:	f000 f9ed 	bl	80069c0 <Error_Handler>
  }
}
 80065e6:	bf00      	nop
 80065e8:	37e0      	adds	r7, #224	; 0xe0
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80065f4:	4b16      	ldr	r3, [pc, #88]	; (8006650 <_ZL19MX_USART3_UART_Initv+0x60>)
 80065f6:	4a17      	ldr	r2, [pc, #92]	; (8006654 <_ZL19MX_USART3_UART_Initv+0x64>)
 80065f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80065fa:	4b15      	ldr	r3, [pc, #84]	; (8006650 <_ZL19MX_USART3_UART_Initv+0x60>)
 80065fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006600:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006602:	4b13      	ldr	r3, [pc, #76]	; (8006650 <_ZL19MX_USART3_UART_Initv+0x60>)
 8006604:	2200      	movs	r2, #0
 8006606:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <_ZL19MX_USART3_UART_Initv+0x60>)
 800660a:	2200      	movs	r2, #0
 800660c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800660e:	4b10      	ldr	r3, [pc, #64]	; (8006650 <_ZL19MX_USART3_UART_Initv+0x60>)
 8006610:	2200      	movs	r2, #0
 8006612:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006614:	4b0e      	ldr	r3, [pc, #56]	; (8006650 <_ZL19MX_USART3_UART_Initv+0x60>)
 8006616:	220c      	movs	r2, #12
 8006618:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800661a:	4b0d      	ldr	r3, [pc, #52]	; (8006650 <_ZL19MX_USART3_UART_Initv+0x60>)
 800661c:	2200      	movs	r2, #0
 800661e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <_ZL19MX_USART3_UART_Initv+0x60>)
 8006622:	2200      	movs	r2, #0
 8006624:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006626:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <_ZL19MX_USART3_UART_Initv+0x60>)
 8006628:	2200      	movs	r2, #0
 800662a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800662c:	4b08      	ldr	r3, [pc, #32]	; (8006650 <_ZL19MX_USART3_UART_Initv+0x60>)
 800662e:	2200      	movs	r2, #0
 8006630:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006632:	4807      	ldr	r0, [pc, #28]	; (8006650 <_ZL19MX_USART3_UART_Initv+0x60>)
 8006634:	f7fd fa4f 	bl	8003ad6 <HAL_UART_Init>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	bf14      	ite	ne
 800663e:	2301      	movne	r3, #1
 8006640:	2300      	moveq	r3, #0
 8006642:	b2db      	uxtb	r3, r3
 8006644:	2b00      	cmp	r3, #0
 8006646:	d001      	beq.n	800664c <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 8006648:	f000 f9ba 	bl	80069c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800664c:	bf00      	nop
 800664e:	bd80      	pop	{r7, pc}
 8006650:	200000a8 	.word	0x200000a8
 8006654:	40004800 	.word	0x40004800

08006658 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	; 0x28
 800665c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800665e:	f107 0314 	add.w	r3, r7, #20
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
 8006666:	605a      	str	r2, [r3, #4]
 8006668:	609a      	str	r2, [r3, #8]
 800666a:	60da      	str	r2, [r3, #12]
 800666c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800666e:	4a3a      	ldr	r2, [pc, #232]	; (8006758 <_ZL12MX_GPIO_Initv+0x100>)
 8006670:	4b39      	ldr	r3, [pc, #228]	; (8006758 <_ZL12MX_GPIO_Initv+0x100>)
 8006672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006674:	f043 0304 	orr.w	r3, r3, #4
 8006678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800667a:	4b37      	ldr	r3, [pc, #220]	; (8006758 <_ZL12MX_GPIO_Initv+0x100>)
 800667c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	613b      	str	r3, [r7, #16]
 8006684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006686:	4a34      	ldr	r2, [pc, #208]	; (8006758 <_ZL12MX_GPIO_Initv+0x100>)
 8006688:	4b33      	ldr	r3, [pc, #204]	; (8006758 <_ZL12MX_GPIO_Initv+0x100>)
 800668a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800668c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006692:	4b31      	ldr	r3, [pc, #196]	; (8006758 <_ZL12MX_GPIO_Initv+0x100>)
 8006694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	60fb      	str	r3, [r7, #12]
 800669c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800669e:	4a2e      	ldr	r2, [pc, #184]	; (8006758 <_ZL12MX_GPIO_Initv+0x100>)
 80066a0:	4b2d      	ldr	r3, [pc, #180]	; (8006758 <_ZL12MX_GPIO_Initv+0x100>)
 80066a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066a4:	f043 0301 	orr.w	r3, r3, #1
 80066a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066aa:	4b2b      	ldr	r3, [pc, #172]	; (8006758 <_ZL12MX_GPIO_Initv+0x100>)
 80066ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	60bb      	str	r3, [r7, #8]
 80066b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80066b6:	4a28      	ldr	r2, [pc, #160]	; (8006758 <_ZL12MX_GPIO_Initv+0x100>)
 80066b8:	4b27      	ldr	r3, [pc, #156]	; (8006758 <_ZL12MX_GPIO_Initv+0x100>)
 80066ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066bc:	f043 0302 	orr.w	r3, r3, #2
 80066c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80066c2:	4b25      	ldr	r3, [pc, #148]	; (8006758 <_ZL12MX_GPIO_Initv+0x100>)
 80066c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066c6:	f003 0302 	and.w	r3, r3, #2
 80066ca:	607b      	str	r3, [r7, #4]
 80066cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 80066ce:	2200      	movs	r2, #0
 80066d0:	f44f 7191 	mov.w	r1, #290	; 0x122
 80066d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80066d8:	f7fb fcd8 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80066dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80066e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80066e2:	4b1e      	ldr	r3, [pc, #120]	; (800675c <_ZL12MX_GPIO_Initv+0x104>)
 80066e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e6:	2300      	movs	r3, #0
 80066e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80066ea:	f107 0314 	add.w	r3, r7, #20
 80066ee:	4619      	mov	r1, r3
 80066f0:	481b      	ldr	r0, [pc, #108]	; (8006760 <_ZL12MX_GPIO_Initv+0x108>)
 80066f2:	f7fb fb5f 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80066f6:	2301      	movs	r3, #1
 80066f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066fa:	4b1a      	ldr	r3, [pc, #104]	; (8006764 <_ZL12MX_GPIO_Initv+0x10c>)
 80066fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006702:	f107 0314 	add.w	r3, r7, #20
 8006706:	4619      	mov	r1, r3
 8006708:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800670c:	f7fb fb52 	bl	8001db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 8006710:	f44f 7391 	mov.w	r3, #290	; 0x122
 8006714:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006716:	2301      	movs	r3, #1
 8006718:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800671a:	2300      	movs	r3, #0
 800671c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800671e:	2300      	movs	r3, #0
 8006720:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006722:	f107 0314 	add.w	r3, r7, #20
 8006726:	4619      	mov	r1, r3
 8006728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800672c:	f7fb fb42 	bl	8001db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8006730:	2200      	movs	r2, #0
 8006732:	2100      	movs	r1, #0
 8006734:	2006      	movs	r0, #6
 8006736:	f7fb fad7 	bl	8001ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800673a:	2006      	movs	r0, #6
 800673c:	f7fb fb08 	bl	8001d50 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8006740:	2200      	movs	r2, #0
 8006742:	2105      	movs	r1, #5
 8006744:	2028      	movs	r0, #40	; 0x28
 8006746:	f7fb facf 	bl	8001ce8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800674a:	2028      	movs	r0, #40	; 0x28
 800674c:	f7fb fb00 	bl	8001d50 <HAL_NVIC_EnableIRQ>

}
 8006750:	bf00      	nop
 8006752:	3728      	adds	r7, #40	; 0x28
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	40021000 	.word	0x40021000
 800675c:	10210000 	.word	0x10210000
 8006760:	48000800 	.word	0x48000800
 8006764:	10110000 	.word	0x10110000

08006768 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(whichLoopIteration++ > 7){
 8006770:	4b0d      	ldr	r3, [pc, #52]	; (80067a8 <_Z16StartDefaultTaskPKv+0x40>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	1c5a      	adds	r2, r3, #1
 8006776:	b2d1      	uxtb	r1, r2
 8006778:	4a0b      	ldr	r2, [pc, #44]	; (80067a8 <_Z16StartDefaultTaskPKv+0x40>)
 800677a:	7011      	strb	r1, [r2, #0]
 800677c:	2b07      	cmp	r3, #7
 800677e:	bfcc      	ite	gt
 8006780:	2301      	movgt	r3, #1
 8006782:	2300      	movle	r3, #0
 8006784:	b2db      	uxtb	r3, r3
 8006786:	2b00      	cmp	r3, #0
 8006788:	d007      	beq.n	800679a <_Z16StartDefaultTaskPKv+0x32>
		  //Wyslij sygnal do taska odczytu ze powinien teraz sie uruchomic
		  xTaskNotify(askForDataTaskHandle, 0x01, eSetBits);
 800678a:	4b08      	ldr	r3, [pc, #32]	; (80067ac <_Z16StartDefaultTaskPKv+0x44>)
 800678c:	6818      	ldr	r0, [r3, #0]
 800678e:	2300      	movs	r3, #0
 8006790:	2201      	movs	r2, #1
 8006792:	2101      	movs	r1, #1
 8006794:	f7ff fb1a 	bl	8005dcc <xTaskGenericNotify>
 8006798:	e001      	b.n	800679e <_Z16StartDefaultTaskPKv+0x36>
	  }
	  else {
	  	  MX_BlueNRG_MS_Process();
 800679a:	f7ff fb8b 	bl	8005eb4 <MX_BlueNRG_MS_Process>
	  }
	  osDelay(3000);
 800679e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80067a2:	f7fd ffb6 	bl	8004712 <osDelay>
	  if(whichLoopIteration++ > 7){
 80067a6:	e7e3      	b.n	8006770 <_Z16StartDefaultTaskPKv+0x8>
 80067a8:	20000142 	.word	0x20000142
 80067ac:	2000012c 	.word	0x2000012c

080067b0 <_Z20AskForDataTaskThreadPKv>:
  /* USER CODE END 5 */ 
}

/* USER CODE BEGIN 6 */
void AskForDataTaskThread(void const * argument)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	/* Podejscie: trzy taski - supervisor -> odczyt -> prezentacja: task odczytu danych */
	uint32_t notifValue;
	/* Infinite loop */
	for(;;)
	{
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 80067b8:	f107 020c 	add.w	r2, r7, #12
 80067bc:	f04f 33ff 	mov.w	r3, #4294967295
 80067c0:	21ff      	movs	r1, #255	; 0xff
 80067c2:	2000      	movs	r0, #0
 80067c4:	f7ff fabc 	bl	8005d40 <xTaskNotifyWait>
		if((notifValue&0x01) != 0x00) //Sprawdza czy notifValue zawiera wartosc ktora wyslal task supervisora
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f003 0301 	and.w	r3, r3, #1
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d0f2      	beq.n	80067b8 <_Z20AskForDataTaskThreadPKv+0x8>
		{
		  //Na razie wersja z jednym serverem
		  delayMicroseconds(150000);
 80067d2:	4806      	ldr	r0, [pc, #24]	; (80067ec <_Z20AskForDataTaskThreadPKv+0x3c>)
 80067d4:	f000 f88c 	bl	80068f0 <_Z17delayMicrosecondsm>
	      MX_BlueNRG_MS_Process();
 80067d8:	f7ff fb6c 	bl	8005eb4 <MX_BlueNRG_MS_Process>
		  //Wyslij sygnal do taska od prezentacji ze powinien teraz sie uruchomic
		  xTaskNotify(presentationTaskHandle, 0x02, eSetBits);
 80067dc:	4b04      	ldr	r3, [pc, #16]	; (80067f0 <_Z20AskForDataTaskThreadPKv+0x40>)
 80067de:	6818      	ldr	r0, [r3, #0]
 80067e0:	2300      	movs	r3, #0
 80067e2:	2201      	movs	r2, #1
 80067e4:	2102      	movs	r1, #2
 80067e6:	f7ff faf1 	bl	8005dcc <xTaskGenericNotify>
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 80067ea:	e7e5      	b.n	80067b8 <_Z20AskForDataTaskThreadPKv+0x8>
 80067ec:	000249f0 	.word	0x000249f0
 80067f0:	20000130 	.word	0x20000130

080067f4 <_Z22PresentationTaskThreadPKv>:
		}
	}
}

void PresentationTaskThread(void const * argument)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b088      	sub	sp, #32
 80067f8:	af02      	add	r7, sp, #8
 80067fa:	6078      	str	r0, [r7, #4]
	uint32_t notifValue;
	/* Infinite loop */
	for(;;)
	{
		//Czekaj na sygnal od taska odczytu
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 80067fc:	f107 020c 	add.w	r2, r7, #12
 8006800:	f04f 33ff 	mov.w	r3, #4294967295
 8006804:	21ff      	movs	r1, #255	; 0xff
 8006806:	2000      	movs	r0, #0
 8006808:	f7ff fa9a 	bl	8005d40 <xTaskNotifyWait>
		if((notifValue&0x02) != 0x00) //Sprawdza czy notifValue zawiera wartosc ktora wyslal task odczytu
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d0f2      	beq.n	80067fc <_Z22PresentationTaskThreadPKv+0x8>
		{
			//Na razie wersja tylko z jednym serverem
			uint16_t humid = (rcv_BLE_Data[0] << 8) | rcv_BLE_Data[1];
 8006816:	4b20      	ldr	r3, [pc, #128]	; (8006898 <_Z22PresentationTaskThreadPKv+0xa4>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	b21a      	sxth	r2, r3
 800681e:	4b1e      	ldr	r3, [pc, #120]	; (8006898 <_Z22PresentationTaskThreadPKv+0xa4>)
 8006820:	785b      	ldrb	r3, [r3, #1]
 8006822:	b21b      	sxth	r3, r3
 8006824:	4313      	orrs	r3, r2
 8006826:	b21b      	sxth	r3, r3
 8006828:	82fb      	strh	r3, [r7, #22]
			uint16_t temp  = (rcv_BLE_Data[2] << 8) | rcv_BLE_Data[3];
 800682a:	4b1b      	ldr	r3, [pc, #108]	; (8006898 <_Z22PresentationTaskThreadPKv+0xa4>)
 800682c:	789b      	ldrb	r3, [r3, #2]
 800682e:	021b      	lsls	r3, r3, #8
 8006830:	b21a      	sxth	r2, r3
 8006832:	4b19      	ldr	r3, [pc, #100]	; (8006898 <_Z22PresentationTaskThreadPKv+0xa4>)
 8006834:	78db      	ldrb	r3, [r3, #3]
 8006836:	b21b      	sxth	r3, r3
 8006838:	4313      	orrs	r3, r2
 800683a:	b21b      	sxth	r3, r3
 800683c:	82bb      	strh	r3, [r7, #20]
			uint16_t humidDecimal = humid%10;
 800683e:	8afa      	ldrh	r2, [r7, #22]
 8006840:	4b16      	ldr	r3, [pc, #88]	; (800689c <_Z22PresentationTaskThreadPKv+0xa8>)
 8006842:	fba3 1302 	umull	r1, r3, r3, r2
 8006846:	08d9      	lsrs	r1, r3, #3
 8006848:	460b      	mov	r3, r1
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	440b      	add	r3, r1
 800684e:	005b      	lsls	r3, r3, #1
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	827b      	strh	r3, [r7, #18]
			uint16_t tempDecimal  = temp%10;
 8006854:	8aba      	ldrh	r2, [r7, #20]
 8006856:	4b11      	ldr	r3, [pc, #68]	; (800689c <_Z22PresentationTaskThreadPKv+0xa8>)
 8006858:	fba3 1302 	umull	r1, r3, r3, r2
 800685c:	08d9      	lsrs	r1, r3, #3
 800685e:	460b      	mov	r3, r1
 8006860:	009b      	lsls	r3, r3, #2
 8006862:	440b      	add	r3, r1
 8006864:	005b      	lsls	r3, r3, #1
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	823b      	strh	r3, [r7, #16]
			temp = temp/(uint16_t)10;
 800686a:	8abb      	ldrh	r3, [r7, #20]
 800686c:	4a0b      	ldr	r2, [pc, #44]	; (800689c <_Z22PresentationTaskThreadPKv+0xa8>)
 800686e:	fba2 2303 	umull	r2, r3, r2, r3
 8006872:	08db      	lsrs	r3, r3, #3
 8006874:	82bb      	strh	r3, [r7, #20]
			humid= humid/(uint16_t)10;
 8006876:	8afb      	ldrh	r3, [r7, #22]
 8006878:	4a08      	ldr	r2, [pc, #32]	; (800689c <_Z22PresentationTaskThreadPKv+0xa8>)
 800687a:	fba2 2303 	umull	r2, r3, r2, r3
 800687e:	08db      	lsrs	r3, r3, #3
 8006880:	82fb      	strh	r3, [r7, #22]
			//xQueueSend(msgQueueHandle, (uint8_t *)uartData, 100);
			//!!!!
			printf("\r\nTemperatura\t %hu.%huC\r\nWilgotnosc\t %hu.%hu%%\r\n",
 8006882:	8ab9      	ldrh	r1, [r7, #20]
 8006884:	8a3a      	ldrh	r2, [r7, #16]
 8006886:	8af8      	ldrh	r0, [r7, #22]
 8006888:	8a7b      	ldrh	r3, [r7, #18]
					  temp, tempDecimal, humid, humidDecimal);
 800688a:	9300      	str	r3, [sp, #0]
 800688c:	4603      	mov	r3, r0
 800688e:	4804      	ldr	r0, [pc, #16]	; (80068a0 <_Z22PresentationTaskThreadPKv+0xac>)
 8006890:	f001 f866 	bl	8007960 <iprintf>
		}
	}
 8006894:	e7b2      	b.n	80067fc <_Z22PresentationTaskThreadPKv+0x8>
 8006896:	bf00      	nop
 8006898:	200000a0 	.word	0x200000a0
 800689c:	cccccccd 	.word	0xcccccccd
 80068a0:	080085c8 	.word	0x080085c8

080068a4 <_Z23CommunicationTaskThreadPKv>:
}

void CommunicationTaskThread(void const * argument)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b090      	sub	sp, #64	; 0x40
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
	char receivedData[50];
	/* Infinite loop */
	for(;;)
	{
		xQueueReceive(msgQueueHandle, receivedData, delayTime); // delayTime???
 80068ac:	4b0e      	ldr	r3, [pc, #56]	; (80068e8 <_Z23CommunicationTaskThreadPKv+0x44>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f107 010c 	add.w	r1, r7, #12
 80068b4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7fe fba5 	bl	8005008 <xQueueReceive>
		xSemaphoreTake(uartMutexHandle, 1000); // 1000???
 80068be:	4b0b      	ldr	r3, [pc, #44]	; (80068ec <_Z23CommunicationTaskThreadPKv+0x48>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe fc42 	bl	8005150 <xQueueSemaphoreTake>
//		HAL_UART_Transmit(&huart3, (uint8_t *)receivedData, strlen(receivedData), 10);
		printf(receivedData);
 80068cc:	f107 030c 	add.w	r3, r7, #12
 80068d0:	4618      	mov	r0, r3
 80068d2:	f001 f845 	bl	8007960 <iprintf>
		xSemaphoreGive(uartMutexHandle);
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <_Z23CommunicationTaskThreadPKv+0x48>)
 80068d8:	6818      	ldr	r0, [r3, #0]
 80068da:	2300      	movs	r3, #0
 80068dc:	2200      	movs	r2, #0
 80068de:	2100      	movs	r1, #0
 80068e0:	f7fe fac6 	bl	8004e70 <xQueueGenericSend>
		xQueueReceive(msgQueueHandle, receivedData, delayTime); // delayTime???
 80068e4:	e7e2      	b.n	80068ac <_Z23CommunicationTaskThreadPKv+0x8>
 80068e6:	bf00      	nop
 80068e8:	2000013c 	.word	0x2000013c
 80068ec:	20000138 	.word	0x20000138

080068f0 <_Z17delayMicrosecondsm>:
//	  //xQueueSend(msgQueueHandle, (uint8_t *)uartData, 100);
//	  HAL_UART_Transmit(&huart3,(uint8_t *) uartData, sizeof(uartData), 100);
//	}
//}

void delayMicroseconds(uint32_t us){
 80068f0:	b590      	push	{r4, r7, lr}
 80068f2:	b087      	sub	sp, #28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
	//Average, experimental time for 1 rotation of the 'for' loop with nops: ~140ns
	//for an 80MHz processor@max speed; that gives ~7.143 loop rotations for 1 ms
	//Use this fact and the processor frequency to adjust the loop counter value for any processor speed
	uint32_t clockFreq = HAL_RCC_GetHCLKFreq();	//Current processor frequency
 80068f8:	f7fb ffb8 	bl	800286c <HAL_RCC_GetHCLKFreq>
 80068fc:	4603      	mov	r3, r0
 80068fe:	613b      	str	r3, [r7, #16]
	float clockFreqRel = clockFreq/(float)80000000.0;//Current processor frequency relative to base of 80MHz
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	ee07 3a90 	vmov	s15, r3
 8006906:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800690a:	eddf 6a23 	vldr	s13, [pc, #140]	; 8006998 <_Z17delayMicrosecondsm+0xa8>
 800690e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006912:	edc7 7a03 	vstr	s15, [r7, #12]
	uint32_t loopCounter = (us > 0 ? (uint32_t)(us*clockFreqRel*7.143) : (uint32_t)(clockFreqRel*7.143));
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d019      	beq.n	8006950 <_Z17delayMicrosecondsm+0x60>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	ee07 3a90 	vmov	s15, r3
 8006922:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006926:	edd7 7a03 	vldr	s15, [r7, #12]
 800692a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800692e:	ee17 0a90 	vmov	r0, s15
 8006932:	f7f9 fe01 	bl	8000538 <__aeabi_f2d>
 8006936:	a316      	add	r3, pc, #88	; (adr r3, 8006990 <_Z17delayMicrosecondsm+0xa0>)
 8006938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800693c:	f7f9 fe50 	bl	80005e0 <__aeabi_dmul>
 8006940:	4603      	mov	r3, r0
 8006942:	460c      	mov	r4, r1
 8006944:	4618      	mov	r0, r3
 8006946:	4621      	mov	r1, r4
 8006948:	f7fa f85c 	bl	8000a04 <__aeabi_d2uiz>
 800694c:	4603      	mov	r3, r0
 800694e:	e00e      	b.n	800696e <_Z17delayMicrosecondsm+0x7e>
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7f9 fdf1 	bl	8000538 <__aeabi_f2d>
 8006956:	a30e      	add	r3, pc, #56	; (adr r3, 8006990 <_Z17delayMicrosecondsm+0xa0>)
 8006958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800695c:	f7f9 fe40 	bl	80005e0 <__aeabi_dmul>
 8006960:	4603      	mov	r3, r0
 8006962:	460c      	mov	r4, r1
 8006964:	4618      	mov	r0, r3
 8006966:	4621      	mov	r1, r4
 8006968:	f7fa f84c 	bl	8000a04 <__aeabi_d2uiz>
 800696c:	4603      	mov	r3, r0
 800696e:	60bb      	str	r3, [r7, #8]
	//uint32_t loopCounter = (us > 0 ? (uint32_t)(us*7.143) : 7); //A minimum delay of 1 us - 80MHz only
	for(uint32_t tmp = 0; tmp < loopCounter; tmp++) {asm("nop");}
 8006970:	2300      	movs	r3, #0
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	697a      	ldr	r2, [r7, #20]
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	429a      	cmp	r2, r3
 800697a:	d204      	bcs.n	8006986 <_Z17delayMicrosecondsm+0x96>
 800697c:	bf00      	nop
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	3301      	adds	r3, #1
 8006982:	617b      	str	r3, [r7, #20]
 8006984:	e7f6      	b.n	8006974 <_Z17delayMicrosecondsm+0x84>
	//previously there was tmp < 800 giving 3200 processor cycles, each lasting 12.5 ns = 40 us delay
	//UINT_MAX	Maximum value for a variable of type unsigned int	4,294,967,295 (0xffffffff)
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	bd90      	pop	{r4, r7, pc}
 800698e:	bf00      	nop
 8006990:	978d4fdf 	.word	0x978d4fdf
 8006994:	401c926e 	.word	0x401c926e
 8006998:	4c989680 	.word	0x4c989680

0800699c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a04      	ldr	r2, [pc, #16]	; (80069bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d101      	bne.n	80069b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80069ae:	f7fb f963 	bl	8001c78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80069b2:	bf00      	nop
 80069b4:	3708      	adds	r7, #8
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40000400 	.word	0x40000400

080069c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80069c0:	b480      	push	{r7}
 80069c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80069c4:	bf00      	nop
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr
	...

080069d0 <Add_Sample_Service>:
 * @brief  Add a sample service using a vendor specific profile
 * @param  None
 * @retval Status
 */
tBleStatus Add_Sample_Service(void)
{
 80069d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  D973F2E0-B19E-11E2-9E96-0800200C9A66
  D973F2E1-B19E-11E2-9E96-0800200C9A66
  D973F2E2-B19E-11E2-9E96-0800200C9A66
  */
  
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 80069d4:	4b2c      	ldr	r3, [pc, #176]	; (8006a88 <Add_Sample_Service+0xb8>)
{
 80069d6:	b092      	sub	sp, #72	; 0x48
  const uint8_t service_uuid[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe0,0xf2,0x73,0xd9};
 80069d8:	aa06      	add	r2, sp, #24
 80069da:	f103 0610 	add.w	r6, r3, #16
 80069de:	4615      	mov	r5, r2
 80069e0:	6818      	ldr	r0, [r3, #0]
 80069e2:	6859      	ldr	r1, [r3, #4]
 80069e4:	4614      	mov	r4, r2
 80069e6:	c403      	stmia	r4!, {r0, r1}
 80069e8:	3308      	adds	r3, #8
 80069ea:	42b3      	cmp	r3, r6
 80069ec:	4622      	mov	r2, r4
 80069ee:	d1f7      	bne.n	80069e0 <Add_Sample_Service+0x10>
  const uint8_t charUuidTX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9}; //roznica na bajcie 12
 80069f0:	4b26      	ldr	r3, [pc, #152]	; (8006a8c <Add_Sample_Service+0xbc>)
 80069f2:	aa0a      	add	r2, sp, #40	; 0x28
 80069f4:	f103 0710 	add.w	r7, r3, #16
 80069f8:	4616      	mov	r6, r2
 80069fa:	6818      	ldr	r0, [r3, #0]
 80069fc:	6859      	ldr	r1, [r3, #4]
 80069fe:	4614      	mov	r4, r2
 8006a00:	c403      	stmia	r4!, {r0, r1}
 8006a02:	3308      	adds	r3, #8
 8006a04:	42bb      	cmp	r3, r7
 8006a06:	4622      	mov	r2, r4
 8006a08:	d1f7      	bne.n	80069fa <Add_Sample_Service+0x2a>
  const uint8_t charUuidRX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9}; //roznica na bajcie 12
 8006a0a:	4b21      	ldr	r3, [pc, #132]	; (8006a90 <Add_Sample_Service+0xc0>)
 8006a0c:	aa0e      	add	r2, sp, #56	; 0x38
 8006a0e:	f103 0e10 	add.w	lr, r3, #16
 8006a12:	4617      	mov	r7, r2
 8006a14:	6818      	ldr	r0, [r3, #0]
 8006a16:	6859      	ldr	r1, [r3, #4]
 8006a18:	4614      	mov	r4, r2
 8006a1a:	c403      	stmia	r4!, {r0, r1}
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	4573      	cmp	r3, lr
 8006a20:	4622      	mov	r2, r4
 8006a22:	d1f7      	bne.n	8006a14 <Add_Sample_Service+0x44>
  
  /* Dodanie jednego glownego serwisu o service_uuid jak wyzej i zapisanie handle'a do tego serwisu w sampleServHandle */
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid, PRIMARY_SERVICE, 7, &sampleServHandle); /* original is 9?? */
 8006a24:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8006a9c <Add_Sample_Service+0xcc>
 8006a28:	f8cd 8000 	str.w	r8, [sp]
 8006a2c:	2307      	movs	r3, #7
 8006a2e:	2201      	movs	r2, #1
 8006a30:	4629      	mov	r1, r5
 8006a32:	2002      	movs	r0, #2
 8006a34:	f7fd f9ff 	bl	8003e36 <aci_gatt_add_serv>
  if (ret != BLE_STATUS_SUCCESS) goto fail;    
 8006a38:	4603      	mov	r3, r0
 8006a3a:	bb08      	cbnz	r0, 8006a80 <Add_Sample_Service+0xb0>
  
  /* Dodanie dwoch charakterystyk: TX i RX do stworzonego glownego serwisu, zapisanie handle'i do tych serwisow w TXCharHandle i RXCharH. */
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidTX, 20, CHAR_PROP_NOTIFY, ATTR_PERMISSION_NONE, 0,
 8006a3c:	4a15      	ldr	r2, [pc, #84]	; (8006a94 <Add_Sample_Service+0xc4>)
 8006a3e:	9205      	str	r2, [sp, #20]
 8006a40:	2510      	movs	r5, #16
 8006a42:	2401      	movs	r4, #1
 8006a44:	9302      	str	r3, [sp, #8]
 8006a46:	9301      	str	r3, [sp, #4]
 8006a48:	f8b8 0000 	ldrh.w	r0, [r8]
 8006a4c:	9404      	str	r4, [sp, #16]
 8006a4e:	2314      	movs	r3, #20
 8006a50:	9503      	str	r5, [sp, #12]
 8006a52:	9500      	str	r5, [sp, #0]
 8006a54:	4632      	mov	r2, r6
 8006a56:	2102      	movs	r1, #2
 8006a58:	f7fd fa30 	bl	8003ebc <aci_gatt_add_char>
                           16, 1, &TXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	b978      	cbnz	r0, 8006a80 <Add_Sample_Service+0xb0>
  
  ret =  aci_gatt_add_char(sampleServHandle, UUID_TYPE_128, charUuidRX, 20, CHAR_PROP_WRITE|CHAR_PROP_WRITE_WITHOUT_RESP, ATTR_PERMISSION_NONE, GATT_NOTIFY_ATTRIBUTE_WRITE,
 8006a60:	4a0d      	ldr	r2, [pc, #52]	; (8006a98 <Add_Sample_Service+0xc8>)
 8006a62:	9301      	str	r3, [sp, #4]
 8006a64:	230c      	movs	r3, #12
 8006a66:	9205      	str	r2, [sp, #20]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	f8b8 0000 	ldrh.w	r0, [r8]
 8006a6e:	9404      	str	r4, [sp, #16]
 8006a70:	9503      	str	r5, [sp, #12]
 8006a72:	9402      	str	r4, [sp, #8]
 8006a74:	2314      	movs	r3, #20
 8006a76:	463a      	mov	r2, r7
 8006a78:	2102      	movs	r1, #2
 8006a7a:	f7fd fa1f 	bl	8003ebc <aci_gatt_add_char>
                           16, 1, &RXCharHandle);
  if (ret != BLE_STATUS_SUCCESS) goto fail;
 8006a7e:	b100      	cbz	r0, 8006a82 <Add_Sample_Service+0xb2>
  PRINTF("Sample Service added.\nTX Char Handle %04X, RX Char Handle %04X\n", TXCharHandle, RXCharHandle);
  return BLE_STATUS_SUCCESS; 
  
fail:
  PRINTF("Error while adding Sample Service.\n");
  return BLE_STATUS_ERROR ;
 8006a80:	2047      	movs	r0, #71	; 0x47
}
 8006a82:	b012      	add	sp, #72	; 0x48
 8006a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a88:	080085f9 	.word	0x080085f9
 8006a8c:	08008609 	.word	0x08008609
 8006a90:	08008619 	.word	0x08008619
 8006a94:	200014e8 	.word	0x200014e8
 8006a98:	200014ec 	.word	0x200014ec
 8006a9c:	200014ea 	.word	0x200014ea

08006aa0 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None 
 * @retval None
 */
void Make_Connection(void)
{  
 8006aa0:	b570      	push	{r4, r5, r6, lr}
  tBleStatus ret;
  
  
  if(BLE_Role == CLIENT) {
 8006aa2:	4b26      	ldr	r3, [pc, #152]	; (8006b3c <Make_Connection+0x9c>)
 8006aa4:	781c      	ldrb	r4, [r3, #0]
{  
 8006aa6:	b08c      	sub	sp, #48	; 0x30
 8006aa8:	ad08      	add	r5, sp, #32
  if(BLE_Role == CLIENT) {
 8006aaa:	bb14      	cbnz	r4, 8006af2 <Make_Connection+0x52>
    
    printf("Client Create Connection\n");
 8006aac:	4824      	ldr	r0, [pc, #144]	; (8006b40 <Make_Connection+0xa0>)
 8006aae:	f000 ffdf 	bl	8007a70 <puts>
    tBDAddr bdaddr = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02}; /* Adres servera */
 8006ab2:	4b24      	ldr	r3, [pc, #144]	; (8006b44 <Make_Connection+0xa4>)
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	9008      	str	r0, [sp, #32]
 8006ab8:	889b      	ldrh	r3, [r3, #4]
 8006aba:	80ab      	strh	r3, [r5, #4]
    
    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 fac3 	bl	8007048 <BSP_LED_On>
    
    /*
    Scan_Interval, Scan_Window, Peer_Address_Type, Peer_Address, Own_Address_Type, Conn_Interval_Min, 
    Conn_Interval_Max, Conn_Latency, Supervision_Timeout, Conn_Len_Min, Conn_Len_Max    
    */
    ret = aci_gap_create_connection(
 8006ac2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006ac6:	9306      	str	r3, [sp, #24]
 8006ac8:	9305      	str	r3, [sp, #20]
 8006aca:	233c      	movs	r3, #60	; 0x3c
 8006acc:	9304      	str	r3, [sp, #16]
 8006ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ad2:	2328      	movs	r3, #40	; 0x28
 8006ad4:	9302      	str	r3, [sp, #8]
 8006ad6:	9301      	str	r3, [sp, #4]
 8006ad8:	9403      	str	r4, [sp, #12]
 8006ada:	9400      	str	r4, [sp, #0]
 8006adc:	462b      	mov	r3, r5
 8006ade:	4622      	mov	r2, r4
 8006ae0:	4608      	mov	r0, r1
 8006ae2:	f7fd f93e 	bl	8003d62 <aci_gap_create_connection>
            SUPERV_TIMEOUT, /* 600 msec = Supervision Timeout (reset upon reception of a valid packet) max time between 2 packets before connection is considered lost (Time = N x 10 msec) */
			CONN_L1, /* 1250 msec = Minimum Connection Length (for a number N, Time = N x 0.625 msec) */
			CONN_L2  /* 1250 msec = Maximal Connection Length (for a number N, Time = N x 0.625 msec) */
	);
    
    if (ret != 0){
 8006ae6:	b110      	cbz	r0, 8006aee <Make_Connection+0x4e>
      printf("Error while starting connection.\n");
 8006ae8:	4817      	ldr	r0, [pc, #92]	; (8006b48 <Make_Connection+0xa8>)
 8006aea:	f000 ffc1 	bl	8007a70 <puts>
			0, /* Slave_Conn_Interval_Min = time between one radio event on a given connection and the next radio event on the same connection */
			0  /* Slave_Conn_Interval_Max https://devzone.nordicsemi.com/f/nordic-q-a/25340/do-i-understand-ble-connection-interval-properly */
	);
    PRINTF("%d\n",ret);
  }
}
 8006aee:	b00c      	add	sp, #48	; 0x30
 8006af0:	bd70      	pop	{r4, r5, r6, pc}
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8006af2:	4b16      	ldr	r3, [pc, #88]	; (8006b4c <Make_Connection+0xac>)
 8006af4:	462a      	mov	r2, r5
 8006af6:	f103 0608 	add.w	r6, r3, #8
 8006afa:	6818      	ldr	r0, [r3, #0]
 8006afc:	6859      	ldr	r1, [r3, #4]
 8006afe:	4614      	mov	r4, r2
 8006b00:	c403      	stmia	r4!, {r0, r1}
 8006b02:	3308      	adds	r3, #8
 8006b04:	42b3      	cmp	r3, r6
 8006b06:	4622      	mov	r2, r4
 8006b08:	d1f7      	bne.n	8006afa <Make_Connection+0x5a>
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	791b      	ldrb	r3, [r3, #4]
 8006b0e:	6020      	str	r0, [r4, #0]
    hci_le_set_scan_resp_data(0,NULL);
 8006b10:	2100      	movs	r1, #0
    const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,'B','l','u','e','N','R','G','_','C','h','a','t'};
 8006b12:	7123      	strb	r3, [r4, #4]
    hci_le_set_scan_resp_data(0,NULL);
 8006b14:	4608      	mov	r0, r1
 8006b16:	f7fd fbde 	bl	80042d6 <hci_le_set_scan_resp_data>
    ret = aci_gap_set_discoverable(
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	220d      	movs	r2, #13
 8006b1e:	9201      	str	r2, [sp, #4]
 8006b20:	9306      	str	r3, [sp, #24]
 8006b22:	9305      	str	r3, [sp, #20]
 8006b24:	9304      	str	r3, [sp, #16]
 8006b26:	9303      	str	r3, [sp, #12]
 8006b28:	9502      	str	r5, [sp, #8]
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006b30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7fd f877 	bl	8003c28 <aci_gap_set_discoverable>
}
 8006b3a:	e7d8      	b.n	8006aee <Make_Connection+0x4e>
 8006b3c:	20001154 	.word	0x20001154
 8006b40:	08008762 	.word	0x08008762
 8006b44:	08008629 	.word	0x08008629
 8006b48:	0800877b 	.word	0x0800877b
 8006b4c:	0800862f 	.word	0x0800862f

08006b50 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8006b50:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_tx_char_handle)
 8006b52:	4d0f      	ldr	r5, [pc, #60]	; (8006b90 <startReadTXCharHandle+0x40>)
 8006b54:	782a      	ldrb	r2, [r5, #0]
{
 8006b56:	b087      	sub	sp, #28
  if (!start_read_tx_char_handle)
 8006b58:	b9c2      	cbnz	r2, 8006b8c <startReadTXCharHandle+0x3c>
  {    
    PRINTF("Start reading TX Char Handle\n");
    
    const uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1,0xf2,0x73,0xd9};
 8006b5a:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <startReadTXCharHandle+0x44>)
 8006b5c:	aa02      	add	r2, sp, #8
 8006b5e:	f103 0710 	add.w	r7, r3, #16
 8006b62:	4616      	mov	r6, r2
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	6859      	ldr	r1, [r3, #4]
 8006b68:	4614      	mov	r4, r2
 8006b6a:	c403      	stmia	r4!, {r0, r1}
 8006b6c:	3308      	adds	r3, #8
 8006b6e:	42bb      	cmp	r3, r7
 8006b70:	4622      	mov	r2, r4
 8006b72:	d1f7      	bne.n	8006b64 <startReadTXCharHandle+0x14>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8006b74:	4b08      	ldr	r3, [pc, #32]	; (8006b98 <startReadTXCharHandle+0x48>)
 8006b76:	8818      	ldrh	r0, [r3, #0]
 8006b78:	9600      	str	r6, [sp, #0]
 8006b7a:	2302      	movs	r3, #2
 8006b7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b80:	2101      	movs	r1, #1
 8006b82:	b280      	uxth	r0, r0
 8006b84:	f7fd fa2f 	bl	8003fe6 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	702b      	strb	r3, [r5, #0]
  }
}
 8006b8c:	b007      	add	sp, #28
 8006b8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b90:	200014b6 	.word	0x200014b6
 8006b94:	08008609 	.word	0x08008609
 8006b98:	200014b0 	.word	0x200014b0

08006b9c <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadRXCharHandle(void)
{  
 8006b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_rx_char_handle)
 8006b9e:	4d0f      	ldr	r5, [pc, #60]	; (8006bdc <startReadRXCharHandle+0x40>)
 8006ba0:	782a      	ldrb	r2, [r5, #0]
{  
 8006ba2:	b087      	sub	sp, #28
  if (!start_read_rx_char_handle)
 8006ba4:	b9c2      	cbnz	r2, 8006bd8 <startReadRXCharHandle+0x3c>
  {
    PRINTF("Start reading RX Char Handle\n");
    
    const uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2,0xf2,0x73,0xd9};
 8006ba6:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <startReadRXCharHandle+0x44>)
 8006ba8:	aa02      	add	r2, sp, #8
 8006baa:	f103 0710 	add.w	r7, r3, #16
 8006bae:	4616      	mov	r6, r2
 8006bb0:	6818      	ldr	r0, [r3, #0]
 8006bb2:	6859      	ldr	r1, [r3, #4]
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	c403      	stmia	r4!, {r0, r1}
 8006bb8:	3308      	adds	r3, #8
 8006bba:	42bb      	cmp	r3, r7
 8006bbc:	4622      	mov	r2, r4
 8006bbe:	d1f7      	bne.n	8006bb0 <startReadRXCharHandle+0x14>
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 8006bc0:	4b08      	ldr	r3, [pc, #32]	; (8006be4 <startReadRXCharHandle+0x48>)
 8006bc2:	8818      	ldrh	r0, [r3, #0]
 8006bc4:	9600      	str	r6, [sp, #0]
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006bcc:	2101      	movs	r1, #1
 8006bce:	b280      	uxth	r0, r0
 8006bd0:	f7fd fa09 	bl	8003fe6 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	702b      	strb	r3, [r5, #0]
  }
}
 8006bd8:	b007      	add	sp, #28
 8006bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bdc:	200014b5 	.word	0x200014b5
 8006be0:	08008619 	.word	0x08008619
 8006be4:	200014b0 	.word	0x200014b0

08006be8 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8006be8:	b570      	push	{r4, r5, r6, lr}
 8006bea:	4605      	mov	r5, r0
 8006bec:	460e      	mov	r6, r1
  //BSP_LED_Toggle(LED2);

  for(int i = 0; i < Nb_bytes; i++) {
 8006bee:	4604      	mov	r4, r0
 8006bf0:	1b63      	subs	r3, r4, r5
 8006bf2:	429e      	cmp	r6, r3
 8006bf4:	dc06      	bgt.n	8006c04 <receiveData+0x1c>
    printf("%c", data_buffer[i]);
  } //obudowac do wysylania
  // tu moze byc obudowa uartowa/samo wysylanie wartosci temp i wilgotnosci
  fflush(stdout);
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <receiveData+0x28>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
}
 8006bfa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  fflush(stdout);
 8006bfe:	6898      	ldr	r0, [r3, #8]
 8006c00:	f000 bcee 	b.w	80075e0 <fflush>
    printf("%c", data_buffer[i]);
 8006c04:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006c08:	f000 fec2 	bl	8007990 <putchar>
 8006c0c:	e7f0      	b.n	8006bf0 <receiveData+0x8>
 8006c0e:	bf00      	nop
 8006c10:	20000020 	.word	0x20000020

08006c14 <sendData>:
 * @param  data_buffer : pointer to data to be sent
 * @param  Nb_bytes : number of bytes to send
 * @retval None
 */
void sendData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8006c14:	b513      	push	{r0, r1, r4, lr}
 8006c16:	460a      	mov	r2, r1
  if(BLE_Role == SERVER) {    
 8006c18:	490d      	ldr	r1, [pc, #52]	; (8006c50 <sendData+0x3c>)
 8006c1a:	7809      	ldrb	r1, [r1, #0]
 8006c1c:	2901      	cmp	r1, #1
{
 8006c1e:	4603      	mov	r3, r0
  if(BLE_Role == SERVER) {    
 8006c20:	d10a      	bne.n	8006c38 <sendData+0x24>
    aci_gatt_update_char_value(sampleServHandle,TXCharHandle, 0, Nb_bytes, data_buffer);    
 8006c22:	490c      	ldr	r1, [pc, #48]	; (8006c54 <sendData+0x40>)
 8006c24:	480c      	ldr	r0, [pc, #48]	; (8006c58 <sendData+0x44>)
 8006c26:	8809      	ldrh	r1, [r1, #0]
 8006c28:	8800      	ldrh	r0, [r0, #0]
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f7fd f9a2 	bl	8003f78 <aci_gatt_update_char_value>
  else { /* Client */
    //aci_gatt_write_without_response(connection_handle, rx_handle+1, Nb_bytes, data_buffer); /* No events are generated after this command is executed! */
    //TODO: inna funkcja do wysylania, ktora wywola event ktory bedzie mogl przetworzyc slave
	aci_gatt_write_charac_value(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
  }
}
 8006c34:	b002      	add	sp, #8
 8006c36:	bd10      	pop	{r4, pc}
	aci_gatt_write_charac_value(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8006c38:	4908      	ldr	r1, [pc, #32]	; (8006c5c <sendData+0x48>)
 8006c3a:	8808      	ldrh	r0, [r1, #0]
 8006c3c:	4908      	ldr	r1, [pc, #32]	; (8006c60 <sendData+0x4c>)
 8006c3e:	880c      	ldrh	r4, [r1, #0]
 8006c40:	3401      	adds	r4, #1
 8006c42:	b2a1      	uxth	r1, r4
 8006c44:	b280      	uxth	r0, r0
}
 8006c46:	b002      	add	sp, #8
 8006c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	aci_gatt_write_charac_value(connection_handle, rx_handle+1, Nb_bytes, data_buffer);
 8006c4c:	f7fd ba01 	b.w	8004052 <aci_gatt_write_charac_value>
 8006c50:	20001154 	.word	0x20001154
 8006c54:	200014e8 	.word	0x200014e8
 8006c58:	200014ea 	.word	0x200014ea
 8006c5c:	200014b0 	.word	0x200014b0
 8006c60:	200014e6 	.word	0x200014e6

08006c64 <enableNotification>:
 * @brief  Enable notification
 * @param  None 
 * @retval None
 */
void enableNotification(void)
{
 8006c64:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t client_char_conf_data[] = {0x01, 0x00}; /* Enable notifications */
 8006c66:	2301      	movs	r3, #1
 8006c68:	f88d 3004 	strb.w	r3, [sp, #4]
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f88d 3005 	strb.w	r3, [sp, #5]
  
  uint32_t tickstart = HAL_GetTick();
 8006c72:	f7fb f80d 	bl	8001c90 <HAL_GetTick>
  
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){ /* ? */
 8006c76:	4d0d      	ldr	r5, [pc, #52]	; (8006cac <enableNotification+0x48>)
 8006c78:	4c0d      	ldr	r4, [pc, #52]	; (8006cb0 <enableNotification+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8006c7a:	4606      	mov	r6, r0
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){ /* ? */
 8006c7c:	8821      	ldrh	r1, [r4, #0]
 8006c7e:	8828      	ldrh	r0, [r5, #0]
 8006c80:	3102      	adds	r1, #2
 8006c82:	ab01      	add	r3, sp, #4
 8006c84:	2202      	movs	r2, #2
 8006c86:	b289      	uxth	r1, r1
 8006c88:	b280      	uxth	r0, r0
 8006c8a:	f7fd fa18 	bl	80040be <aci_gatt_write_charac_descriptor>
 8006c8e:	2846      	cmp	r0, #70	; 0x46
 8006c90:	d106      	bne.n	8006ca0 <enableNotification+0x3c>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8006c92:	f7fa fffd 	bl	8001c90 <HAL_GetTick>
 8006c96:	f242 7310 	movw	r3, #10000	; 0x2710
 8006c9a:	1b80      	subs	r0, r0, r6
 8006c9c:	4298      	cmp	r0, r3
 8006c9e:	d9ed      	bls.n	8006c7c <enableNotification+0x18>
  }
  notification_enabled = TRUE;
 8006ca0:	4b04      	ldr	r3, [pc, #16]	; (8006cb4 <enableNotification+0x50>)
 8006ca2:	2201      	movs	r2, #1
 8006ca4:	701a      	strb	r2, [r3, #0]
}
 8006ca6:	b002      	add	sp, #8
 8006ca8:	bd70      	pop	{r4, r5, r6, pc}
 8006caa:	bf00      	nop
 8006cac:	200014b0 	.word	0x200014b0
 8006cb0:	200014e4 	.word	0x200014e4
 8006cb4:	200014b4 	.word	0x200014b4

08006cb8 <Attribute_Modified_CB>:
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
  if(handle == RXCharHandle + 1){
 8006cb8:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <Attribute_Modified_CB+0x28>)
 8006cba:	881b      	ldrh	r3, [r3, #0]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	4298      	cmp	r0, r3
 8006cc0:	d102      	bne.n	8006cc8 <Attribute_Modified_CB+0x10>
    receiveData(att_data, data_length);
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	f7ff bf90 	b.w	8006be8 <receiveData>
  } else if (handle == TXCharHandle + 2) {        
 8006cc8:	4b06      	ldr	r3, [pc, #24]	; (8006ce4 <Attribute_Modified_CB+0x2c>)
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	3302      	adds	r3, #2
 8006cce:	4298      	cmp	r0, r3
 8006cd0:	d104      	bne.n	8006cdc <Attribute_Modified_CB+0x24>
    if(att_data[0] == 0x01)
 8006cd2:	7813      	ldrb	r3, [r2, #0]
 8006cd4:	2b01      	cmp	r3, #1
      notification_enabled = TRUE;
 8006cd6:	bf04      	itt	eq
 8006cd8:	4a03      	ldreq	r2, [pc, #12]	; (8006ce8 <Attribute_Modified_CB+0x30>)
 8006cda:	7013      	strbeq	r3, [r2, #0]
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	200014ec 	.word	0x200014ec
 8006ce4:	200014e8 	.word	0x200014e8
 8006ce8:	200014b4 	.word	0x200014b4

08006cec <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8006cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  connected = TRUE;
 8006cee:	4b0c      	ldr	r3, [pc, #48]	; (8006d20 <GAP_ConnectionComplete_CB+0x34>)
  connection_handle = handle;
  
  printf("Connected to device:");
  for(int i = 5; i > 0; i--){
    printf("%02X-", addr[i]);
 8006cf0:	4f0c      	ldr	r7, [pc, #48]	; (8006d24 <GAP_ConnectionComplete_CB+0x38>)
  connected = TRUE;
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8006cf6:	4b0c      	ldr	r3, [pc, #48]	; (8006d28 <GAP_ConnectionComplete_CB+0x3c>)
{  
 8006cf8:	4604      	mov	r4, r0
  printf("Connected to device:");
 8006cfa:	480c      	ldr	r0, [pc, #48]	; (8006d2c <GAP_ConnectionComplete_CB+0x40>)
  connection_handle = handle;
 8006cfc:	8019      	strh	r1, [r3, #0]
  printf("Connected to device:");
 8006cfe:	f000 fe2f 	bl	8007960 <iprintf>
 8006d02:	1da5      	adds	r5, r4, #6
 8006d04:	1c66      	adds	r6, r4, #1
    printf("%02X-", addr[i]);
 8006d06:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	f000 fe28 	bl	8007960 <iprintf>
  for(int i = 5; i > 0; i--){
 8006d10:	42b5      	cmp	r5, r6
 8006d12:	d1f8      	bne.n	8006d06 <GAP_ConnectionComplete_CB+0x1a>
  }
  printf("%02X\n", addr[0]);
 8006d14:	7821      	ldrb	r1, [r4, #0]
 8006d16:	4806      	ldr	r0, [pc, #24]	; (8006d30 <GAP_ConnectionComplete_CB+0x44>)
}
 8006d18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  printf("%02X\n", addr[0]);
 8006d1c:	f000 be20 	b.w	8007960 <iprintf>
 8006d20:	200014ac 	.word	0x200014ac
 8006d24:	08008749 	.word	0x08008749
 8006d28:	200014b0 	.word	0x200014b0
 8006d2c:	08008734 	.word	0x08008734
 8006d30:	0800874f 	.word	0x0800874f

08006d34 <GAP_DisconnectionComplete_CB>:
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
  connected = FALSE;
 8006d34:	4b0a      	ldr	r3, [pc, #40]	; (8006d60 <GAP_DisconnectionComplete_CB+0x2c>)
  
  printf("Disconnected\n");
 8006d36:	480b      	ldr	r0, [pc, #44]	; (8006d64 <GAP_DisconnectionComplete_CB+0x30>)
{
 8006d38:	b510      	push	{r4, lr}
  connected = FALSE;
 8006d3a:	2400      	movs	r4, #0
 8006d3c:	601c      	str	r4, [r3, #0]
  printf("Disconnected\n");
 8006d3e:	f000 fe97 	bl	8007a70 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8006d42:	4b09      	ldr	r3, [pc, #36]	; (8006d68 <GAP_DisconnectionComplete_CB+0x34>)
 8006d44:	2201      	movs	r2, #1
 8006d46:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8006d48:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <GAP_DisconnectionComplete_CB+0x38>)
 8006d4a:	701c      	strb	r4, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8006d4c:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <GAP_DisconnectionComplete_CB+0x3c>)
 8006d4e:	701c      	strb	r4, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8006d50:	4b08      	ldr	r3, [pc, #32]	; (8006d74 <GAP_DisconnectionComplete_CB+0x40>)
 8006d52:	701c      	strb	r4, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8006d54:	4b08      	ldr	r3, [pc, #32]	; (8006d78 <GAP_DisconnectionComplete_CB+0x44>)
 8006d56:	701c      	strb	r4, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8006d58:	4b08      	ldr	r3, [pc, #32]	; (8006d7c <GAP_DisconnectionComplete_CB+0x48>)
 8006d5a:	701c      	strb	r4, [r3, #0]
 8006d5c:	bd10      	pop	{r4, pc}
 8006d5e:	bf00      	nop
 8006d60:	200014ac 	.word	0x200014ac
 8006d64:	08008755 	.word	0x08008755
 8006d68:	2000000d 	.word	0x2000000d
 8006d6c:	200014b4 	.word	0x200014b4
 8006d70:	200014b6 	.word	0x200014b6
 8006d74:	200014b5 	.word	0x200014b5
 8006d78:	200014b3 	.word	0x200014b3
 8006d7c:	200014b2 	.word	0x200014b2

08006d80 <GATT_Notification_CB>:
 * @param  attr_value  Attribute value in the notification
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value) /* Otrzymywanie danych od servera */
{
	if (attr_handle == tx_handle+1) {
 8006d80:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <GATT_Notification_CB+0x28>)
 8006d82:	881b      	ldrh	r3, [r3, #0]
 8006d84:	3301      	adds	r3, #1
 8006d86:	4298      	cmp	r0, r3
 8006d88:	d10c      	bne.n	8006da4 <GATT_Notification_CB+0x24>
	    //receiveData(attr_value, attr_len); //wypisanie danych printfem
		if(attr_len == 5){
 8006d8a:	2905      	cmp	r1, #5
 8006d8c:	d10a      	bne.n	8006da4 <GATT_Notification_CB+0x24>
		rcv_BLE_Data[0] = *attr_value;
 8006d8e:	4b07      	ldr	r3, [pc, #28]	; (8006dac <GATT_Notification_CB+0x2c>)
 8006d90:	7811      	ldrb	r1, [r2, #0]
 8006d92:	7019      	strb	r1, [r3, #0]
		rcv_BLE_Data[1] = *(attr_value + 1);
 8006d94:	7851      	ldrb	r1, [r2, #1]
 8006d96:	7059      	strb	r1, [r3, #1]
		rcv_BLE_Data[2] = *(attr_value + 2);
 8006d98:	7891      	ldrb	r1, [r2, #2]
 8006d9a:	7099      	strb	r1, [r3, #2]
		rcv_BLE_Data[3] = *(attr_value + 3);
 8006d9c:	78d1      	ldrb	r1, [r2, #3]
 8006d9e:	70d9      	strb	r1, [r3, #3]
		rcv_BLE_Data[4] = *(attr_value + 4);
 8006da0:	7912      	ldrb	r2, [r2, #4]
 8006da2:	711a      	strb	r2, [r3, #4]
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	200014e4 	.word	0x200014e4
 8006dac:	200000a0 	.word	0x200000a0

08006db0 <user_notify>:
{
  hci_uart_pckt *hci_pckt = pData;  
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 8006db0:	7802      	ldrb	r2, [r0, #0]
 8006db2:	2a04      	cmp	r2, #4
{
 8006db4:	4603      	mov	r3, r0
  if(hci_pckt->type != HCI_EVENT_PKT)
 8006db6:	d167      	bne.n	8006e88 <user_notify+0xd8>
    return;
  
  switch(event_pckt->evt){
 8006db8:	7842      	ldrb	r2, [r0, #1]
 8006dba:	2a3e      	cmp	r2, #62	; 0x3e
 8006dbc:	d005      	beq.n	8006dca <user_notify+0x1a>
 8006dbe:	2aff      	cmp	r2, #255	; 0xff
 8006dc0:	d00b      	beq.n	8006dda <user_notify+0x2a>
 8006dc2:	2a05      	cmp	r2, #5
 8006dc4:	d160      	bne.n	8006e88 <user_notify+0xd8>

  /* Disconnection */
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8006dc6:	f7ff bfb5 	b.w	8006d34 <GAP_DisconnectionComplete_CB>
  /* Connection Complete */
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
      
      switch(evt->subevent){
 8006dca:	78c2      	ldrb	r2, [r0, #3]
 8006dcc:	2a01      	cmp	r2, #1
 8006dce:	d15b      	bne.n	8006e88 <user_notify+0xd8>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8006dd0:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 8006dd4:	3009      	adds	r0, #9
 8006dd6:	f7ff bf89 	b.w	8006cec <GAP_ConnectionComplete_CB>
    
  /* 4 rozne typy eventow EVT_VENDOR: */
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
      switch(blue_evt->ecode){
 8006dda:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8006dde:	f640 410f 	movw	r1, #3087	; 0xc0f
 8006de2:	428a      	cmp	r2, r1
 8006de4:	d01a      	beq.n	8006e1c <user_notify+0x6c>
 8006de6:	f5b2 6f41 	cmp.w	r2, #3088	; 0xc10
 8006dea:	d204      	bcs.n	8006df6 <user_notify+0x46>
 8006dec:	f640 4101 	movw	r1, #3073	; 0xc01
 8006df0:	428a      	cmp	r2, r1
 8006df2:	d006      	beq.n	8006e02 <user_notify+0x52>
 8006df4:	4770      	bx	lr
 8006df6:	d034      	beq.n	8006e62 <user_notify+0xb2>
 8006df8:	f640 4112 	movw	r1, #3090	; 0xc12
 8006dfc:	428a      	cmp	r2, r1
 8006dfe:	d015      	beq.n	8006e2c <user_notify+0x7c>
 8006e00:	4770      	bx	lr
        
      /* Attribute modified (zmieniaja sie handle TX i RX) */
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8006e02:	4a22      	ldr	r2, [pc, #136]	; (8006e8c <user_notify+0xdc>)
 8006e04:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8006e08:	7812      	ldrb	r2, [r2, #0]
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }
          else {
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8006e0a:	7a59      	ldrb	r1, [r3, #9]
          if (bnrg_expansion_board == IDB05A1) {
 8006e0c:	2a01      	cmp	r2, #1
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8006e0e:	bf0c      	ite	eq
 8006e10:	f103 020c 	addeq.w	r2, r3, #12
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8006e14:	f103 020a 	addne.w	r2, r3, #10
 8006e18:	f7ff bf4e 	b.w	8006cb8 <Attribute_Modified_CB>

      /* GATT notification = odebrane dane */
      case EVT_BLUE_GATT_NOTIFICATION: /* Odebrane dane */
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8006e1c:	79c1      	ldrb	r1, [r0, #7]
 8006e1e:	3902      	subs	r1, #2
 8006e20:	f100 020a 	add.w	r2, r0, #10
 8006e24:	b2c9      	uxtb	r1, r1
 8006e26:	8900      	ldrh	r0, [r0, #8]
 8006e28:	f7ff bfaa 	b.w	8006d80 <GATT_Notification_CB>
        }
        break;

      /* Odczytwanie charakterystyk slave'a czyli TX i RX handles */
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8006e2c:	4a18      	ldr	r2, [pc, #96]	; (8006e90 <user_notify+0xe0>)
 8006e2e:	7812      	ldrb	r2, [r2, #0]
 8006e30:	2a00      	cmp	r2, #0
 8006e32:	d129      	bne.n	8006e88 <user_notify+0xd8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");
          
          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8006e34:	4a17      	ldr	r2, [pc, #92]	; (8006e94 <user_notify+0xe4>)
 8006e36:	7812      	ldrb	r2, [r2, #0]
 8006e38:	b142      	cbz	r2, 8006e4c <user_notify+0x9c>
 8006e3a:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <user_notify+0xe8>)
 8006e3c:	7812      	ldrb	r2, [r2, #0]
 8006e3e:	b92a      	cbnz	r2, 8006e4c <user_notify+0x9c>
          {
            tx_handle = resp->attr_handle;
 8006e40:	4b16      	ldr	r3, [pc, #88]	; (8006e9c <user_notify+0xec>)
 8006e42:	8901      	ldrh	r1, [r0, #8]
            printf("TX Char Handle %04X\n", tx_handle);
 8006e44:	4816      	ldr	r0, [pc, #88]	; (8006ea0 <user_notify+0xf0>)
            tx_handle = resp->attr_handle;
 8006e46:	8019      	strh	r1, [r3, #0]
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
 8006e48:	f000 bd8a 	b.w	8007960 <iprintf>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8006e4c:	4a15      	ldr	r2, [pc, #84]	; (8006ea4 <user_notify+0xf4>)
 8006e4e:	7812      	ldrb	r2, [r2, #0]
 8006e50:	b1d2      	cbz	r2, 8006e88 <user_notify+0xd8>
 8006e52:	4a15      	ldr	r2, [pc, #84]	; (8006ea8 <user_notify+0xf8>)
 8006e54:	7812      	ldrb	r2, [r2, #0]
 8006e56:	b9ba      	cbnz	r2, 8006e88 <user_notify+0xd8>
            rx_handle = resp->attr_handle;
 8006e58:	8919      	ldrh	r1, [r3, #8]
 8006e5a:	4b14      	ldr	r3, [pc, #80]	; (8006eac <user_notify+0xfc>)
            printf("RX Char Handle %04X\n", rx_handle);
 8006e5c:	4814      	ldr	r0, [pc, #80]	; (8006eb0 <user_notify+0x100>)
            rx_handle = resp->attr_handle;
 8006e5e:	8019      	strh	r1, [r3, #0]
 8006e60:	e7f2      	b.n	8006e48 <user_notify+0x98>
        }
        break;
        
      /* Potrzebne dla mastera w UserProcess */
      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8006e62:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <user_notify+0xe0>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	b97b      	cbnz	r3, 8006e88 <user_notify+0xd8>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8006e68:	4b0a      	ldr	r3, [pc, #40]	; (8006e94 <user_notify+0xe4>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	b12b      	cbz	r3, 8006e7a <user_notify+0xca>
 8006e6e:	4b0a      	ldr	r3, [pc, #40]	; (8006e98 <user_notify+0xe8>)
 8006e70:	781a      	ldrb	r2, [r3, #0]
 8006e72:	b912      	cbnz	r2, 8006e7a <user_notify+0xca>
          {
            end_read_tx_char_handle = TRUE;
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
 8006e74:	2201      	movs	r2, #1
 8006e76:	701a      	strb	r2, [r3, #0]
 8006e78:	e006      	b.n	8006e88 <user_notify+0xd8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8006e7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ea4 <user_notify+0xf4>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	b11b      	cbz	r3, 8006e88 <user_notify+0xd8>
 8006e80:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <user_notify+0xf8>)
 8006e82:	781a      	ldrb	r2, [r3, #0]
 8006e84:	2a00      	cmp	r2, #0
 8006e86:	d0f5      	beq.n	8006e74 <user_notify+0xc4>
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	20001155 	.word	0x20001155
 8006e90:	20001154 	.word	0x20001154
 8006e94:	200014b6 	.word	0x200014b6
 8006e98:	200014b3 	.word	0x200014b3
 8006e9c:	200014e4 	.word	0x200014e4
 8006ea0:	0800879c 	.word	0x0800879c
 8006ea4:	200014b5 	.word	0x200014b5
 8006ea8:	200014b2 	.word	0x200014b2
 8006eac:	200014e6 	.word	0x200014e6
 8006eb0:	080087b1 	.word	0x080087b1

08006eb4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <HAL_MspInit+0x3c>)
{
 8006eb6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006eb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006eba:	f042 0201 	orr.w	r2, r2, #1
 8006ebe:	661a      	str	r2, [r3, #96]	; 0x60
 8006ec0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006ec2:	f002 0201 	and.w	r2, r2, #1
 8006ec6:	9200      	str	r2, [sp, #0]
 8006ec8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006eca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ecc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006ed0:	659a      	str	r2, [r3, #88]	; 0x58
 8006ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ed8:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006eda:	2200      	movs	r2, #0
 8006edc:	210f      	movs	r1, #15
 8006ede:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ee2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006ee4:	f7fa ff00 	bl	8001ce8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006ee8:	b003      	add	sp, #12
 8006eea:	f85d fb04 	ldr.w	pc, [sp], #4
 8006eee:	bf00      	nop
 8006ef0:	40021000 	.word	0x40021000

08006ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006ef4:	b510      	push	{r4, lr}
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006efa:	2214      	movs	r2, #20
 8006efc:	2100      	movs	r1, #0
 8006efe:	a803      	add	r0, sp, #12
 8006f00:	f000 fc79 	bl	80077f6 <memset>
  if(huart->Instance==USART3)
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	4b12      	ldr	r3, [pc, #72]	; (8006f50 <HAL_UART_MspInit+0x5c>)
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d11f      	bne.n	8006f4c <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006f0c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f10:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 8006f12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f14:	480f      	ldr	r0, [pc, #60]	; (8006f54 <HAL_UART_MspInit+0x60>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8006f16:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006f1a:	659a      	str	r2, [r3, #88]	; 0x58
 8006f1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f1e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006f22:	9201      	str	r2, [sp, #4]
 8006f24:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006f28:	f042 0204 	orr.w	r2, r2, #4
 8006f2c:	64da      	str	r2, [r3, #76]	; 0x4c
 8006f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f30:	f003 0304 	and.w	r3, r3, #4
 8006f34:	9302      	str	r3, [sp, #8]
 8006f36:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006f38:	2330      	movs	r3, #48	; 0x30
 8006f3a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f40:	2303      	movs	r3, #3
 8006f42:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006f44:	2307      	movs	r3, #7
 8006f46:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f48:	f7fa ff34 	bl	8001db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006f4c:	b008      	add	sp, #32
 8006f4e:	bd10      	pop	{r4, pc}
 8006f50:	40004800 	.word	0x40004800
 8006f54:	48000800 	.word	0x48000800

08006f58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006f58:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8006f5a:	4601      	mov	r1, r0
{
 8006f5c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8006f5e:	2200      	movs	r2, #0
 8006f60:	201d      	movs	r0, #29
 8006f62:	f7fa fec1 	bl	8001ce8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8006f66:	201d      	movs	r0, #29
 8006f68:	f7fa fef2 	bl	8001d50 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8006f6c:	4b14      	ldr	r3, [pc, #80]	; (8006fc0 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8006f6e:	4c15      	ldr	r4, [pc, #84]	; (8006fc4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 8006f70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006f72:	f042 0202 	orr.w	r2, r2, #2
 8006f76:	659a      	str	r2, [r3, #88]	; 0x58
 8006f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7a:	f003 0302 	and.w	r3, r3, #2
 8006f7e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006f80:	a901      	add	r1, sp, #4
 8006f82:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 8006f84:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006f86:	f7fb fc9b 	bl	80028c0 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006f8a:	f7fb fc75 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
  htim3.Instance = TIM3;
 8006f8e:	4b0e      	ldr	r3, [pc, #56]	; (8006fc8 <HAL_InitTick+0x70>)
 8006f90:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8006f92:	f240 33e7 	movw	r3, #999	; 0x3e7
 8006f96:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8006f98:	4b0c      	ldr	r3, [pc, #48]	; (8006fcc <HAL_InitTick+0x74>)
 8006f9a:	fbb0 f0f3 	udiv	r0, r0, r3
 8006f9e:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 8006fa0:	2300      	movs	r3, #0
  htim3.Init.Prescaler = uwPrescalerValue;
 8006fa2:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8006fa4:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = 0;
 8006fa6:	6123      	str	r3, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fa8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8006faa:	f7fc fabf 	bl	800352c <HAL_TIM_Base_Init>
 8006fae:	b920      	cbnz	r0, 8006fba <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f7fc f98b 	bl	80032cc <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8006fb6:	b008      	add	sp, #32
 8006fb8:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8006fba:	2001      	movs	r0, #1
 8006fbc:	e7fb      	b.n	8006fb6 <HAL_InitTick+0x5e>
 8006fbe:	bf00      	nop
 8006fc0:	40021000 	.word	0x40021000
 8006fc4:	200014f0 	.word	0x200014f0
 8006fc8:	40000400 	.word	0x40000400
 8006fcc:	000f4240 	.word	0x000f4240

08006fd0 <NMI_Handler>:
 8006fd0:	4770      	bx	lr

08006fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006fd2:	e7fe      	b.n	8006fd2 <HardFault_Handler>

08006fd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006fd4:	e7fe      	b.n	8006fd4 <MemManage_Handler>

08006fd6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006fd6:	e7fe      	b.n	8006fd6 <BusFault_Handler>

08006fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006fd8:	e7fe      	b.n	8006fd8 <UsageFault_Handler>

08006fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006fda:	4770      	bx	lr

08006fdc <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8006fdc:	4801      	ldr	r0, [pc, #4]	; (8006fe4 <EXTI0_IRQHandler+0x8>)
 8006fde:	f7fa bed1 	b.w	8001d84 <HAL_EXTI_IRQHandler>
 8006fe2:	bf00      	nop
 8006fe4:	200014dc 	.word	0x200014dc

08006fe8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006fe8:	4801      	ldr	r0, [pc, #4]	; (8006ff0 <TIM3_IRQHandler+0x8>)
 8006fea:	f7fc b989 	b.w	8003300 <HAL_TIM_IRQHandler>
 8006fee:	bf00      	nop
 8006ff0:	200014f0 	.word	0x200014f0

08006ff4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8006ff4:	4801      	ldr	r0, [pc, #4]	; (8006ffc <EXTI15_10_IRQHandler+0x8>)
 8006ff6:	f7fa bec5 	b.w	8001d84 <HAL_EXTI_IRQHandler>
 8006ffa:	bf00      	nop
 8006ffc:	20000014 	.word	0x20000014

08007000 <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 8007000:	4b10      	ldr	r3, [pc, #64]	; (8007044 <BSP_LED_Init+0x44>)
{
 8007002:	b510      	push	{r4, lr}
  LED2_GPIO_CLK_ENABLE();    
 8007004:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007006:	f042 0201 	orr.w	r2, r2, #1
 800700a:	64da      	str	r2, [r3, #76]	; 0x4c
 800700c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800700e:	b086      	sub	sp, #24
  LED2_GPIO_CLK_ENABLE();    
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin   = LED_PIN [Led];
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8007018:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 800701a:	2420      	movs	r4, #32
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800701c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800701e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8007020:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8007022:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8007024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8007028:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 800702a:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 800702c:	f7fa fec2 	bl	8001db4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8007030:	2200      	movs	r2, #0
 8007032:	4621      	mov	r1, r4
 8007034:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007038:	f7fb f828 	bl	800208c <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 800703c:	2000      	movs	r0, #0
 800703e:	b006      	add	sp, #24
 8007040:	bd10      	pop	{r4, pc}
 8007042:	bf00      	nop
 8007044:	40021000 	.word	0x40021000

08007048 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8007048:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 800704a:	2201      	movs	r2, #1
 800704c:	2120      	movs	r1, #32
 800704e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007052:	f7fb f81b 	bl	800208c <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8007056:	2000      	movs	r0, #0
 8007058:	bd08      	pop	{r3, pc}

0800705a <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 800705a:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800705c:	2200      	movs	r2, #0
 800705e:	2120      	movs	r1, #32
 8007060:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007064:	f7fb f812 	bl	800208c <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8007068:	2000      	movs	r0, #0
 800706a:	bd08      	pop	{r3, pc}

0800706c <BSP_PB_Init>:
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 800706c:	4b1f      	ldr	r3, [pc, #124]	; (80070ec <BSP_PB_Init+0x80>)
{
 800706e:	b530      	push	{r4, r5, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 8007070:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007072:	f042 0204 	orr.w	r2, r2, #4
 8007076:	64da      	str	r2, [r3, #76]	; 0x4c
 8007078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800707a:	b087      	sub	sp, #28
  USER_BUTTON_GPIO_CLK_ENABLE();
 800707c:	f003 0304 	and.w	r3, r3, #4
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8007084:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007088:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800708a:	2302      	movs	r3, #2
{
 800708c:	4605      	mov	r5, r0
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800708e:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8007090:	9304      	str	r3, [sp, #16]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8007092:	460c      	mov	r4, r1
 8007094:	b931      	cbnz	r1, 80070a4 <BSP_PB_Init+0x38>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8007096:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8007098:	4815      	ldr	r0, [pc, #84]	; (80070f0 <BSP_PB_Init+0x84>)
 800709a:	a901      	add	r1, sp, #4
 800709c:	f7fa fe8a 	bl	8001db4 <HAL_GPIO_Init>
  int32_t ret = BSP_ERROR_NONE;
 80070a0:	4620      	mov	r0, r4
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
	}
  }
  
  return ret;
 80070a2:	e010      	b.n	80070c6 <BSP_PB_Init+0x5a>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80070a4:	4c13      	ldr	r4, [pc, #76]	; (80070f4 <BSP_PB_Init+0x88>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80070a6:	4b14      	ldr	r3, [pc, #80]	; (80070f8 <BSP_PB_Init+0x8c>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80070a8:	4811      	ldr	r0, [pc, #68]	; (80070f0 <BSP_PB_Init+0x84>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80070aa:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80070ac:	a901      	add	r1, sp, #4
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80070ae:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80070b2:	f7fa fe7f 	bl	8001db4 <HAL_GPIO_Init>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 80070b6:	4911      	ldr	r1, [pc, #68]	; (80070fc <BSP_PB_Init+0x90>)
 80070b8:	4620      	mov	r0, r4
 80070ba:	f7fa fe5d 	bl	8001d78 <HAL_EXTI_GetHandle>
 80070be:	4601      	mov	r1, r0
 80070c0:	b118      	cbz	r0, 80070ca <BSP_PB_Init+0x5e>
      ret = BSP_ERROR_PERIPH_FAILURE;
 80070c2:	f06f 0003 	mvn.w	r0, #3
}
 80070c6:	b007      	add	sp, #28
 80070c8:	bd30      	pop	{r4, r5, pc}
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80070ca:	4620      	mov	r0, r4
 80070cc:	4a0c      	ldr	r2, [pc, #48]	; (8007100 <BSP_PB_Init+0x94>)
 80070ce:	f7fa fe4d 	bl	8001d6c <HAL_EXTI_RegisterCallback>
 80070d2:	4604      	mov	r4, r0
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d1f4      	bne.n	80070c2 <BSP_PB_Init+0x56>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80070d8:	4602      	mov	r2, r0
 80070da:	210f      	movs	r1, #15
 80070dc:	2028      	movs	r0, #40	; 0x28
 80070de:	f7fa fe03 	bl	8001ce8 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80070e2:	2028      	movs	r0, #40	; 0x28
 80070e4:	f7fa fe34 	bl	8001d50 <HAL_NVIC_EnableIRQ>
 80070e8:	e7da      	b.n	80070a0 <BSP_PB_Init+0x34>
 80070ea:	bf00      	nop
 80070ec:	40021000 	.word	0x40021000
 80070f0:	48000800 	.word	0x48000800
 80070f4:	20000014 	.word	0x20000014
 80070f8:	10110000 	.word	0x10110000
 80070fc:	1600000d 	.word	0x1600000d
 8007100:	0800711d 	.word	0x0800711d

08007104 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8007104:	b508      	push	{r3, lr}
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8007106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800710a:	4803      	ldr	r0, [pc, #12]	; (8007118 <BSP_PB_GetState+0x14>)
 800710c:	f7fa ffb8 	bl	8002080 <HAL_GPIO_ReadPin>
}
 8007110:	fab0 f080 	clz	r0, r0
 8007114:	0940      	lsrs	r0, r0, #5
 8007116:	bd08      	pop	{r3, pc}
 8007118:	48000800 	.word	0x48000800

0800711c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 800711c:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 800711e:	2000      	movs	r0, #0
 8007120:	f7fe ff26 	bl	8005f70 <BSP_PB_Callback>
 8007124:	bd08      	pop	{r3, pc}
	...

08007128 <MX_USART2_UART_Init>:

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;
  huart->Instance = USART2;
  huart->Init.BaudRate = 115200;
 8007128:	4a0a      	ldr	r2, [pc, #40]	; (8007154 <MX_USART2_UART_Init+0x2c>)
 800712a:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
{
 800712e:	b508      	push	{r3, lr}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 8007130:	210c      	movs	r1, #12
  huart->Init.BaudRate = 115200;
 8007132:	e880 1004 	stmia.w	r0, {r2, ip}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8007136:	2200      	movs	r2, #0
 8007138:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800713a:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 800713c:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800713e:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007140:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8007142:	61c2      	str	r2, [r0, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007144:	6202      	str	r2, [r0, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007146:	6242      	str	r2, [r0, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8007148:	f7fc fcc5 	bl	8003ad6 <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 800714c:	3000      	adds	r0, #0
 800714e:	bf18      	it	ne
 8007150:	2001      	movne	r0, #1
 8007152:	bd08      	pop	{r3, pc}
 8007154:	40004400 	.word	0x40004400

08007158 <BSP_COM_Init>:
{
 8007158:	b510      	push	{r4, lr}
  if(COM > COMn)
 800715a:	2801      	cmp	r0, #1
{
 800715c:	b088      	sub	sp, #32
  if(COM > COMn)
 800715e:	d832      	bhi.n	80071c6 <BSP_COM_Init+0x6e>
     hcom_uart[COM].Instance = COM_USART[COM];
 8007160:	491a      	ldr	r1, [pc, #104]	; (80071cc <BSP_COM_Init+0x74>)
 8007162:	4a1b      	ldr	r2, [pc, #108]	; (80071d0 <BSP_COM_Init+0x78>)
 8007164:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8007168:	01c3      	lsls	r3, r0, #7
 800716a:	18d4      	adds	r4, r2, r3
 800716c:	50d1      	str	r1, [r2, r3]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 800716e:	4b19      	ldr	r3, [pc, #100]	; (80071d4 <BSP_COM_Init+0x7c>)
 8007170:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007172:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007176:	659a      	str	r2, [r3, #88]	; 0x58
 8007178:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800717a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800717e:	9201      	str	r2, [sp, #4]
 8007180:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007182:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007184:	f042 0201 	orr.w	r2, r2, #1
 8007188:	64da      	str	r2, [r3, #76]	; 0x4c
 800718a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	9302      	str	r3, [sp, #8]
 8007192:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007194:	230c      	movs	r3, #12
 8007196:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007198:	2302      	movs	r3, #2
 800719a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800719c:	2300      	movs	r3, #0
 800719e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80071a0:	2303      	movs	r3, #3
 80071a2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071a4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80071a6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80071ac:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80071ae:	f7fa fe01 	bl	8001db4 <HAL_GPIO_Init>
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80071b2:	4620      	mov	r0, r4
 80071b4:	f7ff ffb8 	bl	8007128 <MX_USART2_UART_Init>
 80071b8:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 80071ba:	bf0c      	ite	eq
 80071bc:	2000      	moveq	r0, #0
 80071be:	f06f 0003 	mvnne.w	r0, #3
}
 80071c2:	b008      	add	sp, #32
 80071c4:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 80071c6:	f06f 0001 	mvn.w	r0, #1
 80071ca:	e7fa      	b.n	80071c2 <BSP_COM_Init+0x6a>
 80071cc:	20000010 	.word	0x20000010
 80071d0:	20001530 	.word	0x20001530
 80071d4:	40021000 	.word	0x40021000

080071d8 <__io_putchar>:
{ 
 80071d8:	b513      	push	{r0, r1, r4, lr}
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 80071da:	4b08      	ldr	r3, [pc, #32]	; (80071fc <__io_putchar+0x24>)
{ 
 80071dc:	a902      	add	r1, sp, #8
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 80071de:	781c      	ldrb	r4, [r3, #0]
{ 
 80071e0:	f841 0d04 	str.w	r0, [r1, #-4]!
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 80071e4:	4806      	ldr	r0, [pc, #24]	; (8007200 <__io_putchar+0x28>)
 80071e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80071ea:	2201      	movs	r2, #1
 80071ec:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 80071f0:	f7fc fbe9 	bl	80039c6 <HAL_UART_Transmit>
}
 80071f4:	9801      	ldr	r0, [sp, #4]
 80071f6:	b002      	add	sp, #8
 80071f8:	bd10      	pop	{r4, pc}
 80071fa:	bf00      	nop
 80071fc:	200014b7 	.word	0x200014b7
 8007200:	20001530 	.word	0x20001530

08007204 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8007204:	b507      	push	{r0, r1, r2, lr}
  int32_t ret = BSP_ERROR_NONE;
  
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8007206:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800720a:	9300      	str	r3, [sp, #0]
 800720c:	4613      	mov	r3, r2
 800720e:	460a      	mov	r2, r1
 8007210:	4601      	mov	r1, r0
 8007212:	4805      	ldr	r0, [pc, #20]	; (8007228 <BSP_SPI1_SendRecv+0x24>)
 8007214:	f7fb ff32 	bl	800307c <HAL_SPI_TransmitReceive>
 8007218:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 800721a:	bf14      	ite	ne
 800721c:	f06f 0005 	mvnne.w	r0, #5
 8007220:	2000      	moveq	r0, #0
 8007222:	b003      	add	sp, #12
 8007224:	f85d fb04 	ldr.w	pc, [sp], #4
 8007228:	200015b0 	.word	0x200015b0

0800722c <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 800722c:	f7fa bd30 	b.w	8001c90 <HAL_GetTick>

08007230 <MX_SPI1_Init>:

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 8007230:	4a0f      	ldr	r2, [pc, #60]	; (8007270 <MX_SPI1_Init+0x40>)
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8007232:	f44f 61e0 	mov.w	r1, #1792	; 0x700
{
 8007236:	b508      	push	{r3, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8007238:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800723c:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 800723e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi->Init.Mode = SPI_MODE_MASTER;
 8007242:	e880 1004 	stmia.w	r0, {r2, ip}
  hspi->Init.NSS = SPI_NSS_SOFT;
 8007246:	6181      	str	r1, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8007248:	2200      	movs	r2, #0
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800724a:	2118      	movs	r1, #24
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800724c:	6082      	str	r2, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800724e:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8007250:	6142      	str	r2, [r0, #20]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007252:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007254:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 7;
 8007256:	2107      	movs	r1, #7
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8007258:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800725a:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800725c:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800725e:	2208      	movs	r2, #8
  hspi->Init.CRCPolynomial = 7;
 8007260:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007262:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8007264:	f7fb feb9 	bl	8002fda <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8007268:	3000      	adds	r0, #0
 800726a:	bf18      	it	ne
 800726c:	2001      	movne	r0, #1
 800726e:	bd08      	pop	{r3, pc}
 8007270:	40013000 	.word	0x40013000

08007274 <BSP_SPI1_Init>:
{
 8007274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(SPI1InitCounter++ == 0)
 8007278:	4a28      	ldr	r2, [pc, #160]	; (800731c <BSP_SPI1_Init+0xa8>)
  hspi1.Instance  = SPI1;
 800727a:	4c29      	ldr	r4, [pc, #164]	; (8007320 <BSP_SPI1_Init+0xac>)
 800727c:	4b29      	ldr	r3, [pc, #164]	; (8007324 <BSP_SPI1_Init+0xb0>)
 800727e:	6023      	str	r3, [r4, #0]
  if(SPI1InitCounter++ == 0)
 8007280:	6813      	ldr	r3, [r2, #0]
 8007282:	1c59      	adds	r1, r3, #1
{
 8007284:	b088      	sub	sp, #32
  if(SPI1InitCounter++ == 0)
 8007286:	6011      	str	r1, [r2, #0]
 8007288:	b11b      	cbz	r3, 8007292 <BSP_SPI1_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 800728a:	2000      	movs	r0, #0
}
 800728c:	b008      	add	sp, #32
 800728e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) 
 8007292:	4620      	mov	r0, r4
 8007294:	f7fc f816 	bl	80032c4 <HAL_SPI_GetState>
 8007298:	4605      	mov	r5, r0
 800729a:	2800      	cmp	r0, #0
 800729c:	d1f5      	bne.n	800728a <BSP_SPI1_Init+0x16>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800729e:	4b22      	ldr	r3, [pc, #136]	; (8007328 <BSP_SPI1_Init+0xb4>)
 80072a0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072a6:	661a      	str	r2, [r3, #96]	; 0x60
 80072a8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80072aa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80072ae:	9200      	str	r2, [sp, #0]
 80072b0:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072b4:	f042 0201 	orr.w	r2, r2, #1
 80072b8:	64da      	str	r2, [r3, #76]	; 0x4c
 80072ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072bc:	f002 0201 	and.w	r2, r2, #1
 80072c0:	9201      	str	r2, [sp, #4]
 80072c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072c4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072c6:	f042 0202 	orr.w	r2, r2, #2
 80072ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80072cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ce:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	9302      	str	r3, [sp, #8]
 80072d6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072d8:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80072dc:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072de:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80072e0:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072e2:	a903      	add	r1, sp, #12
 80072e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80072e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072ea:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80072ee:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80072f0:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80072f2:	f7fa fd5f 	bl	8001db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80072f6:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072f8:	480c      	ldr	r0, [pc, #48]	; (800732c <BSP_SPI1_Init+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80072fa:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072fc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072fe:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007302:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007304:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007306:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007308:	f7fa fd54 	bl	8001db4 <HAL_GPIO_Init>
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800730c:	4620      	mov	r0, r4
 800730e:	f7ff ff8f 	bl	8007230 <MX_SPI1_Init>
 8007312:	2800      	cmp	r0, #0
 8007314:	d0b9      	beq.n	800728a <BSP_SPI1_Init+0x16>
				ret = BSP_ERROR_BUS_FAILURE;
 8007316:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800731a:	e7b7      	b.n	800728c <BSP_SPI1_Init+0x18>
 800731c:	200014b8 	.word	0x200014b8
 8007320:	200015b0 	.word	0x200015b0
 8007324:	40013000 	.word	0x40013000
 8007328:	40021000 	.word	0x40021000
 800732c:	48000400 	.word	0x48000400

08007330 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8007330:	2001      	movs	r0, #1
 8007332:	4770      	bx	lr

08007334 <_kill>:

int _kill(int pid, int sig)
{
 8007334:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007336:	f000 f89b 	bl	8007470 <__errno>
 800733a:	2316      	movs	r3, #22
 800733c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800733e:	f04f 30ff 	mov.w	r0, #4294967295
 8007342:	bd08      	pop	{r3, pc}

08007344 <_exit>:

void _exit (int status)
{
 8007344:	b508      	push	{r3, lr}
	errno = EINVAL;
 8007346:	f000 f893 	bl	8007470 <__errno>
 800734a:	2316      	movs	r3, #22
 800734c:	6003      	str	r3, [r0, #0]
 800734e:	e7fe      	b.n	800734e <_exit+0xa>

08007350 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007350:	b570      	push	{r4, r5, r6, lr}
 8007352:	460e      	mov	r6, r1
 8007354:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007356:	460c      	mov	r4, r1
 8007358:	1ba3      	subs	r3, r4, r6
 800735a:	429d      	cmp	r5, r3
 800735c:	dc01      	bgt.n	8007362 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800735e:	4628      	mov	r0, r5
 8007360:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8007362:	f3af 8000 	nop.w
 8007366:	f804 0b01 	strb.w	r0, [r4], #1
 800736a:	e7f5      	b.n	8007358 <_read+0x8>

0800736c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800736c:	b570      	push	{r4, r5, r6, lr}
 800736e:	460e      	mov	r6, r1
 8007370:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007372:	460c      	mov	r4, r1
 8007374:	1ba3      	subs	r3, r4, r6
 8007376:	429d      	cmp	r5, r3
 8007378:	dc01      	bgt.n	800737e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800737a:	4628      	mov	r0, r5
 800737c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800737e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007382:	f7ff ff29 	bl	80071d8 <__io_putchar>
 8007386:	e7f5      	b.n	8007374 <_write+0x8>

08007388 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8007388:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <_sbrk+0x2c>)
 800738c:	6819      	ldr	r1, [r3, #0]
{
 800738e:	4602      	mov	r2, r0
	if (heap_end == 0)
 8007390:	b909      	cbnz	r1, 8007396 <_sbrk+0xe>
		heap_end = &end;
 8007392:	4909      	ldr	r1, [pc, #36]	; (80073b8 <_sbrk+0x30>)
 8007394:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8007396:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8007398:	4669      	mov	r1, sp
 800739a:	4402      	add	r2, r0
 800739c:	428a      	cmp	r2, r1
 800739e:	d906      	bls.n	80073ae <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80073a0:	f000 f866 	bl	8007470 <__errno>
 80073a4:	230c      	movs	r3, #12
 80073a6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80073a8:	f04f 30ff 	mov.w	r0, #4294967295
 80073ac:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80073ae:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80073b0:	bd08      	pop	{r3, pc}
 80073b2:	bf00      	nop
 80073b4:	200014bc 	.word	0x200014bc
 80073b8:	20001618 	.word	0x20001618

080073bc <_close>:

int _close(int file)
{
	return -1;
}
 80073bc:	f04f 30ff 	mov.w	r0, #4294967295
 80073c0:	4770      	bx	lr

080073c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80073c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073c6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80073c8:	2000      	movs	r0, #0
 80073ca:	4770      	bx	lr

080073cc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80073cc:	2001      	movs	r0, #1
 80073ce:	4770      	bx	lr

080073d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80073d0:	2000      	movs	r0, #0
 80073d2:	4770      	bx	lr

080073d4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80073d4:	490f      	ldr	r1, [pc, #60]	; (8007414 <SystemInit+0x40>)
 80073d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80073da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80073de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80073e2:	4b0d      	ldr	r3, [pc, #52]	; (8007418 <SystemInit+0x44>)
 80073e4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80073e6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80073e8:	f042 0201 	orr.w	r2, r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80073ee:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80073f6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80073fa:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80073fc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007400:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007408:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800740a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800740c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007410:	608b      	str	r3, [r1, #8]
 8007412:	4770      	bx	lr
 8007414:	e000ed00 	.word	0xe000ed00
 8007418:	40021000 	.word	0x40021000

0800741c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800741c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007454 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007420:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007422:	e003      	b.n	800742c <LoopCopyDataInit>

08007424 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007424:	4b0c      	ldr	r3, [pc, #48]	; (8007458 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007426:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007428:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800742a:	3104      	adds	r1, #4

0800742c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800742c:	480b      	ldr	r0, [pc, #44]	; (800745c <LoopForever+0xa>)
	ldr	r3, =_edata
 800742e:	4b0c      	ldr	r3, [pc, #48]	; (8007460 <LoopForever+0xe>)
	adds	r2, r0, r1
 8007430:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007432:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007434:	d3f6      	bcc.n	8007424 <CopyDataInit>
	ldr	r2, =_sbss
 8007436:	4a0b      	ldr	r2, [pc, #44]	; (8007464 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007438:	e002      	b.n	8007440 <LoopFillZerobss>

0800743a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800743a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800743c:	f842 3b04 	str.w	r3, [r2], #4

08007440 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007440:	4b09      	ldr	r3, [pc, #36]	; (8007468 <LoopForever+0x16>)
	cmp	r2, r3
 8007442:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007444:	d3f9      	bcc.n	800743a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007446:	f7ff ffc5 	bl	80073d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800744a:	f000 f9a5 	bl	8007798 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800744e:	f7fe ffc7 	bl	80063e0 <main>

08007452 <LoopForever>:

LoopForever:
    b LoopForever
 8007452:	e7fe      	b.n	8007452 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007454:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007458:	08008a44 	.word	0x08008a44
	ldr	r0, =_sdata
 800745c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007460:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8007464:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8007468:	20001618 	.word	0x20001618

0800746c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800746c:	e7fe      	b.n	800746c <ADC1_2_IRQHandler>
	...

08007470 <__errno>:
 8007470:	4b01      	ldr	r3, [pc, #4]	; (8007478 <__errno+0x8>)
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	20000020 	.word	0x20000020

0800747c <__sflush_r>:
 800747c:	898a      	ldrh	r2, [r1, #12]
 800747e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007482:	4605      	mov	r5, r0
 8007484:	0710      	lsls	r0, r2, #28
 8007486:	460c      	mov	r4, r1
 8007488:	d45a      	bmi.n	8007540 <__sflush_r+0xc4>
 800748a:	684b      	ldr	r3, [r1, #4]
 800748c:	2b00      	cmp	r3, #0
 800748e:	dc05      	bgt.n	800749c <__sflush_r+0x20>
 8007490:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007492:	2b00      	cmp	r3, #0
 8007494:	dc02      	bgt.n	800749c <__sflush_r+0x20>
 8007496:	2000      	movs	r0, #0
 8007498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800749c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800749e:	2e00      	cmp	r6, #0
 80074a0:	d0f9      	beq.n	8007496 <__sflush_r+0x1a>
 80074a2:	2300      	movs	r3, #0
 80074a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074a8:	682f      	ldr	r7, [r5, #0]
 80074aa:	602b      	str	r3, [r5, #0]
 80074ac:	d033      	beq.n	8007516 <__sflush_r+0x9a>
 80074ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074b0:	89a3      	ldrh	r3, [r4, #12]
 80074b2:	075a      	lsls	r2, r3, #29
 80074b4:	d505      	bpl.n	80074c2 <__sflush_r+0x46>
 80074b6:	6863      	ldr	r3, [r4, #4]
 80074b8:	1ac0      	subs	r0, r0, r3
 80074ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074bc:	b10b      	cbz	r3, 80074c2 <__sflush_r+0x46>
 80074be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074c0:	1ac0      	subs	r0, r0, r3
 80074c2:	2300      	movs	r3, #0
 80074c4:	4602      	mov	r2, r0
 80074c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074c8:	6a21      	ldr	r1, [r4, #32]
 80074ca:	4628      	mov	r0, r5
 80074cc:	47b0      	blx	r6
 80074ce:	1c43      	adds	r3, r0, #1
 80074d0:	89a3      	ldrh	r3, [r4, #12]
 80074d2:	d106      	bne.n	80074e2 <__sflush_r+0x66>
 80074d4:	6829      	ldr	r1, [r5, #0]
 80074d6:	291d      	cmp	r1, #29
 80074d8:	d84b      	bhi.n	8007572 <__sflush_r+0xf6>
 80074da:	4a2b      	ldr	r2, [pc, #172]	; (8007588 <__sflush_r+0x10c>)
 80074dc:	40ca      	lsrs	r2, r1
 80074de:	07d6      	lsls	r6, r2, #31
 80074e0:	d547      	bpl.n	8007572 <__sflush_r+0xf6>
 80074e2:	2200      	movs	r2, #0
 80074e4:	6062      	str	r2, [r4, #4]
 80074e6:	04d9      	lsls	r1, r3, #19
 80074e8:	6922      	ldr	r2, [r4, #16]
 80074ea:	6022      	str	r2, [r4, #0]
 80074ec:	d504      	bpl.n	80074f8 <__sflush_r+0x7c>
 80074ee:	1c42      	adds	r2, r0, #1
 80074f0:	d101      	bne.n	80074f6 <__sflush_r+0x7a>
 80074f2:	682b      	ldr	r3, [r5, #0]
 80074f4:	b903      	cbnz	r3, 80074f8 <__sflush_r+0x7c>
 80074f6:	6560      	str	r0, [r4, #84]	; 0x54
 80074f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074fa:	602f      	str	r7, [r5, #0]
 80074fc:	2900      	cmp	r1, #0
 80074fe:	d0ca      	beq.n	8007496 <__sflush_r+0x1a>
 8007500:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007504:	4299      	cmp	r1, r3
 8007506:	d002      	beq.n	800750e <__sflush_r+0x92>
 8007508:	4628      	mov	r0, r5
 800750a:	f000 f97d 	bl	8007808 <_free_r>
 800750e:	2000      	movs	r0, #0
 8007510:	6360      	str	r0, [r4, #52]	; 0x34
 8007512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007516:	6a21      	ldr	r1, [r4, #32]
 8007518:	2301      	movs	r3, #1
 800751a:	4628      	mov	r0, r5
 800751c:	47b0      	blx	r6
 800751e:	1c41      	adds	r1, r0, #1
 8007520:	d1c6      	bne.n	80074b0 <__sflush_r+0x34>
 8007522:	682b      	ldr	r3, [r5, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d0c3      	beq.n	80074b0 <__sflush_r+0x34>
 8007528:	2b1d      	cmp	r3, #29
 800752a:	d001      	beq.n	8007530 <__sflush_r+0xb4>
 800752c:	2b16      	cmp	r3, #22
 800752e:	d101      	bne.n	8007534 <__sflush_r+0xb8>
 8007530:	602f      	str	r7, [r5, #0]
 8007532:	e7b0      	b.n	8007496 <__sflush_r+0x1a>
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800753a:	81a3      	strh	r3, [r4, #12]
 800753c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007540:	690f      	ldr	r7, [r1, #16]
 8007542:	2f00      	cmp	r7, #0
 8007544:	d0a7      	beq.n	8007496 <__sflush_r+0x1a>
 8007546:	0793      	lsls	r3, r2, #30
 8007548:	680e      	ldr	r6, [r1, #0]
 800754a:	bf08      	it	eq
 800754c:	694b      	ldreq	r3, [r1, #20]
 800754e:	600f      	str	r7, [r1, #0]
 8007550:	bf18      	it	ne
 8007552:	2300      	movne	r3, #0
 8007554:	eba6 0807 	sub.w	r8, r6, r7
 8007558:	608b      	str	r3, [r1, #8]
 800755a:	f1b8 0f00 	cmp.w	r8, #0
 800755e:	dd9a      	ble.n	8007496 <__sflush_r+0x1a>
 8007560:	4643      	mov	r3, r8
 8007562:	463a      	mov	r2, r7
 8007564:	6a21      	ldr	r1, [r4, #32]
 8007566:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007568:	4628      	mov	r0, r5
 800756a:	47b0      	blx	r6
 800756c:	2800      	cmp	r0, #0
 800756e:	dc07      	bgt.n	8007580 <__sflush_r+0x104>
 8007570:	89a3      	ldrh	r3, [r4, #12]
 8007572:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007576:	81a3      	strh	r3, [r4, #12]
 8007578:	f04f 30ff 	mov.w	r0, #4294967295
 800757c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007580:	4407      	add	r7, r0
 8007582:	eba8 0800 	sub.w	r8, r8, r0
 8007586:	e7e8      	b.n	800755a <__sflush_r+0xde>
 8007588:	20400001 	.word	0x20400001

0800758c <_fflush_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	690b      	ldr	r3, [r1, #16]
 8007590:	4605      	mov	r5, r0
 8007592:	460c      	mov	r4, r1
 8007594:	b1db      	cbz	r3, 80075ce <_fflush_r+0x42>
 8007596:	b118      	cbz	r0, 80075a0 <_fflush_r+0x14>
 8007598:	6983      	ldr	r3, [r0, #24]
 800759a:	b90b      	cbnz	r3, 80075a0 <_fflush_r+0x14>
 800759c:	f000 f872 	bl	8007684 <__sinit>
 80075a0:	4b0c      	ldr	r3, [pc, #48]	; (80075d4 <_fflush_r+0x48>)
 80075a2:	429c      	cmp	r4, r3
 80075a4:	d109      	bne.n	80075ba <_fflush_r+0x2e>
 80075a6:	686c      	ldr	r4, [r5, #4]
 80075a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075ac:	b17b      	cbz	r3, 80075ce <_fflush_r+0x42>
 80075ae:	4621      	mov	r1, r4
 80075b0:	4628      	mov	r0, r5
 80075b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075b6:	f7ff bf61 	b.w	800747c <__sflush_r>
 80075ba:	4b07      	ldr	r3, [pc, #28]	; (80075d8 <_fflush_r+0x4c>)
 80075bc:	429c      	cmp	r4, r3
 80075be:	d101      	bne.n	80075c4 <_fflush_r+0x38>
 80075c0:	68ac      	ldr	r4, [r5, #8]
 80075c2:	e7f1      	b.n	80075a8 <_fflush_r+0x1c>
 80075c4:	4b05      	ldr	r3, [pc, #20]	; (80075dc <_fflush_r+0x50>)
 80075c6:	429c      	cmp	r4, r3
 80075c8:	bf08      	it	eq
 80075ca:	68ec      	ldreq	r4, [r5, #12]
 80075cc:	e7ec      	b.n	80075a8 <_fflush_r+0x1c>
 80075ce:	2000      	movs	r0, #0
 80075d0:	bd38      	pop	{r3, r4, r5, pc}
 80075d2:	bf00      	nop
 80075d4:	08008830 	.word	0x08008830
 80075d8:	08008850 	.word	0x08008850
 80075dc:	08008810 	.word	0x08008810

080075e0 <fflush>:
 80075e0:	4601      	mov	r1, r0
 80075e2:	b920      	cbnz	r0, 80075ee <fflush+0xe>
 80075e4:	4b04      	ldr	r3, [pc, #16]	; (80075f8 <fflush+0x18>)
 80075e6:	4905      	ldr	r1, [pc, #20]	; (80075fc <fflush+0x1c>)
 80075e8:	6818      	ldr	r0, [r3, #0]
 80075ea:	f000 b8b7 	b.w	800775c <_fwalk_reent>
 80075ee:	4b04      	ldr	r3, [pc, #16]	; (8007600 <fflush+0x20>)
 80075f0:	6818      	ldr	r0, [r3, #0]
 80075f2:	f7ff bfcb 	b.w	800758c <_fflush_r>
 80075f6:	bf00      	nop
 80075f8:	08008870 	.word	0x08008870
 80075fc:	0800758d 	.word	0x0800758d
 8007600:	20000020 	.word	0x20000020

08007604 <_cleanup_r>:
 8007604:	4901      	ldr	r1, [pc, #4]	; (800760c <_cleanup_r+0x8>)
 8007606:	f000 b8a9 	b.w	800775c <_fwalk_reent>
 800760a:	bf00      	nop
 800760c:	0800758d 	.word	0x0800758d

08007610 <std.isra.0>:
 8007610:	2300      	movs	r3, #0
 8007612:	b510      	push	{r4, lr}
 8007614:	4604      	mov	r4, r0
 8007616:	6003      	str	r3, [r0, #0]
 8007618:	6043      	str	r3, [r0, #4]
 800761a:	6083      	str	r3, [r0, #8]
 800761c:	8181      	strh	r1, [r0, #12]
 800761e:	6643      	str	r3, [r0, #100]	; 0x64
 8007620:	81c2      	strh	r2, [r0, #14]
 8007622:	6103      	str	r3, [r0, #16]
 8007624:	6143      	str	r3, [r0, #20]
 8007626:	6183      	str	r3, [r0, #24]
 8007628:	4619      	mov	r1, r3
 800762a:	2208      	movs	r2, #8
 800762c:	305c      	adds	r0, #92	; 0x5c
 800762e:	f000 f8e2 	bl	80077f6 <memset>
 8007632:	4b05      	ldr	r3, [pc, #20]	; (8007648 <std.isra.0+0x38>)
 8007634:	6263      	str	r3, [r4, #36]	; 0x24
 8007636:	4b05      	ldr	r3, [pc, #20]	; (800764c <std.isra.0+0x3c>)
 8007638:	62a3      	str	r3, [r4, #40]	; 0x28
 800763a:	4b05      	ldr	r3, [pc, #20]	; (8007650 <std.isra.0+0x40>)
 800763c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800763e:	4b05      	ldr	r3, [pc, #20]	; (8007654 <std.isra.0+0x44>)
 8007640:	6224      	str	r4, [r4, #32]
 8007642:	6323      	str	r3, [r4, #48]	; 0x30
 8007644:	bd10      	pop	{r4, pc}
 8007646:	bf00      	nop
 8007648:	08007aa1 	.word	0x08007aa1
 800764c:	08007ac3 	.word	0x08007ac3
 8007650:	08007afb 	.word	0x08007afb
 8007654:	08007b1f 	.word	0x08007b1f

08007658 <__sfmoreglue>:
 8007658:	b570      	push	{r4, r5, r6, lr}
 800765a:	1e4a      	subs	r2, r1, #1
 800765c:	2568      	movs	r5, #104	; 0x68
 800765e:	4355      	muls	r5, r2
 8007660:	460e      	mov	r6, r1
 8007662:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007666:	f000 f91d 	bl	80078a4 <_malloc_r>
 800766a:	4604      	mov	r4, r0
 800766c:	b140      	cbz	r0, 8007680 <__sfmoreglue+0x28>
 800766e:	2100      	movs	r1, #0
 8007670:	e880 0042 	stmia.w	r0, {r1, r6}
 8007674:	300c      	adds	r0, #12
 8007676:	60a0      	str	r0, [r4, #8]
 8007678:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800767c:	f000 f8bb 	bl	80077f6 <memset>
 8007680:	4620      	mov	r0, r4
 8007682:	bd70      	pop	{r4, r5, r6, pc}

08007684 <__sinit>:
 8007684:	6983      	ldr	r3, [r0, #24]
 8007686:	b510      	push	{r4, lr}
 8007688:	4604      	mov	r4, r0
 800768a:	bb33      	cbnz	r3, 80076da <__sinit+0x56>
 800768c:	6483      	str	r3, [r0, #72]	; 0x48
 800768e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007690:	6503      	str	r3, [r0, #80]	; 0x50
 8007692:	4b12      	ldr	r3, [pc, #72]	; (80076dc <__sinit+0x58>)
 8007694:	4a12      	ldr	r2, [pc, #72]	; (80076e0 <__sinit+0x5c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6282      	str	r2, [r0, #40]	; 0x28
 800769a:	4298      	cmp	r0, r3
 800769c:	bf04      	itt	eq
 800769e:	2301      	moveq	r3, #1
 80076a0:	6183      	streq	r3, [r0, #24]
 80076a2:	f000 f81f 	bl	80076e4 <__sfp>
 80076a6:	6060      	str	r0, [r4, #4]
 80076a8:	4620      	mov	r0, r4
 80076aa:	f000 f81b 	bl	80076e4 <__sfp>
 80076ae:	60a0      	str	r0, [r4, #8]
 80076b0:	4620      	mov	r0, r4
 80076b2:	f000 f817 	bl	80076e4 <__sfp>
 80076b6:	2200      	movs	r2, #0
 80076b8:	60e0      	str	r0, [r4, #12]
 80076ba:	2104      	movs	r1, #4
 80076bc:	6860      	ldr	r0, [r4, #4]
 80076be:	f7ff ffa7 	bl	8007610 <std.isra.0>
 80076c2:	2201      	movs	r2, #1
 80076c4:	2109      	movs	r1, #9
 80076c6:	68a0      	ldr	r0, [r4, #8]
 80076c8:	f7ff ffa2 	bl	8007610 <std.isra.0>
 80076cc:	2202      	movs	r2, #2
 80076ce:	2112      	movs	r1, #18
 80076d0:	68e0      	ldr	r0, [r4, #12]
 80076d2:	f7ff ff9d 	bl	8007610 <std.isra.0>
 80076d6:	2301      	movs	r3, #1
 80076d8:	61a3      	str	r3, [r4, #24]
 80076da:	bd10      	pop	{r4, pc}
 80076dc:	08008870 	.word	0x08008870
 80076e0:	08007605 	.word	0x08007605

080076e4 <__sfp>:
 80076e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e6:	4b1c      	ldr	r3, [pc, #112]	; (8007758 <__sfp+0x74>)
 80076e8:	681e      	ldr	r6, [r3, #0]
 80076ea:	69b3      	ldr	r3, [r6, #24]
 80076ec:	4607      	mov	r7, r0
 80076ee:	b913      	cbnz	r3, 80076f6 <__sfp+0x12>
 80076f0:	4630      	mov	r0, r6
 80076f2:	f7ff ffc7 	bl	8007684 <__sinit>
 80076f6:	3648      	adds	r6, #72	; 0x48
 80076f8:	68b4      	ldr	r4, [r6, #8]
 80076fa:	6873      	ldr	r3, [r6, #4]
 80076fc:	3b01      	subs	r3, #1
 80076fe:	d503      	bpl.n	8007708 <__sfp+0x24>
 8007700:	6833      	ldr	r3, [r6, #0]
 8007702:	b133      	cbz	r3, 8007712 <__sfp+0x2e>
 8007704:	6836      	ldr	r6, [r6, #0]
 8007706:	e7f7      	b.n	80076f8 <__sfp+0x14>
 8007708:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800770c:	b16d      	cbz	r5, 800772a <__sfp+0x46>
 800770e:	3468      	adds	r4, #104	; 0x68
 8007710:	e7f4      	b.n	80076fc <__sfp+0x18>
 8007712:	2104      	movs	r1, #4
 8007714:	4638      	mov	r0, r7
 8007716:	f7ff ff9f 	bl	8007658 <__sfmoreglue>
 800771a:	6030      	str	r0, [r6, #0]
 800771c:	2800      	cmp	r0, #0
 800771e:	d1f1      	bne.n	8007704 <__sfp+0x20>
 8007720:	230c      	movs	r3, #12
 8007722:	603b      	str	r3, [r7, #0]
 8007724:	4604      	mov	r4, r0
 8007726:	4620      	mov	r0, r4
 8007728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800772a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800772e:	81e3      	strh	r3, [r4, #14]
 8007730:	2301      	movs	r3, #1
 8007732:	81a3      	strh	r3, [r4, #12]
 8007734:	6665      	str	r5, [r4, #100]	; 0x64
 8007736:	6025      	str	r5, [r4, #0]
 8007738:	60a5      	str	r5, [r4, #8]
 800773a:	6065      	str	r5, [r4, #4]
 800773c:	6125      	str	r5, [r4, #16]
 800773e:	6165      	str	r5, [r4, #20]
 8007740:	61a5      	str	r5, [r4, #24]
 8007742:	2208      	movs	r2, #8
 8007744:	4629      	mov	r1, r5
 8007746:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800774a:	f000 f854 	bl	80077f6 <memset>
 800774e:	6365      	str	r5, [r4, #52]	; 0x34
 8007750:	63a5      	str	r5, [r4, #56]	; 0x38
 8007752:	64a5      	str	r5, [r4, #72]	; 0x48
 8007754:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007756:	e7e6      	b.n	8007726 <__sfp+0x42>
 8007758:	08008870 	.word	0x08008870

0800775c <_fwalk_reent>:
 800775c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007760:	4680      	mov	r8, r0
 8007762:	4689      	mov	r9, r1
 8007764:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007768:	2600      	movs	r6, #0
 800776a:	b914      	cbnz	r4, 8007772 <_fwalk_reent+0x16>
 800776c:	4630      	mov	r0, r6
 800776e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007772:	68a5      	ldr	r5, [r4, #8]
 8007774:	6867      	ldr	r7, [r4, #4]
 8007776:	3f01      	subs	r7, #1
 8007778:	d501      	bpl.n	800777e <_fwalk_reent+0x22>
 800777a:	6824      	ldr	r4, [r4, #0]
 800777c:	e7f5      	b.n	800776a <_fwalk_reent+0xe>
 800777e:	89ab      	ldrh	r3, [r5, #12]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d907      	bls.n	8007794 <_fwalk_reent+0x38>
 8007784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007788:	3301      	adds	r3, #1
 800778a:	d003      	beq.n	8007794 <_fwalk_reent+0x38>
 800778c:	4629      	mov	r1, r5
 800778e:	4640      	mov	r0, r8
 8007790:	47c8      	blx	r9
 8007792:	4306      	orrs	r6, r0
 8007794:	3568      	adds	r5, #104	; 0x68
 8007796:	e7ee      	b.n	8007776 <_fwalk_reent+0x1a>

08007798 <__libc_init_array>:
 8007798:	b570      	push	{r4, r5, r6, lr}
 800779a:	4e0d      	ldr	r6, [pc, #52]	; (80077d0 <__libc_init_array+0x38>)
 800779c:	4c0d      	ldr	r4, [pc, #52]	; (80077d4 <__libc_init_array+0x3c>)
 800779e:	1ba4      	subs	r4, r4, r6
 80077a0:	10a4      	asrs	r4, r4, #2
 80077a2:	2500      	movs	r5, #0
 80077a4:	42a5      	cmp	r5, r4
 80077a6:	d109      	bne.n	80077bc <__libc_init_array+0x24>
 80077a8:	4e0b      	ldr	r6, [pc, #44]	; (80077d8 <__libc_init_array+0x40>)
 80077aa:	4c0c      	ldr	r4, [pc, #48]	; (80077dc <__libc_init_array+0x44>)
 80077ac:	f000 fea2 	bl	80084f4 <_init>
 80077b0:	1ba4      	subs	r4, r4, r6
 80077b2:	10a4      	asrs	r4, r4, #2
 80077b4:	2500      	movs	r5, #0
 80077b6:	42a5      	cmp	r5, r4
 80077b8:	d105      	bne.n	80077c6 <__libc_init_array+0x2e>
 80077ba:	bd70      	pop	{r4, r5, r6, pc}
 80077bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077c0:	4798      	blx	r3
 80077c2:	3501      	adds	r5, #1
 80077c4:	e7ee      	b.n	80077a4 <__libc_init_array+0xc>
 80077c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077ca:	4798      	blx	r3
 80077cc:	3501      	adds	r5, #1
 80077ce:	e7f2      	b.n	80077b6 <__libc_init_array+0x1e>
 80077d0:	08008a3c 	.word	0x08008a3c
 80077d4:	08008a3c 	.word	0x08008a3c
 80077d8:	08008a3c 	.word	0x08008a3c
 80077dc:	08008a40 	.word	0x08008a40

080077e0 <memcpy>:
 80077e0:	b510      	push	{r4, lr}
 80077e2:	1e43      	subs	r3, r0, #1
 80077e4:	440a      	add	r2, r1
 80077e6:	4291      	cmp	r1, r2
 80077e8:	d100      	bne.n	80077ec <memcpy+0xc>
 80077ea:	bd10      	pop	{r4, pc}
 80077ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077f4:	e7f7      	b.n	80077e6 <memcpy+0x6>

080077f6 <memset>:
 80077f6:	4402      	add	r2, r0
 80077f8:	4603      	mov	r3, r0
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d100      	bne.n	8007800 <memset+0xa>
 80077fe:	4770      	bx	lr
 8007800:	f803 1b01 	strb.w	r1, [r3], #1
 8007804:	e7f9      	b.n	80077fa <memset+0x4>
	...

08007808 <_free_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4605      	mov	r5, r0
 800780c:	2900      	cmp	r1, #0
 800780e:	d045      	beq.n	800789c <_free_r+0x94>
 8007810:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007814:	1f0c      	subs	r4, r1, #4
 8007816:	2b00      	cmp	r3, #0
 8007818:	bfb8      	it	lt
 800781a:	18e4      	addlt	r4, r4, r3
 800781c:	f000 fadc 	bl	8007dd8 <__malloc_lock>
 8007820:	4a1f      	ldr	r2, [pc, #124]	; (80078a0 <_free_r+0x98>)
 8007822:	6813      	ldr	r3, [r2, #0]
 8007824:	4610      	mov	r0, r2
 8007826:	b933      	cbnz	r3, 8007836 <_free_r+0x2e>
 8007828:	6063      	str	r3, [r4, #4]
 800782a:	6014      	str	r4, [r2, #0]
 800782c:	4628      	mov	r0, r5
 800782e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007832:	f000 bad2 	b.w	8007dda <__malloc_unlock>
 8007836:	42a3      	cmp	r3, r4
 8007838:	d90c      	bls.n	8007854 <_free_r+0x4c>
 800783a:	6821      	ldr	r1, [r4, #0]
 800783c:	1862      	adds	r2, r4, r1
 800783e:	4293      	cmp	r3, r2
 8007840:	bf04      	itt	eq
 8007842:	681a      	ldreq	r2, [r3, #0]
 8007844:	685b      	ldreq	r3, [r3, #4]
 8007846:	6063      	str	r3, [r4, #4]
 8007848:	bf04      	itt	eq
 800784a:	1852      	addeq	r2, r2, r1
 800784c:	6022      	streq	r2, [r4, #0]
 800784e:	6004      	str	r4, [r0, #0]
 8007850:	e7ec      	b.n	800782c <_free_r+0x24>
 8007852:	4613      	mov	r3, r2
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	b10a      	cbz	r2, 800785c <_free_r+0x54>
 8007858:	42a2      	cmp	r2, r4
 800785a:	d9fa      	bls.n	8007852 <_free_r+0x4a>
 800785c:	6819      	ldr	r1, [r3, #0]
 800785e:	1858      	adds	r0, r3, r1
 8007860:	42a0      	cmp	r0, r4
 8007862:	d10b      	bne.n	800787c <_free_r+0x74>
 8007864:	6820      	ldr	r0, [r4, #0]
 8007866:	4401      	add	r1, r0
 8007868:	1858      	adds	r0, r3, r1
 800786a:	4282      	cmp	r2, r0
 800786c:	6019      	str	r1, [r3, #0]
 800786e:	d1dd      	bne.n	800782c <_free_r+0x24>
 8007870:	6810      	ldr	r0, [r2, #0]
 8007872:	6852      	ldr	r2, [r2, #4]
 8007874:	605a      	str	r2, [r3, #4]
 8007876:	4401      	add	r1, r0
 8007878:	6019      	str	r1, [r3, #0]
 800787a:	e7d7      	b.n	800782c <_free_r+0x24>
 800787c:	d902      	bls.n	8007884 <_free_r+0x7c>
 800787e:	230c      	movs	r3, #12
 8007880:	602b      	str	r3, [r5, #0]
 8007882:	e7d3      	b.n	800782c <_free_r+0x24>
 8007884:	6820      	ldr	r0, [r4, #0]
 8007886:	1821      	adds	r1, r4, r0
 8007888:	428a      	cmp	r2, r1
 800788a:	bf04      	itt	eq
 800788c:	6811      	ldreq	r1, [r2, #0]
 800788e:	6852      	ldreq	r2, [r2, #4]
 8007890:	6062      	str	r2, [r4, #4]
 8007892:	bf04      	itt	eq
 8007894:	1809      	addeq	r1, r1, r0
 8007896:	6021      	streq	r1, [r4, #0]
 8007898:	605c      	str	r4, [r3, #4]
 800789a:	e7c7      	b.n	800782c <_free_r+0x24>
 800789c:	bd38      	pop	{r3, r4, r5, pc}
 800789e:	bf00      	nop
 80078a0:	200014c0 	.word	0x200014c0

080078a4 <_malloc_r>:
 80078a4:	b570      	push	{r4, r5, r6, lr}
 80078a6:	1ccd      	adds	r5, r1, #3
 80078a8:	f025 0503 	bic.w	r5, r5, #3
 80078ac:	3508      	adds	r5, #8
 80078ae:	2d0c      	cmp	r5, #12
 80078b0:	bf38      	it	cc
 80078b2:	250c      	movcc	r5, #12
 80078b4:	2d00      	cmp	r5, #0
 80078b6:	4606      	mov	r6, r0
 80078b8:	db01      	blt.n	80078be <_malloc_r+0x1a>
 80078ba:	42a9      	cmp	r1, r5
 80078bc:	d903      	bls.n	80078c6 <_malloc_r+0x22>
 80078be:	230c      	movs	r3, #12
 80078c0:	6033      	str	r3, [r6, #0]
 80078c2:	2000      	movs	r0, #0
 80078c4:	bd70      	pop	{r4, r5, r6, pc}
 80078c6:	f000 fa87 	bl	8007dd8 <__malloc_lock>
 80078ca:	4a23      	ldr	r2, [pc, #140]	; (8007958 <_malloc_r+0xb4>)
 80078cc:	6814      	ldr	r4, [r2, #0]
 80078ce:	4621      	mov	r1, r4
 80078d0:	b991      	cbnz	r1, 80078f8 <_malloc_r+0x54>
 80078d2:	4c22      	ldr	r4, [pc, #136]	; (800795c <_malloc_r+0xb8>)
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	b91b      	cbnz	r3, 80078e0 <_malloc_r+0x3c>
 80078d8:	4630      	mov	r0, r6
 80078da:	f000 f8d1 	bl	8007a80 <_sbrk_r>
 80078de:	6020      	str	r0, [r4, #0]
 80078e0:	4629      	mov	r1, r5
 80078e2:	4630      	mov	r0, r6
 80078e4:	f000 f8cc 	bl	8007a80 <_sbrk_r>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	d126      	bne.n	800793a <_malloc_r+0x96>
 80078ec:	230c      	movs	r3, #12
 80078ee:	6033      	str	r3, [r6, #0]
 80078f0:	4630      	mov	r0, r6
 80078f2:	f000 fa72 	bl	8007dda <__malloc_unlock>
 80078f6:	e7e4      	b.n	80078c2 <_malloc_r+0x1e>
 80078f8:	680b      	ldr	r3, [r1, #0]
 80078fa:	1b5b      	subs	r3, r3, r5
 80078fc:	d41a      	bmi.n	8007934 <_malloc_r+0x90>
 80078fe:	2b0b      	cmp	r3, #11
 8007900:	d90f      	bls.n	8007922 <_malloc_r+0x7e>
 8007902:	600b      	str	r3, [r1, #0]
 8007904:	50cd      	str	r5, [r1, r3]
 8007906:	18cc      	adds	r4, r1, r3
 8007908:	4630      	mov	r0, r6
 800790a:	f000 fa66 	bl	8007dda <__malloc_unlock>
 800790e:	f104 000b 	add.w	r0, r4, #11
 8007912:	1d23      	adds	r3, r4, #4
 8007914:	f020 0007 	bic.w	r0, r0, #7
 8007918:	1ac3      	subs	r3, r0, r3
 800791a:	d01b      	beq.n	8007954 <_malloc_r+0xb0>
 800791c:	425a      	negs	r2, r3
 800791e:	50e2      	str	r2, [r4, r3]
 8007920:	bd70      	pop	{r4, r5, r6, pc}
 8007922:	428c      	cmp	r4, r1
 8007924:	bf0d      	iteet	eq
 8007926:	6863      	ldreq	r3, [r4, #4]
 8007928:	684b      	ldrne	r3, [r1, #4]
 800792a:	6063      	strne	r3, [r4, #4]
 800792c:	6013      	streq	r3, [r2, #0]
 800792e:	bf18      	it	ne
 8007930:	460c      	movne	r4, r1
 8007932:	e7e9      	b.n	8007908 <_malloc_r+0x64>
 8007934:	460c      	mov	r4, r1
 8007936:	6849      	ldr	r1, [r1, #4]
 8007938:	e7ca      	b.n	80078d0 <_malloc_r+0x2c>
 800793a:	1cc4      	adds	r4, r0, #3
 800793c:	f024 0403 	bic.w	r4, r4, #3
 8007940:	42a0      	cmp	r0, r4
 8007942:	d005      	beq.n	8007950 <_malloc_r+0xac>
 8007944:	1a21      	subs	r1, r4, r0
 8007946:	4630      	mov	r0, r6
 8007948:	f000 f89a 	bl	8007a80 <_sbrk_r>
 800794c:	3001      	adds	r0, #1
 800794e:	d0cd      	beq.n	80078ec <_malloc_r+0x48>
 8007950:	6025      	str	r5, [r4, #0]
 8007952:	e7d9      	b.n	8007908 <_malloc_r+0x64>
 8007954:	bd70      	pop	{r4, r5, r6, pc}
 8007956:	bf00      	nop
 8007958:	200014c0 	.word	0x200014c0
 800795c:	200014c4 	.word	0x200014c4

08007960 <iprintf>:
 8007960:	b40f      	push	{r0, r1, r2, r3}
 8007962:	4b0a      	ldr	r3, [pc, #40]	; (800798c <iprintf+0x2c>)
 8007964:	b513      	push	{r0, r1, r4, lr}
 8007966:	681c      	ldr	r4, [r3, #0]
 8007968:	b124      	cbz	r4, 8007974 <iprintf+0x14>
 800796a:	69a3      	ldr	r3, [r4, #24]
 800796c:	b913      	cbnz	r3, 8007974 <iprintf+0x14>
 800796e:	4620      	mov	r0, r4
 8007970:	f7ff fe88 	bl	8007684 <__sinit>
 8007974:	ab05      	add	r3, sp, #20
 8007976:	9a04      	ldr	r2, [sp, #16]
 8007978:	68a1      	ldr	r1, [r4, #8]
 800797a:	9301      	str	r3, [sp, #4]
 800797c:	4620      	mov	r0, r4
 800797e:	f000 fa57 	bl	8007e30 <_vfiprintf_r>
 8007982:	b002      	add	sp, #8
 8007984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007988:	b004      	add	sp, #16
 800798a:	4770      	bx	lr
 800798c:	20000020 	.word	0x20000020

08007990 <putchar>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4b08      	ldr	r3, [pc, #32]	; (80079b4 <putchar+0x24>)
 8007994:	681c      	ldr	r4, [r3, #0]
 8007996:	4605      	mov	r5, r0
 8007998:	b124      	cbz	r4, 80079a4 <putchar+0x14>
 800799a:	69a3      	ldr	r3, [r4, #24]
 800799c:	b913      	cbnz	r3, 80079a4 <putchar+0x14>
 800799e:	4620      	mov	r0, r4
 80079a0:	f7ff fe70 	bl	8007684 <__sinit>
 80079a4:	68a2      	ldr	r2, [r4, #8]
 80079a6:	4629      	mov	r1, r5
 80079a8:	4620      	mov	r0, r4
 80079aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80079ae:	f000 bceb 	b.w	8008388 <_putc_r>
 80079b2:	bf00      	nop
 80079b4:	20000020 	.word	0x20000020

080079b8 <_puts_r>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	460e      	mov	r6, r1
 80079bc:	4605      	mov	r5, r0
 80079be:	b118      	cbz	r0, 80079c8 <_puts_r+0x10>
 80079c0:	6983      	ldr	r3, [r0, #24]
 80079c2:	b90b      	cbnz	r3, 80079c8 <_puts_r+0x10>
 80079c4:	f7ff fe5e 	bl	8007684 <__sinit>
 80079c8:	69ab      	ldr	r3, [r5, #24]
 80079ca:	68ac      	ldr	r4, [r5, #8]
 80079cc:	b913      	cbnz	r3, 80079d4 <_puts_r+0x1c>
 80079ce:	4628      	mov	r0, r5
 80079d0:	f7ff fe58 	bl	8007684 <__sinit>
 80079d4:	4b23      	ldr	r3, [pc, #140]	; (8007a64 <_puts_r+0xac>)
 80079d6:	429c      	cmp	r4, r3
 80079d8:	d117      	bne.n	8007a0a <_puts_r+0x52>
 80079da:	686c      	ldr	r4, [r5, #4]
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	071b      	lsls	r3, r3, #28
 80079e0:	d51d      	bpl.n	8007a1e <_puts_r+0x66>
 80079e2:	6923      	ldr	r3, [r4, #16]
 80079e4:	b1db      	cbz	r3, 8007a1e <_puts_r+0x66>
 80079e6:	3e01      	subs	r6, #1
 80079e8:	68a3      	ldr	r3, [r4, #8]
 80079ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80079ee:	3b01      	subs	r3, #1
 80079f0:	60a3      	str	r3, [r4, #8]
 80079f2:	b9e9      	cbnz	r1, 8007a30 <_puts_r+0x78>
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	da2e      	bge.n	8007a56 <_puts_r+0x9e>
 80079f8:	4622      	mov	r2, r4
 80079fa:	210a      	movs	r1, #10
 80079fc:	4628      	mov	r0, r5
 80079fe:	f000 f893 	bl	8007b28 <__swbuf_r>
 8007a02:	3001      	adds	r0, #1
 8007a04:	d011      	beq.n	8007a2a <_puts_r+0x72>
 8007a06:	200a      	movs	r0, #10
 8007a08:	bd70      	pop	{r4, r5, r6, pc}
 8007a0a:	4b17      	ldr	r3, [pc, #92]	; (8007a68 <_puts_r+0xb0>)
 8007a0c:	429c      	cmp	r4, r3
 8007a0e:	d101      	bne.n	8007a14 <_puts_r+0x5c>
 8007a10:	68ac      	ldr	r4, [r5, #8]
 8007a12:	e7e3      	b.n	80079dc <_puts_r+0x24>
 8007a14:	4b15      	ldr	r3, [pc, #84]	; (8007a6c <_puts_r+0xb4>)
 8007a16:	429c      	cmp	r4, r3
 8007a18:	bf08      	it	eq
 8007a1a:	68ec      	ldreq	r4, [r5, #12]
 8007a1c:	e7de      	b.n	80079dc <_puts_r+0x24>
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 f8e5 	bl	8007bf0 <__swsetup_r>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d0dd      	beq.n	80079e6 <_puts_r+0x2e>
 8007a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a2e:	bd70      	pop	{r4, r5, r6, pc}
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	da04      	bge.n	8007a3e <_puts_r+0x86>
 8007a34:	69a2      	ldr	r2, [r4, #24]
 8007a36:	4293      	cmp	r3, r2
 8007a38:	db06      	blt.n	8007a48 <_puts_r+0x90>
 8007a3a:	290a      	cmp	r1, #10
 8007a3c:	d004      	beq.n	8007a48 <_puts_r+0x90>
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	1c5a      	adds	r2, r3, #1
 8007a42:	6022      	str	r2, [r4, #0]
 8007a44:	7019      	strb	r1, [r3, #0]
 8007a46:	e7cf      	b.n	80079e8 <_puts_r+0x30>
 8007a48:	4622      	mov	r2, r4
 8007a4a:	4628      	mov	r0, r5
 8007a4c:	f000 f86c 	bl	8007b28 <__swbuf_r>
 8007a50:	3001      	adds	r0, #1
 8007a52:	d1c9      	bne.n	80079e8 <_puts_r+0x30>
 8007a54:	e7e9      	b.n	8007a2a <_puts_r+0x72>
 8007a56:	6823      	ldr	r3, [r4, #0]
 8007a58:	200a      	movs	r0, #10
 8007a5a:	1c5a      	adds	r2, r3, #1
 8007a5c:	6022      	str	r2, [r4, #0]
 8007a5e:	7018      	strb	r0, [r3, #0]
 8007a60:	bd70      	pop	{r4, r5, r6, pc}
 8007a62:	bf00      	nop
 8007a64:	08008830 	.word	0x08008830
 8007a68:	08008850 	.word	0x08008850
 8007a6c:	08008810 	.word	0x08008810

08007a70 <puts>:
 8007a70:	4b02      	ldr	r3, [pc, #8]	; (8007a7c <puts+0xc>)
 8007a72:	4601      	mov	r1, r0
 8007a74:	6818      	ldr	r0, [r3, #0]
 8007a76:	f7ff bf9f 	b.w	80079b8 <_puts_r>
 8007a7a:	bf00      	nop
 8007a7c:	20000020 	.word	0x20000020

08007a80 <_sbrk_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4c06      	ldr	r4, [pc, #24]	; (8007a9c <_sbrk_r+0x1c>)
 8007a84:	2300      	movs	r3, #0
 8007a86:	4605      	mov	r5, r0
 8007a88:	4608      	mov	r0, r1
 8007a8a:	6023      	str	r3, [r4, #0]
 8007a8c:	f7ff fc7c 	bl	8007388 <_sbrk>
 8007a90:	1c43      	adds	r3, r0, #1
 8007a92:	d102      	bne.n	8007a9a <_sbrk_r+0x1a>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	b103      	cbz	r3, 8007a9a <_sbrk_r+0x1a>
 8007a98:	602b      	str	r3, [r5, #0]
 8007a9a:	bd38      	pop	{r3, r4, r5, pc}
 8007a9c:	20001614 	.word	0x20001614

08007aa0 <__sread>:
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	460c      	mov	r4, r1
 8007aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007aa8:	f000 fca4 	bl	80083f4 <_read_r>
 8007aac:	2800      	cmp	r0, #0
 8007aae:	bfab      	itete	ge
 8007ab0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8007ab4:	181b      	addge	r3, r3, r0
 8007ab6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007aba:	bfac      	ite	ge
 8007abc:	6563      	strge	r3, [r4, #84]	; 0x54
 8007abe:	81a3      	strhlt	r3, [r4, #12]
 8007ac0:	bd10      	pop	{r4, pc}

08007ac2 <__swrite>:
 8007ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ac6:	461f      	mov	r7, r3
 8007ac8:	898b      	ldrh	r3, [r1, #12]
 8007aca:	05db      	lsls	r3, r3, #23
 8007acc:	4605      	mov	r5, r0
 8007ace:	460c      	mov	r4, r1
 8007ad0:	4616      	mov	r6, r2
 8007ad2:	d505      	bpl.n	8007ae0 <__swrite+0x1e>
 8007ad4:	2302      	movs	r3, #2
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007adc:	f000 f906 	bl	8007cec <_lseek_r>
 8007ae0:	89a3      	ldrh	r3, [r4, #12]
 8007ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ae6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007aea:	81a3      	strh	r3, [r4, #12]
 8007aec:	4632      	mov	r2, r6
 8007aee:	463b      	mov	r3, r7
 8007af0:	4628      	mov	r0, r5
 8007af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007af6:	f000 b869 	b.w	8007bcc <_write_r>

08007afa <__sseek>:
 8007afa:	b510      	push	{r4, lr}
 8007afc:	460c      	mov	r4, r1
 8007afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b02:	f000 f8f3 	bl	8007cec <_lseek_r>
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	89a3      	ldrh	r3, [r4, #12]
 8007b0a:	bf15      	itete	ne
 8007b0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b16:	81a3      	strheq	r3, [r4, #12]
 8007b18:	bf18      	it	ne
 8007b1a:	81a3      	strhne	r3, [r4, #12]
 8007b1c:	bd10      	pop	{r4, pc}

08007b1e <__sclose>:
 8007b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b22:	f000 b8d3 	b.w	8007ccc <_close_r>
	...

08007b28 <__swbuf_r>:
 8007b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2a:	460e      	mov	r6, r1
 8007b2c:	4614      	mov	r4, r2
 8007b2e:	4605      	mov	r5, r0
 8007b30:	b118      	cbz	r0, 8007b3a <__swbuf_r+0x12>
 8007b32:	6983      	ldr	r3, [r0, #24]
 8007b34:	b90b      	cbnz	r3, 8007b3a <__swbuf_r+0x12>
 8007b36:	f7ff fda5 	bl	8007684 <__sinit>
 8007b3a:	4b21      	ldr	r3, [pc, #132]	; (8007bc0 <__swbuf_r+0x98>)
 8007b3c:	429c      	cmp	r4, r3
 8007b3e:	d12a      	bne.n	8007b96 <__swbuf_r+0x6e>
 8007b40:	686c      	ldr	r4, [r5, #4]
 8007b42:	69a3      	ldr	r3, [r4, #24]
 8007b44:	60a3      	str	r3, [r4, #8]
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	071a      	lsls	r2, r3, #28
 8007b4a:	d52e      	bpl.n	8007baa <__swbuf_r+0x82>
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	b363      	cbz	r3, 8007baa <__swbuf_r+0x82>
 8007b50:	6923      	ldr	r3, [r4, #16]
 8007b52:	6820      	ldr	r0, [r4, #0]
 8007b54:	1ac0      	subs	r0, r0, r3
 8007b56:	6963      	ldr	r3, [r4, #20]
 8007b58:	b2f6      	uxtb	r6, r6
 8007b5a:	4298      	cmp	r0, r3
 8007b5c:	4637      	mov	r7, r6
 8007b5e:	db04      	blt.n	8007b6a <__swbuf_r+0x42>
 8007b60:	4621      	mov	r1, r4
 8007b62:	4628      	mov	r0, r5
 8007b64:	f7ff fd12 	bl	800758c <_fflush_r>
 8007b68:	bb28      	cbnz	r0, 8007bb6 <__swbuf_r+0x8e>
 8007b6a:	68a3      	ldr	r3, [r4, #8]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	60a3      	str	r3, [r4, #8]
 8007b70:	6823      	ldr	r3, [r4, #0]
 8007b72:	1c5a      	adds	r2, r3, #1
 8007b74:	6022      	str	r2, [r4, #0]
 8007b76:	701e      	strb	r6, [r3, #0]
 8007b78:	6963      	ldr	r3, [r4, #20]
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	4298      	cmp	r0, r3
 8007b7e:	d004      	beq.n	8007b8a <__swbuf_r+0x62>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	07db      	lsls	r3, r3, #31
 8007b84:	d519      	bpl.n	8007bba <__swbuf_r+0x92>
 8007b86:	2e0a      	cmp	r6, #10
 8007b88:	d117      	bne.n	8007bba <__swbuf_r+0x92>
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	4628      	mov	r0, r5
 8007b8e:	f7ff fcfd 	bl	800758c <_fflush_r>
 8007b92:	b190      	cbz	r0, 8007bba <__swbuf_r+0x92>
 8007b94:	e00f      	b.n	8007bb6 <__swbuf_r+0x8e>
 8007b96:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <__swbuf_r+0x9c>)
 8007b98:	429c      	cmp	r4, r3
 8007b9a:	d101      	bne.n	8007ba0 <__swbuf_r+0x78>
 8007b9c:	68ac      	ldr	r4, [r5, #8]
 8007b9e:	e7d0      	b.n	8007b42 <__swbuf_r+0x1a>
 8007ba0:	4b09      	ldr	r3, [pc, #36]	; (8007bc8 <__swbuf_r+0xa0>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	bf08      	it	eq
 8007ba6:	68ec      	ldreq	r4, [r5, #12]
 8007ba8:	e7cb      	b.n	8007b42 <__swbuf_r+0x1a>
 8007baa:	4621      	mov	r1, r4
 8007bac:	4628      	mov	r0, r5
 8007bae:	f000 f81f 	bl	8007bf0 <__swsetup_r>
 8007bb2:	2800      	cmp	r0, #0
 8007bb4:	d0cc      	beq.n	8007b50 <__swbuf_r+0x28>
 8007bb6:	f04f 37ff 	mov.w	r7, #4294967295
 8007bba:	4638      	mov	r0, r7
 8007bbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08008830 	.word	0x08008830
 8007bc4:	08008850 	.word	0x08008850
 8007bc8:	08008810 	.word	0x08008810

08007bcc <_write_r>:
 8007bcc:	b538      	push	{r3, r4, r5, lr}
 8007bce:	4c07      	ldr	r4, [pc, #28]	; (8007bec <_write_r+0x20>)
 8007bd0:	4605      	mov	r5, r0
 8007bd2:	4608      	mov	r0, r1
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	6022      	str	r2, [r4, #0]
 8007bda:	461a      	mov	r2, r3
 8007bdc:	f7ff fbc6 	bl	800736c <_write>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_write_r+0x1e>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_write_r+0x1e>
 8007be8:	602b      	str	r3, [r5, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	20001614 	.word	0x20001614

08007bf0 <__swsetup_r>:
 8007bf0:	4b32      	ldr	r3, [pc, #200]	; (8007cbc <__swsetup_r+0xcc>)
 8007bf2:	b570      	push	{r4, r5, r6, lr}
 8007bf4:	681d      	ldr	r5, [r3, #0]
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	b125      	cbz	r5, 8007c06 <__swsetup_r+0x16>
 8007bfc:	69ab      	ldr	r3, [r5, #24]
 8007bfe:	b913      	cbnz	r3, 8007c06 <__swsetup_r+0x16>
 8007c00:	4628      	mov	r0, r5
 8007c02:	f7ff fd3f 	bl	8007684 <__sinit>
 8007c06:	4b2e      	ldr	r3, [pc, #184]	; (8007cc0 <__swsetup_r+0xd0>)
 8007c08:	429c      	cmp	r4, r3
 8007c0a:	d10f      	bne.n	8007c2c <__swsetup_r+0x3c>
 8007c0c:	686c      	ldr	r4, [r5, #4]
 8007c0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	0715      	lsls	r5, r2, #28
 8007c16:	d42c      	bmi.n	8007c72 <__swsetup_r+0x82>
 8007c18:	06d0      	lsls	r0, r2, #27
 8007c1a:	d411      	bmi.n	8007c40 <__swsetup_r+0x50>
 8007c1c:	2209      	movs	r2, #9
 8007c1e:	6032      	str	r2, [r6, #0]
 8007c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c24:	81a3      	strh	r3, [r4, #12]
 8007c26:	f04f 30ff 	mov.w	r0, #4294967295
 8007c2a:	bd70      	pop	{r4, r5, r6, pc}
 8007c2c:	4b25      	ldr	r3, [pc, #148]	; (8007cc4 <__swsetup_r+0xd4>)
 8007c2e:	429c      	cmp	r4, r3
 8007c30:	d101      	bne.n	8007c36 <__swsetup_r+0x46>
 8007c32:	68ac      	ldr	r4, [r5, #8]
 8007c34:	e7eb      	b.n	8007c0e <__swsetup_r+0x1e>
 8007c36:	4b24      	ldr	r3, [pc, #144]	; (8007cc8 <__swsetup_r+0xd8>)
 8007c38:	429c      	cmp	r4, r3
 8007c3a:	bf08      	it	eq
 8007c3c:	68ec      	ldreq	r4, [r5, #12]
 8007c3e:	e7e6      	b.n	8007c0e <__swsetup_r+0x1e>
 8007c40:	0751      	lsls	r1, r2, #29
 8007c42:	d512      	bpl.n	8007c6a <__swsetup_r+0x7a>
 8007c44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c46:	b141      	cbz	r1, 8007c5a <__swsetup_r+0x6a>
 8007c48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c4c:	4299      	cmp	r1, r3
 8007c4e:	d002      	beq.n	8007c56 <__swsetup_r+0x66>
 8007c50:	4630      	mov	r0, r6
 8007c52:	f7ff fdd9 	bl	8007808 <_free_r>
 8007c56:	2300      	movs	r3, #0
 8007c58:	6363      	str	r3, [r4, #52]	; 0x34
 8007c5a:	89a3      	ldrh	r3, [r4, #12]
 8007c5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007c60:	81a3      	strh	r3, [r4, #12]
 8007c62:	2300      	movs	r3, #0
 8007c64:	6063      	str	r3, [r4, #4]
 8007c66:	6923      	ldr	r3, [r4, #16]
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	89a3      	ldrh	r3, [r4, #12]
 8007c6c:	f043 0308 	orr.w	r3, r3, #8
 8007c70:	81a3      	strh	r3, [r4, #12]
 8007c72:	6923      	ldr	r3, [r4, #16]
 8007c74:	b94b      	cbnz	r3, 8007c8a <__swsetup_r+0x9a>
 8007c76:	89a3      	ldrh	r3, [r4, #12]
 8007c78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c80:	d003      	beq.n	8007c8a <__swsetup_r+0x9a>
 8007c82:	4621      	mov	r1, r4
 8007c84:	4630      	mov	r0, r6
 8007c86:	f000 f867 	bl	8007d58 <__smakebuf_r>
 8007c8a:	89a2      	ldrh	r2, [r4, #12]
 8007c8c:	f012 0301 	ands.w	r3, r2, #1
 8007c90:	d00c      	beq.n	8007cac <__swsetup_r+0xbc>
 8007c92:	2300      	movs	r3, #0
 8007c94:	60a3      	str	r3, [r4, #8]
 8007c96:	6963      	ldr	r3, [r4, #20]
 8007c98:	425b      	negs	r3, r3
 8007c9a:	61a3      	str	r3, [r4, #24]
 8007c9c:	6923      	ldr	r3, [r4, #16]
 8007c9e:	b953      	cbnz	r3, 8007cb6 <__swsetup_r+0xc6>
 8007ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ca8:	d1ba      	bne.n	8007c20 <__swsetup_r+0x30>
 8007caa:	bd70      	pop	{r4, r5, r6, pc}
 8007cac:	0792      	lsls	r2, r2, #30
 8007cae:	bf58      	it	pl
 8007cb0:	6963      	ldrpl	r3, [r4, #20]
 8007cb2:	60a3      	str	r3, [r4, #8]
 8007cb4:	e7f2      	b.n	8007c9c <__swsetup_r+0xac>
 8007cb6:	2000      	movs	r0, #0
 8007cb8:	e7f7      	b.n	8007caa <__swsetup_r+0xba>
 8007cba:	bf00      	nop
 8007cbc:	20000020 	.word	0x20000020
 8007cc0:	08008830 	.word	0x08008830
 8007cc4:	08008850 	.word	0x08008850
 8007cc8:	08008810 	.word	0x08008810

08007ccc <_close_r>:
 8007ccc:	b538      	push	{r3, r4, r5, lr}
 8007cce:	4c06      	ldr	r4, [pc, #24]	; (8007ce8 <_close_r+0x1c>)
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	4605      	mov	r5, r0
 8007cd4:	4608      	mov	r0, r1
 8007cd6:	6023      	str	r3, [r4, #0]
 8007cd8:	f7ff fb70 	bl	80073bc <_close>
 8007cdc:	1c43      	adds	r3, r0, #1
 8007cde:	d102      	bne.n	8007ce6 <_close_r+0x1a>
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	b103      	cbz	r3, 8007ce6 <_close_r+0x1a>
 8007ce4:	602b      	str	r3, [r5, #0]
 8007ce6:	bd38      	pop	{r3, r4, r5, pc}
 8007ce8:	20001614 	.word	0x20001614

08007cec <_lseek_r>:
 8007cec:	b538      	push	{r3, r4, r5, lr}
 8007cee:	4c07      	ldr	r4, [pc, #28]	; (8007d0c <_lseek_r+0x20>)
 8007cf0:	4605      	mov	r5, r0
 8007cf2:	4608      	mov	r0, r1
 8007cf4:	4611      	mov	r1, r2
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	6022      	str	r2, [r4, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	f7ff fb68 	bl	80073d0 <_lseek>
 8007d00:	1c43      	adds	r3, r0, #1
 8007d02:	d102      	bne.n	8007d0a <_lseek_r+0x1e>
 8007d04:	6823      	ldr	r3, [r4, #0]
 8007d06:	b103      	cbz	r3, 8007d0a <_lseek_r+0x1e>
 8007d08:	602b      	str	r3, [r5, #0]
 8007d0a:	bd38      	pop	{r3, r4, r5, pc}
 8007d0c:	20001614 	.word	0x20001614

08007d10 <__swhatbuf_r>:
 8007d10:	b570      	push	{r4, r5, r6, lr}
 8007d12:	460e      	mov	r6, r1
 8007d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d18:	2900      	cmp	r1, #0
 8007d1a:	b090      	sub	sp, #64	; 0x40
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	461d      	mov	r5, r3
 8007d20:	da07      	bge.n	8007d32 <__swhatbuf_r+0x22>
 8007d22:	2300      	movs	r3, #0
 8007d24:	602b      	str	r3, [r5, #0]
 8007d26:	89b3      	ldrh	r3, [r6, #12]
 8007d28:	061a      	lsls	r2, r3, #24
 8007d2a:	d410      	bmi.n	8007d4e <__swhatbuf_r+0x3e>
 8007d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d30:	e00e      	b.n	8007d50 <__swhatbuf_r+0x40>
 8007d32:	aa01      	add	r2, sp, #4
 8007d34:	f000 fb70 	bl	8008418 <_fstat_r>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	dbf2      	blt.n	8007d22 <__swhatbuf_r+0x12>
 8007d3c:	9a02      	ldr	r2, [sp, #8]
 8007d3e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d42:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d46:	425a      	negs	r2, r3
 8007d48:	415a      	adcs	r2, r3
 8007d4a:	602a      	str	r2, [r5, #0]
 8007d4c:	e7ee      	b.n	8007d2c <__swhatbuf_r+0x1c>
 8007d4e:	2340      	movs	r3, #64	; 0x40
 8007d50:	2000      	movs	r0, #0
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	b010      	add	sp, #64	; 0x40
 8007d56:	bd70      	pop	{r4, r5, r6, pc}

08007d58 <__smakebuf_r>:
 8007d58:	898b      	ldrh	r3, [r1, #12]
 8007d5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d5c:	079d      	lsls	r5, r3, #30
 8007d5e:	4606      	mov	r6, r0
 8007d60:	460c      	mov	r4, r1
 8007d62:	d507      	bpl.n	8007d74 <__smakebuf_r+0x1c>
 8007d64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d68:	6023      	str	r3, [r4, #0]
 8007d6a:	6123      	str	r3, [r4, #16]
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	6163      	str	r3, [r4, #20]
 8007d70:	b002      	add	sp, #8
 8007d72:	bd70      	pop	{r4, r5, r6, pc}
 8007d74:	ab01      	add	r3, sp, #4
 8007d76:	466a      	mov	r2, sp
 8007d78:	f7ff ffca 	bl	8007d10 <__swhatbuf_r>
 8007d7c:	9900      	ldr	r1, [sp, #0]
 8007d7e:	4605      	mov	r5, r0
 8007d80:	4630      	mov	r0, r6
 8007d82:	f7ff fd8f 	bl	80078a4 <_malloc_r>
 8007d86:	b948      	cbnz	r0, 8007d9c <__smakebuf_r+0x44>
 8007d88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d8c:	059a      	lsls	r2, r3, #22
 8007d8e:	d4ef      	bmi.n	8007d70 <__smakebuf_r+0x18>
 8007d90:	f023 0303 	bic.w	r3, r3, #3
 8007d94:	f043 0302 	orr.w	r3, r3, #2
 8007d98:	81a3      	strh	r3, [r4, #12]
 8007d9a:	e7e3      	b.n	8007d64 <__smakebuf_r+0xc>
 8007d9c:	4b0d      	ldr	r3, [pc, #52]	; (8007dd4 <__smakebuf_r+0x7c>)
 8007d9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007da0:	89a3      	ldrh	r3, [r4, #12]
 8007da2:	6020      	str	r0, [r4, #0]
 8007da4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	9b00      	ldr	r3, [sp, #0]
 8007dac:	6163      	str	r3, [r4, #20]
 8007dae:	9b01      	ldr	r3, [sp, #4]
 8007db0:	6120      	str	r0, [r4, #16]
 8007db2:	b15b      	cbz	r3, 8007dcc <__smakebuf_r+0x74>
 8007db4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007db8:	4630      	mov	r0, r6
 8007dba:	f000 fb3f 	bl	800843c <_isatty_r>
 8007dbe:	b128      	cbz	r0, 8007dcc <__smakebuf_r+0x74>
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	f023 0303 	bic.w	r3, r3, #3
 8007dc6:	f043 0301 	orr.w	r3, r3, #1
 8007dca:	81a3      	strh	r3, [r4, #12]
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	431d      	orrs	r5, r3
 8007dd0:	81a5      	strh	r5, [r4, #12]
 8007dd2:	e7cd      	b.n	8007d70 <__smakebuf_r+0x18>
 8007dd4:	08007605 	.word	0x08007605

08007dd8 <__malloc_lock>:
 8007dd8:	4770      	bx	lr

08007dda <__malloc_unlock>:
 8007dda:	4770      	bx	lr

08007ddc <__sfputc_r>:
 8007ddc:	6893      	ldr	r3, [r2, #8]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	b410      	push	{r4}
 8007de4:	6093      	str	r3, [r2, #8]
 8007de6:	da09      	bge.n	8007dfc <__sfputc_r+0x20>
 8007de8:	6994      	ldr	r4, [r2, #24]
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	db02      	blt.n	8007df4 <__sfputc_r+0x18>
 8007dee:	b2cb      	uxtb	r3, r1
 8007df0:	2b0a      	cmp	r3, #10
 8007df2:	d103      	bne.n	8007dfc <__sfputc_r+0x20>
 8007df4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007df8:	f7ff be96 	b.w	8007b28 <__swbuf_r>
 8007dfc:	6813      	ldr	r3, [r2, #0]
 8007dfe:	1c58      	adds	r0, r3, #1
 8007e00:	6010      	str	r0, [r2, #0]
 8007e02:	7019      	strb	r1, [r3, #0]
 8007e04:	b2c8      	uxtb	r0, r1
 8007e06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <__sfputs_r>:
 8007e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e0e:	4606      	mov	r6, r0
 8007e10:	460f      	mov	r7, r1
 8007e12:	4614      	mov	r4, r2
 8007e14:	18d5      	adds	r5, r2, r3
 8007e16:	42ac      	cmp	r4, r5
 8007e18:	d101      	bne.n	8007e1e <__sfputs_r+0x12>
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	e007      	b.n	8007e2e <__sfputs_r+0x22>
 8007e1e:	463a      	mov	r2, r7
 8007e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e24:	4630      	mov	r0, r6
 8007e26:	f7ff ffd9 	bl	8007ddc <__sfputc_r>
 8007e2a:	1c43      	adds	r3, r0, #1
 8007e2c:	d1f3      	bne.n	8007e16 <__sfputs_r+0xa>
 8007e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007e30 <_vfiprintf_r>:
 8007e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e34:	b09d      	sub	sp, #116	; 0x74
 8007e36:	460c      	mov	r4, r1
 8007e38:	4617      	mov	r7, r2
 8007e3a:	9303      	str	r3, [sp, #12]
 8007e3c:	4606      	mov	r6, r0
 8007e3e:	b118      	cbz	r0, 8007e48 <_vfiprintf_r+0x18>
 8007e40:	6983      	ldr	r3, [r0, #24]
 8007e42:	b90b      	cbnz	r3, 8007e48 <_vfiprintf_r+0x18>
 8007e44:	f7ff fc1e 	bl	8007684 <__sinit>
 8007e48:	4b7c      	ldr	r3, [pc, #496]	; (800803c <_vfiprintf_r+0x20c>)
 8007e4a:	429c      	cmp	r4, r3
 8007e4c:	d157      	bne.n	8007efe <_vfiprintf_r+0xce>
 8007e4e:	6874      	ldr	r4, [r6, #4]
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	0718      	lsls	r0, r3, #28
 8007e54:	d55d      	bpl.n	8007f12 <_vfiprintf_r+0xe2>
 8007e56:	6923      	ldr	r3, [r4, #16]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d05a      	beq.n	8007f12 <_vfiprintf_r+0xe2>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e60:	2320      	movs	r3, #32
 8007e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e66:	2330      	movs	r3, #48	; 0x30
 8007e68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e6c:	f04f 0b01 	mov.w	fp, #1
 8007e70:	46b8      	mov	r8, r7
 8007e72:	4645      	mov	r5, r8
 8007e74:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d155      	bne.n	8007f28 <_vfiprintf_r+0xf8>
 8007e7c:	ebb8 0a07 	subs.w	sl, r8, r7
 8007e80:	d00b      	beq.n	8007e9a <_vfiprintf_r+0x6a>
 8007e82:	4653      	mov	r3, sl
 8007e84:	463a      	mov	r2, r7
 8007e86:	4621      	mov	r1, r4
 8007e88:	4630      	mov	r0, r6
 8007e8a:	f7ff ffbf 	bl	8007e0c <__sfputs_r>
 8007e8e:	3001      	adds	r0, #1
 8007e90:	f000 80c4 	beq.w	800801c <_vfiprintf_r+0x1ec>
 8007e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e96:	4453      	add	r3, sl
 8007e98:	9309      	str	r3, [sp, #36]	; 0x24
 8007e9a:	f898 3000 	ldrb.w	r3, [r8]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	f000 80bc 	beq.w	800801c <_vfiprintf_r+0x1ec>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eaa:	9304      	str	r3, [sp, #16]
 8007eac:	9307      	str	r3, [sp, #28]
 8007eae:	9205      	str	r2, [sp, #20]
 8007eb0:	9306      	str	r3, [sp, #24]
 8007eb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007eb6:	931a      	str	r3, [sp, #104]	; 0x68
 8007eb8:	2205      	movs	r2, #5
 8007eba:	7829      	ldrb	r1, [r5, #0]
 8007ebc:	4860      	ldr	r0, [pc, #384]	; (8008040 <_vfiprintf_r+0x210>)
 8007ebe:	f7f8 f987 	bl	80001d0 <memchr>
 8007ec2:	f105 0801 	add.w	r8, r5, #1
 8007ec6:	9b04      	ldr	r3, [sp, #16]
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d131      	bne.n	8007f30 <_vfiprintf_r+0x100>
 8007ecc:	06d9      	lsls	r1, r3, #27
 8007ece:	bf44      	itt	mi
 8007ed0:	2220      	movmi	r2, #32
 8007ed2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ed6:	071a      	lsls	r2, r3, #28
 8007ed8:	bf44      	itt	mi
 8007eda:	222b      	movmi	r2, #43	; 0x2b
 8007edc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007ee0:	782a      	ldrb	r2, [r5, #0]
 8007ee2:	2a2a      	cmp	r2, #42	; 0x2a
 8007ee4:	d02c      	beq.n	8007f40 <_vfiprintf_r+0x110>
 8007ee6:	9a07      	ldr	r2, [sp, #28]
 8007ee8:	2100      	movs	r1, #0
 8007eea:	200a      	movs	r0, #10
 8007eec:	46a8      	mov	r8, r5
 8007eee:	3501      	adds	r5, #1
 8007ef0:	f898 3000 	ldrb.w	r3, [r8]
 8007ef4:	3b30      	subs	r3, #48	; 0x30
 8007ef6:	2b09      	cmp	r3, #9
 8007ef8:	d96d      	bls.n	8007fd6 <_vfiprintf_r+0x1a6>
 8007efa:	b371      	cbz	r1, 8007f5a <_vfiprintf_r+0x12a>
 8007efc:	e026      	b.n	8007f4c <_vfiprintf_r+0x11c>
 8007efe:	4b51      	ldr	r3, [pc, #324]	; (8008044 <_vfiprintf_r+0x214>)
 8007f00:	429c      	cmp	r4, r3
 8007f02:	d101      	bne.n	8007f08 <_vfiprintf_r+0xd8>
 8007f04:	68b4      	ldr	r4, [r6, #8]
 8007f06:	e7a3      	b.n	8007e50 <_vfiprintf_r+0x20>
 8007f08:	4b4f      	ldr	r3, [pc, #316]	; (8008048 <_vfiprintf_r+0x218>)
 8007f0a:	429c      	cmp	r4, r3
 8007f0c:	bf08      	it	eq
 8007f0e:	68f4      	ldreq	r4, [r6, #12]
 8007f10:	e79e      	b.n	8007e50 <_vfiprintf_r+0x20>
 8007f12:	4621      	mov	r1, r4
 8007f14:	4630      	mov	r0, r6
 8007f16:	f7ff fe6b 	bl	8007bf0 <__swsetup_r>
 8007f1a:	2800      	cmp	r0, #0
 8007f1c:	d09e      	beq.n	8007e5c <_vfiprintf_r+0x2c>
 8007f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f22:	b01d      	add	sp, #116	; 0x74
 8007f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f28:	2b25      	cmp	r3, #37	; 0x25
 8007f2a:	d0a7      	beq.n	8007e7c <_vfiprintf_r+0x4c>
 8007f2c:	46a8      	mov	r8, r5
 8007f2e:	e7a0      	b.n	8007e72 <_vfiprintf_r+0x42>
 8007f30:	4a43      	ldr	r2, [pc, #268]	; (8008040 <_vfiprintf_r+0x210>)
 8007f32:	1a80      	subs	r0, r0, r2
 8007f34:	fa0b f000 	lsl.w	r0, fp, r0
 8007f38:	4318      	orrs	r0, r3
 8007f3a:	9004      	str	r0, [sp, #16]
 8007f3c:	4645      	mov	r5, r8
 8007f3e:	e7bb      	b.n	8007eb8 <_vfiprintf_r+0x88>
 8007f40:	9a03      	ldr	r2, [sp, #12]
 8007f42:	1d11      	adds	r1, r2, #4
 8007f44:	6812      	ldr	r2, [r2, #0]
 8007f46:	9103      	str	r1, [sp, #12]
 8007f48:	2a00      	cmp	r2, #0
 8007f4a:	db01      	blt.n	8007f50 <_vfiprintf_r+0x120>
 8007f4c:	9207      	str	r2, [sp, #28]
 8007f4e:	e004      	b.n	8007f5a <_vfiprintf_r+0x12a>
 8007f50:	4252      	negs	r2, r2
 8007f52:	f043 0302 	orr.w	r3, r3, #2
 8007f56:	9207      	str	r2, [sp, #28]
 8007f58:	9304      	str	r3, [sp, #16]
 8007f5a:	f898 3000 	ldrb.w	r3, [r8]
 8007f5e:	2b2e      	cmp	r3, #46	; 0x2e
 8007f60:	d110      	bne.n	8007f84 <_vfiprintf_r+0x154>
 8007f62:	f898 3001 	ldrb.w	r3, [r8, #1]
 8007f66:	2b2a      	cmp	r3, #42	; 0x2a
 8007f68:	f108 0101 	add.w	r1, r8, #1
 8007f6c:	d137      	bne.n	8007fde <_vfiprintf_r+0x1ae>
 8007f6e:	9b03      	ldr	r3, [sp, #12]
 8007f70:	1d1a      	adds	r2, r3, #4
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	9203      	str	r2, [sp, #12]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	bfb8      	it	lt
 8007f7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f7e:	f108 0802 	add.w	r8, r8, #2
 8007f82:	9305      	str	r3, [sp, #20]
 8007f84:	4d31      	ldr	r5, [pc, #196]	; (800804c <_vfiprintf_r+0x21c>)
 8007f86:	f898 1000 	ldrb.w	r1, [r8]
 8007f8a:	2203      	movs	r2, #3
 8007f8c:	4628      	mov	r0, r5
 8007f8e:	f7f8 f91f 	bl	80001d0 <memchr>
 8007f92:	b140      	cbz	r0, 8007fa6 <_vfiprintf_r+0x176>
 8007f94:	2340      	movs	r3, #64	; 0x40
 8007f96:	1b40      	subs	r0, r0, r5
 8007f98:	fa03 f000 	lsl.w	r0, r3, r0
 8007f9c:	9b04      	ldr	r3, [sp, #16]
 8007f9e:	4303      	orrs	r3, r0
 8007fa0:	9304      	str	r3, [sp, #16]
 8007fa2:	f108 0801 	add.w	r8, r8, #1
 8007fa6:	f898 1000 	ldrb.w	r1, [r8]
 8007faa:	4829      	ldr	r0, [pc, #164]	; (8008050 <_vfiprintf_r+0x220>)
 8007fac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007fb0:	2206      	movs	r2, #6
 8007fb2:	f108 0701 	add.w	r7, r8, #1
 8007fb6:	f7f8 f90b 	bl	80001d0 <memchr>
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d034      	beq.n	8008028 <_vfiprintf_r+0x1f8>
 8007fbe:	4b25      	ldr	r3, [pc, #148]	; (8008054 <_vfiprintf_r+0x224>)
 8007fc0:	bb03      	cbnz	r3, 8008004 <_vfiprintf_r+0x1d4>
 8007fc2:	9b03      	ldr	r3, [sp, #12]
 8007fc4:	3307      	adds	r3, #7
 8007fc6:	f023 0307 	bic.w	r3, r3, #7
 8007fca:	3308      	adds	r3, #8
 8007fcc:	9303      	str	r3, [sp, #12]
 8007fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd0:	444b      	add	r3, r9
 8007fd2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fd4:	e74c      	b.n	8007e70 <_vfiprintf_r+0x40>
 8007fd6:	fb00 3202 	mla	r2, r0, r2, r3
 8007fda:	2101      	movs	r1, #1
 8007fdc:	e786      	b.n	8007eec <_vfiprintf_r+0xbc>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	9305      	str	r3, [sp, #20]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	250a      	movs	r5, #10
 8007fe6:	4688      	mov	r8, r1
 8007fe8:	3101      	adds	r1, #1
 8007fea:	f898 2000 	ldrb.w	r2, [r8]
 8007fee:	3a30      	subs	r2, #48	; 0x30
 8007ff0:	2a09      	cmp	r2, #9
 8007ff2:	d903      	bls.n	8007ffc <_vfiprintf_r+0x1cc>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d0c5      	beq.n	8007f84 <_vfiprintf_r+0x154>
 8007ff8:	9005      	str	r0, [sp, #20]
 8007ffa:	e7c3      	b.n	8007f84 <_vfiprintf_r+0x154>
 8007ffc:	fb05 2000 	mla	r0, r5, r0, r2
 8008000:	2301      	movs	r3, #1
 8008002:	e7f0      	b.n	8007fe6 <_vfiprintf_r+0x1b6>
 8008004:	ab03      	add	r3, sp, #12
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	4622      	mov	r2, r4
 800800a:	4b13      	ldr	r3, [pc, #76]	; (8008058 <_vfiprintf_r+0x228>)
 800800c:	a904      	add	r1, sp, #16
 800800e:	4630      	mov	r0, r6
 8008010:	f3af 8000 	nop.w
 8008014:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008018:	4681      	mov	r9, r0
 800801a:	d1d8      	bne.n	8007fce <_vfiprintf_r+0x19e>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	065b      	lsls	r3, r3, #25
 8008020:	f53f af7d 	bmi.w	8007f1e <_vfiprintf_r+0xee>
 8008024:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008026:	e77c      	b.n	8007f22 <_vfiprintf_r+0xf2>
 8008028:	ab03      	add	r3, sp, #12
 800802a:	9300      	str	r3, [sp, #0]
 800802c:	4622      	mov	r2, r4
 800802e:	4b0a      	ldr	r3, [pc, #40]	; (8008058 <_vfiprintf_r+0x228>)
 8008030:	a904      	add	r1, sp, #16
 8008032:	4630      	mov	r0, r6
 8008034:	f000 f888 	bl	8008148 <_printf_i>
 8008038:	e7ec      	b.n	8008014 <_vfiprintf_r+0x1e4>
 800803a:	bf00      	nop
 800803c:	08008830 	.word	0x08008830
 8008040:	08008874 	.word	0x08008874
 8008044:	08008850 	.word	0x08008850
 8008048:	08008810 	.word	0x08008810
 800804c:	0800887a 	.word	0x0800887a
 8008050:	0800887e 	.word	0x0800887e
 8008054:	00000000 	.word	0x00000000
 8008058:	08007e0d 	.word	0x08007e0d

0800805c <_printf_common>:
 800805c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008060:	4691      	mov	r9, r2
 8008062:	461f      	mov	r7, r3
 8008064:	688a      	ldr	r2, [r1, #8]
 8008066:	690b      	ldr	r3, [r1, #16]
 8008068:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800806c:	4293      	cmp	r3, r2
 800806e:	bfb8      	it	lt
 8008070:	4613      	movlt	r3, r2
 8008072:	f8c9 3000 	str.w	r3, [r9]
 8008076:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800807a:	4606      	mov	r6, r0
 800807c:	460c      	mov	r4, r1
 800807e:	b112      	cbz	r2, 8008086 <_printf_common+0x2a>
 8008080:	3301      	adds	r3, #1
 8008082:	f8c9 3000 	str.w	r3, [r9]
 8008086:	6823      	ldr	r3, [r4, #0]
 8008088:	0699      	lsls	r1, r3, #26
 800808a:	bf42      	ittt	mi
 800808c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008090:	3302      	addmi	r3, #2
 8008092:	f8c9 3000 	strmi.w	r3, [r9]
 8008096:	6825      	ldr	r5, [r4, #0]
 8008098:	f015 0506 	ands.w	r5, r5, #6
 800809c:	d107      	bne.n	80080ae <_printf_common+0x52>
 800809e:	f104 0a19 	add.w	sl, r4, #25
 80080a2:	68e3      	ldr	r3, [r4, #12]
 80080a4:	f8d9 2000 	ldr.w	r2, [r9]
 80080a8:	1a9b      	subs	r3, r3, r2
 80080aa:	429d      	cmp	r5, r3
 80080ac:	db29      	blt.n	8008102 <_printf_common+0xa6>
 80080ae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80080b2:	6822      	ldr	r2, [r4, #0]
 80080b4:	3300      	adds	r3, #0
 80080b6:	bf18      	it	ne
 80080b8:	2301      	movne	r3, #1
 80080ba:	0692      	lsls	r2, r2, #26
 80080bc:	d42e      	bmi.n	800811c <_printf_common+0xc0>
 80080be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80080c2:	4639      	mov	r1, r7
 80080c4:	4630      	mov	r0, r6
 80080c6:	47c0      	blx	r8
 80080c8:	3001      	adds	r0, #1
 80080ca:	d021      	beq.n	8008110 <_printf_common+0xb4>
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	68e5      	ldr	r5, [r4, #12]
 80080d0:	f8d9 2000 	ldr.w	r2, [r9]
 80080d4:	f003 0306 	and.w	r3, r3, #6
 80080d8:	2b04      	cmp	r3, #4
 80080da:	bf08      	it	eq
 80080dc:	1aad      	subeq	r5, r5, r2
 80080de:	68a3      	ldr	r3, [r4, #8]
 80080e0:	6922      	ldr	r2, [r4, #16]
 80080e2:	bf0c      	ite	eq
 80080e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080e8:	2500      	movne	r5, #0
 80080ea:	4293      	cmp	r3, r2
 80080ec:	bfc4      	itt	gt
 80080ee:	1a9b      	subgt	r3, r3, r2
 80080f0:	18ed      	addgt	r5, r5, r3
 80080f2:	f04f 0900 	mov.w	r9, #0
 80080f6:	341a      	adds	r4, #26
 80080f8:	454d      	cmp	r5, r9
 80080fa:	d11b      	bne.n	8008134 <_printf_common+0xd8>
 80080fc:	2000      	movs	r0, #0
 80080fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008102:	2301      	movs	r3, #1
 8008104:	4652      	mov	r2, sl
 8008106:	4639      	mov	r1, r7
 8008108:	4630      	mov	r0, r6
 800810a:	47c0      	blx	r8
 800810c:	3001      	adds	r0, #1
 800810e:	d103      	bne.n	8008118 <_printf_common+0xbc>
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008118:	3501      	adds	r5, #1
 800811a:	e7c2      	b.n	80080a2 <_printf_common+0x46>
 800811c:	18e1      	adds	r1, r4, r3
 800811e:	1c5a      	adds	r2, r3, #1
 8008120:	2030      	movs	r0, #48	; 0x30
 8008122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008126:	4422      	add	r2, r4
 8008128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800812c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008130:	3302      	adds	r3, #2
 8008132:	e7c4      	b.n	80080be <_printf_common+0x62>
 8008134:	2301      	movs	r3, #1
 8008136:	4622      	mov	r2, r4
 8008138:	4639      	mov	r1, r7
 800813a:	4630      	mov	r0, r6
 800813c:	47c0      	blx	r8
 800813e:	3001      	adds	r0, #1
 8008140:	d0e6      	beq.n	8008110 <_printf_common+0xb4>
 8008142:	f109 0901 	add.w	r9, r9, #1
 8008146:	e7d7      	b.n	80080f8 <_printf_common+0x9c>

08008148 <_printf_i>:
 8008148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800814c:	4617      	mov	r7, r2
 800814e:	7e0a      	ldrb	r2, [r1, #24]
 8008150:	b085      	sub	sp, #20
 8008152:	2a6e      	cmp	r2, #110	; 0x6e
 8008154:	4698      	mov	r8, r3
 8008156:	4606      	mov	r6, r0
 8008158:	460c      	mov	r4, r1
 800815a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800815c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8008160:	f000 80bc 	beq.w	80082dc <_printf_i+0x194>
 8008164:	d81a      	bhi.n	800819c <_printf_i+0x54>
 8008166:	2a63      	cmp	r2, #99	; 0x63
 8008168:	d02e      	beq.n	80081c8 <_printf_i+0x80>
 800816a:	d80a      	bhi.n	8008182 <_printf_i+0x3a>
 800816c:	2a00      	cmp	r2, #0
 800816e:	f000 80c8 	beq.w	8008302 <_printf_i+0x1ba>
 8008172:	2a58      	cmp	r2, #88	; 0x58
 8008174:	f000 808a 	beq.w	800828c <_printf_i+0x144>
 8008178:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800817c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008180:	e02a      	b.n	80081d8 <_printf_i+0x90>
 8008182:	2a64      	cmp	r2, #100	; 0x64
 8008184:	d001      	beq.n	800818a <_printf_i+0x42>
 8008186:	2a69      	cmp	r2, #105	; 0x69
 8008188:	d1f6      	bne.n	8008178 <_printf_i+0x30>
 800818a:	6821      	ldr	r1, [r4, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008192:	d023      	beq.n	80081dc <_printf_i+0x94>
 8008194:	1d11      	adds	r1, r2, #4
 8008196:	6019      	str	r1, [r3, #0]
 8008198:	6813      	ldr	r3, [r2, #0]
 800819a:	e027      	b.n	80081ec <_printf_i+0xa4>
 800819c:	2a73      	cmp	r2, #115	; 0x73
 800819e:	f000 80b4 	beq.w	800830a <_printf_i+0x1c2>
 80081a2:	d808      	bhi.n	80081b6 <_printf_i+0x6e>
 80081a4:	2a6f      	cmp	r2, #111	; 0x6f
 80081a6:	d02a      	beq.n	80081fe <_printf_i+0xb6>
 80081a8:	2a70      	cmp	r2, #112	; 0x70
 80081aa:	d1e5      	bne.n	8008178 <_printf_i+0x30>
 80081ac:	680a      	ldr	r2, [r1, #0]
 80081ae:	f042 0220 	orr.w	r2, r2, #32
 80081b2:	600a      	str	r2, [r1, #0]
 80081b4:	e003      	b.n	80081be <_printf_i+0x76>
 80081b6:	2a75      	cmp	r2, #117	; 0x75
 80081b8:	d021      	beq.n	80081fe <_printf_i+0xb6>
 80081ba:	2a78      	cmp	r2, #120	; 0x78
 80081bc:	d1dc      	bne.n	8008178 <_printf_i+0x30>
 80081be:	2278      	movs	r2, #120	; 0x78
 80081c0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80081c4:	496e      	ldr	r1, [pc, #440]	; (8008380 <_printf_i+0x238>)
 80081c6:	e064      	b.n	8008292 <_printf_i+0x14a>
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80081ce:	1d11      	adds	r1, r2, #4
 80081d0:	6019      	str	r1, [r3, #0]
 80081d2:	6813      	ldr	r3, [r2, #0]
 80081d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081d8:	2301      	movs	r3, #1
 80081da:	e0a3      	b.n	8008324 <_printf_i+0x1dc>
 80081dc:	f011 0f40 	tst.w	r1, #64	; 0x40
 80081e0:	f102 0104 	add.w	r1, r2, #4
 80081e4:	6019      	str	r1, [r3, #0]
 80081e6:	d0d7      	beq.n	8008198 <_printf_i+0x50>
 80081e8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	da03      	bge.n	80081f8 <_printf_i+0xb0>
 80081f0:	222d      	movs	r2, #45	; 0x2d
 80081f2:	425b      	negs	r3, r3
 80081f4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80081f8:	4962      	ldr	r1, [pc, #392]	; (8008384 <_printf_i+0x23c>)
 80081fa:	220a      	movs	r2, #10
 80081fc:	e017      	b.n	800822e <_printf_i+0xe6>
 80081fe:	6820      	ldr	r0, [r4, #0]
 8008200:	6819      	ldr	r1, [r3, #0]
 8008202:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008206:	d003      	beq.n	8008210 <_printf_i+0xc8>
 8008208:	1d08      	adds	r0, r1, #4
 800820a:	6018      	str	r0, [r3, #0]
 800820c:	680b      	ldr	r3, [r1, #0]
 800820e:	e006      	b.n	800821e <_printf_i+0xd6>
 8008210:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008214:	f101 0004 	add.w	r0, r1, #4
 8008218:	6018      	str	r0, [r3, #0]
 800821a:	d0f7      	beq.n	800820c <_printf_i+0xc4>
 800821c:	880b      	ldrh	r3, [r1, #0]
 800821e:	4959      	ldr	r1, [pc, #356]	; (8008384 <_printf_i+0x23c>)
 8008220:	2a6f      	cmp	r2, #111	; 0x6f
 8008222:	bf14      	ite	ne
 8008224:	220a      	movne	r2, #10
 8008226:	2208      	moveq	r2, #8
 8008228:	2000      	movs	r0, #0
 800822a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800822e:	6865      	ldr	r5, [r4, #4]
 8008230:	60a5      	str	r5, [r4, #8]
 8008232:	2d00      	cmp	r5, #0
 8008234:	f2c0 809c 	blt.w	8008370 <_printf_i+0x228>
 8008238:	6820      	ldr	r0, [r4, #0]
 800823a:	f020 0004 	bic.w	r0, r0, #4
 800823e:	6020      	str	r0, [r4, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d13f      	bne.n	80082c4 <_printf_i+0x17c>
 8008244:	2d00      	cmp	r5, #0
 8008246:	f040 8095 	bne.w	8008374 <_printf_i+0x22c>
 800824a:	4675      	mov	r5, lr
 800824c:	2a08      	cmp	r2, #8
 800824e:	d10b      	bne.n	8008268 <_printf_i+0x120>
 8008250:	6823      	ldr	r3, [r4, #0]
 8008252:	07da      	lsls	r2, r3, #31
 8008254:	d508      	bpl.n	8008268 <_printf_i+0x120>
 8008256:	6923      	ldr	r3, [r4, #16]
 8008258:	6862      	ldr	r2, [r4, #4]
 800825a:	429a      	cmp	r2, r3
 800825c:	bfde      	ittt	le
 800825e:	2330      	movle	r3, #48	; 0x30
 8008260:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008264:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008268:	ebae 0305 	sub.w	r3, lr, r5
 800826c:	6123      	str	r3, [r4, #16]
 800826e:	f8cd 8000 	str.w	r8, [sp]
 8008272:	463b      	mov	r3, r7
 8008274:	aa03      	add	r2, sp, #12
 8008276:	4621      	mov	r1, r4
 8008278:	4630      	mov	r0, r6
 800827a:	f7ff feef 	bl	800805c <_printf_common>
 800827e:	3001      	adds	r0, #1
 8008280:	d155      	bne.n	800832e <_printf_i+0x1e6>
 8008282:	f04f 30ff 	mov.w	r0, #4294967295
 8008286:	b005      	add	sp, #20
 8008288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800828c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008290:	493c      	ldr	r1, [pc, #240]	; (8008384 <_printf_i+0x23c>)
 8008292:	6822      	ldr	r2, [r4, #0]
 8008294:	6818      	ldr	r0, [r3, #0]
 8008296:	f012 0f80 	tst.w	r2, #128	; 0x80
 800829a:	f100 0504 	add.w	r5, r0, #4
 800829e:	601d      	str	r5, [r3, #0]
 80082a0:	d001      	beq.n	80082a6 <_printf_i+0x15e>
 80082a2:	6803      	ldr	r3, [r0, #0]
 80082a4:	e002      	b.n	80082ac <_printf_i+0x164>
 80082a6:	0655      	lsls	r5, r2, #25
 80082a8:	d5fb      	bpl.n	80082a2 <_printf_i+0x15a>
 80082aa:	8803      	ldrh	r3, [r0, #0]
 80082ac:	07d0      	lsls	r0, r2, #31
 80082ae:	bf44      	itt	mi
 80082b0:	f042 0220 	orrmi.w	r2, r2, #32
 80082b4:	6022      	strmi	r2, [r4, #0]
 80082b6:	b91b      	cbnz	r3, 80082c0 <_printf_i+0x178>
 80082b8:	6822      	ldr	r2, [r4, #0]
 80082ba:	f022 0220 	bic.w	r2, r2, #32
 80082be:	6022      	str	r2, [r4, #0]
 80082c0:	2210      	movs	r2, #16
 80082c2:	e7b1      	b.n	8008228 <_printf_i+0xe0>
 80082c4:	4675      	mov	r5, lr
 80082c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80082ca:	fb02 3310 	mls	r3, r2, r0, r3
 80082ce:	5ccb      	ldrb	r3, [r1, r3]
 80082d0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80082d4:	4603      	mov	r3, r0
 80082d6:	2800      	cmp	r0, #0
 80082d8:	d1f5      	bne.n	80082c6 <_printf_i+0x17e>
 80082da:	e7b7      	b.n	800824c <_printf_i+0x104>
 80082dc:	6808      	ldr	r0, [r1, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	6949      	ldr	r1, [r1, #20]
 80082e2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80082e6:	d004      	beq.n	80082f2 <_printf_i+0x1aa>
 80082e8:	1d10      	adds	r0, r2, #4
 80082ea:	6018      	str	r0, [r3, #0]
 80082ec:	6813      	ldr	r3, [r2, #0]
 80082ee:	6019      	str	r1, [r3, #0]
 80082f0:	e007      	b.n	8008302 <_printf_i+0x1ba>
 80082f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80082f6:	f102 0004 	add.w	r0, r2, #4
 80082fa:	6018      	str	r0, [r3, #0]
 80082fc:	6813      	ldr	r3, [r2, #0]
 80082fe:	d0f6      	beq.n	80082ee <_printf_i+0x1a6>
 8008300:	8019      	strh	r1, [r3, #0]
 8008302:	2300      	movs	r3, #0
 8008304:	6123      	str	r3, [r4, #16]
 8008306:	4675      	mov	r5, lr
 8008308:	e7b1      	b.n	800826e <_printf_i+0x126>
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	1d11      	adds	r1, r2, #4
 800830e:	6019      	str	r1, [r3, #0]
 8008310:	6815      	ldr	r5, [r2, #0]
 8008312:	6862      	ldr	r2, [r4, #4]
 8008314:	2100      	movs	r1, #0
 8008316:	4628      	mov	r0, r5
 8008318:	f7f7 ff5a 	bl	80001d0 <memchr>
 800831c:	b108      	cbz	r0, 8008322 <_printf_i+0x1da>
 800831e:	1b40      	subs	r0, r0, r5
 8008320:	6060      	str	r0, [r4, #4]
 8008322:	6863      	ldr	r3, [r4, #4]
 8008324:	6123      	str	r3, [r4, #16]
 8008326:	2300      	movs	r3, #0
 8008328:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800832c:	e79f      	b.n	800826e <_printf_i+0x126>
 800832e:	6923      	ldr	r3, [r4, #16]
 8008330:	462a      	mov	r2, r5
 8008332:	4639      	mov	r1, r7
 8008334:	4630      	mov	r0, r6
 8008336:	47c0      	blx	r8
 8008338:	3001      	adds	r0, #1
 800833a:	d0a2      	beq.n	8008282 <_printf_i+0x13a>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	079b      	lsls	r3, r3, #30
 8008340:	d507      	bpl.n	8008352 <_printf_i+0x20a>
 8008342:	2500      	movs	r5, #0
 8008344:	f104 0919 	add.w	r9, r4, #25
 8008348:	68e3      	ldr	r3, [r4, #12]
 800834a:	9a03      	ldr	r2, [sp, #12]
 800834c:	1a9b      	subs	r3, r3, r2
 800834e:	429d      	cmp	r5, r3
 8008350:	db05      	blt.n	800835e <_printf_i+0x216>
 8008352:	68e0      	ldr	r0, [r4, #12]
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	4298      	cmp	r0, r3
 8008358:	bfb8      	it	lt
 800835a:	4618      	movlt	r0, r3
 800835c:	e793      	b.n	8008286 <_printf_i+0x13e>
 800835e:	2301      	movs	r3, #1
 8008360:	464a      	mov	r2, r9
 8008362:	4639      	mov	r1, r7
 8008364:	4630      	mov	r0, r6
 8008366:	47c0      	blx	r8
 8008368:	3001      	adds	r0, #1
 800836a:	d08a      	beq.n	8008282 <_printf_i+0x13a>
 800836c:	3501      	adds	r5, #1
 800836e:	e7eb      	b.n	8008348 <_printf_i+0x200>
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1a7      	bne.n	80082c4 <_printf_i+0x17c>
 8008374:	780b      	ldrb	r3, [r1, #0]
 8008376:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800837a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800837e:	e765      	b.n	800824c <_printf_i+0x104>
 8008380:	08008896 	.word	0x08008896
 8008384:	08008885 	.word	0x08008885

08008388 <_putc_r>:
 8008388:	b570      	push	{r4, r5, r6, lr}
 800838a:	460d      	mov	r5, r1
 800838c:	4614      	mov	r4, r2
 800838e:	4606      	mov	r6, r0
 8008390:	b118      	cbz	r0, 800839a <_putc_r+0x12>
 8008392:	6983      	ldr	r3, [r0, #24]
 8008394:	b90b      	cbnz	r3, 800839a <_putc_r+0x12>
 8008396:	f7ff f975 	bl	8007684 <__sinit>
 800839a:	4b13      	ldr	r3, [pc, #76]	; (80083e8 <_putc_r+0x60>)
 800839c:	429c      	cmp	r4, r3
 800839e:	d112      	bne.n	80083c6 <_putc_r+0x3e>
 80083a0:	6874      	ldr	r4, [r6, #4]
 80083a2:	68a3      	ldr	r3, [r4, #8]
 80083a4:	3b01      	subs	r3, #1
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	60a3      	str	r3, [r4, #8]
 80083aa:	da16      	bge.n	80083da <_putc_r+0x52>
 80083ac:	69a2      	ldr	r2, [r4, #24]
 80083ae:	4293      	cmp	r3, r2
 80083b0:	db02      	blt.n	80083b8 <_putc_r+0x30>
 80083b2:	b2eb      	uxtb	r3, r5
 80083b4:	2b0a      	cmp	r3, #10
 80083b6:	d110      	bne.n	80083da <_putc_r+0x52>
 80083b8:	4622      	mov	r2, r4
 80083ba:	4629      	mov	r1, r5
 80083bc:	4630      	mov	r0, r6
 80083be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80083c2:	f7ff bbb1 	b.w	8007b28 <__swbuf_r>
 80083c6:	4b09      	ldr	r3, [pc, #36]	; (80083ec <_putc_r+0x64>)
 80083c8:	429c      	cmp	r4, r3
 80083ca:	d101      	bne.n	80083d0 <_putc_r+0x48>
 80083cc:	68b4      	ldr	r4, [r6, #8]
 80083ce:	e7e8      	b.n	80083a2 <_putc_r+0x1a>
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <_putc_r+0x68>)
 80083d2:	429c      	cmp	r4, r3
 80083d4:	bf08      	it	eq
 80083d6:	68f4      	ldreq	r4, [r6, #12]
 80083d8:	e7e3      	b.n	80083a2 <_putc_r+0x1a>
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	1c5a      	adds	r2, r3, #1
 80083de:	6022      	str	r2, [r4, #0]
 80083e0:	701d      	strb	r5, [r3, #0]
 80083e2:	b2e8      	uxtb	r0, r5
 80083e4:	bd70      	pop	{r4, r5, r6, pc}
 80083e6:	bf00      	nop
 80083e8:	08008830 	.word	0x08008830
 80083ec:	08008850 	.word	0x08008850
 80083f0:	08008810 	.word	0x08008810

080083f4 <_read_r>:
 80083f4:	b538      	push	{r3, r4, r5, lr}
 80083f6:	4c07      	ldr	r4, [pc, #28]	; (8008414 <_read_r+0x20>)
 80083f8:	4605      	mov	r5, r0
 80083fa:	4608      	mov	r0, r1
 80083fc:	4611      	mov	r1, r2
 80083fe:	2200      	movs	r2, #0
 8008400:	6022      	str	r2, [r4, #0]
 8008402:	461a      	mov	r2, r3
 8008404:	f7fe ffa4 	bl	8007350 <_read>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_read_r+0x1e>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	b103      	cbz	r3, 8008412 <_read_r+0x1e>
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	20001614 	.word	0x20001614

08008418 <_fstat_r>:
 8008418:	b538      	push	{r3, r4, r5, lr}
 800841a:	4c07      	ldr	r4, [pc, #28]	; (8008438 <_fstat_r+0x20>)
 800841c:	2300      	movs	r3, #0
 800841e:	4605      	mov	r5, r0
 8008420:	4608      	mov	r0, r1
 8008422:	4611      	mov	r1, r2
 8008424:	6023      	str	r3, [r4, #0]
 8008426:	f7fe ffcc 	bl	80073c2 <_fstat>
 800842a:	1c43      	adds	r3, r0, #1
 800842c:	d102      	bne.n	8008434 <_fstat_r+0x1c>
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	b103      	cbz	r3, 8008434 <_fstat_r+0x1c>
 8008432:	602b      	str	r3, [r5, #0]
 8008434:	bd38      	pop	{r3, r4, r5, pc}
 8008436:	bf00      	nop
 8008438:	20001614 	.word	0x20001614

0800843c <_isatty_r>:
 800843c:	b538      	push	{r3, r4, r5, lr}
 800843e:	4c06      	ldr	r4, [pc, #24]	; (8008458 <_isatty_r+0x1c>)
 8008440:	2300      	movs	r3, #0
 8008442:	4605      	mov	r5, r0
 8008444:	4608      	mov	r0, r1
 8008446:	6023      	str	r3, [r4, #0]
 8008448:	f7fe ffc0 	bl	80073cc <_isatty>
 800844c:	1c43      	adds	r3, r0, #1
 800844e:	d102      	bne.n	8008456 <_isatty_r+0x1a>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	b103      	cbz	r3, 8008456 <_isatty_r+0x1a>
 8008454:	602b      	str	r3, [r5, #0]
 8008456:	bd38      	pop	{r3, r4, r5, pc}
 8008458:	20001614 	.word	0x20001614

0800845c <abort>:
 800845c:	b508      	push	{r3, lr}
 800845e:	2006      	movs	r0, #6
 8008460:	f000 f82c 	bl	80084bc <raise>
 8008464:	2001      	movs	r0, #1
 8008466:	f7fe ff6d 	bl	8007344 <_exit>

0800846a <_raise_r>:
 800846a:	291f      	cmp	r1, #31
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4604      	mov	r4, r0
 8008470:	460d      	mov	r5, r1
 8008472:	d904      	bls.n	800847e <_raise_r+0x14>
 8008474:	2316      	movs	r3, #22
 8008476:	6003      	str	r3, [r0, #0]
 8008478:	f04f 30ff 	mov.w	r0, #4294967295
 800847c:	bd38      	pop	{r3, r4, r5, pc}
 800847e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008480:	b112      	cbz	r2, 8008488 <_raise_r+0x1e>
 8008482:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008486:	b94b      	cbnz	r3, 800849c <_raise_r+0x32>
 8008488:	4620      	mov	r0, r4
 800848a:	f000 f831 	bl	80084f0 <_getpid_r>
 800848e:	462a      	mov	r2, r5
 8008490:	4601      	mov	r1, r0
 8008492:	4620      	mov	r0, r4
 8008494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008498:	f000 b818 	b.w	80084cc <_kill_r>
 800849c:	2b01      	cmp	r3, #1
 800849e:	d00a      	beq.n	80084b6 <_raise_r+0x4c>
 80084a0:	1c59      	adds	r1, r3, #1
 80084a2:	d103      	bne.n	80084ac <_raise_r+0x42>
 80084a4:	2316      	movs	r3, #22
 80084a6:	6003      	str	r3, [r0, #0]
 80084a8:	2001      	movs	r0, #1
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	2400      	movs	r4, #0
 80084ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084b2:	4628      	mov	r0, r5
 80084b4:	4798      	blx	r3
 80084b6:	2000      	movs	r0, #0
 80084b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080084bc <raise>:
 80084bc:	4b02      	ldr	r3, [pc, #8]	; (80084c8 <raise+0xc>)
 80084be:	4601      	mov	r1, r0
 80084c0:	6818      	ldr	r0, [r3, #0]
 80084c2:	f7ff bfd2 	b.w	800846a <_raise_r>
 80084c6:	bf00      	nop
 80084c8:	20000020 	.word	0x20000020

080084cc <_kill_r>:
 80084cc:	b538      	push	{r3, r4, r5, lr}
 80084ce:	4c07      	ldr	r4, [pc, #28]	; (80084ec <_kill_r+0x20>)
 80084d0:	2300      	movs	r3, #0
 80084d2:	4605      	mov	r5, r0
 80084d4:	4608      	mov	r0, r1
 80084d6:	4611      	mov	r1, r2
 80084d8:	6023      	str	r3, [r4, #0]
 80084da:	f7fe ff2b 	bl	8007334 <_kill>
 80084de:	1c43      	adds	r3, r0, #1
 80084e0:	d102      	bne.n	80084e8 <_kill_r+0x1c>
 80084e2:	6823      	ldr	r3, [r4, #0]
 80084e4:	b103      	cbz	r3, 80084e8 <_kill_r+0x1c>
 80084e6:	602b      	str	r3, [r5, #0]
 80084e8:	bd38      	pop	{r3, r4, r5, pc}
 80084ea:	bf00      	nop
 80084ec:	20001614 	.word	0x20001614

080084f0 <_getpid_r>:
 80084f0:	f7fe bf1e 	b.w	8007330 <_getpid>

080084f4 <_init>:
 80084f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f6:	bf00      	nop
 80084f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084fa:	bc08      	pop	{r3}
 80084fc:	469e      	mov	lr, r3
 80084fe:	4770      	bx	lr

08008500 <_fini>:
 8008500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008502:	bf00      	nop
 8008504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008506:	bc08      	pop	{r3}
 8008508:	469e      	mov	lr, r3
 800850a:	4770      	bx	lr
