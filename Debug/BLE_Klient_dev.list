
BLE_Klient_dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000718c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  0800731c  0800731c  0001731c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    0000006c  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000108  080076e4  080076e4  000176e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  080077ec  080077ec  000177ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  080077f0  080077f0  000177f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         00000084  20000000  080077f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000037a4  20000084  08007878  00020084  2**2
                  ALLOC
  9 ._user_heap_stack 00001400  20003828  08007878  00023828  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 11 .debug_info   000376b0  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00006024  00000000  00000000  00057764  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000143df  00000000  00000000  0005d788  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a90  00000000  00000000  00071b68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f58  00000000  00000000  000735f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00010d4d  00000000  00000000  00075550  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000b40a  00000000  00000000  0008629d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000916a7  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005874  00000000  00000000  00091724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007304 	.word	0x08007304

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08007304 	.word	0x08007304

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f001 b8f6 	b.w	8001474 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	468c      	mov	ip, r1
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	9e08      	ldr	r6, [sp, #32]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d151      	bne.n	8000354 <__udivmoddi4+0xb4>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d96d      	bls.n	8000392 <__udivmoddi4+0xf2>
 80002b6:	fab2 fe82 	clz	lr, r2
 80002ba:	f1be 0f00 	cmp.w	lr, #0
 80002be:	d00b      	beq.n	80002d8 <__udivmoddi4+0x38>
 80002c0:	f1ce 0c20 	rsb	ip, lr, #32
 80002c4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002cc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002d0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002d4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002d8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002dc:	0c25      	lsrs	r5, r4, #16
 80002de:	fbbc f8fa 	udiv	r8, ip, sl
 80002e2:	fa1f f987 	uxth.w	r9, r7
 80002e6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002ea:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002ee:	fb08 f309 	mul.w	r3, r8, r9
 80002f2:	42ab      	cmp	r3, r5
 80002f4:	d90a      	bls.n	800030c <__udivmoddi4+0x6c>
 80002f6:	19ed      	adds	r5, r5, r7
 80002f8:	f108 32ff 	add.w	r2, r8, #4294967295
 80002fc:	f080 8123 	bcs.w	8000546 <__udivmoddi4+0x2a6>
 8000300:	42ab      	cmp	r3, r5
 8000302:	f240 8120 	bls.w	8000546 <__udivmoddi4+0x2a6>
 8000306:	f1a8 0802 	sub.w	r8, r8, #2
 800030a:	443d      	add	r5, r7
 800030c:	1aed      	subs	r5, r5, r3
 800030e:	b2a4      	uxth	r4, r4
 8000310:	fbb5 f0fa 	udiv	r0, r5, sl
 8000314:	fb0a 5510 	mls	r5, sl, r0, r5
 8000318:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800031c:	fb00 f909 	mul.w	r9, r0, r9
 8000320:	45a1      	cmp	r9, r4
 8000322:	d909      	bls.n	8000338 <__udivmoddi4+0x98>
 8000324:	19e4      	adds	r4, r4, r7
 8000326:	f100 33ff 	add.w	r3, r0, #4294967295
 800032a:	f080 810a 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800032e:	45a1      	cmp	r9, r4
 8000330:	f240 8107 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000334:	3802      	subs	r0, #2
 8000336:	443c      	add	r4, r7
 8000338:	eba4 0409 	sub.w	r4, r4, r9
 800033c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000340:	2100      	movs	r1, #0
 8000342:	2e00      	cmp	r6, #0
 8000344:	d061      	beq.n	800040a <__udivmoddi4+0x16a>
 8000346:	fa24 f40e 	lsr.w	r4, r4, lr
 800034a:	2300      	movs	r3, #0
 800034c:	6034      	str	r4, [r6, #0]
 800034e:	6073      	str	r3, [r6, #4]
 8000350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000354:	428b      	cmp	r3, r1
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0xc8>
 8000358:	2e00      	cmp	r6, #0
 800035a:	d054      	beq.n	8000406 <__udivmoddi4+0x166>
 800035c:	2100      	movs	r1, #0
 800035e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000362:	4608      	mov	r0, r1
 8000364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000368:	fab3 f183 	clz	r1, r3
 800036c:	2900      	cmp	r1, #0
 800036e:	f040 808e 	bne.w	800048e <__udivmoddi4+0x1ee>
 8000372:	42ab      	cmp	r3, r5
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xdc>
 8000376:	4282      	cmp	r2, r0
 8000378:	f200 80fa 	bhi.w	8000570 <__udivmoddi4+0x2d0>
 800037c:	1a84      	subs	r4, r0, r2
 800037e:	eb65 0503 	sbc.w	r5, r5, r3
 8000382:	2001      	movs	r0, #1
 8000384:	46ac      	mov	ip, r5
 8000386:	2e00      	cmp	r6, #0
 8000388:	d03f      	beq.n	800040a <__udivmoddi4+0x16a>
 800038a:	e886 1010 	stmia.w	r6, {r4, ip}
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	b912      	cbnz	r2, 800039a <__udivmoddi4+0xfa>
 8000394:	2701      	movs	r7, #1
 8000396:	fbb7 f7f2 	udiv	r7, r7, r2
 800039a:	fab7 fe87 	clz	lr, r7
 800039e:	f1be 0f00 	cmp.w	lr, #0
 80003a2:	d134      	bne.n	800040e <__udivmoddi4+0x16e>
 80003a4:	1beb      	subs	r3, r5, r7
 80003a6:	0c3a      	lsrs	r2, r7, #16
 80003a8:	fa1f fc87 	uxth.w	ip, r7
 80003ac:	2101      	movs	r1, #1
 80003ae:	fbb3 f8f2 	udiv	r8, r3, r2
 80003b2:	0c25      	lsrs	r5, r4, #16
 80003b4:	fb02 3318 	mls	r3, r2, r8, r3
 80003b8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003bc:	fb0c f308 	mul.w	r3, ip, r8
 80003c0:	42ab      	cmp	r3, r5
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x134>
 80003c4:	19ed      	adds	r5, r5, r7
 80003c6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x132>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	f200 80d1 	bhi.w	8000574 <__udivmoddi4+0x2d4>
 80003d2:	4680      	mov	r8, r0
 80003d4:	1aed      	subs	r5, r5, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003dc:	fb02 5510 	mls	r5, r2, r0, r5
 80003e0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003e4:	fb0c fc00 	mul.w	ip, ip, r0
 80003e8:	45a4      	cmp	ip, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x15c>
 80003ec:	19e4      	adds	r4, r4, r7
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x15a>
 80003f4:	45a4      	cmp	ip, r4
 80003f6:	f200 80b8 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 040c 	sub.w	r4, r4, ip
 8000400:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000404:	e79d      	b.n	8000342 <__udivmoddi4+0xa2>
 8000406:	4631      	mov	r1, r6
 8000408:	4630      	mov	r0, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	f1ce 0420 	rsb	r4, lr, #32
 8000412:	fa05 f30e 	lsl.w	r3, r5, lr
 8000416:	fa07 f70e 	lsl.w	r7, r7, lr
 800041a:	fa20 f804 	lsr.w	r8, r0, r4
 800041e:	0c3a      	lsrs	r2, r7, #16
 8000420:	fa25 f404 	lsr.w	r4, r5, r4
 8000424:	ea48 0803 	orr.w	r8, r8, r3
 8000428:	fbb4 f1f2 	udiv	r1, r4, r2
 800042c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000430:	fb02 4411 	mls	r4, r2, r1, r4
 8000434:	fa1f fc87 	uxth.w	ip, r7
 8000438:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800043c:	fb01 f30c 	mul.w	r3, r1, ip
 8000440:	42ab      	cmp	r3, r5
 8000442:	fa00 f40e 	lsl.w	r4, r0, lr
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x1bc>
 8000448:	19ed      	adds	r5, r5, r7
 800044a:	f101 30ff 	add.w	r0, r1, #4294967295
 800044e:	f080 808a 	bcs.w	8000566 <__udivmoddi4+0x2c6>
 8000452:	42ab      	cmp	r3, r5
 8000454:	f240 8087 	bls.w	8000566 <__udivmoddi4+0x2c6>
 8000458:	3902      	subs	r1, #2
 800045a:	443d      	add	r5, r7
 800045c:	1aeb      	subs	r3, r5, r3
 800045e:	fa1f f588 	uxth.w	r5, r8
 8000462:	fbb3 f0f2 	udiv	r0, r3, r2
 8000466:	fb02 3310 	mls	r3, r2, r0, r3
 800046a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800046e:	fb00 f30c 	mul.w	r3, r0, ip
 8000472:	42ab      	cmp	r3, r5
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x1e6>
 8000476:	19ed      	adds	r5, r5, r7
 8000478:	f100 38ff 	add.w	r8, r0, #4294967295
 800047c:	d26f      	bcs.n	800055e <__udivmoddi4+0x2be>
 800047e:	42ab      	cmp	r3, r5
 8000480:	d96d      	bls.n	800055e <__udivmoddi4+0x2be>
 8000482:	3802      	subs	r0, #2
 8000484:	443d      	add	r5, r7
 8000486:	1aeb      	subs	r3, r5, r3
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	e78f      	b.n	80003ae <__udivmoddi4+0x10e>
 800048e:	f1c1 0720 	rsb	r7, r1, #32
 8000492:	fa22 f807 	lsr.w	r8, r2, r7
 8000496:	408b      	lsls	r3, r1
 8000498:	fa05 f401 	lsl.w	r4, r5, r1
 800049c:	ea48 0303 	orr.w	r3, r8, r3
 80004a0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004a4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004a8:	40fd      	lsrs	r5, r7
 80004aa:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ae:	fbb5 f9fc 	udiv	r9, r5, ip
 80004b2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004b6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ba:	fa1f f883 	uxth.w	r8, r3
 80004be:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004c2:	fb09 f408 	mul.w	r4, r9, r8
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	fa02 f201 	lsl.w	r2, r2, r1
 80004cc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x244>
 80004d2:	18ed      	adds	r5, r5, r3
 80004d4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d8:	d243      	bcs.n	8000562 <__udivmoddi4+0x2c2>
 80004da:	42ac      	cmp	r4, r5
 80004dc:	d941      	bls.n	8000562 <__udivmoddi4+0x2c2>
 80004de:	f1a9 0902 	sub.w	r9, r9, #2
 80004e2:	441d      	add	r5, r3
 80004e4:	1b2d      	subs	r5, r5, r4
 80004e6:	fa1f fe8e 	uxth.w	lr, lr
 80004ea:	fbb5 f0fc 	udiv	r0, r5, ip
 80004ee:	fb0c 5510 	mls	r5, ip, r0, r5
 80004f2:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 80004f6:	fb00 f808 	mul.w	r8, r0, r8
 80004fa:	45a0      	cmp	r8, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x26e>
 80004fe:	18e4      	adds	r4, r4, r3
 8000500:	f100 35ff 	add.w	r5, r0, #4294967295
 8000504:	d229      	bcs.n	800055a <__udivmoddi4+0x2ba>
 8000506:	45a0      	cmp	r8, r4
 8000508:	d927      	bls.n	800055a <__udivmoddi4+0x2ba>
 800050a:	3802      	subs	r0, #2
 800050c:	441c      	add	r4, r3
 800050e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000512:	eba4 0408 	sub.w	r4, r4, r8
 8000516:	fba0 8902 	umull	r8, r9, r0, r2
 800051a:	454c      	cmp	r4, r9
 800051c:	46c6      	mov	lr, r8
 800051e:	464d      	mov	r5, r9
 8000520:	d315      	bcc.n	800054e <__udivmoddi4+0x2ae>
 8000522:	d012      	beq.n	800054a <__udivmoddi4+0x2aa>
 8000524:	b156      	cbz	r6, 800053c <__udivmoddi4+0x29c>
 8000526:	ebba 030e 	subs.w	r3, sl, lr
 800052a:	eb64 0405 	sbc.w	r4, r4, r5
 800052e:	fa04 f707 	lsl.w	r7, r4, r7
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431f      	orrs	r7, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	6037      	str	r7, [r6, #0]
 800053a:	6074      	str	r4, [r6, #4]
 800053c:	2100      	movs	r1, #0
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	4618      	mov	r0, r3
 8000544:	e6f8      	b.n	8000338 <__udivmoddi4+0x98>
 8000546:	4690      	mov	r8, r2
 8000548:	e6e0      	b.n	800030c <__udivmoddi4+0x6c>
 800054a:	45c2      	cmp	sl, r8
 800054c:	d2ea      	bcs.n	8000524 <__udivmoddi4+0x284>
 800054e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000552:	eb69 0503 	sbc.w	r5, r9, r3
 8000556:	3801      	subs	r0, #1
 8000558:	e7e4      	b.n	8000524 <__udivmoddi4+0x284>
 800055a:	4628      	mov	r0, r5
 800055c:	e7d7      	b.n	800050e <__udivmoddi4+0x26e>
 800055e:	4640      	mov	r0, r8
 8000560:	e791      	b.n	8000486 <__udivmoddi4+0x1e6>
 8000562:	4681      	mov	r9, r0
 8000564:	e7be      	b.n	80004e4 <__udivmoddi4+0x244>
 8000566:	4601      	mov	r1, r0
 8000568:	e778      	b.n	800045c <__udivmoddi4+0x1bc>
 800056a:	3802      	subs	r0, #2
 800056c:	443c      	add	r4, r7
 800056e:	e745      	b.n	80003fc <__udivmoddi4+0x15c>
 8000570:	4608      	mov	r0, r1
 8000572:	e708      	b.n	8000386 <__udivmoddi4+0xe6>
 8000574:	f1a8 0802 	sub.w	r8, r8, #2
 8000578:	443d      	add	r5, r7
 800057a:	e72b      	b.n	80003d4 <__udivmoddi4+0x134>

0800057c <selfrel_offset31>:
 800057c:	6803      	ldr	r3, [r0, #0]
 800057e:	005a      	lsls	r2, r3, #1
 8000580:	bf4c      	ite	mi
 8000582:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8000586:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
 800058a:	4418      	add	r0, r3
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <search_EIT_table>:
 8000590:	b361      	cbz	r1, 80005ec <search_EIT_table+0x5c>
 8000592:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000596:	f101 3aff 	add.w	sl, r1, #4294967295
 800059a:	4690      	mov	r8, r2
 800059c:	4606      	mov	r6, r0
 800059e:	46d1      	mov	r9, sl
 80005a0:	2700      	movs	r7, #0
 80005a2:	eb07 0409 	add.w	r4, r7, r9
 80005a6:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
 80005aa:	1064      	asrs	r4, r4, #1
 80005ac:	00e5      	lsls	r5, r4, #3
 80005ae:	1971      	adds	r1, r6, r5
 80005b0:	4608      	mov	r0, r1
 80005b2:	f7ff ffe3 	bl	800057c <selfrel_offset31>
 80005b6:	45a2      	cmp	sl, r4
 80005b8:	4683      	mov	fp, r0
 80005ba:	f105 0008 	add.w	r0, r5, #8
 80005be:	4430      	add	r0, r6
 80005c0:	d009      	beq.n	80005d6 <search_EIT_table+0x46>
 80005c2:	f7ff ffdb 	bl	800057c <selfrel_offset31>
 80005c6:	45c3      	cmp	fp, r8
 80005c8:	f100 30ff 	add.w	r0, r0, #4294967295
 80005cc:	d805      	bhi.n	80005da <search_EIT_table+0x4a>
 80005ce:	4540      	cmp	r0, r8
 80005d0:	d209      	bcs.n	80005e6 <search_EIT_table+0x56>
 80005d2:	1c67      	adds	r7, r4, #1
 80005d4:	e7e5      	b.n	80005a2 <search_EIT_table+0x12>
 80005d6:	45c3      	cmp	fp, r8
 80005d8:	d905      	bls.n	80005e6 <search_EIT_table+0x56>
 80005da:	42a7      	cmp	r7, r4
 80005dc:	d002      	beq.n	80005e4 <search_EIT_table+0x54>
 80005de:	f104 39ff 	add.w	r9, r4, #4294967295
 80005e2:	e7de      	b.n	80005a2 <search_EIT_table+0x12>
 80005e4:	2100      	movs	r1, #0
 80005e6:	4608      	mov	r0, r1
 80005e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005ec:	4608      	mov	r0, r1
 80005ee:	4770      	bx	lr

080005f0 <__gnu_unwind_get_pr_addr>:
 80005f0:	2801      	cmp	r0, #1
 80005f2:	d007      	beq.n	8000604 <__gnu_unwind_get_pr_addr+0x14>
 80005f4:	2802      	cmp	r0, #2
 80005f6:	d007      	beq.n	8000608 <__gnu_unwind_get_pr_addr+0x18>
 80005f8:	4b04      	ldr	r3, [pc, #16]	; (800060c <__gnu_unwind_get_pr_addr+0x1c>)
 80005fa:	2800      	cmp	r0, #0
 80005fc:	bf0c      	ite	eq
 80005fe:	4618      	moveq	r0, r3
 8000600:	2000      	movne	r0, #0
 8000602:	4770      	bx	lr
 8000604:	4802      	ldr	r0, [pc, #8]	; (8000610 <__gnu_unwind_get_pr_addr+0x20>)
 8000606:	4770      	bx	lr
 8000608:	4802      	ldr	r0, [pc, #8]	; (8000614 <__gnu_unwind_get_pr_addr+0x24>)
 800060a:	4770      	bx	lr
 800060c:	08000cf5 	.word	0x08000cf5
 8000610:	08000cf9 	.word	0x08000cf9
 8000614:	08000cfd 	.word	0x08000cfd

08000618 <get_eit_entry>:
 8000618:	b530      	push	{r4, r5, lr}
 800061a:	4b24      	ldr	r3, [pc, #144]	; (80006ac <get_eit_entry+0x94>)
 800061c:	b083      	sub	sp, #12
 800061e:	4604      	mov	r4, r0
 8000620:	1e8d      	subs	r5, r1, #2
 8000622:	b37b      	cbz	r3, 8000684 <get_eit_entry+0x6c>
 8000624:	a901      	add	r1, sp, #4
 8000626:	4628      	mov	r0, r5
 8000628:	f3af 8000 	nop.w
 800062c:	b320      	cbz	r0, 8000678 <get_eit_entry+0x60>
 800062e:	9901      	ldr	r1, [sp, #4]
 8000630:	462a      	mov	r2, r5
 8000632:	f7ff ffad 	bl	8000590 <search_EIT_table>
 8000636:	4601      	mov	r1, r0
 8000638:	b1f0      	cbz	r0, 8000678 <get_eit_entry+0x60>
 800063a:	f7ff ff9f 	bl	800057c <selfrel_offset31>
 800063e:	684b      	ldr	r3, [r1, #4]
 8000640:	64a0      	str	r0, [r4, #72]	; 0x48
 8000642:	2b01      	cmp	r3, #1
 8000644:	d012      	beq.n	800066c <get_eit_entry+0x54>
 8000646:	2b00      	cmp	r3, #0
 8000648:	f101 0004 	add.w	r0, r1, #4
 800064c:	db20      	blt.n	8000690 <get_eit_entry+0x78>
 800064e:	f7ff ff95 	bl	800057c <selfrel_offset31>
 8000652:	2300      	movs	r3, #0
 8000654:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000656:	6523      	str	r3, [r4, #80]	; 0x50
 8000658:	6803      	ldr	r3, [r0, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	db1c      	blt.n	8000698 <get_eit_entry+0x80>
 800065e:	f7ff ff8d 	bl	800057c <selfrel_offset31>
 8000662:	2300      	movs	r3, #0
 8000664:	6120      	str	r0, [r4, #16]
 8000666:	4618      	mov	r0, r3
 8000668:	b003      	add	sp, #12
 800066a:	bd30      	pop	{r4, r5, pc}
 800066c:	2300      	movs	r3, #0
 800066e:	6123      	str	r3, [r4, #16]
 8000670:	2305      	movs	r3, #5
 8000672:	4618      	mov	r0, r3
 8000674:	b003      	add	sp, #12
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	2300      	movs	r3, #0
 800067a:	6123      	str	r3, [r4, #16]
 800067c:	2309      	movs	r3, #9
 800067e:	4618      	mov	r0, r3
 8000680:	b003      	add	sp, #12
 8000682:	bd30      	pop	{r4, r5, pc}
 8000684:	490a      	ldr	r1, [pc, #40]	; (80006b0 <get_eit_entry+0x98>)
 8000686:	480b      	ldr	r0, [pc, #44]	; (80006b4 <get_eit_entry+0x9c>)
 8000688:	1a09      	subs	r1, r1, r0
 800068a:	10c9      	asrs	r1, r1, #3
 800068c:	9101      	str	r1, [sp, #4]
 800068e:	e7cf      	b.n	8000630 <get_eit_entry+0x18>
 8000690:	2301      	movs	r3, #1
 8000692:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000694:	6523      	str	r3, [r4, #80]	; 0x50
 8000696:	e7df      	b.n	8000658 <get_eit_entry+0x40>
 8000698:	f3c3 6003 	ubfx	r0, r3, #24, #4
 800069c:	f7ff ffa8 	bl	80005f0 <__gnu_unwind_get_pr_addr>
 80006a0:	2800      	cmp	r0, #0
 80006a2:	6120      	str	r0, [r4, #16]
 80006a4:	bf14      	ite	ne
 80006a6:	2300      	movne	r3, #0
 80006a8:	2309      	moveq	r3, #9
 80006aa:	e7dc      	b.n	8000666 <get_eit_entry+0x4e>
 80006ac:	00000000 	.word	0x00000000
 80006b0:	080077ec 	.word	0x080077ec
 80006b4:	080076e4 	.word	0x080076e4

080006b8 <restore_non_core_regs>:
 80006b8:	6803      	ldr	r3, [r0, #0]
 80006ba:	07da      	lsls	r2, r3, #31
 80006bc:	b510      	push	{r4, lr}
 80006be:	4604      	mov	r4, r0
 80006c0:	d406      	bmi.n	80006d0 <restore_non_core_regs+0x18>
 80006c2:	079b      	lsls	r3, r3, #30
 80006c4:	f100 0048 	add.w	r0, r0, #72	; 0x48
 80006c8:	d509      	bpl.n	80006de <restore_non_core_regs+0x26>
 80006ca:	f000 fc51 	bl	8000f70 <__gnu_Unwind_Restore_VFP_D>
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	0759      	lsls	r1, r3, #29
 80006d2:	d509      	bpl.n	80006e8 <restore_non_core_regs+0x30>
 80006d4:	071a      	lsls	r2, r3, #28
 80006d6:	d50e      	bpl.n	80006f6 <restore_non_core_regs+0x3e>
 80006d8:	06db      	lsls	r3, r3, #27
 80006da:	d513      	bpl.n	8000704 <restore_non_core_regs+0x4c>
 80006dc:	bd10      	pop	{r4, pc}
 80006de:	f000 fc3f 	bl	8000f60 <__gnu_Unwind_Restore_VFP>
 80006e2:	6823      	ldr	r3, [r4, #0]
 80006e4:	0759      	lsls	r1, r3, #29
 80006e6:	d4f5      	bmi.n	80006d4 <restore_non_core_regs+0x1c>
 80006e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80006ec:	f000 fc48 	bl	8000f80 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	071a      	lsls	r2, r3, #28
 80006f4:	d4f0      	bmi.n	80006d8 <restore_non_core_regs+0x20>
 80006f6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 80006fa:	f000 fc49 	bl	8000f90 <__gnu_Unwind_Restore_WMMXD>
 80006fe:	6823      	ldr	r3, [r4, #0]
 8000700:	06db      	lsls	r3, r3, #27
 8000702:	d4eb      	bmi.n	80006dc <restore_non_core_regs+0x24>
 8000704:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800070c:	f000 bc84 	b.w	8001018 <__gnu_Unwind_Restore_WMMXC>

08000710 <_Unwind_decode_typeinfo_ptr.isra.0>:
 8000710:	6803      	ldr	r3, [r0, #0]
 8000712:	b103      	cbz	r3, 8000716 <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
 8000714:	4403      	add	r3, r0
 8000716:	4618      	mov	r0, r3
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop

0800071c <__gnu_unwind_24bit.isra.1>:
 800071c:	2009      	movs	r0, #9
 800071e:	4770      	bx	lr

08000720 <_Unwind_DebugHook>:
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop

08000724 <unwind_phase2>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	4604      	mov	r4, r0
 8000728:	460d      	mov	r5, r1
 800072a:	e008      	b.n	800073e <unwind_phase2+0x1a>
 800072c:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800072e:	6163      	str	r3, [r4, #20]
 8000730:	462a      	mov	r2, r5
 8000732:	6923      	ldr	r3, [r4, #16]
 8000734:	4621      	mov	r1, r4
 8000736:	2001      	movs	r0, #1
 8000738:	4798      	blx	r3
 800073a:	2808      	cmp	r0, #8
 800073c:	d108      	bne.n	8000750 <unwind_phase2+0x2c>
 800073e:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000740:	4620      	mov	r0, r4
 8000742:	f7ff ff69 	bl	8000618 <get_eit_entry>
 8000746:	4606      	mov	r6, r0
 8000748:	2800      	cmp	r0, #0
 800074a:	d0ef      	beq.n	800072c <unwind_phase2+0x8>
 800074c:	f006 fd8e 	bl	800726c <abort>
 8000750:	2807      	cmp	r0, #7
 8000752:	d1fb      	bne.n	800074c <unwind_phase2+0x28>
 8000754:	4630      	mov	r0, r6
 8000756:	6c29      	ldr	r1, [r5, #64]	; 0x40
 8000758:	f7ff ffe2 	bl	8000720 <_Unwind_DebugHook>
 800075c:	1d28      	adds	r0, r5, #4
 800075e:	f000 fbf3 	bl	8000f48 <__restore_core_regs>
 8000762:	bf00      	nop

08000764 <unwind_phase2_forced>:
 8000764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000768:	1d0c      	adds	r4, r1, #4
 800076a:	4605      	mov	r5, r0
 800076c:	4692      	mov	sl, r2
 800076e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000770:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
 8000774:	ae03      	add	r6, sp, #12
 8000776:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800077a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800077c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800077e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000780:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000784:	ac02      	add	r4, sp, #8
 8000786:	f8d5 800c 	ldr.w	r8, [r5, #12]
 800078a:	f8d5 9018 	ldr.w	r9, [r5, #24]
 800078e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8000792:	2300      	movs	r3, #0
 8000794:	4628      	mov	r0, r5
 8000796:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000798:	6023      	str	r3, [r4, #0]
 800079a:	f7ff ff3d 	bl	8000618 <get_eit_entry>
 800079e:	f1ba 0f00 	cmp.w	sl, #0
 80007a2:	4607      	mov	r7, r0
 80007a4:	bf14      	ite	ne
 80007a6:	260a      	movne	r6, #10
 80007a8:	2609      	moveq	r6, #9
 80007aa:	b17f      	cbz	r7, 80007cc <unwind_phase2_forced+0x68>
 80007ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80007ae:	f046 0110 	orr.w	r1, r6, #16
 80007b2:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007b6:	462a      	mov	r2, r5
 80007b8:	6463      	str	r3, [r4, #68]	; 0x44
 80007ba:	2001      	movs	r0, #1
 80007bc:	462b      	mov	r3, r5
 80007be:	47c0      	blx	r8
 80007c0:	bb78      	cbnz	r0, 8000822 <unwind_phase2_forced+0xbe>
 80007c2:	4638      	mov	r0, r7
 80007c4:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 80007c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80007ce:	616b      	str	r3, [r5, #20]
 80007d0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007d4:	4621      	mov	r1, r4
 80007d6:	a87a      	add	r0, sp, #488	; 0x1e8
 80007d8:	f005 ff0a 	bl	80065f0 <memcpy>
 80007dc:	692b      	ldr	r3, [r5, #16]
 80007de:	aa7a      	add	r2, sp, #488	; 0x1e8
 80007e0:	4629      	mov	r1, r5
 80007e2:	4630      	mov	r0, r6
 80007e4:	4798      	blx	r3
 80007e6:	9b88      	ldr	r3, [sp, #544]	; 0x220
 80007e8:	4682      	mov	sl, r0
 80007ea:	e88d 0210 	stmia.w	sp, {r4, r9}
 80007ee:	4631      	mov	r1, r6
 80007f0:	6463      	str	r3, [r4, #68]	; 0x44
 80007f2:	462a      	mov	r2, r5
 80007f4:	462b      	mov	r3, r5
 80007f6:	2001      	movs	r0, #1
 80007f8:	47c0      	blx	r8
 80007fa:	b990      	cbnz	r0, 8000822 <unwind_phase2_forced+0xbe>
 80007fc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000800:	a97a      	add	r1, sp, #488	; 0x1e8
 8000802:	4620      	mov	r0, r4
 8000804:	f005 fef4 	bl	80065f0 <memcpy>
 8000808:	f1ba 0f08 	cmp.w	sl, #8
 800080c:	d106      	bne.n	800081c <unwind_phase2_forced+0xb8>
 800080e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000810:	4628      	mov	r0, r5
 8000812:	f7ff ff01 	bl	8000618 <get_eit_entry>
 8000816:	2609      	movs	r6, #9
 8000818:	4607      	mov	r7, r0
 800081a:	e7c6      	b.n	80007aa <unwind_phase2_forced+0x46>
 800081c:	f1ba 0f07 	cmp.w	sl, #7
 8000820:	d005      	beq.n	800082e <unwind_phase2_forced+0xca>
 8000822:	2709      	movs	r7, #9
 8000824:	4638      	mov	r0, r7
 8000826:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
 800082a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800082e:	4638      	mov	r0, r7
 8000830:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8000832:	f7ff ff75 	bl	8000720 <_Unwind_DebugHook>
 8000836:	a803      	add	r0, sp, #12
 8000838:	f000 fb86 	bl	8000f48 <__restore_core_regs>

0800083c <_Unwind_GetCFA>:
 800083c:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800083e:	4770      	bx	lr

08000840 <__gnu_Unwind_RaiseException>:
 8000840:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000842:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8000844:	640b      	str	r3, [r1, #64]	; 0x40
 8000846:	1d0e      	adds	r6, r1, #4
 8000848:	460f      	mov	r7, r1
 800084a:	4604      	mov	r4, r0
 800084c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800084e:	b0f9      	sub	sp, #484	; 0x1e4
 8000850:	ad01      	add	r5, sp, #4
 8000852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000854:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000858:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800085a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800085c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000860:	f04f 36ff 	mov.w	r6, #4294967295
 8000864:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000868:	9600      	str	r6, [sp, #0]
 800086a:	e006      	b.n	800087a <__gnu_Unwind_RaiseException+0x3a>
 800086c:	6923      	ldr	r3, [r4, #16]
 800086e:	466a      	mov	r2, sp
 8000870:	4621      	mov	r1, r4
 8000872:	4798      	blx	r3
 8000874:	2808      	cmp	r0, #8
 8000876:	4605      	mov	r5, r0
 8000878:	d108      	bne.n	800088c <__gnu_Unwind_RaiseException+0x4c>
 800087a:	9910      	ldr	r1, [sp, #64]	; 0x40
 800087c:	4620      	mov	r0, r4
 800087e:	f7ff fecb 	bl	8000618 <get_eit_entry>
 8000882:	2800      	cmp	r0, #0
 8000884:	d0f2      	beq.n	800086c <__gnu_Unwind_RaiseException+0x2c>
 8000886:	2009      	movs	r0, #9
 8000888:	b079      	add	sp, #484	; 0x1e4
 800088a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800088c:	4668      	mov	r0, sp
 800088e:	f7ff ff13 	bl	80006b8 <restore_non_core_regs>
 8000892:	2d06      	cmp	r5, #6
 8000894:	d1f7      	bne.n	8000886 <__gnu_Unwind_RaiseException+0x46>
 8000896:	4639      	mov	r1, r7
 8000898:	4620      	mov	r0, r4
 800089a:	f7ff ff43 	bl	8000724 <unwind_phase2>
 800089e:	bf00      	nop

080008a0 <__gnu_Unwind_ForcedUnwind>:
 80008a0:	b430      	push	{r4, r5}
 80008a2:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 80008a4:	60c1      	str	r1, [r0, #12]
 80008a6:	6182      	str	r2, [r0, #24]
 80008a8:	4619      	mov	r1, r3
 80008aa:	641d      	str	r5, [r3, #64]	; 0x40
 80008ac:	2200      	movs	r2, #0
 80008ae:	bc30      	pop	{r4, r5}
 80008b0:	e758      	b.n	8000764 <unwind_phase2_forced>
 80008b2:	bf00      	nop

080008b4 <__gnu_Unwind_Resume>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	68c6      	ldr	r6, [r0, #12]
 80008b8:	6943      	ldr	r3, [r0, #20]
 80008ba:	640b      	str	r3, [r1, #64]	; 0x40
 80008bc:	b126      	cbz	r6, 80008c8 <__gnu_Unwind_Resume+0x14>
 80008be:	2201      	movs	r2, #1
 80008c0:	f7ff ff50 	bl	8000764 <unwind_phase2_forced>
 80008c4:	f006 fcd2 	bl	800726c <abort>
 80008c8:	6903      	ldr	r3, [r0, #16]
 80008ca:	460a      	mov	r2, r1
 80008cc:	4604      	mov	r4, r0
 80008ce:	460d      	mov	r5, r1
 80008d0:	4601      	mov	r1, r0
 80008d2:	2002      	movs	r0, #2
 80008d4:	4798      	blx	r3
 80008d6:	2807      	cmp	r0, #7
 80008d8:	d007      	beq.n	80008ea <__gnu_Unwind_Resume+0x36>
 80008da:	2808      	cmp	r0, #8
 80008dc:	d103      	bne.n	80008e6 <__gnu_Unwind_Resume+0x32>
 80008de:	4629      	mov	r1, r5
 80008e0:	4620      	mov	r0, r4
 80008e2:	f7ff ff1f 	bl	8000724 <unwind_phase2>
 80008e6:	f006 fcc1 	bl	800726c <abort>
 80008ea:	4630      	mov	r0, r6
 80008ec:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80008ee:	f7ff ff17 	bl	8000720 <_Unwind_DebugHook>
 80008f2:	1d28      	adds	r0, r5, #4
 80008f4:	f000 fb28 	bl	8000f48 <__restore_core_regs>

080008f8 <__gnu_Unwind_Resume_or_Rethrow>:
 80008f8:	68c2      	ldr	r2, [r0, #12]
 80008fa:	b11a      	cbz	r2, 8000904 <__gnu_Unwind_Resume_or_Rethrow+0xc>
 80008fc:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 80008fe:	640a      	str	r2, [r1, #64]	; 0x40
 8000900:	2200      	movs	r2, #0
 8000902:	e72f      	b.n	8000764 <unwind_phase2_forced>
 8000904:	e79c      	b.n	8000840 <__gnu_Unwind_RaiseException>
 8000906:	bf00      	nop

08000908 <_Unwind_Complete>:
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <_Unwind_DeleteException>:
 800090c:	6883      	ldr	r3, [r0, #8]
 800090e:	b113      	cbz	r3, 8000916 <_Unwind_DeleteException+0xa>
 8000910:	4601      	mov	r1, r0
 8000912:	2001      	movs	r0, #1
 8000914:	4718      	bx	r3
 8000916:	4770      	bx	lr

08000918 <_Unwind_VRS_Get>:
 8000918:	b500      	push	{lr}
 800091a:	2904      	cmp	r1, #4
 800091c:	d807      	bhi.n	800092e <_Unwind_VRS_Get+0x16>
 800091e:	e8df f001 	tbb	[pc, r1]
 8000922:	0903      	.short	0x0903
 8000924:	0906      	.short	0x0906
 8000926:	09          	.byte	0x09
 8000927:	00          	.byte	0x00
 8000928:	b90b      	cbnz	r3, 800092e <_Unwind_VRS_Get+0x16>
 800092a:	2a0f      	cmp	r2, #15
 800092c:	d905      	bls.n	800093a <_Unwind_VRS_Get+0x22>
 800092e:	2002      	movs	r0, #2
 8000930:	f85d fb04 	ldr.w	pc, [sp], #4
 8000934:	2001      	movs	r0, #1
 8000936:	f85d fb04 	ldr.w	pc, [sp], #4
 800093a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800093e:	4618      	mov	r0, r3
 8000940:	6853      	ldr	r3, [r2, #4]
 8000942:	9a01      	ldr	r2, [sp, #4]
 8000944:	6013      	str	r3, [r2, #0]
 8000946:	f85d fb04 	ldr.w	pc, [sp], #4
 800094a:	bf00      	nop

0800094c <_Unwind_GetGR>:
 800094c:	b510      	push	{r4, lr}
 800094e:	b084      	sub	sp, #16
 8000950:	2300      	movs	r3, #0
 8000952:	ac03      	add	r4, sp, #12
 8000954:	460a      	mov	r2, r1
 8000956:	9400      	str	r4, [sp, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f7ff ffdd 	bl	8000918 <_Unwind_VRS_Get>
 800095e:	9803      	ldr	r0, [sp, #12]
 8000960:	b004      	add	sp, #16
 8000962:	bd10      	pop	{r4, pc}

08000964 <_Unwind_VRS_Set>:
 8000964:	b500      	push	{lr}
 8000966:	2904      	cmp	r1, #4
 8000968:	d807      	bhi.n	800097a <_Unwind_VRS_Set+0x16>
 800096a:	e8df f001 	tbb	[pc, r1]
 800096e:	0903      	.short	0x0903
 8000970:	0906      	.short	0x0906
 8000972:	09          	.byte	0x09
 8000973:	00          	.byte	0x00
 8000974:	b90b      	cbnz	r3, 800097a <_Unwind_VRS_Set+0x16>
 8000976:	2a0f      	cmp	r2, #15
 8000978:	d905      	bls.n	8000986 <_Unwind_VRS_Set+0x22>
 800097a:	2002      	movs	r0, #2
 800097c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000980:	2001      	movs	r0, #1
 8000982:	f85d fb04 	ldr.w	pc, [sp], #4
 8000986:	9901      	ldr	r1, [sp, #4]
 8000988:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800098c:	6809      	ldr	r1, [r1, #0]
 800098e:	6051      	str	r1, [r2, #4]
 8000990:	4618      	mov	r0, r3
 8000992:	f85d fb04 	ldr.w	pc, [sp], #4
 8000996:	bf00      	nop

08000998 <_Unwind_SetGR>:
 8000998:	b510      	push	{r4, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	ac04      	add	r4, sp, #16
 800099e:	2300      	movs	r3, #0
 80009a0:	f844 2d04 	str.w	r2, [r4, #-4]!
 80009a4:	460a      	mov	r2, r1
 80009a6:	9400      	str	r4, [sp, #0]
 80009a8:	4619      	mov	r1, r3
 80009aa:	f7ff ffdb 	bl	8000964 <_Unwind_VRS_Set>
 80009ae:	b004      	add	sp, #16
 80009b0:	bd10      	pop	{r4, pc}
 80009b2:	bf00      	nop

080009b4 <__gnu_Unwind_Backtrace>:
 80009b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009b6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80009b8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ba:	1d15      	adds	r5, r2, #4
 80009bc:	4607      	mov	r7, r0
 80009be:	460e      	mov	r6, r1
 80009c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009c2:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 80009c6:	ac17      	add	r4, sp, #92	; 0x5c
 80009c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009d2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80009d6:	f04f 35ff 	mov.w	r5, #4294967295
 80009da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80009de:	9516      	str	r5, [sp, #88]	; 0x58
 80009e0:	e010      	b.n	8000a04 <__gnu_Unwind_Backtrace+0x50>
 80009e2:	a816      	add	r0, sp, #88	; 0x58
 80009e4:	f7ff ffd8 	bl	8000998 <_Unwind_SetGR>
 80009e8:	4631      	mov	r1, r6
 80009ea:	a816      	add	r0, sp, #88	; 0x58
 80009ec:	47b8      	blx	r7
 80009ee:	aa16      	add	r2, sp, #88	; 0x58
 80009f0:	4669      	mov	r1, sp
 80009f2:	b978      	cbnz	r0, 8000a14 <__gnu_Unwind_Backtrace+0x60>
 80009f4:	9b04      	ldr	r3, [sp, #16]
 80009f6:	2008      	movs	r0, #8
 80009f8:	4798      	blx	r3
 80009fa:	2805      	cmp	r0, #5
 80009fc:	4604      	mov	r4, r0
 80009fe:	d00a      	beq.n	8000a16 <__gnu_Unwind_Backtrace+0x62>
 8000a00:	2809      	cmp	r0, #9
 8000a02:	d007      	beq.n	8000a14 <__gnu_Unwind_Backtrace+0x60>
 8000a04:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000a06:	4668      	mov	r0, sp
 8000a08:	f7ff fe06 	bl	8000618 <get_eit_entry>
 8000a0c:	466a      	mov	r2, sp
 8000a0e:	210c      	movs	r1, #12
 8000a10:	2800      	cmp	r0, #0
 8000a12:	d0e6      	beq.n	80009e2 <__gnu_Unwind_Backtrace+0x2e>
 8000a14:	2409      	movs	r4, #9
 8000a16:	a816      	add	r0, sp, #88	; 0x58
 8000a18:	f7ff fe4e 	bl	80006b8 <restore_non_core_regs>
 8000a1c:	4620      	mov	r0, r4
 8000a1e:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
 8000a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a24 <__gnu_unwind_pr_common>:
 8000a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a28:	460d      	mov	r5, r1
 8000a2a:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8000a2c:	b08b      	sub	sp, #44	; 0x2c
 8000a2e:	1d0c      	adds	r4, r1, #4
 8000a30:	6809      	ldr	r1, [r1, #0]
 8000a32:	9107      	str	r1, [sp, #28]
 8000a34:	4691      	mov	r9, r2
 8000a36:	9408      	str	r4, [sp, #32]
 8000a38:	f000 0b03 	and.w	fp, r0, #3
 8000a3c:	461e      	mov	r6, r3
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d160      	bne.n	8000b04 <__gnu_unwind_pr_common+0xe0>
 8000a42:	0209      	lsls	r1, r1, #8
 8000a44:	2303      	movs	r3, #3
 8000a46:	9107      	str	r1, [sp, #28]
 8000a48:	f88d 6025 	strb.w	r6, [sp, #37]	; 0x25
 8000a4c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000a50:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8000a52:	f1bb 0f02 	cmp.w	fp, #2
 8000a56:	bf08      	it	eq
 8000a58:	6bac      	ldreq	r4, [r5, #56]	; 0x38
 8000a5a:	f013 0301 	ands.w	r3, r3, #1
 8000a5e:	d140      	bne.n	8000ae2 <__gnu_unwind_pr_common+0xbe>
 8000a60:	9301      	str	r3, [sp, #4]
 8000a62:	f000 0308 	and.w	r3, r0, #8
 8000a66:	9303      	str	r3, [sp, #12]
 8000a68:	f8d4 8000 	ldr.w	r8, [r4]
 8000a6c:	f1b8 0f00 	cmp.w	r8, #0
 8000a70:	d039      	beq.n	8000ae6 <__gnu_unwind_pr_common+0xc2>
 8000a72:	2e02      	cmp	r6, #2
 8000a74:	d043      	beq.n	8000afe <__gnu_unwind_pr_common+0xda>
 8000a76:	f8b4 8000 	ldrh.w	r8, [r4]
 8000a7a:	8867      	ldrh	r7, [r4, #2]
 8000a7c:	3404      	adds	r4, #4
 8000a7e:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8000a80:	f027 0a01 	bic.w	sl, r7, #1
 8000a84:	210f      	movs	r1, #15
 8000a86:	4648      	mov	r0, r9
 8000a88:	449a      	add	sl, r3
 8000a8a:	f7ff ff5f 	bl	800094c <_Unwind_GetGR>
 8000a8e:	4582      	cmp	sl, r0
 8000a90:	d833      	bhi.n	8000afa <__gnu_unwind_pr_common+0xd6>
 8000a92:	f028 0301 	bic.w	r3, r8, #1
 8000a96:	449a      	add	sl, r3
 8000a98:	4550      	cmp	r0, sl
 8000a9a:	bf2c      	ite	cs
 8000a9c:	2000      	movcs	r0, #0
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	007f      	lsls	r7, r7, #1
 8000aa2:	f007 0702 	and.w	r7, r7, #2
 8000aa6:	f008 0801 	and.w	r8, r8, #1
 8000aaa:	ea47 0708 	orr.w	r7, r7, r8
 8000aae:	2f01      	cmp	r7, #1
 8000ab0:	d03e      	beq.n	8000b30 <__gnu_unwind_pr_common+0x10c>
 8000ab2:	d335      	bcc.n	8000b20 <__gnu_unwind_pr_common+0xfc>
 8000ab4:	2f02      	cmp	r7, #2
 8000ab6:	d11c      	bne.n	8000af2 <__gnu_unwind_pr_common+0xce>
 8000ab8:	6823      	ldr	r3, [r4, #0]
 8000aba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000abe:	9202      	str	r2, [sp, #8]
 8000ac0:	f1bb 0f00 	cmp.w	fp, #0
 8000ac4:	d176      	bne.n	8000bb4 <__gnu_unwind_pr_common+0x190>
 8000ac6:	b128      	cbz	r0, 8000ad4 <__gnu_unwind_pr_common+0xb0>
 8000ac8:	9903      	ldr	r1, [sp, #12]
 8000aca:	2900      	cmp	r1, #0
 8000acc:	d07e      	beq.n	8000bcc <__gnu_unwind_pr_common+0x1a8>
 8000ace:	2a00      	cmp	r2, #0
 8000ad0:	f000 80a6 	beq.w	8000c20 <__gnu_unwind_pr_common+0x1fc>
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db77      	blt.n	8000bc8 <__gnu_unwind_pr_common+0x1a4>
 8000ad8:	9b02      	ldr	r3, [sp, #8]
 8000ada:	3301      	adds	r3, #1
 8000adc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8000ae0:	e7c2      	b.n	8000a68 <__gnu_unwind_pr_common+0x44>
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	9301      	str	r3, [sp, #4]
 8000ae6:	2e02      	cmp	r6, #2
 8000ae8:	dd3e      	ble.n	8000b68 <__gnu_unwind_pr_common+0x144>
 8000aea:	f7ff fe17 	bl	800071c <__gnu_unwind_24bit.isra.1>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	d040      	beq.n	8000b74 <__gnu_unwind_pr_common+0x150>
 8000af2:	2009      	movs	r0, #9
 8000af4:	b00b      	add	sp, #44	; 0x2c
 8000af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000afa:	2000      	movs	r0, #0
 8000afc:	e7d0      	b.n	8000aa0 <__gnu_unwind_pr_common+0x7c>
 8000afe:	6867      	ldr	r7, [r4, #4]
 8000b00:	3408      	adds	r4, #8
 8000b02:	e7bc      	b.n	8000a7e <__gnu_unwind_pr_common+0x5a>
 8000b04:	2b02      	cmp	r3, #2
 8000b06:	dca3      	bgt.n	8000a50 <__gnu_unwind_pr_common+0x2c>
 8000b08:	0c0b      	lsrs	r3, r1, #16
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	0409      	lsls	r1, r1, #16
 8000b0e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 8000b12:	2302      	movs	r3, #2
 8000b14:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 8000b18:	9107      	str	r1, [sp, #28]
 8000b1a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8000b1e:	e797      	b.n	8000a50 <__gnu_unwind_pr_common+0x2c>
 8000b20:	f1bb 0f00 	cmp.w	fp, #0
 8000b24:	d002      	beq.n	8000b2c <__gnu_unwind_pr_common+0x108>
 8000b26:	2800      	cmp	r0, #0
 8000b28:	f040 80bd 	bne.w	8000ca6 <__gnu_unwind_pr_common+0x282>
 8000b2c:	3404      	adds	r4, #4
 8000b2e:	e79b      	b.n	8000a68 <__gnu_unwind_pr_common+0x44>
 8000b30:	f1bb 0f00 	cmp.w	fp, #0
 8000b34:	d125      	bne.n	8000b82 <__gnu_unwind_pr_common+0x15e>
 8000b36:	b1a8      	cbz	r0, 8000b64 <__gnu_unwind_pr_common+0x140>
 8000b38:	e894 000c 	ldmia.w	r4, {r2, r3}
 8000b3c:	1c99      	adds	r1, r3, #2
 8000b3e:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000b42:	d0d6      	beq.n	8000af2 <__gnu_unwind_pr_common+0xce>
 8000b44:	f105 0158 	add.w	r1, r5, #88	; 0x58
 8000b48:	3301      	adds	r3, #1
 8000b4a:	9106      	str	r1, [sp, #24]
 8000b4c:	f000 80a3 	beq.w	8000c96 <__gnu_unwind_pr_common+0x272>
 8000b50:	1d20      	adds	r0, r4, #4
 8000b52:	f7ff fddd 	bl	8000710 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000b56:	ab06      	add	r3, sp, #24
 8000b58:	4601      	mov	r1, r0
 8000b5a:	4628      	mov	r0, r5
 8000b5c:	f3af 8000 	nop.w
 8000b60:	2800      	cmp	r0, #0
 8000b62:	d177      	bne.n	8000c54 <__gnu_unwind_pr_common+0x230>
 8000b64:	3408      	adds	r4, #8
 8000b66:	e77f      	b.n	8000a68 <__gnu_unwind_pr_common+0x44>
 8000b68:	a907      	add	r1, sp, #28
 8000b6a:	4648      	mov	r0, r9
 8000b6c:	f000 faee 	bl	800114c <__gnu_unwind_execute>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d1be      	bne.n	8000af2 <__gnu_unwind_pr_common+0xce>
 8000b74:	9b01      	ldr	r3, [sp, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d15c      	bne.n	8000c34 <__gnu_unwind_pr_common+0x210>
 8000b7a:	2008      	movs	r0, #8
 8000b7c:	b00b      	add	sp, #44	; 0x2c
 8000b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b82:	210d      	movs	r1, #13
 8000b84:	4648      	mov	r0, r9
 8000b86:	6a2f      	ldr	r7, [r5, #32]
 8000b88:	f7ff fee0 	bl	800094c <_Unwind_GetGR>
 8000b8c:	4287      	cmp	r7, r0
 8000b8e:	d1e9      	bne.n	8000b64 <__gnu_unwind_pr_common+0x140>
 8000b90:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000b92:	429c      	cmp	r4, r3
 8000b94:	d1e6      	bne.n	8000b64 <__gnu_unwind_pr_common+0x140>
 8000b96:	4620      	mov	r0, r4
 8000b98:	f7ff fcf0 	bl	800057c <selfrel_offset31>
 8000b9c:	210f      	movs	r1, #15
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	4648      	mov	r0, r9
 8000ba2:	f7ff fef9 	bl	8000998 <_Unwind_SetGR>
 8000ba6:	4648      	mov	r0, r9
 8000ba8:	462a      	mov	r2, r5
 8000baa:	2100      	movs	r1, #0
 8000bac:	f7ff fef4 	bl	8000998 <_Unwind_SetGR>
 8000bb0:	2007      	movs	r0, #7
 8000bb2:	e79f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000bb4:	210d      	movs	r1, #13
 8000bb6:	4648      	mov	r0, r9
 8000bb8:	6a2f      	ldr	r7, [r5, #32]
 8000bba:	f7ff fec7 	bl	800094c <_Unwind_GetGR>
 8000bbe:	4287      	cmp	r7, r0
 8000bc0:	d058      	beq.n	8000c74 <__gnu_unwind_pr_common+0x250>
 8000bc2:	6823      	ldr	r3, [r4, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	da87      	bge.n	8000ad8 <__gnu_unwind_pr_common+0xb4>
 8000bc8:	3404      	adds	r4, #4
 8000bca:	e785      	b.n	8000ad8 <__gnu_unwind_pr_common+0xb4>
 8000bcc:	9b02      	ldr	r3, [sp, #8]
 8000bce:	b33b      	cbz	r3, 8000c20 <__gnu_unwind_pr_common+0x1fc>
 8000bd0:	f105 0358 	add.w	r3, r5, #88	; 0x58
 8000bd4:	1d27      	adds	r7, r4, #4
 8000bd6:	f8cd b010 	str.w	fp, [sp, #16]
 8000bda:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8000bde:	f8dd a008 	ldr.w	sl, [sp, #8]
 8000be2:	9605      	str	r6, [sp, #20]
 8000be4:	46a3      	mov	fp, r4
 8000be6:	461c      	mov	r4, r3
 8000be8:	e002      	b.n	8000bf0 <__gnu_unwind_pr_common+0x1cc>
 8000bea:	45b2      	cmp	sl, r6
 8000bec:	46b0      	mov	r8, r6
 8000bee:	d016      	beq.n	8000c1e <__gnu_unwind_pr_common+0x1fa>
 8000bf0:	4638      	mov	r0, r7
 8000bf2:	9406      	str	r4, [sp, #24]
 8000bf4:	f7ff fd8c 	bl	8000710 <_Unwind_decode_typeinfo_ptr.isra.0>
 8000bf8:	ab06      	add	r3, sp, #24
 8000bfa:	4601      	mov	r1, r0
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	4628      	mov	r0, r5
 8000c00:	f3af 8000 	nop.w
 8000c04:	f108 0601 	add.w	r6, r8, #1
 8000c08:	3704      	adds	r7, #4
 8000c0a:	2800      	cmp	r0, #0
 8000c0c:	d0ed      	beq.n	8000bea <__gnu_unwind_pr_common+0x1c6>
 8000c0e:	9b02      	ldr	r3, [sp, #8]
 8000c10:	9e05      	ldr	r6, [sp, #20]
 8000c12:	4543      	cmp	r3, r8
 8000c14:	465c      	mov	r4, fp
 8000c16:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000c1a:	d1d2      	bne.n	8000bc2 <__gnu_unwind_pr_common+0x19e>
 8000c1c:	e000      	b.n	8000c20 <__gnu_unwind_pr_common+0x1fc>
 8000c1e:	465c      	mov	r4, fp
 8000c20:	4648      	mov	r0, r9
 8000c22:	210d      	movs	r1, #13
 8000c24:	f7ff fe92 	bl	800094c <_Unwind_GetGR>
 8000c28:	9b06      	ldr	r3, [sp, #24]
 8000c2a:	6228      	str	r0, [r5, #32]
 8000c2c:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c2e:	626b      	str	r3, [r5, #36]	; 0x24
 8000c30:	2006      	movs	r0, #6
 8000c32:	e75f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000c34:	210f      	movs	r1, #15
 8000c36:	4648      	mov	r0, r9
 8000c38:	f7ff fe88 	bl	800094c <_Unwind_GetGR>
 8000c3c:	210e      	movs	r1, #14
 8000c3e:	4602      	mov	r2, r0
 8000c40:	4648      	mov	r0, r9
 8000c42:	f7ff fea9 	bl	8000998 <_Unwind_SetGR>
 8000c46:	4648      	mov	r0, r9
 8000c48:	4a29      	ldr	r2, [pc, #164]	; (8000cf0 <__gnu_unwind_pr_common+0x2cc>)
 8000c4a:	210f      	movs	r1, #15
 8000c4c:	f7ff fea4 	bl	8000998 <_Unwind_SetGR>
 8000c50:	2007      	movs	r0, #7
 8000c52:	e74f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000c54:	4607      	mov	r7, r0
 8000c56:	210d      	movs	r1, #13
 8000c58:	4648      	mov	r0, r9
 8000c5a:	f7ff fe77 	bl	800094c <_Unwind_GetGR>
 8000c5e:	2f02      	cmp	r7, #2
 8000c60:	6228      	str	r0, [r5, #32]
 8000c62:	d11d      	bne.n	8000ca0 <__gnu_unwind_pr_common+0x27c>
 8000c64:	462b      	mov	r3, r5
 8000c66:	9a06      	ldr	r2, [sp, #24]
 8000c68:	f843 2f2c 	str.w	r2, [r3, #44]!
 8000c6c:	626b      	str	r3, [r5, #36]	; 0x24
 8000c6e:	62ac      	str	r4, [r5, #40]	; 0x28
 8000c70:	2006      	movs	r0, #6
 8000c72:	e73f      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000c74:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000c76:	429c      	cmp	r4, r3
 8000c78:	d1a3      	bne.n	8000bc2 <__gnu_unwind_pr_common+0x19e>
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	18a3      	adds	r3, r4, r2
 8000c80:	9902      	ldr	r1, [sp, #8]
 8000c82:	62a9      	str	r1, [r5, #40]	; 0x28
 8000c84:	62ef      	str	r7, [r5, #44]	; 0x2c
 8000c86:	632a      	str	r2, [r5, #48]	; 0x30
 8000c88:	636b      	str	r3, [r5, #52]	; 0x34
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	42bb      	cmp	r3, r7
 8000c8e:	db1d      	blt.n	8000ccc <__gnu_unwind_pr_common+0x2a8>
 8000c90:	2301      	movs	r3, #1
 8000c92:	9301      	str	r3, [sp, #4]
 8000c94:	e720      	b.n	8000ad8 <__gnu_unwind_pr_common+0xb4>
 8000c96:	4648      	mov	r0, r9
 8000c98:	210d      	movs	r1, #13
 8000c9a:	f7ff fe57 	bl	800094c <_Unwind_GetGR>
 8000c9e:	6228      	str	r0, [r5, #32]
 8000ca0:	9b06      	ldr	r3, [sp, #24]
 8000ca2:	626b      	str	r3, [r5, #36]	; 0x24
 8000ca4:	e7e3      	b.n	8000c6e <__gnu_unwind_pr_common+0x24a>
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f7ff fc68 	bl	800057c <selfrel_offset31>
 8000cac:	3404      	adds	r4, #4
 8000cae:	4606      	mov	r6, r0
 8000cb0:	63ac      	str	r4, [r5, #56]	; 0x38
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f3af 8000 	nop.w
 8000cb8:	2800      	cmp	r0, #0
 8000cba:	f43f af1a 	beq.w	8000af2 <__gnu_unwind_pr_common+0xce>
 8000cbe:	4648      	mov	r0, r9
 8000cc0:	4632      	mov	r2, r6
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f7ff fe68 	bl	8000998 <_Unwind_SetGR>
 8000cc8:	2007      	movs	r0, #7
 8000cca:	e713      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000ccc:	4608      	mov	r0, r1
 8000cce:	3001      	adds	r0, #1
 8000cd0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8000cd4:	f7ff fc52 	bl	800057c <selfrel_offset31>
 8000cd8:	210f      	movs	r1, #15
 8000cda:	4602      	mov	r2, r0
 8000cdc:	4648      	mov	r0, r9
 8000cde:	f7ff fe5b 	bl	8000998 <_Unwind_SetGR>
 8000ce2:	4648      	mov	r0, r9
 8000ce4:	462a      	mov	r2, r5
 8000ce6:	4639      	mov	r1, r7
 8000ce8:	f7ff fe56 	bl	8000998 <_Unwind_SetGR>
 8000cec:	2007      	movs	r0, #7
 8000cee:	e701      	b.n	8000af4 <__gnu_unwind_pr_common+0xd0>
 8000cf0:	00000000 	.word	0x00000000

08000cf4 <__aeabi_unwind_cpp_pr0>:
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e695      	b.n	8000a24 <__gnu_unwind_pr_common>

08000cf8 <__aeabi_unwind_cpp_pr1>:
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	e693      	b.n	8000a24 <__gnu_unwind_pr_common>

08000cfc <__aeabi_unwind_cpp_pr2>:
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	e691      	b.n	8000a24 <__gnu_unwind_pr_common>

08000d00 <_Unwind_VRS_Pop>:
 8000d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d02:	4604      	mov	r4, r0
 8000d04:	b0c5      	sub	sp, #276	; 0x114
 8000d06:	2904      	cmp	r1, #4
 8000d08:	d80d      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d0a:	e8df f001 	tbb	[pc, r1]
 8000d0e:	0353      	.short	0x0353
 8000d10:	310c      	.short	0x310c
 8000d12:	0f          	.byte	0x0f
 8000d13:	00          	.byte	0x00
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	ea4f 4612 	mov.w	r6, r2, lsr #16
 8000d1a:	b295      	uxth	r5, r2
 8000d1c:	d162      	bne.n	8000de4 <_Unwind_VRS_Pop+0xe4>
 8000d1e:	1972      	adds	r2, r6, r5
 8000d20:	2a10      	cmp	r2, #16
 8000d22:	f240 809b 	bls.w	8000e5c <_Unwind_VRS_Pop+0x15c>
 8000d26:	2002      	movs	r0, #2
 8000d28:	b045      	add	sp, #276	; 0x114
 8000d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d1fa      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d30:	2a10      	cmp	r2, #16
 8000d32:	d8f8      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d34:	6823      	ldr	r3, [r4, #0]
 8000d36:	06d8      	lsls	r0, r3, #27
 8000d38:	f100 80c6 	bmi.w	8000ec8 <_Unwind_VRS_Pop+0x1c8>
 8000d3c:	ae22      	add	r6, sp, #136	; 0x88
 8000d3e:	4630      	mov	r0, r6
 8000d40:	9201      	str	r2, [sp, #4]
 8000d42:	f000 f973 	bl	800102c <__gnu_Unwind_Save_WMMXC>
 8000d46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000d48:	9a01      	ldr	r2, [sp, #4]
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	2501      	movs	r5, #1
 8000d4e:	fa05 f103 	lsl.w	r1, r5, r3
 8000d52:	4211      	tst	r1, r2
 8000d54:	d003      	beq.n	8000d5e <_Unwind_VRS_Pop+0x5e>
 8000d56:	6801      	ldr	r1, [r0, #0]
 8000d58:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
 8000d5c:	3004      	adds	r0, #4
 8000d5e:	3301      	adds	r3, #1
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d1f4      	bne.n	8000d4e <_Unwind_VRS_Pop+0x4e>
 8000d64:	63a0      	str	r0, [r4, #56]	; 0x38
 8000d66:	4630      	mov	r0, r6
 8000d68:	f000 f956 	bl	8001018 <__gnu_Unwind_Restore_WMMXC>
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	e7db      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000d70:	2b03      	cmp	r3, #3
 8000d72:	d1d8      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d74:	0c15      	lsrs	r5, r2, #16
 8000d76:	b297      	uxth	r7, r2
 8000d78:	19eb      	adds	r3, r5, r7
 8000d7a:	2b10      	cmp	r3, #16
 8000d7c:	d8d3      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000d7e:	6823      	ldr	r3, [r4, #0]
 8000d80:	071e      	lsls	r6, r3, #28
 8000d82:	f100 80b5 	bmi.w	8000ef0 <_Unwind_VRS_Pop+0x1f0>
 8000d86:	ae22      	add	r6, sp, #136	; 0x88
 8000d88:	4630      	mov	r0, r6
 8000d8a:	f000 f923 	bl	8000fd4 <__gnu_Unwind_Save_WMMXD>
 8000d8e:	00ed      	lsls	r5, r5, #3
 8000d90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8000d92:	b14f      	cbz	r7, 8000da8 <_Unwind_VRS_Pop+0xa8>
 8000d94:	3d04      	subs	r5, #4
 8000d96:	1971      	adds	r1, r6, r5
 8000d98:	eb03 00c7 	add.w	r0, r3, r7, lsl #3
 8000d9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8000da0:	f841 2f04 	str.w	r2, [r1, #4]!
 8000da4:	4283      	cmp	r3, r0
 8000da6:	d1f9      	bne.n	8000d9c <_Unwind_VRS_Pop+0x9c>
 8000da8:	4630      	mov	r0, r6
 8000daa:	63a3      	str	r3, [r4, #56]	; 0x38
 8000dac:	f000 f8f0 	bl	8000f90 <__gnu_Unwind_Restore_WMMXD>
 8000db0:	2000      	movs	r0, #0
 8000db2:	e7b9      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1b6      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000db8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8000dba:	b297      	uxth	r7, r2
 8000dbc:	1d20      	adds	r0, r4, #4
 8000dbe:	2601      	movs	r6, #1
 8000dc0:	fa06 f103 	lsl.w	r1, r6, r3
 8000dc4:	4239      	tst	r1, r7
 8000dc6:	f103 0301 	add.w	r3, r3, #1
 8000dca:	d002      	beq.n	8000dd2 <_Unwind_VRS_Pop+0xd2>
 8000dcc:	6829      	ldr	r1, [r5, #0]
 8000dce:	6001      	str	r1, [r0, #0]
 8000dd0:	3504      	adds	r5, #4
 8000dd2:	2b10      	cmp	r3, #16
 8000dd4:	f100 0004 	add.w	r0, r0, #4
 8000dd8:	d1f2      	bne.n	8000dc0 <_Unwind_VRS_Pop+0xc0>
 8000dda:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
 8000dde:	d13b      	bne.n	8000e58 <_Unwind_VRS_Pop+0x158>
 8000de0:	63a5      	str	r5, [r4, #56]	; 0x38
 8000de2:	e7a1      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	d19e      	bne.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000de8:	1977      	adds	r7, r6, r5
 8000dea:	2f20      	cmp	r7, #32
 8000dec:	d89b      	bhi.n	8000d26 <_Unwind_VRS_Pop+0x26>
 8000dee:	2e0f      	cmp	r6, #15
 8000df0:	d966      	bls.n	8000ec0 <_Unwind_VRS_Pop+0x1c0>
 8000df2:	462f      	mov	r7, r5
 8000df4:	2d00      	cmp	r5, #0
 8000df6:	d13a      	bne.n	8000e6e <_Unwind_VRS_Pop+0x16e>
 8000df8:	462a      	mov	r2, r5
 8000dfa:	2700      	movs	r7, #0
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000e00:	dd72      	ble.n	8000ee8 <_Unwind_VRS_Pop+0x1e8>
 8000e02:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 8000e06:	4601      	mov	r1, r0
 8000e08:	a844      	add	r0, sp, #272	; 0x110
 8000e0a:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
 8000e0e:	388c      	subs	r0, #140	; 0x8c
 8000e10:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e14:	f840 5f04 	str.w	r5, [r0, #4]!
 8000e18:	4291      	cmp	r1, r2
 8000e1a:	d1f9      	bne.n	8000e10 <_Unwind_VRS_Pop+0x110>
 8000e1c:	4608      	mov	r0, r1
 8000e1e:	b197      	cbz	r7, 8000e46 <_Unwind_VRS_Pop+0x146>
 8000e20:	2e10      	cmp	r6, #16
 8000e22:	4632      	mov	r2, r6
 8000e24:	a944      	add	r1, sp, #272	; 0x110
 8000e26:	bf38      	it	cc
 8000e28:	2210      	movcc	r2, #16
 8000e2a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8000e2e:	f5a2 72c4 	sub.w	r2, r2, #392	; 0x188
 8000e32:	0079      	lsls	r1, r7, #1
 8000e34:	3a04      	subs	r2, #4
 8000e36:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8000e3a:	f850 5b04 	ldr.w	r5, [r0], #4
 8000e3e:	f842 5f04 	str.w	r5, [r2, #4]!
 8000e42:	4288      	cmp	r0, r1
 8000e44:	d1f9      	bne.n	8000e3a <_Unwind_VRS_Pop+0x13a>
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d048      	beq.n	8000edc <_Unwind_VRS_Pop+0x1dc>
 8000e4a:	2e0f      	cmp	r6, #15
 8000e4c:	63a1      	str	r1, [r4, #56]	; 0x38
 8000e4e:	d933      	bls.n	8000eb8 <_Unwind_VRS_Pop+0x1b8>
 8000e50:	b117      	cbz	r7, 8000e58 <_Unwind_VRS_Pop+0x158>
 8000e52:	a802      	add	r0, sp, #8
 8000e54:	f000 f894 	bl	8000f80 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000e58:	2000      	movs	r0, #0
 8000e5a:	e765      	b.n	8000d28 <_Unwind_VRS_Pop+0x28>
 8000e5c:	2e0f      	cmp	r6, #15
 8000e5e:	f63f af62 	bhi.w	8000d26 <_Unwind_VRS_Pop+0x26>
 8000e62:	2700      	movs	r7, #0
 8000e64:	6822      	ldr	r2, [r4, #0]
 8000e66:	07d1      	lsls	r1, r2, #31
 8000e68:	d417      	bmi.n	8000e9a <_Unwind_VRS_Pop+0x19a>
 8000e6a:	2f00      	cmp	r7, #0
 8000e6c:	d060      	beq.n	8000f30 <_Unwind_VRS_Pop+0x230>
 8000e6e:	6822      	ldr	r2, [r4, #0]
 8000e70:	0751      	lsls	r1, r2, #29
 8000e72:	d445      	bmi.n	8000f00 <_Unwind_VRS_Pop+0x200>
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d04d      	beq.n	8000f14 <_Unwind_VRS_Pop+0x214>
 8000e78:	2e0f      	cmp	r6, #15
 8000e7a:	d806      	bhi.n	8000e8a <_Unwind_VRS_Pop+0x18a>
 8000e7c:	a822      	add	r0, sp, #136	; 0x88
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	f000 f87a 	bl	8000f78 <__gnu_Unwind_Save_VFP_D>
 8000e84:	9b01      	ldr	r3, [sp, #4]
 8000e86:	2f00      	cmp	r7, #0
 8000e88:	d0b6      	beq.n	8000df8 <_Unwind_VRS_Pop+0xf8>
 8000e8a:	a802      	add	r0, sp, #8
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	f000 f87b 	bl	8000f88 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000e92:	9b01      	ldr	r3, [sp, #4]
 8000e94:	f1c6 0210 	rsb	r2, r6, #16
 8000e98:	e7b0      	b.n	8000dfc <_Unwind_VRS_Pop+0xfc>
 8000e9a:	f022 0101 	bic.w	r1, r2, #1
 8000e9e:	2b05      	cmp	r3, #5
 8000ea0:	6021      	str	r1, [r4, #0]
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	4620      	mov	r0, r4
 8000ea6:	d03b      	beq.n	8000f20 <_Unwind_VRS_Pop+0x220>
 8000ea8:	f022 0203 	bic.w	r2, r2, #3
 8000eac:	f840 2b48 	str.w	r2, [r0], #72
 8000eb0:	f000 f85a 	bl	8000f68 <__gnu_Unwind_Save_VFP>
 8000eb4:	9b01      	ldr	r3, [sp, #4]
 8000eb6:	e7d8      	b.n	8000e6a <_Unwind_VRS_Pop+0x16a>
 8000eb8:	a822      	add	r0, sp, #136	; 0x88
 8000eba:	f000 f859 	bl	8000f70 <__gnu_Unwind_Restore_VFP_D>
 8000ebe:	e7c7      	b.n	8000e50 <_Unwind_VRS_Pop+0x150>
 8000ec0:	2f10      	cmp	r7, #16
 8000ec2:	d9ce      	bls.n	8000e62 <_Unwind_VRS_Pop+0x162>
 8000ec4:	3f10      	subs	r7, #16
 8000ec6:	e7cd      	b.n	8000e64 <_Unwind_VRS_Pop+0x164>
 8000ec8:	f023 0310 	bic.w	r3, r3, #16
 8000ecc:	6023      	str	r3, [r4, #0]
 8000ece:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
 8000ed2:	9201      	str	r2, [sp, #4]
 8000ed4:	f000 f8aa 	bl	800102c <__gnu_Unwind_Save_WMMXC>
 8000ed8:	9a01      	ldr	r2, [sp, #4]
 8000eda:	e72f      	b.n	8000d3c <_Unwind_VRS_Pop+0x3c>
 8000edc:	3104      	adds	r1, #4
 8000ede:	63a1      	str	r1, [r4, #56]	; 0x38
 8000ee0:	a822      	add	r0, sp, #136	; 0x88
 8000ee2:	f000 f83d 	bl	8000f60 <__gnu_Unwind_Restore_VFP>
 8000ee6:	e7b7      	b.n	8000e58 <_Unwind_VRS_Pop+0x158>
 8000ee8:	2f00      	cmp	r7, #0
 8000eea:	d199      	bne.n	8000e20 <_Unwind_VRS_Pop+0x120>
 8000eec:	4601      	mov	r1, r0
 8000eee:	e7aa      	b.n	8000e46 <_Unwind_VRS_Pop+0x146>
 8000ef0:	f023 0308 	bic.w	r3, r3, #8
 8000ef4:	6023      	str	r3, [r4, #0]
 8000ef6:	f504 70a8 	add.w	r0, r4, #336	; 0x150
 8000efa:	f000 f86b 	bl	8000fd4 <__gnu_Unwind_Save_WMMXD>
 8000efe:	e742      	b.n	8000d86 <_Unwind_VRS_Pop+0x86>
 8000f00:	4620      	mov	r0, r4
 8000f02:	f022 0204 	bic.w	r2, r2, #4
 8000f06:	f840 2bd0 	str.w	r2, [r0], #208
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	f000 f83c 	bl	8000f88 <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f10:	9b01      	ldr	r3, [sp, #4]
 8000f12:	e7af      	b.n	8000e74 <_Unwind_VRS_Pop+0x174>
 8000f14:	a822      	add	r0, sp, #136	; 0x88
 8000f16:	9301      	str	r3, [sp, #4]
 8000f18:	f000 f826 	bl	8000f68 <__gnu_Unwind_Save_VFP>
 8000f1c:	9b01      	ldr	r3, [sp, #4]
 8000f1e:	e7b9      	b.n	8000e94 <_Unwind_VRS_Pop+0x194>
 8000f20:	f041 0102 	orr.w	r1, r1, #2
 8000f24:	f840 1b48 	str.w	r1, [r0], #72
 8000f28:	f000 f826 	bl	8000f78 <__gnu_Unwind_Save_VFP_D>
 8000f2c:	9b01      	ldr	r3, [sp, #4]
 8000f2e:	e79c      	b.n	8000e6a <_Unwind_VRS_Pop+0x16a>
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d003      	beq.n	8000f3c <_Unwind_VRS_Pop+0x23c>
 8000f34:	2e0f      	cmp	r6, #15
 8000f36:	f63f af5f 	bhi.w	8000df8 <_Unwind_VRS_Pop+0xf8>
 8000f3a:	e79f      	b.n	8000e7c <_Unwind_VRS_Pop+0x17c>
 8000f3c:	a822      	add	r0, sp, #136	; 0x88
 8000f3e:	9301      	str	r3, [sp, #4]
 8000f40:	f000 f812 	bl	8000f68 <__gnu_Unwind_Save_VFP>
 8000f44:	9b01      	ldr	r3, [sp, #4]
 8000f46:	e757      	b.n	8000df8 <_Unwind_VRS_Pop+0xf8>

08000f48 <__restore_core_regs>:
 8000f48:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8000f4c:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8000f50:	469c      	mov	ip, r3
 8000f52:	46a6      	mov	lr, r4
 8000f54:	f84c 5d04 	str.w	r5, [ip, #-4]!
 8000f58:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8000f5c:	46e5      	mov	sp, ip
 8000f5e:	bd00      	pop	{pc}

08000f60 <__gnu_Unwind_Restore_VFP>:
 8000f60:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop

08000f68 <__gnu_Unwind_Save_VFP>:
 8000f68:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <__gnu_Unwind_Restore_VFP_D>:
 8000f70:	ec90 0b20 	vldmia	r0, {d0-d15}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <__gnu_Unwind_Save_VFP_D>:
 8000f78:	ec80 0b20 	vstmia	r0, {d0-d15}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 8000f80:	ecd0 0b20 	vldmia	r0, {d16-d31}
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <__gnu_Unwind_Save_VFP_D_16_to_31>:
 8000f88:	ecc0 0b20 	vstmia	r0, {d16-d31}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <__gnu_Unwind_Restore_WMMXD>:
 8000f90:	ecf0 0102 	ldfe	f0, [r0], #8
 8000f94:	ecf0 1102 	ldfe	f1, [r0], #8
 8000f98:	ecf0 2102 	ldfe	f2, [r0], #8
 8000f9c:	ecf0 3102 	ldfe	f3, [r0], #8
 8000fa0:	ecf0 4102 	ldfe	f4, [r0], #8
 8000fa4:	ecf0 5102 	ldfe	f5, [r0], #8
 8000fa8:	ecf0 6102 	ldfe	f6, [r0], #8
 8000fac:	ecf0 7102 	ldfe	f7, [r0], #8
 8000fb0:	ecf0 8102 	ldfp	f0, [r0], #8
 8000fb4:	ecf0 9102 	ldfp	f1, [r0], #8
 8000fb8:	ecf0 a102 	ldfp	f2, [r0], #8
 8000fbc:	ecf0 b102 	ldfp	f3, [r0], #8
 8000fc0:	ecf0 c102 	ldfp	f4, [r0], #8
 8000fc4:	ecf0 d102 	ldfp	f5, [r0], #8
 8000fc8:	ecf0 e102 	ldfp	f6, [r0], #8
 8000fcc:	ecf0 f102 	ldfp	f7, [r0], #8
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <__gnu_Unwind_Save_WMMXD>:
 8000fd4:	ece0 0102 	stfe	f0, [r0], #8
 8000fd8:	ece0 1102 	stfe	f1, [r0], #8
 8000fdc:	ece0 2102 	stfe	f2, [r0], #8
 8000fe0:	ece0 3102 	stfe	f3, [r0], #8
 8000fe4:	ece0 4102 	stfe	f4, [r0], #8
 8000fe8:	ece0 5102 	stfe	f5, [r0], #8
 8000fec:	ece0 6102 	stfe	f6, [r0], #8
 8000ff0:	ece0 7102 	stfe	f7, [r0], #8
 8000ff4:	ece0 8102 	stfp	f0, [r0], #8
 8000ff8:	ece0 9102 	stfp	f1, [r0], #8
 8000ffc:	ece0 a102 	stfp	f2, [r0], #8
 8001000:	ece0 b102 	stfp	f3, [r0], #8
 8001004:	ece0 c102 	stfp	f4, [r0], #8
 8001008:	ece0 d102 	stfp	f5, [r0], #8
 800100c:	ece0 e102 	stfp	f6, [r0], #8
 8001010:	ece0 f102 	stfp	f7, [r0], #8
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__gnu_Unwind_Restore_WMMXC>:
 8001018:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 800101c:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001020:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001024:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <__gnu_Unwind_Save_WMMXC>:
 800102c:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001030:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001034:	fca0 a101 	stc2	1, cr10, [r0], #4
 8001038:	fca0 b101 	stc2	1, cr11, [r0], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <_Unwind_RaiseException>:
 8001040:	46ec      	mov	ip, sp
 8001042:	b500      	push	{lr}
 8001044:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001048:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 800104c:	f04f 0300 	mov.w	r3, #0
 8001050:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001054:	a901      	add	r1, sp, #4
 8001056:	f7ff fbf3 	bl	8000840 <__gnu_Unwind_RaiseException>
 800105a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 800105e:	b012      	add	sp, #72	; 0x48
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <_Unwind_Resume>:
 8001064:	46ec      	mov	ip, sp
 8001066:	b500      	push	{lr}
 8001068:	e92d 5000 	stmdb	sp!, {ip, lr}
 800106c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001078:	a901      	add	r1, sp, #4
 800107a:	f7ff fc1b 	bl	80008b4 <__gnu_Unwind_Resume>
 800107e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8001082:	b012      	add	sp, #72	; 0x48
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <_Unwind_Resume_or_Rethrow>:
 8001088:	46ec      	mov	ip, sp
 800108a:	b500      	push	{lr}
 800108c:	e92d 5000 	stmdb	sp!, {ip, lr}
 8001090:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001094:	f04f 0300 	mov.w	r3, #0
 8001098:	e92d 000c 	stmdb	sp!, {r2, r3}
 800109c:	a901      	add	r1, sp, #4
 800109e:	f7ff fc2b 	bl	80008f8 <__gnu_Unwind_Resume_or_Rethrow>
 80010a2:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010a6:	b012      	add	sp, #72	; 0x48
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <_Unwind_ForcedUnwind>:
 80010ac:	46ec      	mov	ip, sp
 80010ae:	b500      	push	{lr}
 80010b0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010b4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010b8:	f04f 0300 	mov.w	r3, #0
 80010bc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010c0:	ab01      	add	r3, sp, #4
 80010c2:	f7ff fbed 	bl	80008a0 <__gnu_Unwind_ForcedUnwind>
 80010c6:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ca:	b012      	add	sp, #72	; 0x48
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <_Unwind_Backtrace>:
 80010d0:	46ec      	mov	ip, sp
 80010d2:	b500      	push	{lr}
 80010d4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80010d8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80010dc:	f04f 0300 	mov.w	r3, #0
 80010e0:	e92d 000c 	stmdb	sp!, {r2, r3}
 80010e4:	aa01      	add	r2, sp, #4
 80010e6:	f7ff fc65 	bl	80009b4 <__gnu_Unwind_Backtrace>
 80010ea:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 80010ee:	b012      	add	sp, #72	; 0x48
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop

080010f4 <next_unwind_byte>:
 80010f4:	7a02      	ldrb	r2, [r0, #8]
 80010f6:	b91a      	cbnz	r2, 8001100 <next_unwind_byte+0xc>
 80010f8:	7a43      	ldrb	r3, [r0, #9]
 80010fa:	b943      	cbnz	r3, 800110e <next_unwind_byte+0x1a>
 80010fc:	20b0      	movs	r0, #176	; 0xb0
 80010fe:	4770      	bx	lr
 8001100:	6803      	ldr	r3, [r0, #0]
 8001102:	3a01      	subs	r2, #1
 8001104:	7202      	strb	r2, [r0, #8]
 8001106:	021a      	lsls	r2, r3, #8
 8001108:	6002      	str	r2, [r0, #0]
 800110a:	0e18      	lsrs	r0, r3, #24
 800110c:	4770      	bx	lr
 800110e:	6842      	ldr	r2, [r0, #4]
 8001110:	3b01      	subs	r3, #1
 8001112:	b410      	push	{r4}
 8001114:	7243      	strb	r3, [r0, #9]
 8001116:	6813      	ldr	r3, [r2, #0]
 8001118:	2103      	movs	r1, #3
 800111a:	1d14      	adds	r4, r2, #4
 800111c:	7201      	strb	r1, [r0, #8]
 800111e:	021a      	lsls	r2, r3, #8
 8001120:	6044      	str	r4, [r0, #4]
 8001122:	6002      	str	r2, [r0, #0]
 8001124:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001128:	0e18      	lsrs	r0, r3, #24
 800112a:	4770      	bx	lr

0800112c <_Unwind_GetGR.constprop.0>:
 800112c:	b500      	push	{lr}
 800112e:	b085      	sub	sp, #20
 8001130:	aa03      	add	r2, sp, #12
 8001132:	2300      	movs	r3, #0
 8001134:	9200      	str	r2, [sp, #0]
 8001136:	4619      	mov	r1, r3
 8001138:	220c      	movs	r2, #12
 800113a:	f7ff fbed 	bl	8000918 <_Unwind_VRS_Get>
 800113e:	9803      	ldr	r0, [sp, #12]
 8001140:	b005      	add	sp, #20
 8001142:	f85d fb04 	ldr.w	pc, [sp], #4
 8001146:	bf00      	nop

08001148 <unwind_UCB_from_context>:
 8001148:	e7f0      	b.n	800112c <_Unwind_GetGR.constprop.0>
 800114a:	bf00      	nop

0800114c <__gnu_unwind_execute>:
 800114c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001150:	4606      	mov	r6, r0
 8001152:	b085      	sub	sp, #20
 8001154:	460f      	mov	r7, r1
 8001156:	f04f 0800 	mov.w	r8, #0
 800115a:	4638      	mov	r0, r7
 800115c:	f7ff ffca 	bl	80010f4 <next_unwind_byte>
 8001160:	28b0      	cmp	r0, #176	; 0xb0
 8001162:	4604      	mov	r4, r0
 8001164:	d023      	beq.n	80011ae <__gnu_unwind_execute+0x62>
 8001166:	0605      	lsls	r5, r0, #24
 8001168:	d427      	bmi.n	80011ba <__gnu_unwind_execute+0x6e>
 800116a:	2300      	movs	r3, #0
 800116c:	f10d 090c 	add.w	r9, sp, #12
 8001170:	4619      	mov	r1, r3
 8001172:	0085      	lsls	r5, r0, #2
 8001174:	220d      	movs	r2, #13
 8001176:	f8cd 9000 	str.w	r9, [sp]
 800117a:	4630      	mov	r0, r6
 800117c:	f7ff fbcc 	bl	8000918 <_Unwind_VRS_Get>
 8001180:	b2ed      	uxtb	r5, r5
 8001182:	9b03      	ldr	r3, [sp, #12]
 8001184:	f8cd 9000 	str.w	r9, [sp]
 8001188:	0660      	lsls	r0, r4, #25
 800118a:	f105 0504 	add.w	r5, r5, #4
 800118e:	bf4c      	ite	mi
 8001190:	1b5d      	submi	r5, r3, r5
 8001192:	18ed      	addpl	r5, r5, r3
 8001194:	2300      	movs	r3, #0
 8001196:	4619      	mov	r1, r3
 8001198:	220d      	movs	r2, #13
 800119a:	4630      	mov	r0, r6
 800119c:	9503      	str	r5, [sp, #12]
 800119e:	f7ff fbe1 	bl	8000964 <_Unwind_VRS_Set>
 80011a2:	4638      	mov	r0, r7
 80011a4:	f7ff ffa6 	bl	80010f4 <next_unwind_byte>
 80011a8:	28b0      	cmp	r0, #176	; 0xb0
 80011aa:	4604      	mov	r4, r0
 80011ac:	d1db      	bne.n	8001166 <__gnu_unwind_execute+0x1a>
 80011ae:	f1b8 0f00 	cmp.w	r8, #0
 80011b2:	f000 8095 	beq.w	80012e0 <__gnu_unwind_execute+0x194>
 80011b6:	2000      	movs	r0, #0
 80011b8:	e01c      	b.n	80011f4 <__gnu_unwind_execute+0xa8>
 80011ba:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 80011be:	2b80      	cmp	r3, #128	; 0x80
 80011c0:	d05d      	beq.n	800127e <__gnu_unwind_execute+0x132>
 80011c2:	2b90      	cmp	r3, #144	; 0x90
 80011c4:	d019      	beq.n	80011fa <__gnu_unwind_execute+0xae>
 80011c6:	2ba0      	cmp	r3, #160	; 0xa0
 80011c8:	d02c      	beq.n	8001224 <__gnu_unwind_execute+0xd8>
 80011ca:	2bb0      	cmp	r3, #176	; 0xb0
 80011cc:	d03f      	beq.n	800124e <__gnu_unwind_execute+0x102>
 80011ce:	2bc0      	cmp	r3, #192	; 0xc0
 80011d0:	d06c      	beq.n	80012ac <__gnu_unwind_execute+0x160>
 80011d2:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80011d6:	2bd0      	cmp	r3, #208	; 0xd0
 80011d8:	d10b      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 80011da:	f000 0207 	and.w	r2, r0, #7
 80011de:	3201      	adds	r2, #1
 80011e0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80011e4:	2305      	movs	r3, #5
 80011e6:	2101      	movs	r1, #1
 80011e8:	4630      	mov	r0, r6
 80011ea:	f7ff fd89 	bl	8000d00 <_Unwind_VRS_Pop>
 80011ee:	2800      	cmp	r0, #0
 80011f0:	d0b3      	beq.n	800115a <__gnu_unwind_execute+0xe>
 80011f2:	2009      	movs	r0, #9
 80011f4:	b005      	add	sp, #20
 80011f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80011fa:	f000 030d 	and.w	r3, r0, #13
 80011fe:	2b0d      	cmp	r3, #13
 8001200:	d0f7      	beq.n	80011f2 <__gnu_unwind_execute+0xa6>
 8001202:	ad03      	add	r5, sp, #12
 8001204:	2300      	movs	r3, #0
 8001206:	f000 020f 	and.w	r2, r0, #15
 800120a:	4619      	mov	r1, r3
 800120c:	9500      	str	r5, [sp, #0]
 800120e:	4630      	mov	r0, r6
 8001210:	f7ff fb82 	bl	8000918 <_Unwind_VRS_Get>
 8001214:	2300      	movs	r3, #0
 8001216:	9500      	str	r5, [sp, #0]
 8001218:	4619      	mov	r1, r3
 800121a:	220d      	movs	r2, #13
 800121c:	4630      	mov	r0, r6
 800121e:	f7ff fba1 	bl	8000964 <_Unwind_VRS_Set>
 8001222:	e79a      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001224:	43c2      	mvns	r2, r0
 8001226:	f002 0307 	and.w	r3, r2, #7
 800122a:	f44f 627f 	mov.w	r2, #4080	; 0xff0
 800122e:	411a      	asrs	r2, r3
 8001230:	0701      	lsls	r1, r0, #28
 8001232:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
 8001236:	f04f 0300 	mov.w	r3, #0
 800123a:	bf48      	it	mi
 800123c:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
 8001240:	4619      	mov	r1, r3
 8001242:	4630      	mov	r0, r6
 8001244:	f7ff fd5c 	bl	8000d00 <_Unwind_VRS_Pop>
 8001248:	2800      	cmp	r0, #0
 800124a:	d1d2      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 800124c:	e785      	b.n	800115a <__gnu_unwind_execute+0xe>
 800124e:	28b1      	cmp	r0, #177	; 0xb1
 8001250:	d057      	beq.n	8001302 <__gnu_unwind_execute+0x1b6>
 8001252:	28b2      	cmp	r0, #178	; 0xb2
 8001254:	d068      	beq.n	8001328 <__gnu_unwind_execute+0x1dc>
 8001256:	28b3      	cmp	r0, #179	; 0xb3
 8001258:	f000 8095 	beq.w	8001386 <__gnu_unwind_execute+0x23a>
 800125c:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8001260:	2bb4      	cmp	r3, #180	; 0xb4
 8001262:	d0c6      	beq.n	80011f2 <__gnu_unwind_execute+0xa6>
 8001264:	f000 0207 	and.w	r2, r0, #7
 8001268:	3201      	adds	r2, #1
 800126a:	2301      	movs	r3, #1
 800126c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001270:	4619      	mov	r1, r3
 8001272:	4630      	mov	r0, r6
 8001274:	f7ff fd44 	bl	8000d00 <_Unwind_VRS_Pop>
 8001278:	2800      	cmp	r0, #0
 800127a:	d1ba      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 800127c:	e76d      	b.n	800115a <__gnu_unwind_execute+0xe>
 800127e:	4638      	mov	r0, r7
 8001280:	f7ff ff38 	bl	80010f4 <next_unwind_byte>
 8001284:	0224      	lsls	r4, r4, #8
 8001286:	4304      	orrs	r4, r0
 8001288:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800128c:	d0b1      	beq.n	80011f2 <__gnu_unwind_execute+0xa6>
 800128e:	0124      	lsls	r4, r4, #4
 8001290:	2300      	movs	r3, #0
 8001292:	b2a2      	uxth	r2, r4
 8001294:	4619      	mov	r1, r3
 8001296:	4630      	mov	r0, r6
 8001298:	f7ff fd32 	bl	8000d00 <_Unwind_VRS_Pop>
 800129c:	2800      	cmp	r0, #0
 800129e:	d1a8      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 80012a0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
 80012a4:	bf18      	it	ne
 80012a6:	f04f 0801 	movne.w	r8, #1
 80012aa:	e756      	b.n	800115a <__gnu_unwind_execute+0xe>
 80012ac:	28c6      	cmp	r0, #198	; 0xc6
 80012ae:	d07d      	beq.n	80013ac <__gnu_unwind_execute+0x260>
 80012b0:	28c7      	cmp	r0, #199	; 0xc7
 80012b2:	f000 8086 	beq.w	80013c2 <__gnu_unwind_execute+0x276>
 80012b6:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
 80012ba:	2bc0      	cmp	r3, #192	; 0xc0
 80012bc:	f000 8094 	beq.w	80013e8 <__gnu_unwind_execute+0x29c>
 80012c0:	28c8      	cmp	r0, #200	; 0xc8
 80012c2:	f000 809f 	beq.w	8001404 <__gnu_unwind_execute+0x2b8>
 80012c6:	28c9      	cmp	r0, #201	; 0xc9
 80012c8:	d193      	bne.n	80011f2 <__gnu_unwind_execute+0xa6>
 80012ca:	4638      	mov	r0, r7
 80012cc:	f7ff ff12 	bl	80010f4 <next_unwind_byte>
 80012d0:	0302      	lsls	r2, r0, #12
 80012d2:	f000 000f 	and.w	r0, r0, #15
 80012d6:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
 80012da:	3001      	adds	r0, #1
 80012dc:	4302      	orrs	r2, r0
 80012de:	e781      	b.n	80011e4 <__gnu_unwind_execute+0x98>
 80012e0:	ac03      	add	r4, sp, #12
 80012e2:	4643      	mov	r3, r8
 80012e4:	220e      	movs	r2, #14
 80012e6:	4641      	mov	r1, r8
 80012e8:	9400      	str	r4, [sp, #0]
 80012ea:	4630      	mov	r0, r6
 80012ec:	f7ff fb14 	bl	8000918 <_Unwind_VRS_Get>
 80012f0:	9400      	str	r4, [sp, #0]
 80012f2:	4630      	mov	r0, r6
 80012f4:	4643      	mov	r3, r8
 80012f6:	220f      	movs	r2, #15
 80012f8:	4641      	mov	r1, r8
 80012fa:	f7ff fb33 	bl	8000964 <_Unwind_VRS_Set>
 80012fe:	4640      	mov	r0, r8
 8001300:	e778      	b.n	80011f4 <__gnu_unwind_execute+0xa8>
 8001302:	4638      	mov	r0, r7
 8001304:	f7ff fef6 	bl	80010f4 <next_unwind_byte>
 8001308:	2800      	cmp	r0, #0
 800130a:	f43f af72 	beq.w	80011f2 <__gnu_unwind_execute+0xa6>
 800130e:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 8001312:	f47f af6e 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 8001316:	4602      	mov	r2, r0
 8001318:	4619      	mov	r1, r3
 800131a:	4630      	mov	r0, r6
 800131c:	f7ff fcf0 	bl	8000d00 <_Unwind_VRS_Pop>
 8001320:	2800      	cmp	r0, #0
 8001322:	f47f af66 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 8001326:	e718      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001328:	2300      	movs	r3, #0
 800132a:	f10d 090c 	add.w	r9, sp, #12
 800132e:	220d      	movs	r2, #13
 8001330:	4619      	mov	r1, r3
 8001332:	f8cd 9000 	str.w	r9, [sp]
 8001336:	4630      	mov	r0, r6
 8001338:	f7ff faee 	bl	8000918 <_Unwind_VRS_Get>
 800133c:	4638      	mov	r0, r7
 800133e:	f7ff fed9 	bl	80010f4 <next_unwind_byte>
 8001342:	0602      	lsls	r2, r0, #24
 8001344:	f04f 0402 	mov.w	r4, #2
 8001348:	d50c      	bpl.n	8001364 <__gnu_unwind_execute+0x218>
 800134a:	9b03      	ldr	r3, [sp, #12]
 800134c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8001350:	40a0      	lsls	r0, r4
 8001352:	4403      	add	r3, r0
 8001354:	4638      	mov	r0, r7
 8001356:	9303      	str	r3, [sp, #12]
 8001358:	f7ff fecc 	bl	80010f4 <next_unwind_byte>
 800135c:	0603      	lsls	r3, r0, #24
 800135e:	f104 0407 	add.w	r4, r4, #7
 8001362:	d4f2      	bmi.n	800134a <__gnu_unwind_execute+0x1fe>
 8001364:	9b03      	ldr	r3, [sp, #12]
 8001366:	f8cd 9000 	str.w	r9, [sp]
 800136a:	f000 027f 	and.w	r2, r0, #127	; 0x7f
 800136e:	40a2      	lsls	r2, r4
 8001370:	f503 7401 	add.w	r4, r3, #516	; 0x204
 8001374:	2300      	movs	r3, #0
 8001376:	4414      	add	r4, r2
 8001378:	4619      	mov	r1, r3
 800137a:	220d      	movs	r2, #13
 800137c:	4630      	mov	r0, r6
 800137e:	9403      	str	r4, [sp, #12]
 8001380:	f7ff faf0 	bl	8000964 <_Unwind_VRS_Set>
 8001384:	e6e9      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001386:	4638      	mov	r0, r7
 8001388:	f7ff feb4 	bl	80010f4 <next_unwind_byte>
 800138c:	0301      	lsls	r1, r0, #12
 800138e:	f000 000f 	and.w	r0, r0, #15
 8001392:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 8001396:	1c42      	adds	r2, r0, #1
 8001398:	2301      	movs	r3, #1
 800139a:	430a      	orrs	r2, r1
 800139c:	4630      	mov	r0, r6
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fcae 	bl	8000d00 <_Unwind_VRS_Pop>
 80013a4:	2800      	cmp	r0, #0
 80013a6:	f47f af24 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013aa:	e6d6      	b.n	800115a <__gnu_unwind_execute+0xe>
 80013ac:	4638      	mov	r0, r7
 80013ae:	f7ff fea1 	bl	80010f4 <next_unwind_byte>
 80013b2:	0301      	lsls	r1, r0, #12
 80013b4:	f000 000f 	and.w	r0, r0, #15
 80013b8:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
 80013bc:	1c42      	adds	r2, r0, #1
 80013be:	2303      	movs	r3, #3
 80013c0:	e7eb      	b.n	800139a <__gnu_unwind_execute+0x24e>
 80013c2:	4638      	mov	r0, r7
 80013c4:	f7ff fe96 	bl	80010f4 <next_unwind_byte>
 80013c8:	2800      	cmp	r0, #0
 80013ca:	f43f af12 	beq.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013ce:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
 80013d2:	f47f af0e 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013d6:	4602      	mov	r2, r0
 80013d8:	2104      	movs	r1, #4
 80013da:	4630      	mov	r0, r6
 80013dc:	f7ff fc90 	bl	8000d00 <_Unwind_VRS_Pop>
 80013e0:	2800      	cmp	r0, #0
 80013e2:	f47f af06 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 80013e6:	e6b8      	b.n	800115a <__gnu_unwind_execute+0xe>
 80013e8:	f000 020f 	and.w	r2, r0, #15
 80013ec:	3201      	adds	r2, #1
 80013ee:	2303      	movs	r3, #3
 80013f0:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
 80013f4:	4619      	mov	r1, r3
 80013f6:	4630      	mov	r0, r6
 80013f8:	f7ff fc82 	bl	8000d00 <_Unwind_VRS_Pop>
 80013fc:	2800      	cmp	r0, #0
 80013fe:	f47f aef8 	bne.w	80011f2 <__gnu_unwind_execute+0xa6>
 8001402:	e6aa      	b.n	800115a <__gnu_unwind_execute+0xe>
 8001404:	4638      	mov	r0, r7
 8001406:	f7ff fe75 	bl	80010f4 <next_unwind_byte>
 800140a:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 800140e:	f000 030f 	and.w	r3, r0, #15
 8001412:	3210      	adds	r2, #16
 8001414:	3301      	adds	r3, #1
 8001416:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
 800141a:	e6e3      	b.n	80011e4 <__gnu_unwind_execute+0x98>

0800141c <__gnu_unwind_frame>:
 800141c:	b510      	push	{r4, lr}
 800141e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001420:	b084      	sub	sp, #16
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	2003      	movs	r0, #3
 8001426:	f88d 000c 	strb.w	r0, [sp, #12]
 800142a:	79dc      	ldrb	r4, [r3, #7]
 800142c:	f88d 400d 	strb.w	r4, [sp, #13]
 8001430:	0212      	lsls	r2, r2, #8
 8001432:	3308      	adds	r3, #8
 8001434:	4608      	mov	r0, r1
 8001436:	a901      	add	r1, sp, #4
 8001438:	9201      	str	r2, [sp, #4]
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	f7ff fe86 	bl	800114c <__gnu_unwind_execute>
 8001440:	b004      	add	sp, #16
 8001442:	bd10      	pop	{r4, pc}

08001444 <_Unwind_GetRegionStart>:
 8001444:	b508      	push	{r3, lr}
 8001446:	f7ff fe7f 	bl	8001148 <unwind_UCB_from_context>
 800144a:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800144c:	bd08      	pop	{r3, pc}
 800144e:	bf00      	nop

08001450 <_Unwind_GetLanguageSpecificData>:
 8001450:	b508      	push	{r3, lr}
 8001452:	f7ff fe79 	bl	8001148 <unwind_UCB_from_context>
 8001456:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8001458:	79c3      	ldrb	r3, [r0, #7]
 800145a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800145e:	3008      	adds	r0, #8
 8001460:	bd08      	pop	{r3, pc}
 8001462:	bf00      	nop

08001464 <_Unwind_GetTextRelBase>:
 8001464:	b508      	push	{r3, lr}
 8001466:	f005 ff01 	bl	800726c <abort>
 800146a:	bf00      	nop

0800146c <_Unwind_GetDataRelBase>:
 800146c:	b508      	push	{r3, lr}
 800146e:	f7ff fff9 	bl	8001464 <_Unwind_GetTextRelBase>
 8001472:	bf00      	nop

08001474 <__aeabi_idiv0>:
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <HAL_Init>:
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001478:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <HAL_Init+0x28>)
 800147a:	6813      	ldr	r3, [r2, #0]
 800147c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8001480:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001482:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001484:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001486:	f000 f833 	bl	80014f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800148a:	2000      	movs	r0, #0
 800148c:	f004 fc6c 	bl	8005d68 <HAL_InitTick>
 8001490:	4604      	mov	r4, r0
 8001492:	b918      	cbnz	r0, 800149c <HAL_Init+0x24>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001494:	f004 fc16 	bl	8005cc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8001498:	4620      	mov	r0, r4
 800149a:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800149c:	2401      	movs	r4, #1
 800149e:	e7fb      	b.n	8001498 <HAL_Init+0x20>
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80014a4:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <HAL_IncTick+0x10>)
 80014a6:	4904      	ldr	r1, [pc, #16]	; (80014b8 <HAL_IncTick+0x14>)
 80014a8:	6813      	ldr	r3, [r2, #0]
 80014aa:	6809      	ldr	r1, [r1, #0]
 80014ac:	440b      	add	r3, r1
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200036d8 	.word	0x200036d8
 80014b8:	20000000 	.word	0x20000000

080014bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80014bc:	4b01      	ldr	r3, [pc, #4]	; (80014c4 <HAL_GetTick+0x8>)
 80014be:	6818      	ldr	r0, [r3, #0]
}
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	200036d8 	.word	0x200036d8

080014c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c8:	b538      	push	{r3, r4, r5, lr}
 80014ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff fff6 	bl	80014bc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	bf1c      	itt	ne
 80014d4:	4b05      	ldrne	r3, [pc, #20]	; (80014ec <HAL_Delay+0x24>)
 80014d6:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80014d8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80014da:	bf18      	it	ne
 80014dc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014de:	f7ff ffed 	bl	80014bc <HAL_GetTick>
 80014e2:	1b40      	subs	r0, r0, r5
 80014e4:	4284      	cmp	r4, r0
 80014e6:	d8fa      	bhi.n	80014de <HAL_Delay+0x16>
  {
  }
}
 80014e8:	bd38      	pop	{r3, r4, r5, pc}
 80014ea:	bf00      	nop
 80014ec:	20000000 	.word	0x20000000

080014f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f0:	4a07      	ldr	r2, [pc, #28]	; (8001510 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80014f2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014f8:	041b      	lsls	r3, r3, #16
 80014fa:	0c1b      	lsrs	r3, r3, #16
 80014fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001500:	0200      	lsls	r0, r0, #8
 8001502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001506:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800150a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800150c:	60d3      	str	r3, [r2, #12]
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001516:	b530      	push	{r4, r5, lr}
 8001518:	68dc      	ldr	r4, [r3, #12]
 800151a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800151e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	2b04      	cmp	r3, #4
 8001526:	bf28      	it	cs
 8001528:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 0501 	mov.w	r5, #1
 8001530:	fa05 f303 	lsl.w	r3, r5, r3
 8001534:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001538:	bf8c      	ite	hi
 800153a:	3c03      	subhi	r4, #3
 800153c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800153e:	4019      	ands	r1, r3
 8001540:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001542:	fa05 f404 	lsl.w	r4, r5, r4
 8001546:	3c01      	subs	r4, #1
 8001548:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 800154a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	ea42 0201 	orr.w	r2, r2, r1
 8001550:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001554:	bfad      	iteet	ge
 8001556:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155a:	f000 000f 	andlt.w	r0, r0, #15
 800155e:	4b06      	ldrlt	r3, [pc, #24]	; (8001578 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001564:	bfb5      	itete	lt
 8001566:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001568:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8001570:	bd30      	pop	{r4, r5, pc}
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00
 8001578:	e000ed14 	.word	0xe000ed14

0800157c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800157c:	2800      	cmp	r0, #0
 800157e:	db08      	blt.n	8001592 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001580:	0942      	lsrs	r2, r0, #5
 8001582:	2301      	movs	r3, #1
 8001584:	f000 001f 	and.w	r0, r0, #31
 8001588:	fa03 f000 	lsl.w	r0, r3, r0
 800158c:	4b01      	ldr	r3, [pc, #4]	; (8001594 <HAL_NVIC_EnableIRQ+0x18>)
 800158e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001592:	4770      	bx	lr
 8001594:	e000e100 	.word	0xe000e100

08001598 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8001598:	b911      	cbnz	r1, 80015a0 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800159a:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800159c:	4608      	mov	r0, r1
      break;
 800159e:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 80015a0:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 80015a2:	4770      	bx	lr

080015a4 <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80015a4:	b110      	cbz	r0, 80015ac <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80015a6:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 80015a8:	2000      	movs	r0, #0
 80015aa:	4770      	bx	lr
    return HAL_ERROR;
 80015ac:	2001      	movs	r0, #1
  }
}
 80015ae:	4770      	bx	lr

080015b0 <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80015b0:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80015b2:	2201      	movs	r2, #1
 80015b4:	f003 011f 	and.w	r1, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80015b8:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80015bc:	408a      	lsls	r2, r1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 80015be:	015b      	lsls	r3, r3, #5
 80015c0:	4906      	ldr	r1, [pc, #24]	; (80015dc <HAL_EXTI_IRQHandler+0x2c>)
{
 80015c2:	b410      	push	{r4}
  regval = (*regaddr & maskline);
 80015c4:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 80015c6:	4222      	tst	r2, r4
 80015c8:	d005      	beq.n	80015d6 <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80015ca:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80015cc:	6843      	ldr	r3, [r0, #4]
 80015ce:	b113      	cbz	r3, 80015d6 <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 80015d0:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 80015d4:	4718      	bx	r3
}
 80015d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40010414 	.word	0x40010414

080015e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015e4:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e6:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e8:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8001794 <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80015ec:	4c67      	ldr	r4, [pc, #412]	; (800178c <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015ee:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 80015f0:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015f2:	9a01      	ldr	r2, [sp, #4]
 80015f4:	40da      	lsrs	r2, r3
 80015f6:	d102      	bne.n	80015fe <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 80015f8:	b005      	add	sp, #20
 80015fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015fe:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8001600:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001602:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8001604:	ea12 0e06 	ands.w	lr, r2, r6
 8001608:	f000 80b1 	beq.w	800176e <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800160c:	684a      	ldr	r2, [r1, #4]
 800160e:	f022 0710 	bic.w	r7, r2, #16
 8001612:	2f02      	cmp	r7, #2
 8001614:	d116      	bne.n	8001644 <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8001616:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 800161a:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800161e:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001622:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001626:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 800162a:	f04f 0c0f 	mov.w	ip, #15
 800162e:	fa0c fc0a 	lsl.w	ip, ip, sl
 8001632:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001636:	690d      	ldr	r5, [r1, #16]
 8001638:	fa05 f50a 	lsl.w	r5, r5, sl
 800163c:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001640:	f8c9 5020 	str.w	r5, [r9, #32]
 8001644:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001648:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800164a:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800164e:	fa05 f50c 	lsl.w	r5, r5, ip
 8001652:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001654:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001658:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800165c:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001660:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001662:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001666:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8001668:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800166c:	d811      	bhi.n	8001692 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 800166e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001670:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001674:	68cf      	ldr	r7, [r1, #12]
 8001676:	fa07 f70c 	lsl.w	r7, r7, ip
 800167a:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 800167e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001680:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001682:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001686:	f3c2 1700 	ubfx	r7, r2, #4, #1
 800168a:	409f      	lsls	r7, r3
 800168c:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8001690:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001692:	f1ba 0f03 	cmp.w	sl, #3
 8001696:	d107      	bne.n	80016a8 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8001698:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800169a:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800169e:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 80016a2:	409f      	lsls	r7, r3
 80016a4:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 80016a6:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 80016a8:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80016aa:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80016ac:	688e      	ldr	r6, [r1, #8]
 80016ae:	fa06 f60c 	lsl.w	r6, r6, ip
 80016b2:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 80016b4:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016b6:	00d5      	lsls	r5, r2, #3
 80016b8:	d559      	bpl.n	800176e <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80016be:	f045 0501 	orr.w	r5, r5, #1
 80016c2:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 80016c6:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 80016ca:	f023 0603 	bic.w	r6, r3, #3
 80016ce:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80016d2:	f005 0501 	and.w	r5, r5, #1
 80016d6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 80016da:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016dc:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e0:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80016e2:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016e4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80016e8:	270f      	movs	r7, #15
 80016ea:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016ee:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80016f2:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016f6:	d03c      	beq.n	8001772 <HAL_GPIO_Init+0x192>
 80016f8:	4d25      	ldr	r5, [pc, #148]	; (8001790 <HAL_GPIO_Init+0x1b0>)
 80016fa:	42a8      	cmp	r0, r5
 80016fc:	d03b      	beq.n	8001776 <HAL_GPIO_Init+0x196>
 80016fe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001702:	42a8      	cmp	r0, r5
 8001704:	d039      	beq.n	800177a <HAL_GPIO_Init+0x19a>
 8001706:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800170a:	42a8      	cmp	r0, r5
 800170c:	d037      	beq.n	800177e <HAL_GPIO_Init+0x19e>
 800170e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001712:	42a8      	cmp	r0, r5
 8001714:	d035      	beq.n	8001782 <HAL_GPIO_Init+0x1a2>
 8001716:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800171a:	42a8      	cmp	r0, r5
 800171c:	d033      	beq.n	8001786 <HAL_GPIO_Init+0x1a6>
 800171e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001722:	42a8      	cmp	r0, r5
 8001724:	bf14      	ite	ne
 8001726:	2507      	movne	r5, #7
 8001728:	2506      	moveq	r5, #6
 800172a:	fa05 f50c 	lsl.w	r5, r5, ip
 800172e:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001730:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8001732:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001734:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001738:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 800173a:	bf54      	ite	pl
 800173c:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800173e:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8001742:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8001744:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001746:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8001748:	bf54      	ite	pl
 800174a:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800174c:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8001750:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8001752:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001754:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8001756:	bf54      	ite	pl
 8001758:	4035      	andpl	r5, r6
          temp |= iocurrent;
 800175a:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 800175e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001760:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001762:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8001764:	bf54      	ite	pl
 8001766:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8001768:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 800176c:	60e5      	str	r5, [r4, #12]
    position++;
 800176e:	3301      	adds	r3, #1
 8001770:	e73f      	b.n	80015f2 <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001772:	2500      	movs	r5, #0
 8001774:	e7d9      	b.n	800172a <HAL_GPIO_Init+0x14a>
 8001776:	2501      	movs	r5, #1
 8001778:	e7d7      	b.n	800172a <HAL_GPIO_Init+0x14a>
 800177a:	2502      	movs	r5, #2
 800177c:	e7d5      	b.n	800172a <HAL_GPIO_Init+0x14a>
 800177e:	2503      	movs	r5, #3
 8001780:	e7d3      	b.n	800172a <HAL_GPIO_Init+0x14a>
 8001782:	2504      	movs	r5, #4
 8001784:	e7d1      	b.n	800172a <HAL_GPIO_Init+0x14a>
 8001786:	2505      	movs	r5, #5
 8001788:	e7cf      	b.n	800172a <HAL_GPIO_Init+0x14a>
 800178a:	bf00      	nop
 800178c:	40010400 	.word	0x40010400
 8001790:	48000400 	.word	0x48000400
 8001794:	40021000 	.word	0x40021000

08001798 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800179c:	4c40      	ldr	r4, [pc, #256]	; (80018a0 <HAL_GPIO_DeInit+0x108>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800179e:	f8df b108 	ldr.w	fp, [pc, #264]	; 80018a8 <HAL_GPIO_DeInit+0x110>
  uint32_t position = 0x00u;
 80017a2:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 80017a4:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80017a8:	f04f 080f 	mov.w	r8, #15
  while ((GPIO_Pin >> position) != 0x00u)
 80017ac:	fa31 f203 	lsrs.w	r2, r1, r3
 80017b0:	d101      	bne.n	80017b6 <HAL_GPIO_DeInit+0x1e>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
 80017b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80017b6:	fa0a f503 	lsl.w	r5, sl, r3
    if (iocurrent != 0x00u)
 80017ba:	ea11 0605 	ands.w	r6, r1, r5
 80017be:	d060      	beq.n	8001882 <HAL_GPIO_DeInit+0xea>
 80017c0:	f023 0703 	bic.w	r7, r3, #3
 80017c4:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80017c8:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80017cc:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 80017d0:	68ba      	ldr	r2, [r7, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80017d2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80017d6:	fa08 f90e 	lsl.w	r9, r8, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80017da:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80017de:	ea02 0c09 	and.w	ip, r2, r9
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80017e2:	d050      	beq.n	8001886 <HAL_GPIO_DeInit+0xee>
 80017e4:	4a2f      	ldr	r2, [pc, #188]	; (80018a4 <HAL_GPIO_DeInit+0x10c>)
 80017e6:	4290      	cmp	r0, r2
 80017e8:	d04f      	beq.n	800188a <HAL_GPIO_DeInit+0xf2>
 80017ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017ee:	4290      	cmp	r0, r2
 80017f0:	d04d      	beq.n	800188e <HAL_GPIO_DeInit+0xf6>
 80017f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017f6:	4290      	cmp	r0, r2
 80017f8:	d04b      	beq.n	8001892 <HAL_GPIO_DeInit+0xfa>
 80017fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80017fe:	4290      	cmp	r0, r2
 8001800:	d049      	beq.n	8001896 <HAL_GPIO_DeInit+0xfe>
 8001802:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001806:	4290      	cmp	r0, r2
 8001808:	d047      	beq.n	800189a <HAL_GPIO_DeInit+0x102>
 800180a:	4558      	cmp	r0, fp
 800180c:	bf0c      	ite	eq
 800180e:	2206      	moveq	r2, #6
 8001810:	2207      	movne	r2, #7
 8001812:	fa02 f20e 	lsl.w	r2, r2, lr
 8001816:	4594      	cmp	ip, r2
 8001818:	d110      	bne.n	800183c <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR1 &= ~(iocurrent);
 800181a:	6822      	ldr	r2, [r4, #0]
 800181c:	43f6      	mvns	r6, r6
 800181e:	4032      	ands	r2, r6
 8001820:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001822:	6862      	ldr	r2, [r4, #4]
 8001824:	4032      	ands	r2, r6
 8001826:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001828:	68a2      	ldr	r2, [r4, #8]
 800182a:	4032      	ands	r2, r6
 800182c:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800182e:	68e2      	ldr	r2, [r4, #12]
 8001830:	4016      	ands	r6, r2
 8001832:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	ea22 0209 	bic.w	r2, r2, r9
 800183a:	60ba      	str	r2, [r7, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800183c:	6806      	ldr	r6, [r0, #0]
 800183e:	2703      	movs	r7, #3
 8001840:	005a      	lsls	r2, r3, #1
 8001842:	fa07 f202 	lsl.w	r2, r7, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001846:	fa23 f707 	lsr.w	r7, r3, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800184a:	4316      	orrs	r6, r2
 800184c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8001850:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001852:	f003 0607 	and.w	r6, r3, #7
 8001856:	f8d7 e020 	ldr.w	lr, [r7, #32]
 800185a:	00b6      	lsls	r6, r6, #2
 800185c:	fa08 f606 	lsl.w	r6, r8, r6
 8001860:	ea2e 0606 	bic.w	r6, lr, r6
 8001864:	623e      	str	r6, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001866:	6886      	ldr	r6, [r0, #8]
 8001868:	43d2      	mvns	r2, r2
 800186a:	4016      	ands	r6, r2
 800186c:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800186e:	6846      	ldr	r6, [r0, #4]
 8001870:	43ed      	mvns	r5, r5
 8001872:	402e      	ands	r6, r5
 8001874:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001876:	68c6      	ldr	r6, [r0, #12]
 8001878:	4032      	ands	r2, r6
 800187a:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800187c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800187e:	4015      	ands	r5, r2
 8001880:	62c5      	str	r5, [r0, #44]	; 0x2c
    position++;
 8001882:	3301      	adds	r3, #1
 8001884:	e792      	b.n	80017ac <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001886:	2200      	movs	r2, #0
 8001888:	e7c3      	b.n	8001812 <HAL_GPIO_DeInit+0x7a>
 800188a:	2201      	movs	r2, #1
 800188c:	e7c1      	b.n	8001812 <HAL_GPIO_DeInit+0x7a>
 800188e:	2202      	movs	r2, #2
 8001890:	e7bf      	b.n	8001812 <HAL_GPIO_DeInit+0x7a>
 8001892:	2203      	movs	r2, #3
 8001894:	e7bd      	b.n	8001812 <HAL_GPIO_DeInit+0x7a>
 8001896:	2204      	movs	r2, #4
 8001898:	e7bb      	b.n	8001812 <HAL_GPIO_DeInit+0x7a>
 800189a:	2205      	movs	r2, #5
 800189c:	e7b9      	b.n	8001812 <HAL_GPIO_DeInit+0x7a>
 800189e:	bf00      	nop
 80018a0:	40010400 	.word	0x40010400
 80018a4:	48000400 	.word	0x48000400
 80018a8:	48001800 	.word	0x48001800

080018ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018ac:	6903      	ldr	r3, [r0, #16]
 80018ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80018b0:	bf14      	ite	ne
 80018b2:	2001      	movne	r0, #1
 80018b4:	2000      	moveq	r0, #0
 80018b6:	4770      	bx	lr

080018b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b8:	b10a      	cbz	r2, 80018be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ba:	6181      	str	r1, [r0, #24]
 80018bc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018be:	6281      	str	r1, [r0, #40]	; 0x28
 80018c0:	4770      	bx	lr
	...

080018c4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018c4:	4b02      	ldr	r3, [pc, #8]	; (80018d0 <HAL_PWREx_GetVoltageRange+0xc>)
 80018c6:	6818      	ldr	r0, [r3, #0]
#endif
}
 80018c8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	40007000 	.word	0x40007000

080018d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018d4:	4b17      	ldr	r3, [pc, #92]	; (8001934 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d6:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018dc:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e0:	d11c      	bne.n	800191c <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018e2:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80018e6:	d015      	beq.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80018ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018f2:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018f4:	4a10      	ldr	r2, [pc, #64]	; (8001938 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80018f6:	6811      	ldr	r1, [r2, #0]
 80018f8:	2232      	movs	r2, #50	; 0x32
 80018fa:	434a      	muls	r2, r1
 80018fc:	490f      	ldr	r1, [pc, #60]	; (800193c <HAL_PWREx_ControlVoltageScaling+0x68>)
 80018fe:	fbb2 f2f1 	udiv	r2, r2, r1
 8001902:	4619      	mov	r1, r3
 8001904:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001906:	6958      	ldr	r0, [r3, #20]
 8001908:	0540      	lsls	r0, r0, #21
 800190a:	d500      	bpl.n	800190e <HAL_PWREx_ControlVoltageScaling+0x3a>
 800190c:	b922      	cbnz	r2, 8001918 <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800190e:	694b      	ldr	r3, [r1, #20]
 8001910:	055b      	lsls	r3, r3, #21
 8001912:	d40d      	bmi.n	8001930 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001914:	2000      	movs	r0, #0
 8001916:	4770      	bx	lr
        wait_loop_index--;
 8001918:	3a01      	subs	r2, #1
 800191a:	e7f4      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800191c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001920:	bf1f      	itttt	ne
 8001922:	681a      	ldrne	r2, [r3, #0]
 8001924:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 8001928:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 800192c:	601a      	strne	r2, [r3, #0]
 800192e:	e7f1      	b.n	8001914 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001930:	2003      	movs	r0, #3
}
 8001932:	4770      	bx	lr
 8001934:	40007000 	.word	0x40007000
 8001938:	2000001c 	.word	0x2000001c
 800193c:	000f4240 	.word	0x000f4240

08001940 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001940:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001942:	4d1e      	ldr	r5, [pc, #120]	; (80019bc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001944:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001946:	00da      	lsls	r2, r3, #3
{
 8001948:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800194a:	d518      	bpl.n	800197e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800194c:	f7ff ffba 	bl	80018c4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001950:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001954:	d123      	bne.n	800199e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001956:	2c80      	cmp	r4, #128	; 0x80
 8001958:	d929      	bls.n	80019ae <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800195a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800195c:	bf8c      	ite	hi
 800195e:	2002      	movhi	r0, #2
 8001960:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001962:	4a17      	ldr	r2, [pc, #92]	; (80019c0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001964:	6813      	ldr	r3, [r2, #0]
 8001966:	f023 0307 	bic.w	r3, r3, #7
 800196a:	4303      	orrs	r3, r0
 800196c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800196e:	6813      	ldr	r3, [r2, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001974:	1a18      	subs	r0, r3, r0
 8001976:	bf18      	it	ne
 8001978:	2001      	movne	r0, #1
 800197a:	b003      	add	sp, #12
 800197c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800197e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	65ab      	str	r3, [r5, #88]	; 0x58
 8001986:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198c:	9301      	str	r3, [sp, #4]
 800198e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001990:	f7ff ff98 	bl	80018c4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001996:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199a:	65ab      	str	r3, [r5, #88]	; 0x58
 800199c:	e7d8      	b.n	8001950 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800199e:	2c80      	cmp	r4, #128	; 0x80
 80019a0:	d807      	bhi.n	80019b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80019a2:	d008      	beq.n	80019b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80019a4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80019a8:	4258      	negs	r0, r3
 80019aa:	4158      	adcs	r0, r3
 80019ac:	e7d9      	b.n	8001962 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019ae:	2000      	movs	r0, #0
 80019b0:	e7d7      	b.n	8001962 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80019b2:	2003      	movs	r0, #3
 80019b4:	e7d5      	b.n	8001962 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80019b6:	2002      	movs	r0, #2
 80019b8:	e7d3      	b.n	8001962 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40022000 	.word	0x40022000

080019c4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_RCC_GetSysClockFreq+0x8c>)
 80019c6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019c8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019ca:	f012 020c 	ands.w	r2, r2, #12
 80019ce:	d005      	beq.n	80019dc <HAL_RCC_GetSysClockFreq+0x18>
 80019d0:	2a0c      	cmp	r2, #12
 80019d2:	d115      	bne.n	8001a00 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019d4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80019d8:	2901      	cmp	r1, #1
 80019da:	d118      	bne.n	8001a0e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019dc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80019de:	481d      	ldr	r0, [pc, #116]	; (8001a54 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80019e0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019e2:	bf55      	itete	pl
 80019e4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019e8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80019ea:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80019ee:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80019f2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019f6:	b34a      	cbz	r2, 8001a4c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80019f8:	2a0c      	cmp	r2, #12
 80019fa:	d009      	beq.n	8001a10 <HAL_RCC_GetSysClockFreq+0x4c>
 80019fc:	2000      	movs	r0, #0
  return sysclockfreq;
 80019fe:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a00:	2a04      	cmp	r2, #4
 8001a02:	d022      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x86>
 8001a04:	2a08      	cmp	r2, #8
 8001a06:	4814      	ldr	r0, [pc, #80]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a08:	bf18      	it	ne
 8001a0a:	2000      	movne	r0, #0
 8001a0c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a0e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a10:	68da      	ldr	r2, [r3, #12]
 8001a12:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001a16:	2a02      	cmp	r2, #2
 8001a18:	d015      	beq.n	8001a46 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 8001a1a:	490f      	ldr	r1, [pc, #60]	; (8001a58 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a1c:	2a03      	cmp	r2, #3
 8001a1e:	bf08      	it	eq
 8001a20:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a22:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a24:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a2c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a30:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a34:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a36:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a38:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001a3a:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001a3c:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8001a40:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a44:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x98>)
 8001a48:	e7eb      	b.n	8001a22 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001a4a:	4804      	ldr	r0, [pc, #16]	; (8001a5c <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	080075b0 	.word	0x080075b0
 8001a58:	007a1200 	.word	0x007a1200
 8001a5c:	00f42400 	.word	0x00f42400

08001a60 <HAL_RCC_OscConfig>:
{
 8001a60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001a64:	4605      	mov	r5, r0
 8001a66:	b918      	cbnz	r0, 8001a70 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001a68:	2001      	movs	r0, #1
}
 8001a6a:	b003      	add	sp, #12
 8001a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a70:	4ca7      	ldr	r4, [pc, #668]	; (8001d10 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a72:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a74:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a76:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a78:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a7a:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a7e:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a82:	d53d      	bpl.n	8001b00 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a84:	b11e      	cbz	r6, 8001a8e <HAL_RCC_OscConfig+0x2e>
 8001a86:	2e0c      	cmp	r6, #12
 8001a88:	d166      	bne.n	8001b58 <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a8a:	2f01      	cmp	r7, #1
 8001a8c:	d164      	bne.n	8001b58 <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a8e:	6823      	ldr	r3, [r4, #0]
 8001a90:	0799      	lsls	r1, r3, #30
 8001a92:	d502      	bpl.n	8001a9a <HAL_RCC_OscConfig+0x3a>
 8001a94:	69ab      	ldr	r3, [r5, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0e6      	beq.n	8001a68 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a9a:	6823      	ldr	r3, [r4, #0]
 8001a9c:	6a28      	ldr	r0, [r5, #32]
 8001a9e:	071a      	lsls	r2, r3, #28
 8001aa0:	bf56      	itet	pl
 8001aa2:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001aa6:	6823      	ldrmi	r3, [r4, #0]
 8001aa8:	091b      	lsrpl	r3, r3, #4
 8001aaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aae:	4283      	cmp	r3, r0
 8001ab0:	d23b      	bcs.n	8001b2a <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab2:	f7ff ff45 	bl	8001940 <RCC_SetFlashLatencyFromMSIRange>
 8001ab6:	2800      	cmp	r0, #0
 8001ab8:	d1d6      	bne.n	8001a68 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aba:	6823      	ldr	r3, [r4, #0]
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	6023      	str	r3, [r4, #0]
 8001ac2:	6823      	ldr	r3, [r4, #0]
 8001ac4:	6a2a      	ldr	r2, [r5, #32]
 8001ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001aca:	4313      	orrs	r3, r2
 8001acc:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ace:	6863      	ldr	r3, [r4, #4]
 8001ad0:	69ea      	ldr	r2, [r5, #28]
 8001ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ad6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ada:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001adc:	f7ff ff72 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8001ae0:	68a3      	ldr	r3, [r4, #8]
 8001ae2:	4a8c      	ldr	r2, [pc, #560]	; (8001d14 <HAL_RCC_OscConfig+0x2b4>)
 8001ae4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ae8:	5cd3      	ldrb	r3, [r2, r3]
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	40d8      	lsrs	r0, r3
 8001af0:	4b89      	ldr	r3, [pc, #548]	; (8001d18 <HAL_RCC_OscConfig+0x2b8>)
 8001af2:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001af4:	4b89      	ldr	r3, [pc, #548]	; (8001d1c <HAL_RCC_OscConfig+0x2bc>)
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	f004 f936 	bl	8005d68 <HAL_InitTick>
        if(status != HAL_OK)
 8001afc:	2800      	cmp	r0, #0
 8001afe:	d1b4      	bne.n	8001a6a <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b00:	682b      	ldr	r3, [r5, #0]
 8001b02:	07d9      	lsls	r1, r3, #31
 8001b04:	d45f      	bmi.n	8001bc6 <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b06:	682b      	ldr	r3, [r5, #0]
 8001b08:	079a      	lsls	r2, r3, #30
 8001b0a:	f100 809e 	bmi.w	8001c4a <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b0e:	682b      	ldr	r3, [r5, #0]
 8001b10:	0719      	lsls	r1, r3, #28
 8001b12:	f100 80d2 	bmi.w	8001cba <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b16:	682b      	ldr	r3, [r5, #0]
 8001b18:	075a      	lsls	r2, r3, #29
 8001b1a:	f100 8101 	bmi.w	8001d20 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b1e:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f040 816a 	bne.w	8001dfa <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001b26:	2000      	movs	r0, #0
 8001b28:	e79f      	b.n	8001a6a <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	f043 0308 	orr.w	r3, r3, #8
 8001b30:	6023      	str	r3, [r4, #0]
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b38:	4303      	orrs	r3, r0
 8001b3a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b3c:	6863      	ldr	r3, [r4, #4]
 8001b3e:	69ea      	ldr	r2, [r5, #28]
 8001b40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b44:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b48:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b4a:	2e00      	cmp	r6, #0
 8001b4c:	d1c6      	bne.n	8001adc <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b4e:	f7ff fef7 	bl	8001940 <RCC_SetFlashLatencyFromMSIRange>
 8001b52:	2800      	cmp	r0, #0
 8001b54:	d0c2      	beq.n	8001adc <HAL_RCC_OscConfig+0x7c>
 8001b56:	e787      	b.n	8001a68 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b58:	69ab      	ldr	r3, [r5, #24]
 8001b5a:	b31b      	cbz	r3, 8001ba4 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001b64:	f7ff fcaa 	bl	80014bc <HAL_GetTick>
 8001b68:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	079b      	lsls	r3, r3, #30
 8001b6e:	d511      	bpl.n	8001b94 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b70:	6823      	ldr	r3, [r4, #0]
 8001b72:	f043 0308 	orr.w	r3, r3, #8
 8001b76:	6023      	str	r3, [r4, #0]
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	6a2a      	ldr	r2, [r5, #32]
 8001b7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b80:	4313      	orrs	r3, r2
 8001b82:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b84:	6863      	ldr	r3, [r4, #4]
 8001b86:	69ea      	ldr	r2, [r5, #28]
 8001b88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001b8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001b90:	6063      	str	r3, [r4, #4]
 8001b92:	e7b5      	b.n	8001b00 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b94:	f7ff fc92 	bl	80014bc <HAL_GetTick>
 8001b98:	eba0 0008 	sub.w	r0, r0, r8
 8001b9c:	2802      	cmp	r0, #2
 8001b9e:	d9e4      	bls.n	8001b6a <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	e762      	b.n	8001a6a <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	f023 0301 	bic.w	r3, r3, #1
 8001baa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bac:	f7ff fc86 	bl	80014bc <HAL_GetTick>
 8001bb0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bb2:	6823      	ldr	r3, [r4, #0]
 8001bb4:	0798      	lsls	r0, r3, #30
 8001bb6:	d5a3      	bpl.n	8001b00 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb8:	f7ff fc80 	bl	80014bc <HAL_GetTick>
 8001bbc:	eba0 0008 	sub.w	r0, r0, r8
 8001bc0:	2802      	cmp	r0, #2
 8001bc2:	d9f6      	bls.n	8001bb2 <HAL_RCC_OscConfig+0x152>
 8001bc4:	e7ec      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001bc6:	2e08      	cmp	r6, #8
 8001bc8:	d003      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x172>
 8001bca:	2e0c      	cmp	r6, #12
 8001bcc:	d108      	bne.n	8001be0 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bce:	2f03      	cmp	r7, #3
 8001bd0:	d106      	bne.n	8001be0 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	039b      	lsls	r3, r3, #14
 8001bd6:	d596      	bpl.n	8001b06 <HAL_RCC_OscConfig+0xa6>
 8001bd8:	686b      	ldr	r3, [r5, #4]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d193      	bne.n	8001b06 <HAL_RCC_OscConfig+0xa6>
 8001bde:	e743      	b.n	8001a68 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001be0:	686b      	ldr	r3, [r5, #4]
 8001be2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be6:	d110      	bne.n	8001c0a <HAL_RCC_OscConfig+0x1aa>
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bee:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fc64 	bl	80014bc <HAL_GetTick>
 8001bf4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	0398      	lsls	r0, r3, #14
 8001bfa:	d484      	bmi.n	8001b06 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bfc:	f7ff fc5e 	bl	80014bc <HAL_GetTick>
 8001c00:	eba0 0008 	sub.w	r0, r0, r8
 8001c04:	2864      	cmp	r0, #100	; 0x64
 8001c06:	d9f6      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x196>
 8001c08:	e7ca      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c0e:	d104      	bne.n	8001c1a <HAL_RCC_OscConfig+0x1ba>
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c16:	6023      	str	r3, [r4, #0]
 8001c18:	e7e6      	b.n	8001be8 <HAL_RCC_OscConfig+0x188>
 8001c1a:	6822      	ldr	r2, [r4, #0]
 8001c1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c20:	6022      	str	r2, [r4, #0]
 8001c22:	6822      	ldr	r2, [r4, #0]
 8001c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c28:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1e0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8001c2e:	f7ff fc45 	bl	80014bc <HAL_GetTick>
 8001c32:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	0399      	lsls	r1, r3, #14
 8001c38:	f57f af65 	bpl.w	8001b06 <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c3c:	f7ff fc3e 	bl	80014bc <HAL_GetTick>
 8001c40:	eba0 0008 	sub.w	r0, r0, r8
 8001c44:	2864      	cmp	r0, #100	; 0x64
 8001c46:	d9f5      	bls.n	8001c34 <HAL_RCC_OscConfig+0x1d4>
 8001c48:	e7aa      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c4a:	2e04      	cmp	r6, #4
 8001c4c:	d003      	beq.n	8001c56 <HAL_RCC_OscConfig+0x1f6>
 8001c4e:	2e0c      	cmp	r6, #12
 8001c50:	d110      	bne.n	8001c74 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c52:	2f02      	cmp	r7, #2
 8001c54:	d10e      	bne.n	8001c74 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c56:	6823      	ldr	r3, [r4, #0]
 8001c58:	055a      	lsls	r2, r3, #21
 8001c5a:	d503      	bpl.n	8001c64 <HAL_RCC_OscConfig+0x204>
 8001c5c:	68eb      	ldr	r3, [r5, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f43f af02 	beq.w	8001a68 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	6863      	ldr	r3, [r4, #4]
 8001c66:	692a      	ldr	r2, [r5, #16]
 8001c68:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001c6c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001c70:	6063      	str	r3, [r4, #4]
 8001c72:	e74c      	b.n	8001b0e <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c74:	68eb      	ldr	r3, [r5, #12]
 8001c76:	b17b      	cbz	r3, 8001c98 <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001c78:	6823      	ldr	r3, [r4, #0]
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001c80:	f7ff fc1c 	bl	80014bc <HAL_GetTick>
 8001c84:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c86:	6823      	ldr	r3, [r4, #0]
 8001c88:	055b      	lsls	r3, r3, #21
 8001c8a:	d4eb      	bmi.n	8001c64 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c8c:	f7ff fc16 	bl	80014bc <HAL_GetTick>
 8001c90:	1bc0      	subs	r0, r0, r7
 8001c92:	2802      	cmp	r0, #2
 8001c94:	d9f7      	bls.n	8001c86 <HAL_RCC_OscConfig+0x226>
 8001c96:	e783      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001c98:	6823      	ldr	r3, [r4, #0]
 8001c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c9e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fc0c 	bl	80014bc <HAL_GetTick>
 8001ca4:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ca6:	6823      	ldr	r3, [r4, #0]
 8001ca8:	0558      	lsls	r0, r3, #21
 8001caa:	f57f af30 	bpl.w	8001b0e <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cae:	f7ff fc05 	bl	80014bc <HAL_GetTick>
 8001cb2:	1bc0      	subs	r0, r0, r7
 8001cb4:	2802      	cmp	r0, #2
 8001cb6:	d9f6      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x246>
 8001cb8:	e772      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cba:	696b      	ldr	r3, [r5, #20]
 8001cbc:	b19b      	cbz	r3, 8001ce6 <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8001cbe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001cc2:	f043 0301 	orr.w	r3, r3, #1
 8001cc6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001cca:	f7ff fbf7 	bl	80014bc <HAL_GetTick>
 8001cce:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001cd4:	079b      	lsls	r3, r3, #30
 8001cd6:	f53f af1e 	bmi.w	8001b16 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cda:	f7ff fbef 	bl	80014bc <HAL_GetTick>
 8001cde:	1bc0      	subs	r0, r0, r7
 8001ce0:	2802      	cmp	r0, #2
 8001ce2:	d9f5      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x270>
 8001ce4:	e75c      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001ce6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001cf2:	f7ff fbe3 	bl	80014bc <HAL_GetTick>
 8001cf6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001cfc:	0798      	lsls	r0, r3, #30
 8001cfe:	f57f af0a 	bpl.w	8001b16 <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d02:	f7ff fbdb 	bl	80014bc <HAL_GetTick>
 8001d06:	1bc0      	subs	r0, r0, r7
 8001d08:	2802      	cmp	r0, #2
 8001d0a:	d9f5      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x298>
 8001d0c:	e748      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08007596 	.word	0x08007596
 8001d18:	2000001c 	.word	0x2000001c
 8001d1c:	20000004 	.word	0x20000004
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d20:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d22:	00d9      	lsls	r1, r3, #3
 8001d24:	d429      	bmi.n	8001d7a <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d2c:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d34:	9301      	str	r3, [sp, #4]
 8001d36:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d38:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d3c:	4f89      	ldr	r7, [pc, #548]	; (8001f64 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	05da      	lsls	r2, r3, #23
 8001d42:	d51d      	bpl.n	8001d80 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d44:	68ab      	ldr	r3, [r5, #8]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d12b      	bne.n	8001da2 <HAL_RCC_OscConfig+0x342>
 8001d4a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001d56:	f7ff fbb1 	bl	80014bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5a:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001d5e:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d60:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001d64:	0798      	lsls	r0, r3, #30
 8001d66:	d542      	bpl.n	8001dee <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001d68:	f1b8 0f00 	cmp.w	r8, #0
 8001d6c:	f43f aed7 	beq.w	8001b1e <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001d72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d76:	65a3      	str	r3, [r4, #88]	; 0x58
 8001d78:	e6d1      	b.n	8001b1e <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 8001d7a:	f04f 0800 	mov.w	r8, #0
 8001d7e:	e7dd      	b.n	8001d3c <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d86:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001d88:	f7ff fb98 	bl	80014bc <HAL_GetTick>
 8001d8c:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	05db      	lsls	r3, r3, #23
 8001d92:	d4d7      	bmi.n	8001d44 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d94:	f7ff fb92 	bl	80014bc <HAL_GetTick>
 8001d98:	eba0 0009 	sub.w	r0, r0, r9
 8001d9c:	2802      	cmp	r0, #2
 8001d9e:	d9f6      	bls.n	8001d8e <HAL_RCC_OscConfig+0x32e>
 8001da0:	e6fe      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d106      	bne.n	8001db4 <HAL_RCC_OscConfig+0x354>
 8001da6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001daa:	f043 0304 	orr.w	r3, r3, #4
 8001dae:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8001db2:	e7ca      	b.n	8001d4a <HAL_RCC_OscConfig+0x2ea>
 8001db4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001db8:	f022 0201 	bic.w	r2, r2, #1
 8001dbc:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8001dc0:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001dc4:	f022 0204 	bic.w	r2, r2, #4
 8001dc8:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1c2      	bne.n	8001d56 <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8001dd0:	f7ff fb74 	bl	80014bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dd4:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001dd8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001dda:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001dde:	0799      	lsls	r1, r3, #30
 8001de0:	d5c2      	bpl.n	8001d68 <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff fb6b 	bl	80014bc <HAL_GetTick>
 8001de6:	1bc0      	subs	r0, r0, r7
 8001de8:	4548      	cmp	r0, r9
 8001dea:	d9f6      	bls.n	8001dda <HAL_RCC_OscConfig+0x37a>
 8001dec:	e6d8      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dee:	f7ff fb65 	bl	80014bc <HAL_GetTick>
 8001df2:	1bc0      	subs	r0, r0, r7
 8001df4:	4548      	cmp	r0, r9
 8001df6:	d9b3      	bls.n	8001d60 <HAL_RCC_OscConfig+0x300>
 8001df8:	e6d2      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	f040 808f 	bne.w	8001f1e <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8001e00:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e02:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001e04:	f003 0103 	and.w	r1, r3, #3
 8001e08:	4291      	cmp	r1, r2
 8001e0a:	d124      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e0c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001e0e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e12:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e14:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001e18:	d11d      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e1a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001e1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e20:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001e24:	d117      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e26:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001e28:	3a07      	subs	r2, #7
 8001e2a:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001e2e:	bf18      	it	ne
 8001e30:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e32:	4291      	cmp	r1, r2
 8001e34:	d10f      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e36:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001e38:	0852      	lsrs	r2, r2, #1
 8001e3a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001e3e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e40:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e46:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001e48:	0852      	lsrs	r2, r2, #1
 8001e4a:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8001e4e:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e50:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8001e54:	d04a      	beq.n	8001eec <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e56:	2e0c      	cmp	r6, #12
 8001e58:	f43f ae06 	beq.w	8001a68 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001e5c:	6823      	ldr	r3, [r4, #0]
 8001e5e:	015a      	lsls	r2, r3, #5
 8001e60:	f53f ae02 	bmi.w	8001a68 <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	f53f adfe 	bmi.w	8001a68 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e72:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8001e74:	f7ff fb22 	bl	80014bc <HAL_GetTick>
 8001e78:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e7a:	6823      	ldr	r3, [r4, #0]
 8001e7c:	019f      	lsls	r7, r3, #6
 8001e7e:	d42f      	bmi.n	8001ee0 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e80:	68e2      	ldr	r2, [r4, #12]
 8001e82:	4b39      	ldr	r3, [pc, #228]	; (8001f68 <HAL_RCC_OscConfig+0x508>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001e8c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e90:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001e92:	3a01      	subs	r2, #1
 8001e94:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001e98:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001e9a:	0912      	lsrs	r2, r2, #4
 8001e9c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001ea0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001ea2:	0852      	lsrs	r2, r2, #1
 8001ea4:	3a01      	subs	r2, #1
 8001ea6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001eaa:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001eac:	0852      	lsrs	r2, r2, #1
 8001eae:	3a01      	subs	r2, #1
 8001eb0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001eb4:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 8001eb6:	6823      	ldr	r3, [r4, #0]
 8001eb8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ebc:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ebe:	68e3      	ldr	r3, [r4, #12]
 8001ec0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec4:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 8001ec6:	f7ff faf9 	bl	80014bc <HAL_GetTick>
 8001eca:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	0198      	lsls	r0, r3, #6
 8001ed0:	f53f ae29 	bmi.w	8001b26 <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7ff faf2 	bl	80014bc <HAL_GetTick>
 8001ed8:	1b40      	subs	r0, r0, r5
 8001eda:	2802      	cmp	r0, #2
 8001edc:	d9f6      	bls.n	8001ecc <HAL_RCC_OscConfig+0x46c>
 8001ede:	e65f      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee0:	f7ff faec 	bl	80014bc <HAL_GetTick>
 8001ee4:	1b80      	subs	r0, r0, r6
 8001ee6:	2802      	cmp	r0, #2
 8001ee8:	d9c7      	bls.n	8001e7a <HAL_RCC_OscConfig+0x41a>
 8001eea:	e659      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eec:	6823      	ldr	r3, [r4, #0]
 8001eee:	0199      	lsls	r1, r3, #6
 8001ef0:	f53f ae19 	bmi.w	8001b26 <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8001ef4:	6823      	ldr	r3, [r4, #0]
 8001ef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001efa:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001efc:	68e3      	ldr	r3, [r4, #12]
 8001efe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f02:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8001f04:	f7ff fada 	bl	80014bc <HAL_GetTick>
 8001f08:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0a:	6823      	ldr	r3, [r4, #0]
 8001f0c:	019a      	lsls	r2, r3, #6
 8001f0e:	f53f ae0a 	bmi.w	8001b26 <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f12:	f7ff fad3 	bl	80014bc <HAL_GetTick>
 8001f16:	1b40      	subs	r0, r0, r5
 8001f18:	2802      	cmp	r0, #2
 8001f1a:	d9f6      	bls.n	8001f0a <HAL_RCC_OscConfig+0x4aa>
 8001f1c:	e640      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f1e:	2e0c      	cmp	r6, #12
 8001f20:	f43f ada2 	beq.w	8001a68 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f2a:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f32:	bf02      	ittt	eq
 8001f34:	68e3      	ldreq	r3, [r4, #12]
 8001f36:	f023 0303 	biceq.w	r3, r3, #3
 8001f3a:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f3c:	68e3      	ldr	r3, [r4, #12]
 8001f3e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001f48:	f7ff fab8 	bl	80014bc <HAL_GetTick>
 8001f4c:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	019b      	lsls	r3, r3, #6
 8001f52:	f57f ade8 	bpl.w	8001b26 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f56:	f7ff fab1 	bl	80014bc <HAL_GetTick>
 8001f5a:	1b40      	subs	r0, r0, r5
 8001f5c:	2802      	cmp	r0, #2
 8001f5e:	d9f6      	bls.n	8001f4e <HAL_RCC_OscConfig+0x4ee>
 8001f60:	e61e      	b.n	8001ba0 <HAL_RCC_OscConfig+0x140>
 8001f62:	bf00      	nop
 8001f64:	40007000 	.word	0x40007000
 8001f68:	f99d808c 	.word	0xf99d808c

08001f6c <HAL_RCC_ClockConfig>:
{
 8001f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f70:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001f72:	4604      	mov	r4, r0
 8001f74:	b910      	cbnz	r0, 8001f7c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001f76:	2001      	movs	r0, #1
 8001f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f7c:	4a41      	ldr	r2, [pc, #260]	; (8002084 <HAL_RCC_ClockConfig+0x118>)
 8001f7e:	6813      	ldr	r3, [r2, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	428b      	cmp	r3, r1
 8001f86:	d32a      	bcc.n	8001fde <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f88:	6823      	ldr	r3, [r4, #0]
 8001f8a:	07d9      	lsls	r1, r3, #31
 8001f8c:	d432      	bmi.n	8001ff4 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f8e:	6821      	ldr	r1, [r4, #0]
 8001f90:	078a      	lsls	r2, r1, #30
 8001f92:	d45c      	bmi.n	800204e <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f94:	4a3b      	ldr	r2, [pc, #236]	; (8002084 <HAL_RCC_ClockConfig+0x118>)
 8001f96:	6813      	ldr	r3, [r2, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	429e      	cmp	r6, r3
 8001f9e:	d35e      	bcc.n	800205e <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	f011 0f04 	tst.w	r1, #4
 8001fa4:	4d38      	ldr	r5, [pc, #224]	; (8002088 <HAL_RCC_ClockConfig+0x11c>)
 8001fa6:	d165      	bne.n	8002074 <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa8:	070b      	lsls	r3, r1, #28
 8001faa:	d506      	bpl.n	8001fba <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fac:	68ab      	ldr	r3, [r5, #8]
 8001fae:	6922      	ldr	r2, [r4, #16]
 8001fb0:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001fb4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001fb8:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fba:	f7ff fd03 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8001fbe:	68ab      	ldr	r3, [r5, #8]
 8001fc0:	4a32      	ldr	r2, [pc, #200]	; (800208c <HAL_RCC_ClockConfig+0x120>)
 8001fc2:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001fc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fca:	5cd3      	ldrb	r3, [r2, r3]
 8001fcc:	f003 031f 	and.w	r3, r3, #31
 8001fd0:	40d8      	lsrs	r0, r3
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	; (8002090 <HAL_RCC_ClockConfig+0x124>)
 8001fd4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001fd6:	4b2f      	ldr	r3, [pc, #188]	; (8002094 <HAL_RCC_ClockConfig+0x128>)
 8001fd8:	6818      	ldr	r0, [r3, #0]
 8001fda:	f003 bec5 	b.w	8005d68 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	6813      	ldr	r3, [r2, #0]
 8001fe0:	f023 0307 	bic.w	r3, r3, #7
 8001fe4:	430b      	orrs	r3, r1
 8001fe6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fe8:	6813      	ldr	r3, [r2, #0]
 8001fea:	f003 0307 	and.w	r3, r3, #7
 8001fee:	4299      	cmp	r1, r3
 8001ff0:	d1c1      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xa>
 8001ff2:	e7c9      	b.n	8001f88 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff4:	6862      	ldr	r2, [r4, #4]
 8001ff6:	4d24      	ldr	r5, [pc, #144]	; (8002088 <HAL_RCC_ClockConfig+0x11c>)
 8001ff8:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffa:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ffc:	d11b      	bne.n	8002036 <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002002:	d0b8      	beq.n	8001f76 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002004:	68ab      	ldr	r3, [r5, #8]
 8002006:	f023 0303 	bic.w	r3, r3, #3
 800200a:	4313      	orrs	r3, r2
 800200c:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 800200e:	f7ff fa55 	bl	80014bc <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002012:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002016:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002018:	68ab      	ldr	r3, [r5, #8]
 800201a:	6862      	ldr	r2, [r4, #4]
 800201c:	f003 030c 	and.w	r3, r3, #12
 8002020:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002024:	d0b3      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002026:	f7ff fa49 	bl	80014bc <HAL_GetTick>
 800202a:	1bc0      	subs	r0, r0, r7
 800202c:	4540      	cmp	r0, r8
 800202e:	d9f3      	bls.n	8002018 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8002030:	2003      	movs	r0, #3
}
 8002032:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002036:	2a02      	cmp	r2, #2
 8002038:	d102      	bne.n	8002040 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800203a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800203e:	e7e0      	b.n	8002002 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002040:	b912      	cbnz	r2, 8002048 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002042:	f013 0f02 	tst.w	r3, #2
 8002046:	e7dc      	b.n	8002002 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002048:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800204c:	e7d9      	b.n	8002002 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800204e:	4a0e      	ldr	r2, [pc, #56]	; (8002088 <HAL_RCC_ClockConfig+0x11c>)
 8002050:	68a0      	ldr	r0, [r4, #8]
 8002052:	6893      	ldr	r3, [r2, #8]
 8002054:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002058:	4303      	orrs	r3, r0
 800205a:	6093      	str	r3, [r2, #8]
 800205c:	e79a      	b.n	8001f94 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800205e:	6813      	ldr	r3, [r2, #0]
 8002060:	f023 0307 	bic.w	r3, r3, #7
 8002064:	4333      	orrs	r3, r6
 8002066:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002068:	6813      	ldr	r3, [r2, #0]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	429e      	cmp	r6, r3
 8002070:	d181      	bne.n	8001f76 <HAL_RCC_ClockConfig+0xa>
 8002072:	e795      	b.n	8001fa0 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002074:	68ab      	ldr	r3, [r5, #8]
 8002076:	68e2      	ldr	r2, [r4, #12]
 8002078:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800207c:	4313      	orrs	r3, r2
 800207e:	60ab      	str	r3, [r5, #8]
 8002080:	e792      	b.n	8001fa8 <HAL_RCC_ClockConfig+0x3c>
 8002082:	bf00      	nop
 8002084:	40022000 	.word	0x40022000
 8002088:	40021000 	.word	0x40021000
 800208c:	08007596 	.word	0x08007596
 8002090:	2000001c 	.word	0x2000001c
 8002094:	20000004 	.word	0x20000004

08002098 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002098:	4b05      	ldr	r3, [pc, #20]	; (80020b0 <HAL_RCC_GetPCLK1Freq+0x18>)
 800209a:	4a06      	ldr	r2, [pc, #24]	; (80020b4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80020a2:	5cd3      	ldrb	r3, [r2, r3]
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80020a6:	6810      	ldr	r0, [r2, #0]
 80020a8:	f003 031f 	and.w	r3, r3, #31
}
 80020ac:	40d8      	lsrs	r0, r3
 80020ae:	4770      	bx	lr
 80020b0:	40021000 	.word	0x40021000
 80020b4:	080075a6 	.word	0x080075a6
 80020b8:	2000001c 	.word	0x2000001c

080020bc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80020be:	4a06      	ldr	r2, [pc, #24]	; (80020d8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80020c6:	5cd3      	ldrb	r3, [r2, r3]
 80020c8:	4a04      	ldr	r2, [pc, #16]	; (80020dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80020ca:	6810      	ldr	r0, [r2, #0]
 80020cc:	f003 031f 	and.w	r3, r3, #31
}
 80020d0:	40d8      	lsrs	r0, r3
 80020d2:	4770      	bx	lr
 80020d4:	40021000 	.word	0x40021000
 80020d8:	080075a6 	.word	0x080075a6
 80020dc:	2000001c 	.word	0x2000001c

080020e0 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020e0:	230f      	movs	r3, #15
 80020e2:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_RCC_GetClockConfig+0x34>)
 80020e6:	689a      	ldr	r2, [r3, #8]
 80020e8:	f002 0203 	and.w	r2, r2, #3
 80020ec:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80020f4:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80020fc:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002106:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002108:	4b03      	ldr	r3, [pc, #12]	; (8002118 <HAL_RCC_GetClockConfig+0x38>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	600b      	str	r3, [r1, #0]
 8002112:	4770      	bx	lr
 8002114:	40021000 	.word	0x40021000
 8002118:	40022000 	.word	0x40022000

0800211c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800211c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800211e:	4b45      	ldr	r3, [pc, #276]	; (8002234 <RCCEx_PLLSAI1_Config+0x118>)
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	f012 0f03 	tst.w	r2, #3
{
 8002126:	4605      	mov	r5, r0
 8002128:	460e      	mov	r6, r1
 800212a:	461c      	mov	r4, r3
 800212c:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800212e:	d02a      	beq.n	8002186 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002130:	68da      	ldr	r2, [r3, #12]
 8002132:	f002 0203 	and.w	r2, r2, #3
 8002136:	4282      	cmp	r2, r0
 8002138:	d13c      	bne.n	80021b4 <RCCEx_PLLSAI1_Config+0x98>
       ||
 800213a:	2a00      	cmp	r2, #0
 800213c:	d03a      	beq.n	80021b4 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800213e:	68db      	ldr	r3, [r3, #12]
       ||
 8002140:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002142:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002146:	3301      	adds	r3, #1
       ||
 8002148:	4293      	cmp	r3, r2
 800214a:	d133      	bne.n	80021b4 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002152:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002154:	f7ff f9b2 	bl	80014bc <HAL_GetTick>
 8002158:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800215a:	6823      	ldr	r3, [r4, #0]
 800215c:	011a      	lsls	r2, r3, #4
 800215e:	d432      	bmi.n	80021c6 <RCCEx_PLLSAI1_Config+0xaa>
 8002160:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002162:	2e00      	cmp	r6, #0
 8002164:	d036      	beq.n	80021d4 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002166:	2e01      	cmp	r6, #1
 8002168:	d150      	bne.n	800220c <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800216a:	6922      	ldr	r2, [r4, #16]
 800216c:	6928      	ldr	r0, [r5, #16]
 800216e:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002172:	0840      	lsrs	r0, r0, #1
 8002174:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002178:	3801      	subs	r0, #1
 800217a:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 800217e:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8002182:	6122      	str	r2, [r4, #16]
 8002184:	e032      	b.n	80021ec <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8002186:	2802      	cmp	r0, #2
 8002188:	d010      	beq.n	80021ac <RCCEx_PLLSAI1_Config+0x90>
 800218a:	2803      	cmp	r0, #3
 800218c:	d014      	beq.n	80021b8 <RCCEx_PLLSAI1_Config+0x9c>
 800218e:	2801      	cmp	r0, #1
 8002190:	d110      	bne.n	80021b4 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	079f      	lsls	r7, r3, #30
 8002196:	d538      	bpl.n	800220a <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002198:	68e3      	ldr	r3, [r4, #12]
 800219a:	686a      	ldr	r2, [r5, #4]
 800219c:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80021a0:	3a01      	subs	r2, #1
 80021a2:	4318      	orrs	r0, r3
 80021a4:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80021a8:	60e0      	str	r0, [r4, #12]
 80021aa:	e7cf      	b.n	800214c <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021b2:	d1f1      	bne.n	8002198 <RCCEx_PLLSAI1_Config+0x7c>
 80021b4:	2001      	movs	r0, #1
 80021b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	0391      	lsls	r1, r2, #14
 80021bc:	d4ec      	bmi.n	8002198 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80021c4:	e7f5      	b.n	80021b2 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021c6:	f7ff f979 	bl	80014bc <HAL_GetTick>
 80021ca:	1bc0      	subs	r0, r0, r7
 80021cc:	2802      	cmp	r0, #2
 80021ce:	d9c4      	bls.n	800215a <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 80021d0:	2003      	movs	r0, #3
 80021d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021d4:	6921      	ldr	r1, [r4, #16]
 80021d6:	68eb      	ldr	r3, [r5, #12]
 80021d8:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 80021dc:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80021e0:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 80021e4:	091b      	lsrs	r3, r3, #4
 80021e6:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 80021ea:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80021ec:	6823      	ldr	r3, [r4, #0]
 80021ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021f2:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f4:	f7ff f962 	bl	80014bc <HAL_GetTick>
 80021f8:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80021fa:	6823      	ldr	r3, [r4, #0]
 80021fc:	011b      	lsls	r3, r3, #4
 80021fe:	d513      	bpl.n	8002228 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002200:	6923      	ldr	r3, [r4, #16]
 8002202:	69aa      	ldr	r2, [r5, #24]
 8002204:	4313      	orrs	r3, r2
 8002206:	6123      	str	r3, [r4, #16]
 8002208:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 800220a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800220c:	6923      	ldr	r3, [r4, #16]
 800220e:	6968      	ldr	r0, [r5, #20]
 8002210:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002214:	0840      	lsrs	r0, r0, #1
 8002216:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800221a:	3801      	subs	r0, #1
 800221c:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8002220:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8002224:	6123      	str	r3, [r4, #16]
 8002226:	e7e1      	b.n	80021ec <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002228:	f7ff f948 	bl	80014bc <HAL_GetTick>
 800222c:	1b80      	subs	r0, r0, r6
 800222e:	2802      	cmp	r0, #2
 8002230:	d9e3      	bls.n	80021fa <RCCEx_PLLSAI1_Config+0xde>
 8002232:	e7cd      	b.n	80021d0 <RCCEx_PLLSAI1_Config+0xb4>
 8002234:	40021000 	.word	0x40021000

08002238 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <RCCEx_PLLSAI2_Config+0xf8>)
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	f012 0f03 	tst.w	r2, #3
{
 8002242:	4605      	mov	r5, r0
 8002244:	460e      	mov	r6, r1
 8002246:	461c      	mov	r4, r3
 8002248:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800224a:	d028      	beq.n	800229e <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	f002 0203 	and.w	r2, r2, #3
 8002252:	4282      	cmp	r2, r0
 8002254:	d13a      	bne.n	80022cc <RCCEx_PLLSAI2_Config+0x94>
       ||
 8002256:	2a00      	cmp	r2, #0
 8002258:	d038      	beq.n	80022cc <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800225a:	68db      	ldr	r3, [r3, #12]
       ||
 800225c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800225e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002262:	3301      	adds	r3, #1
       ||
 8002264:	4293      	cmp	r3, r2
 8002266:	d131      	bne.n	80022cc <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002268:	6823      	ldr	r3, [r4, #0]
 800226a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002270:	f7ff f924 	bl	80014bc <HAL_GetTick>
 8002274:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002276:	6823      	ldr	r3, [r4, #0]
 8002278:	009a      	lsls	r2, r3, #2
 800227a:	d430      	bmi.n	80022de <RCCEx_PLLSAI2_Config+0xa6>
 800227c:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 800227e:	2e00      	cmp	r6, #0
 8002280:	d034      	beq.n	80022ec <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002282:	6963      	ldr	r3, [r4, #20]
 8002284:	6929      	ldr	r1, [r5, #16]
 8002286:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800228a:	0849      	lsrs	r1, r1, #1
 800228c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002290:	3901      	subs	r1, #1
 8002292:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8002296:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 800229a:	6163      	str	r3, [r4, #20]
 800229c:	e032      	b.n	8002304 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 800229e:	2802      	cmp	r0, #2
 80022a0:	d010      	beq.n	80022c4 <RCCEx_PLLSAI2_Config+0x8c>
 80022a2:	2803      	cmp	r0, #3
 80022a4:	d014      	beq.n	80022d0 <RCCEx_PLLSAI2_Config+0x98>
 80022a6:	2801      	cmp	r0, #1
 80022a8:	d110      	bne.n	80022cc <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	079f      	lsls	r7, r3, #30
 80022ae:	d538      	bpl.n	8002322 <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022b0:	68e3      	ldr	r3, [r4, #12]
 80022b2:	686a      	ldr	r2, [r5, #4]
 80022b4:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 80022b8:	3a01      	subs	r2, #1
 80022ba:	4318      	orrs	r0, r3
 80022bc:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80022c0:	60e0      	str	r0, [r4, #12]
 80022c2:	e7d1      	b.n	8002268 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022ca:	d1f1      	bne.n	80022b0 <RCCEx_PLLSAI2_Config+0x78>
 80022cc:	2001      	movs	r0, #1
 80022ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	0391      	lsls	r1, r2, #14
 80022d4:	d4ec      	bmi.n	80022b0 <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 80022dc:	e7f5      	b.n	80022ca <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80022de:	f7ff f8ed 	bl	80014bc <HAL_GetTick>
 80022e2:	1bc0      	subs	r0, r0, r7
 80022e4:	2802      	cmp	r0, #2
 80022e6:	d9c6      	bls.n	8002276 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 80022e8:	2003      	movs	r0, #3
 80022ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80022ec:	6962      	ldr	r2, [r4, #20]
 80022ee:	68eb      	ldr	r3, [r5, #12]
 80022f0:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 80022f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80022f8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8002302:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002304:	6823      	ldr	r3, [r4, #0]
 8002306:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230a:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7ff f8d6 	bl	80014bc <HAL_GetTick>
 8002310:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	d505      	bpl.n	8002324 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002318:	6963      	ldr	r3, [r4, #20]
 800231a:	696a      	ldr	r2, [r5, #20]
 800231c:	4313      	orrs	r3, r2
 800231e:	6163      	str	r3, [r4, #20]
 8002320:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8002322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002324:	f7ff f8ca 	bl	80014bc <HAL_GetTick>
 8002328:	1b80      	subs	r0, r0, r6
 800232a:	2802      	cmp	r0, #2
 800232c:	d9f1      	bls.n	8002312 <RCCEx_PLLSAI2_Config+0xda>
 800232e:	e7db      	b.n	80022e8 <RCCEx_PLLSAI2_Config+0xb0>
 8002330:	40021000 	.word	0x40021000

08002334 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002334:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002338:	6806      	ldr	r6, [r0, #0]
 800233a:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 800233e:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002340:	d024      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002342:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8002344:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8002348:	d02c      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x70>
 800234a:	d802      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800234c:	b1c1      	cbz	r1, 8002380 <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 800234e:	2601      	movs	r6, #1
 8002350:	e01c      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002352:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002356:	d00d      	beq.n	8002374 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002358:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 800235c:	d1f7      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800235e:	4a4d      	ldr	r2, [pc, #308]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002360:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8002362:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002366:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800236a:	430b      	orrs	r3, r1
 800236c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002370:	2600      	movs	r6, #0
 8002372:	e00b      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002374:	4a47      	ldr	r2, [pc, #284]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002376:	68d3      	ldr	r3, [r2, #12]
 8002378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800237c:	60d3      	str	r3, [r2, #12]
      break;
 800237e:	e7ee      	b.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002380:	3004      	adds	r0, #4
 8002382:	f7ff fecb 	bl	800211c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002386:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8002388:	2800      	cmp	r0, #0
 800238a:	d0e8      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800238c:	6823      	ldr	r3, [r4, #0]
 800238e:	04d8      	lsls	r0, r3, #19
 8002390:	d506      	bpl.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8002392:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8002394:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8002398:	d074      	beq.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x150>
 800239a:	d808      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800239c:	b1a9      	cbz	r1, 80023ca <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 800239e:	2601      	movs	r6, #1
 80023a0:	4635      	mov	r5, r6
 80023a2:	e021      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a4:	2100      	movs	r1, #0
 80023a6:	3020      	adds	r0, #32
 80023a8:	f7ff ff46 	bl	8002238 <RCCEx_PLLSAI2_Config>
 80023ac:	e7eb      	b.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 80023ae:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 80023b2:	d004      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x8a>
 80023b4:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 80023b8:	d1f1      	bne.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80023ba:	4635      	mov	r5, r6
 80023bc:	e009      	b.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023be:	4a35      	ldr	r2, [pc, #212]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023c0:	68d3      	ldr	r3, [r2, #12]
 80023c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c6:	60d3      	str	r3, [r2, #12]
 80023c8:	e7f7      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ca:	1d20      	adds	r0, r4, #4
 80023cc:	f7ff fea6 	bl	800211c <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80023d2:	2d00      	cmp	r5, #0
 80023d4:	d15c      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023d6:	4a2f      	ldr	r2, [pc, #188]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023d8:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80023da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80023de:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80023e2:	430b      	orrs	r3, r1
 80023e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	0399      	lsls	r1, r3, #14
 80023ec:	f140 814f 	bpl.w	800268e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023f0:	4f28      	ldr	r7, [pc, #160]	; (8002494 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023f4:	00da      	lsls	r2, r3, #3
 80023f6:	f140 8176 	bpl.w	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 80023fa:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023fe:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002498 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8002402:	f8d9 3000 	ldr.w	r3, [r9]
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 800240e:	f7ff f855 	bl	80014bc <HAL_GetTick>
 8002412:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002414:	f8d9 3000 	ldr.w	r3, [r9]
 8002418:	05db      	lsls	r3, r3, #23
 800241a:	d53f      	bpl.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 800241c:	2d00      	cmp	r5, #0
 800241e:	d144      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002420:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002424:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002428:	d015      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x122>
 800242a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800242e:	4293      	cmp	r3, r2
 8002430:	d011      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002432:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002436:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800243a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800243e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002442:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800244a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800244e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002452:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002456:	07d8      	lsls	r0, r3, #31
 8002458:	d509      	bpl.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 800245a:	f7ff f82f 	bl	80014bc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002462:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002468:	0799      	lsls	r1, r3, #30
 800246a:	f140 8109 	bpl.w	8002680 <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800246e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002472:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247a:	4313      	orrs	r3, r2
 800247c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002480:	4635      	mov	r5, r6
 8002482:	e012      	b.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002484:	2100      	movs	r1, #0
 8002486:	f104 0020 	add.w	r0, r4, #32
 800248a:	f7ff fed5 	bl	8002238 <RCCEx_PLLSAI2_Config>
 800248e:	e79f      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 8002490:	462e      	mov	r6, r5
 8002492:	e7a9      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002494:	40021000 	.word	0x40021000
 8002498:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249c:	f7ff f80e 	bl	80014bc <HAL_GetTick>
 80024a0:	eba0 000a 	sub.w	r0, r0, sl
 80024a4:	2802      	cmp	r0, #2
 80024a6:	d9b5      	bls.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 80024a8:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 80024aa:	f1b8 0f00 	cmp.w	r8, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024b6:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024b8:	6823      	ldr	r3, [r4, #0]
 80024ba:	07da      	lsls	r2, r3, #31
 80024bc:	d508      	bpl.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024be:	4990      	ldr	r1, [pc, #576]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80024c0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80024c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024c6:	f022 0203 	bic.w	r2, r2, #3
 80024ca:	4302      	orrs	r2, r0
 80024cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024d0:	079f      	lsls	r7, r3, #30
 80024d2:	d508      	bpl.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024d4:	498a      	ldr	r1, [pc, #552]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80024d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80024d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024dc:	f022 020c 	bic.w	r2, r2, #12
 80024e0:	4302      	orrs	r2, r0
 80024e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024e6:	075e      	lsls	r6, r3, #29
 80024e8:	d508      	bpl.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024ea:	4985      	ldr	r1, [pc, #532]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80024ec:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80024ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80024f2:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80024f6:	4302      	orrs	r2, r0
 80024f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024fc:	0718      	lsls	r0, r3, #28
 80024fe:	d508      	bpl.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002500:	497f      	ldr	r1, [pc, #508]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002502:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002504:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002508:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800250c:	4302      	orrs	r2, r0
 800250e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002512:	06d9      	lsls	r1, r3, #27
 8002514:	d508      	bpl.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002516:	497a      	ldr	r1, [pc, #488]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002518:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800251a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800251e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002522:	4302      	orrs	r2, r0
 8002524:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002528:	069a      	lsls	r2, r3, #26
 800252a:	d508      	bpl.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800252c:	4974      	ldr	r1, [pc, #464]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800252e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8002530:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002534:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002538:	4302      	orrs	r2, r0
 800253a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800253e:	059f      	lsls	r7, r3, #22
 8002540:	d508      	bpl.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002542:	496f      	ldr	r1, [pc, #444]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002544:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8002546:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800254a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800254e:	4302      	orrs	r2, r0
 8002550:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002554:	055e      	lsls	r6, r3, #21
 8002556:	d508      	bpl.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002558:	4969      	ldr	r1, [pc, #420]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800255a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800255c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002560:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002564:	4302      	orrs	r2, r0
 8002566:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800256a:	0658      	lsls	r0, r3, #25
 800256c:	d508      	bpl.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800256e:	4964      	ldr	r1, [pc, #400]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002570:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8002572:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002576:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800257a:	4302      	orrs	r2, r0
 800257c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002580:	0619      	lsls	r1, r3, #24
 8002582:	d508      	bpl.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002584:	495e      	ldr	r1, [pc, #376]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002586:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002588:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800258c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8002590:	4302      	orrs	r2, r0
 8002592:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002596:	05da      	lsls	r2, r3, #23
 8002598:	d508      	bpl.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800259a:	4959      	ldr	r1, [pc, #356]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800259c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800259e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80025a2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80025a6:	4302      	orrs	r2, r0
 80025a8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025ac:	049b      	lsls	r3, r3, #18
 80025ae:	d50f      	bpl.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025b0:	4a53      	ldr	r2, [pc, #332]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025b2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 80025b4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025b8:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80025bc:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025be:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025c6:	d164      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c8:	68d3      	ldr	r3, [r2, #12]
 80025ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ce:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025d0:	6823      	ldr	r3, [r4, #0]
 80025d2:	031f      	lsls	r7, r3, #12
 80025d4:	d50f      	bpl.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025d6:	4a4a      	ldr	r2, [pc, #296]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025d8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80025da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80025de:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80025e2:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025e4:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025ec:	d15c      	bne.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ee:	68d3      	ldr	r3, [r2, #12]
 80025f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025f4:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	035e      	lsls	r6, r3, #13
 80025fa:	d50f      	bpl.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025fc:	4a40      	ldr	r2, [pc, #256]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80025fe:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8002600:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002604:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002608:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800260a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800260e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002612:	d154      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002614:	68d3      	ldr	r3, [r2, #12]
 8002616:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800261a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	0458      	lsls	r0, r3, #17
 8002620:	d512      	bpl.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002622:	4937      	ldr	r1, [pc, #220]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002624:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8002626:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800262a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800262e:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002630:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002638:	d14c      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800263a:	2102      	movs	r1, #2
 800263c:	1d20      	adds	r0, r4, #4
 800263e:	f7ff fd6d 	bl	800211c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002642:	2800      	cmp	r0, #0
 8002644:	bf18      	it	ne
 8002646:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002648:	6822      	ldr	r2, [r4, #0]
 800264a:	0411      	lsls	r1, r2, #16
 800264c:	d508      	bpl.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800264e:	492c      	ldr	r1, [pc, #176]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002650:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8002652:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002656:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800265a:	4303      	orrs	r3, r0
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002660:	03d3      	lsls	r3, r2, #15
 8002662:	d509      	bpl.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002664:	4a26      	ldr	r2, [pc, #152]	; (8002700 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002666:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800266a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800266e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002672:	430b      	orrs	r3, r1
 8002674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002678:	4628      	mov	r0, r5
 800267a:	b002      	add	sp, #8
 800267c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002680:	f7fe ff1c 	bl	80014bc <HAL_GetTick>
 8002684:	1b40      	subs	r0, r0, r5
 8002686:	4548      	cmp	r0, r9
 8002688:	f67f aeec 	bls.w	8002464 <HAL_RCCEx_PeriphCLKConfig+0x130>
 800268c:	e70c      	b.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800268e:	4635      	mov	r5, r6
 8002690:	e712      	b.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002692:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002696:	d19b      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002698:	2101      	movs	r1, #1
 800269a:	1d20      	adds	r0, r4, #4
 800269c:	f7ff fd3e 	bl	800211c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 80026a0:	2800      	cmp	r0, #0
 80026a2:	bf18      	it	ne
 80026a4:	4605      	movne	r5, r0
 80026a6:	e793      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026a8:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80026ac:	d1a3      	bne.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ae:	2101      	movs	r1, #1
 80026b0:	1d20      	adds	r0, r4, #4
 80026b2:	f7ff fd33 	bl	800211c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80026b6:	2800      	cmp	r0, #0
 80026b8:	bf18      	it	ne
 80026ba:	4605      	movne	r5, r0
 80026bc:	e79b      	b.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026be:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 80026c2:	d1ab      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026c4:	2101      	movs	r1, #1
 80026c6:	1d20      	adds	r0, r4, #4
 80026c8:	f7ff fd28 	bl	800211c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80026cc:	2800      	cmp	r0, #0
 80026ce:	bf18      	it	ne
 80026d0:	4605      	movne	r5, r0
 80026d2:	e7a3      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026d4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80026d8:	d1b6      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026da:	2102      	movs	r1, #2
 80026dc:	f104 0020 	add.w	r0, r4, #32
 80026e0:	f7ff fdaa 	bl	8002238 <RCCEx_PLLSAI2_Config>
 80026e4:	e7ad      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80026ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80026f8:	f04f 0801 	mov.w	r8, #1
 80026fc:	e67f      	b.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0xca>
 80026fe:	bf00      	nop
 8002700:	40021000 	.word	0x40021000

08002704 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002704:	6803      	ldr	r3, [r0, #0]
 8002706:	685a      	ldr	r2, [r3, #4]
 8002708:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800270c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800270e:	6842      	ldr	r2, [r0, #4]
 8002710:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002714:	d10a      	bne.n	800272c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8002716:	6882      	ldr	r2, [r0, #8]
 8002718:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800271c:	d002      	beq.n	8002724 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800271e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002722:	d103      	bne.n	800272c <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800272a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800272c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800272e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002732:	d107      	bne.n	8002744 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002742:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002744:	2301      	movs	r3, #1
 8002746:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800274a:	2300      	movs	r3, #0
 800274c:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8002750:	2003      	movs	r0, #3
 8002752:	4770      	bx	lr

08002754 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002754:	b570      	push	{r4, r5, r6, lr}
 8002756:	4604      	mov	r4, r0
 8002758:	460d      	mov	r5, r1
 800275a:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800275c:	6823      	ldr	r3, [r4, #0]
 800275e:	6898      	ldr	r0, [r3, #8]
 8002760:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8002764:	d100      	bne.n	8002768 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8002766:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002768:	1c6a      	adds	r2, r5, #1
 800276a:	d0f8      	beq.n	800275e <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800276c:	f7fe fea6 	bl	80014bc <HAL_GetTick>
 8002770:	1b80      	subs	r0, r0, r6
 8002772:	4285      	cmp	r5, r0
 8002774:	d8f2      	bhi.n	800275c <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8002776:	4620      	mov	r0, r4
}
 8002778:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800277c:	f7ff bfc2 	b.w	8002704 <SPI_WaitFifoStateUntilTimeout.part.1>

08002780 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	4605      	mov	r5, r0
 8002784:	460c      	mov	r4, r1
 8002786:	4616      	mov	r6, r2
 8002788:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 800278a:	6829      	ldr	r1, [r5, #0]
 800278c:	6888      	ldr	r0, [r1, #8]
 800278e:	4020      	ands	r0, r4
 8002790:	d100      	bne.n	8002794 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 8002792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002794:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002798:	bf08      	it	eq
 800279a:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 800279c:	1c73      	adds	r3, r6, #1
 800279e:	d0f5      	beq.n	800278c <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80027a0:	f7fe fe8c 	bl	80014bc <HAL_GetTick>
 80027a4:	1bc0      	subs	r0, r0, r7
 80027a6:	4286      	cmp	r6, r0
 80027a8:	d8ef      	bhi.n	800278a <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 80027aa:	4628      	mov	r0, r5
}
 80027ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80027b0:	f7ff bfa8 	b.w	8002704 <SPI_WaitFifoStateUntilTimeout.part.1>

080027b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027b6:	4613      	mov	r3, r2
{
 80027b8:	460d      	mov	r5, r1
 80027ba:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027bc:	460a      	mov	r2, r1
 80027be:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 80027c2:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027c4:	f7ff ffdc 	bl	8002780 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80027c8:	b128      	cbz	r0, 80027d6 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80027ca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80027cc:	f043 0320 	orr.w	r3, r3, #32
 80027d0:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 80027d2:	2003      	movs	r0, #3
 80027d4:	e00f      	b.n	80027f6 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80027d6:	4632      	mov	r2, r6
 80027d8:	4629      	mov	r1, r5
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff ffba 	bl	8002754 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d1f2      	bne.n	80027ca <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80027e4:	4633      	mov	r3, r6
 80027e6:	462a      	mov	r2, r5
 80027e8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80027ec:	4620      	mov	r0, r4
 80027ee:	f7ff ffc7 	bl	8002780 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d1e9      	bne.n	80027ca <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 80027f6:	bd70      	pop	{r4, r5, r6, pc}

080027f8 <HAL_SPI_MspInit>:
 80027f8:	4770      	bx	lr

080027fa <HAL_SPI_Init>:
{
 80027fa:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 80027fc:	4604      	mov	r4, r0
 80027fe:	2800      	cmp	r0, #0
 8002800:	d04a      	beq.n	8002898 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002802:	2300      	movs	r3, #0
 8002804:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002806:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 800280a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800280e:	b91b      	cbnz	r3, 8002818 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8002810:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8002814:	f7ff fff0 	bl	80027f8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002818:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800281a:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800281c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8002820:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002822:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8002824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002828:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800282c:	600b      	str	r3, [r1, #0]
 800282e:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002832:	d92e      	bls.n	8002892 <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002834:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002836:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800283a:	bf18      	it	ne
 800283c:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800283e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002840:	b92b      	cbnz	r3, 800284e <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002842:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002846:	bf8c      	ite	hi
 8002848:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800284a:	2301      	movls	r3, #1
 800284c:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800284e:	68a6      	ldr	r6, [r4, #8]
 8002850:	6863      	ldr	r3, [r4, #4]
 8002852:	69a5      	ldr	r5, [r4, #24]
 8002854:	4333      	orrs	r3, r6
 8002856:	6926      	ldr	r6, [r4, #16]
 8002858:	4333      	orrs	r3, r6
 800285a:	6966      	ldr	r6, [r4, #20]
 800285c:	4333      	orrs	r3, r6
 800285e:	69e6      	ldr	r6, [r4, #28]
 8002860:	4333      	orrs	r3, r6
 8002862:	6a26      	ldr	r6, [r4, #32]
 8002864:	4333      	orrs	r3, r6
 8002866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002868:	4333      	orrs	r3, r6
 800286a:	f405 7600 	and.w	r6, r5, #512	; 0x200
 800286e:	4333      	orrs	r3, r6
 8002870:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002872:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002874:	431a      	orrs	r2, r3
 8002876:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002878:	0c2d      	lsrs	r5, r5, #16
 800287a:	431a      	orrs	r2, r3
 800287c:	f005 0504 	and.w	r5, r5, #4
 8002880:	432a      	orrs	r2, r5
 8002882:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8002884:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002886:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002888:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800288a:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800288c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8002890:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002892:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002896:	e7d0      	b.n	800283a <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002898:	2001      	movs	r0, #1
}
 800289a:	bd70      	pop	{r4, r5, r6, pc}

0800289c <HAL_SPI_TransmitReceive>:
{
 800289c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028a0:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80028a2:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80028a6:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 80028a8:	2b01      	cmp	r3, #1
{
 80028aa:	4604      	mov	r4, r0
 80028ac:	460d      	mov	r5, r1
 80028ae:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 80028b0:	f000 8115 	beq.w	8002ade <HAL_SPI_TransmitReceive+0x242>
 80028b4:	2301      	movs	r3, #1
 80028b6:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 80028ba:	f7fe fdff 	bl	80014bc <HAL_GetTick>
  tmp_state           = hspi->State;
 80028be:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 80028c2:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80028c4:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028c6:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 80028c8:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80028ca:	d00a      	beq.n	80028e2 <HAL_SPI_TransmitReceive+0x46>
 80028cc:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 80028d0:	f040 8103 	bne.w	8002ada <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80028d4:	68a0      	ldr	r0, [r4, #8]
 80028d6:	2800      	cmp	r0, #0
 80028d8:	f040 80ff 	bne.w	8002ada <HAL_SPI_TransmitReceive+0x23e>
 80028dc:	2b04      	cmp	r3, #4
 80028de:	f040 80fc 	bne.w	8002ada <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028e2:	2d00      	cmp	r5, #0
 80028e4:	d049      	beq.n	800297a <HAL_SPI_TransmitReceive+0xde>
 80028e6:	f1b9 0f00 	cmp.w	r9, #0
 80028ea:	d046      	beq.n	800297a <HAL_SPI_TransmitReceive+0xde>
 80028ec:	2e00      	cmp	r6, #0
 80028ee:	d044      	beq.n	800297a <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028f0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80028f4:	68e2      	ldr	r2, [r4, #12]
 80028f6:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028f8:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028fc:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028fe:	bf1c      	itt	ne
 8002900:	2305      	movne	r3, #5
 8002902:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002906:	2300      	movs	r3, #0
 8002908:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800290a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 800290e:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 8002912:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002914:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002916:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8002918:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800291c:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800291e:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002920:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002922:	d801      	bhi.n	8002928 <HAL_SPI_TransmitReceive+0x8c>
 8002924:	2e01      	cmp	r6, #1
 8002926:	d92a      	bls.n	800297e <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002928:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800292c:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800292e:	6803      	ldr	r3, [r0, #0]
 8002930:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002932:	bf5e      	ittt	pl
 8002934:	6803      	ldrpl	r3, [r0, #0]
 8002936:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 800293a:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800293c:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 8002940:	d956      	bls.n	80029f0 <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002942:	b109      	cbz	r1, 8002948 <HAL_SPI_TransmitReceive+0xac>
 8002944:	2e01      	cmp	r6, #1
 8002946:	d107      	bne.n	8002958 <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002948:	f835 3b02 	ldrh.w	r3, [r5], #2
 800294c:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 800294e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002950:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8002952:	3b01      	subs	r3, #1
 8002954:	b29b      	uxth	r3, r3
 8002956:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002958:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800295a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800295c:	b29b      	uxth	r3, r3
 800295e:	b98b      	cbnz	r3, 8002984 <HAL_SPI_TransmitReceive+0xe8>
 8002960:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002964:	b29b      	uxth	r3, r3
 8002966:	b96b      	cbnz	r3, 8002984 <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002968:	4642      	mov	r2, r8
 800296a:	4639      	mov	r1, r7
 800296c:	4620      	mov	r0, r4
 800296e:	f7ff ff21 	bl	80027b4 <SPI_EndRxTxTransaction>
 8002972:	2800      	cmp	r0, #0
 8002974:	d034      	beq.n	80029e0 <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002976:	2320      	movs	r3, #32
 8002978:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 800297a:	2001      	movs	r0, #1
 800297c:	e030      	b.n	80029e0 <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800297e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002982:	e7d3      	b.n	800292c <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002984:	6822      	ldr	r2, [r4, #0]
 8002986:	6893      	ldr	r3, [r2, #8]
 8002988:	0799      	lsls	r1, r3, #30
 800298a:	d50d      	bpl.n	80029a8 <HAL_SPI_TransmitReceive+0x10c>
 800298c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800298e:	b29b      	uxth	r3, r3
 8002990:	b153      	cbz	r3, 80029a8 <HAL_SPI_TransmitReceive+0x10c>
 8002992:	b14d      	cbz	r5, 80029a8 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002994:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002996:	f833 1b02 	ldrh.w	r1, [r3], #2
 800299a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800299c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800299e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80029a6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029a8:	6893      	ldr	r3, [r2, #8]
 80029aa:	07db      	lsls	r3, r3, #31
 80029ac:	d50f      	bpl.n	80029ce <HAL_SPI_TransmitReceive+0x132>
 80029ae:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	b15b      	cbz	r3, 80029ce <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80029b8:	68d2      	ldr	r2, [r2, #12]
 80029ba:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029be:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80029c0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 80029cc:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029ce:	f7fe fd75 	bl	80014bc <HAL_GetTick>
 80029d2:	eba0 0008 	sub.w	r0, r0, r8
 80029d6:	4287      	cmp	r7, r0
 80029d8:	d8bf      	bhi.n	800295a <HAL_SPI_TransmitReceive+0xbe>
 80029da:	1c7e      	adds	r6, r7, #1
 80029dc:	d0bd      	beq.n	800295a <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 80029de:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80029e0:	2301      	movs	r3, #1
 80029e2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80029e6:	2300      	movs	r3, #0
 80029e8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80029ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029f0:	b109      	cbz	r1, 80029f6 <HAL_SPI_TransmitReceive+0x15a>
 80029f2:	2e01      	cmp	r6, #1
 80029f4:	d10b      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 80029f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d951      	bls.n	8002aa2 <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029fe:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002a02:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 8002a04:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a06:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002a08:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002a0e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a10:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	b923      	cbnz	r3, 8002a20 <HAL_SPI_TransmitReceive+0x184>
 8002a16:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0a3      	beq.n	8002968 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a20:	6822      	ldr	r2, [r4, #0]
 8002a22:	6893      	ldr	r3, [r2, #8]
 8002a24:	0798      	lsls	r0, r3, #30
 8002a26:	d511      	bpl.n	8002a4c <HAL_SPI_TransmitReceive+0x1b0>
 8002a28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	b173      	cbz	r3, 8002a4c <HAL_SPI_TransmitReceive+0x1b0>
 8002a2e:	b16d      	cbz	r5, 8002a4c <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 8002a30:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a38:	d93b      	bls.n	8002ab2 <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a3a:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002a3e:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a40:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a42:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002a44:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002a4a:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a4c:	6822      	ldr	r2, [r4, #0]
 8002a4e:	6893      	ldr	r3, [r2, #8]
 8002a50:	07d9      	lsls	r1, r3, #31
 8002a52:	d51d      	bpl.n	8002a90 <HAL_SPI_TransmitReceive+0x1f4>
 8002a54:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	b1cb      	cbz	r3, 8002a90 <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 8002a5c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a66:	d92c      	bls.n	8002ac2 <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002a68:	68d1      	ldr	r1, [r2, #12]
 8002a6a:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002a6e:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002a70:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002a74:	3b02      	subs	r3, #2
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002a7c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002a80:	b29b      	uxth	r3, r3
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d803      	bhi.n	8002a8e <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002a86:	6853      	ldr	r3, [r2, #4]
 8002a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a8c:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 8002a8e:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002a90:	f7fe fd14 	bl	80014bc <HAL_GetTick>
 8002a94:	eba0 0008 	sub.w	r0, r0, r8
 8002a98:	4287      	cmp	r7, r0
 8002a9a:	d8b9      	bhi.n	8002a10 <HAL_SPI_TransmitReceive+0x174>
 8002a9c:	1c7b      	adds	r3, r7, #1
 8002a9e:	d0b7      	beq.n	8002a10 <HAL_SPI_TransmitReceive+0x174>
 8002aa0:	e79d      	b.n	80029de <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002aa2:	782b      	ldrb	r3, [r5, #0]
 8002aa4:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 8002aa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002aa8:	3301      	adds	r3, #1
 8002aaa:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002aac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	e7ab      	b.n	8002a0a <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002ab6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002ab8:	3301      	adds	r3, #1
 8002aba:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002abc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	e7c1      	b.n	8002a46 <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002ac2:	7b12      	ldrb	r2, [r2, #12]
 8002ac4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002ac6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002ac8:	3301      	adds	r3, #1
 8002aca:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002acc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8002ad8:	e7d9      	b.n	8002a8e <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 8002ada:	2002      	movs	r0, #2
 8002adc:	e780      	b.n	80029e0 <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 8002ade:	2002      	movs	r0, #2
}
 8002ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002ae4 <HAL_SPI_GetState>:
  return hspi->State;
 8002ae4:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8002ae8:	4770      	bx	lr

08002aea <HAL_TIM_Base_MspInit>:
 8002aea:	4770      	bx	lr

08002aec <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002aec:	6803      	ldr	r3, [r0, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	f042 0201 	orr.w	r2, r2, #1
 8002af4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af6:	6899      	ldr	r1, [r3, #8]
 8002af8:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <HAL_TIM_Base_Start_IT+0x28>)
 8002afa:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afc:	2a06      	cmp	r2, #6
 8002afe:	d006      	beq.n	8002b0e <HAL_TIM_Base_Start_IT+0x22>
 8002b00:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
  {
    __HAL_TIM_ENABLE(htim);
 8002b04:	bf1e      	ittt	ne
 8002b06:	681a      	ldrne	r2, [r3, #0]
 8002b08:	f042 0201 	orrne.w	r2, r2, #1
 8002b0c:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002b0e:	2000      	movs	r0, #0
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	00010007 	.word	0x00010007

08002b18 <HAL_TIM_OC_DelayElapsedCallback>:
 8002b18:	4770      	bx	lr

08002b1a <HAL_TIM_IC_CaptureCallback>:
 8002b1a:	4770      	bx	lr

08002b1c <HAL_TIM_PWM_PulseFinishedCallback>:
 8002b1c:	4770      	bx	lr

08002b1e <HAL_TIM_TriggerCallback>:
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b20:	6803      	ldr	r3, [r0, #0]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	0791      	lsls	r1, r2, #30
{
 8002b26:	b510      	push	{r4, lr}
 8002b28:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b2a:	d50f      	bpl.n	8002b4c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b2c:	68da      	ldr	r2, [r3, #12]
 8002b2e:	0792      	lsls	r2, r2, #30
 8002b30:	d50c      	bpl.n	8002b4c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b32:	f06f 0202 	mvn.w	r2, #2
 8002b36:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b38:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3a:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b3c:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b3e:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b40:	f000 8085 	beq.w	8002c4e <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b44:	f7ff ffe9 	bl	8002b1a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b4c:	6823      	ldr	r3, [r4, #0]
 8002b4e:	691a      	ldr	r2, [r3, #16]
 8002b50:	0752      	lsls	r2, r2, #29
 8002b52:	d510      	bpl.n	8002b76 <HAL_TIM_IRQHandler+0x56>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b54:	68da      	ldr	r2, [r3, #12]
 8002b56:	0750      	lsls	r0, r2, #29
 8002b58:	d50d      	bpl.n	8002b76 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b5a:	f06f 0204 	mvn.w	r2, #4
 8002b5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b60:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b62:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b64:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b68:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6a:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b6c:	d075      	beq.n	8002c5a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b6e:	f7ff ffd4 	bl	8002b1a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b72:	2300      	movs	r3, #0
 8002b74:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b76:	6823      	ldr	r3, [r4, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	0711      	lsls	r1, r2, #28
 8002b7c:	d50f      	bpl.n	8002b9e <HAL_TIM_IRQHandler+0x7e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	0712      	lsls	r2, r2, #28
 8002b82:	d50c      	bpl.n	8002b9e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b84:	f06f 0208 	mvn.w	r2, #8
 8002b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b8a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b8c:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b8e:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b90:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b92:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b94:	d067      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	f7ff ffc0 	bl	8002b1a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b9e:	6823      	ldr	r3, [r4, #0]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	06d0      	lsls	r0, r2, #27
 8002ba4:	d510      	bpl.n	8002bc8 <HAL_TIM_IRQHandler+0xa8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	06d1      	lsls	r1, r2, #27
 8002baa:	d50d      	bpl.n	8002bc8 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bac:	f06f 0210 	mvn.w	r2, #16
 8002bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bb2:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bb4:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bb6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bba:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bbc:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bbe:	d058      	beq.n	8002c72 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8002bc0:	f7ff ffab 	bl	8002b1a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	07d2      	lsls	r2, r2, #31
 8002bce:	d508      	bpl.n	8002be2 <HAL_TIM_IRQHandler+0xc2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002bd0:	68da      	ldr	r2, [r3, #12]
 8002bd2:	07d0      	lsls	r0, r2, #31
 8002bd4:	d505      	bpl.n	8002be2 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bd6:	f06f 0201 	mvn.w	r2, #1
 8002bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f002 fe6d 	bl	80058bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002be2:	6823      	ldr	r3, [r4, #0]
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	0611      	lsls	r1, r2, #24
 8002be8:	d508      	bpl.n	8002bfc <HAL_TIM_IRQHandler+0xdc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	0612      	lsls	r2, r2, #24
 8002bee:	d505      	bpl.n	8002bfc <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bf0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f000 f8c3 	bl	8002d82 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bfc:	6823      	ldr	r3, [r4, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	05d0      	lsls	r0, r2, #23
 8002c02:	d508      	bpl.n	8002c16 <HAL_TIM_IRQHandler+0xf6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	0611      	lsls	r1, r2, #24
 8002c08:	d505      	bpl.n	8002c16 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c10:	4620      	mov	r0, r4
 8002c12:	f000 f8b7 	bl	8002d84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c16:	6823      	ldr	r3, [r4, #0]
 8002c18:	691a      	ldr	r2, [r3, #16]
 8002c1a:	0652      	lsls	r2, r2, #25
 8002c1c:	d508      	bpl.n	8002c30 <HAL_TIM_IRQHandler+0x110>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c1e:	68da      	ldr	r2, [r3, #12]
 8002c20:	0650      	lsls	r0, r2, #25
 8002c22:	d505      	bpl.n	8002c30 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c24:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f7ff ff77 	bl	8002b1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	0691      	lsls	r1, r2, #26
 8002c36:	d522      	bpl.n	8002c7e <HAL_TIM_IRQHandler+0x15e>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c38:	68da      	ldr	r2, [r3, #12]
 8002c3a:	0692      	lsls	r2, r2, #26
 8002c3c:	d51f      	bpl.n	8002c7e <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c3e:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c42:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c44:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8002c4a:	f000 b899 	b.w	8002d80 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4e:	f7ff ff63 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c52:	4620      	mov	r0, r4
 8002c54:	f7ff ff62 	bl	8002b1c <HAL_TIM_PWM_PulseFinishedCallback>
 8002c58:	e776      	b.n	8002b48 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c5a:	f7ff ff5d 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c5e:	4620      	mov	r0, r4
 8002c60:	f7ff ff5c 	bl	8002b1c <HAL_TIM_PWM_PulseFinishedCallback>
 8002c64:	e785      	b.n	8002b72 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c66:	f7ff ff57 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6a:	4620      	mov	r0, r4
 8002c6c:	f7ff ff56 	bl	8002b1c <HAL_TIM_PWM_PulseFinishedCallback>
 8002c70:	e793      	b.n	8002b9a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c72:	f7ff ff51 	bl	8002b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c76:	4620      	mov	r0, r4
 8002c78:	f7ff ff50 	bl	8002b1c <HAL_TIM_PWM_PulseFinishedCallback>
 8002c7c:	e7a2      	b.n	8002bc4 <HAL_TIM_IRQHandler+0xa4>
 8002c7e:	bd10      	pop	{r4, pc}

08002c80 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c80:	4a30      	ldr	r2, [pc, #192]	; (8002d44 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8002c82:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c84:	4290      	cmp	r0, r2
 8002c86:	d012      	beq.n	8002cae <TIM_Base_SetConfig+0x2e>
 8002c88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002c8c:	d00f      	beq.n	8002cae <TIM_Base_SetConfig+0x2e>
 8002c8e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002c92:	4290      	cmp	r0, r2
 8002c94:	d00b      	beq.n	8002cae <TIM_Base_SetConfig+0x2e>
 8002c96:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c9a:	4290      	cmp	r0, r2
 8002c9c:	d007      	beq.n	8002cae <TIM_Base_SetConfig+0x2e>
 8002c9e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002ca2:	4290      	cmp	r0, r2
 8002ca4:	d003      	beq.n	8002cae <TIM_Base_SetConfig+0x2e>
 8002ca6:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002caa:	4290      	cmp	r0, r2
 8002cac:	d119      	bne.n	8002ce2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002cae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002cb4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cb6:	4a23      	ldr	r2, [pc, #140]	; (8002d44 <TIM_Base_SetConfig+0xc4>)
 8002cb8:	4290      	cmp	r0, r2
 8002cba:	d01d      	beq.n	8002cf8 <TIM_Base_SetConfig+0x78>
 8002cbc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002cc0:	d01a      	beq.n	8002cf8 <TIM_Base_SetConfig+0x78>
 8002cc2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cc6:	4290      	cmp	r0, r2
 8002cc8:	d016      	beq.n	8002cf8 <TIM_Base_SetConfig+0x78>
 8002cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cce:	4290      	cmp	r0, r2
 8002cd0:	d012      	beq.n	8002cf8 <TIM_Base_SetConfig+0x78>
 8002cd2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cd6:	4290      	cmp	r0, r2
 8002cd8:	d00e      	beq.n	8002cf8 <TIM_Base_SetConfig+0x78>
 8002cda:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002cde:	4290      	cmp	r0, r2
 8002ce0:	d00a      	beq.n	8002cf8 <TIM_Base_SetConfig+0x78>
 8002ce2:	4a19      	ldr	r2, [pc, #100]	; (8002d48 <TIM_Base_SetConfig+0xc8>)
 8002ce4:	4290      	cmp	r0, r2
 8002ce6:	d007      	beq.n	8002cf8 <TIM_Base_SetConfig+0x78>
 8002ce8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cec:	4290      	cmp	r0, r2
 8002cee:	d003      	beq.n	8002cf8 <TIM_Base_SetConfig+0x78>
 8002cf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002cf4:	4290      	cmp	r0, r2
 8002cf6:	d103      	bne.n	8002d00 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cf8:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfe:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d00:	694a      	ldr	r2, [r1, #20]
 8002d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d06:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002d08:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d0a:	688b      	ldr	r3, [r1, #8]
 8002d0c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d0e:	680b      	ldr	r3, [r1, #0]
 8002d10:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <TIM_Base_SetConfig+0xc4>)
 8002d14:	4298      	cmp	r0, r3
 8002d16:	d00f      	beq.n	8002d38 <TIM_Base_SetConfig+0xb8>
 8002d18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d1c:	4298      	cmp	r0, r3
 8002d1e:	d00b      	beq.n	8002d38 <TIM_Base_SetConfig+0xb8>
 8002d20:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8002d24:	4298      	cmp	r0, r3
 8002d26:	d007      	beq.n	8002d38 <TIM_Base_SetConfig+0xb8>
 8002d28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d2c:	4298      	cmp	r0, r3
 8002d2e:	d003      	beq.n	8002d38 <TIM_Base_SetConfig+0xb8>
 8002d30:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d34:	4298      	cmp	r0, r3
 8002d36:	d101      	bne.n	8002d3c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d38:	690b      	ldr	r3, [r1, #16]
 8002d3a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	6143      	str	r3, [r0, #20]
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	40012c00 	.word	0x40012c00
 8002d48:	40014000 	.word	0x40014000

08002d4c <HAL_TIM_Base_Init>:
{
 8002d4c:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002d4e:	4604      	mov	r4, r0
 8002d50:	b1a0      	cbz	r0, 8002d7c <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d52:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d56:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d5a:	b91b      	cbnz	r3, 8002d64 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002d5c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002d60:	f7ff fec3 	bl	8002aea <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d64:	2302      	movs	r3, #2
 8002d66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d6a:	6820      	ldr	r0, [r4, #0]
 8002d6c:	1d21      	adds	r1, r4, #4
 8002d6e:	f7ff ff87 	bl	8002c80 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002d72:	2301      	movs	r3, #1
 8002d74:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d78:	2000      	movs	r0, #0
 8002d7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002d7c:	2001      	movs	r0, #1
}
 8002d7e:	bd10      	pop	{r4, pc}

08002d80 <HAL_TIMEx_CommutCallback>:
 8002d80:	4770      	bx	lr

08002d82 <HAL_TIMEx_BreakCallback>:
 8002d82:	4770      	bx	lr

08002d84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d84:	4770      	bx	lr
	...

08002d88 <UART_SetConfig>:
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d88:	6802      	ldr	r2, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d8a:	69c1      	ldr	r1, [r0, #28]
{
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d90:	6883      	ldr	r3, [r0, #8]
 8002d92:	6900      	ldr	r0, [r0, #16]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d94:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d96:	4303      	orrs	r3, r0
 8002d98:	6960      	ldr	r0, [r4, #20]
 8002d9a:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d9c:	48ba      	ldr	r0, [pc, #744]	; (8003088 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d9e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002da0:	4028      	ands	r0, r5
 8002da2:	4303      	orrs	r3, r0
 8002da4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002da6:	6853      	ldr	r3, [r2, #4]
 8002da8:	68e0      	ldr	r0, [r4, #12]
 8002daa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dae:	4303      	orrs	r3, r0
 8002db0:	6053      	str	r3, [r2, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002db2:	4bb6      	ldr	r3, [pc, #728]	; (800308c <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002db4:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002db6:	429a      	cmp	r2, r3
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002db8:	bf1c      	itt	ne
 8002dba:	6a23      	ldrne	r3, [r4, #32]
 8002dbc:	4318      	orrne	r0, r3
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dbe:	6893      	ldr	r3, [r2, #8]
 8002dc0:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002dc4:	4303      	orrs	r3, r0
 8002dc6:	6093      	str	r3, [r2, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dc8:	4bb1      	ldr	r3, [pc, #708]	; (8003090 <UART_SetConfig+0x308>)
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d119      	bne.n	8002e02 <UART_SetConfig+0x7a>
 8002dce:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002dd2:	4ab0      	ldr	r2, [pc, #704]	; (8003094 <UART_SetConfig+0x30c>)
 8002dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dd8:	f003 0303 	and.w	r3, r3, #3
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ddc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002de0:	5cd3      	ldrb	r3, [r2, r3]
 8002de2:	f040 8138 	bne.w	8003056 <UART_SetConfig+0x2ce>
  {
    switch (clocksource)
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	f200 808f 	bhi.w	8002f0a <UART_SetConfig+0x182>
 8002dec:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002df0:	00ca011a 	.word	0x00ca011a
 8002df4:	008d00f9 	.word	0x008d00f9
 8002df8:	008d0114 	.word	0x008d0114
 8002dfc:	008d008d 	.word	0x008d008d
 8002e00:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e02:	4ba5      	ldr	r3, [pc, #660]	; (8003098 <UART_SetConfig+0x310>)
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d107      	bne.n	8002e18 <UART_SetConfig+0x90>
 8002e08:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 8002e0c:	4aa3      	ldr	r2, [pc, #652]	; (800309c <UART_SetConfig+0x314>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	f003 030c 	and.w	r3, r3, #12
 8002e16:	e7e1      	b.n	8002ddc <UART_SetConfig+0x54>
 8002e18:	4ba1      	ldr	r3, [pc, #644]	; (80030a0 <UART_SetConfig+0x318>)
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d123      	bne.n	8002e66 <UART_SetConfig+0xde>
 8002e1e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e2a:	2b10      	cmp	r3, #16
 8002e2c:	f000 80f1 	beq.w	8003012 <UART_SetConfig+0x28a>
 8002e30:	d80b      	bhi.n	8002e4a <UART_SetConfig+0xc2>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 80f3 	beq.w	800301e <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e38:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
      default:
        ret = HAL_ERROR;
 8002e3c:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002e40:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e44:	f000 80f8 	beq.w	8003038 <UART_SetConfig+0x2b0>
 8002e48:	e0a8      	b.n	8002f9c <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	f000 80c6 	beq.w	8002fdc <UART_SetConfig+0x254>
 8002e50:	2b30      	cmp	r3, #48	; 0x30
 8002e52:	d1f1      	bne.n	8002e38 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e54:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002e58:	f040 80b8 	bne.w	8002fcc <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002e5c:	6860      	ldr	r0, [r4, #4]
 8002e5e:	0843      	lsrs	r3, r0, #1
 8002e60:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002e64:	e0c3      	b.n	8002fee <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e66:	4b8f      	ldr	r3, [pc, #572]	; (80030a4 <UART_SetConfig+0x31c>)
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d11e      	bne.n	8002eaa <UART_SetConfig+0x122>
 8002e6c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8002e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e78:	2b40      	cmp	r3, #64	; 0x40
 8002e7a:	f000 80bb 	beq.w	8002ff4 <UART_SetConfig+0x26c>
 8002e7e:	d80a      	bhi.n	8002e96 <UART_SetConfig+0x10e>
 8002e80:	b97b      	cbnz	r3, 8002ea2 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e82:	4b82      	ldr	r3, [pc, #520]	; (800308c <UART_SetConfig+0x304>)
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f040 80ca 	bne.w	800301e <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002e8a:	f7ff f905 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
        break;
 8002e8e:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 8002e90:	bbb0      	cbnz	r0, 8002f00 <UART_SetConfig+0x178>
 8002e92:	4602      	mov	r2, r0
 8002e94:	e03a      	b.n	8002f0c <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e96:	2b80      	cmp	r3, #128	; 0x80
 8002e98:	f000 809d 	beq.w	8002fd6 <UART_SetConfig+0x24e>
 8002e9c:	2bc0      	cmp	r3, #192	; 0xc0
 8002e9e:	f000 80b0 	beq.w	8003002 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ea2:	4b7a      	ldr	r3, [pc, #488]	; (800308c <UART_SetConfig+0x304>)
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d1c7      	bne.n	8002e38 <UART_SetConfig+0xb0>
 8002ea8:	e02f      	b.n	8002f0a <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002eaa:	4b7f      	ldr	r3, [pc, #508]	; (80030a8 <UART_SetConfig+0x320>)
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d111      	bne.n	8002ed4 <UART_SetConfig+0x14c>
 8002eb0:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec0:	f000 8098 	beq.w	8002ff4 <UART_SetConfig+0x26c>
 8002ec4:	d9dc      	bls.n	8002e80 <UART_SetConfig+0xf8>
 8002ec6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eca:	f000 8084 	beq.w	8002fd6 <UART_SetConfig+0x24e>
 8002ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed2:	e7e4      	b.n	8002e9e <UART_SetConfig+0x116>
 8002ed4:	4b6d      	ldr	r3, [pc, #436]	; (800308c <UART_SetConfig+0x304>)
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d1ae      	bne.n	8002e38 <UART_SetConfig+0xb0>
 8002eda:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ee2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eea:	f000 8083 	beq.w	8002ff4 <UART_SetConfig+0x26c>
 8002eee:	d9c7      	bls.n	8002e80 <UART_SetConfig+0xf8>
 8002ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ef4:	d06f      	beq.n	8002fd6 <UART_SetConfig+0x24e>
 8002ef6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002efa:	e7d0      	b.n	8002e9e <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002efc:	486b      	ldr	r0, [pc, #428]	; (80030ac <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8002efe:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f00:	6862      	ldr	r2, [r4, #4]
 8002f02:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002f06:	4281      	cmp	r1, r0
 8002f08:	d905      	bls.n	8002f16 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002f0a:	2201      	movs	r2, #1
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002f10:	6663      	str	r3, [r4, #100]	; 0x64

  return ret;
}
 8002f12:	4610      	mov	r0, r2
 8002f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f16:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002f1a:	d8f6      	bhi.n	8002f0a <UART_SetConfig+0x182>
        switch (clocksource)
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d82e      	bhi.n	8002f7e <UART_SetConfig+0x1f6>
 8002f20:	e8df f003 	tbb	[pc, r3]
 8002f24:	2d1c2d05 	.word	0x2d1c2d05
 8002f28:	2d2d2d24 	.word	0x2d2d2d24
 8002f2c:	27          	.byte	0x27
 8002f2d:	00          	.byte	0x00
            pclk = HAL_RCC_GetPCLK1Freq();
 8002f2e:	f7ff f8b3 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f32:	6862      	ldr	r2, [r4, #4]
 8002f34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f38:	0856      	lsrs	r6, r2, #1
 8002f3a:	2700      	movs	r7, #0
 8002f3c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002f40:	2300      	movs	r3, #0
 8002f42:	4630      	mov	r0, r6
 8002f44:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f46:	f7fd f993 	bl	8000270 <__aeabi_uldivmod>
            break;
 8002f4a:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002f4c:	4b58      	ldr	r3, [pc, #352]	; (80030b0 <UART_SetConfig+0x328>)
 8002f4e:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002f52:	4299      	cmp	r1, r3
 8002f54:	d8d9      	bhi.n	8002f0a <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8002f56:	6823      	ldr	r3, [r4, #0]
 8002f58:	60d8      	str	r0, [r3, #12]
 8002f5a:	e7d7      	b.n	8002f0c <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002f5c:	4855      	ldr	r0, [pc, #340]	; (80030b4 <UART_SetConfig+0x32c>)
 8002f5e:	0855      	lsrs	r5, r2, #1
 8002f60:	2300      	movs	r3, #0
 8002f62:	2100      	movs	r1, #0
 8002f64:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f66:	f141 0100 	adc.w	r1, r1, #0
 8002f6a:	e7ec      	b.n	8002f46 <UART_SetConfig+0x1be>
            pclk = HAL_RCC_GetSysClockFreq();
 8002f6c:	f7fe fd2a 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8002f70:	e7df      	b.n	8002f32 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002f72:	0850      	lsrs	r0, r2, #1
 8002f74:	2100      	movs	r1, #0
 8002f76:	2300      	movs	r3, #0
 8002f78:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002f7c:	e7f3      	b.n	8002f66 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8002f7e:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002f80:	2000      	movs	r0, #0
 8002f82:	e7e3      	b.n	8002f4c <UART_SetConfig+0x1c4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f84:	f7ff f89a 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 8002f88:	e04e      	b.n	8003028 <UART_SetConfig+0x2a0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f8a:	f7ff f885 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f8e:	6862      	ldr	r2, [r4, #4]
 8002f90:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002f94:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f98:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f9a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f9c:	f1a3 0010 	sub.w	r0, r3, #16
 8002fa0:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002fa4:	4288      	cmp	r0, r1
 8002fa6:	d8b0      	bhi.n	8002f0a <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8002fa8:	6821      	ldr	r1, [r4, #0]
 8002faa:	60cb      	str	r3, [r1, #12]
 8002fac:	e7ae      	b.n	8002f0c <UART_SetConfig+0x184>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002fae:	f7ff f885 	bl	80020bc <HAL_RCC_GetPCLK2Freq>
 8002fb2:	e7ec      	b.n	8002f8e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002fb4:	6860      	ldr	r0, [r4, #4]
 8002fb6:	0843      	lsrs	r3, r0, #1
 8002fb8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002fbc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002fc0:	fbb3 f3f0 	udiv	r3, r3, r0
 8002fc4:	e7e8      	b.n	8002f98 <UART_SetConfig+0x210>
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc6:	f7fe fcfd 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 8002fca:	e7e0      	b.n	8002f8e <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002fcc:	6860      	ldr	r0, [r4, #4]
 8002fce:	0843      	lsrs	r3, r0, #1
 8002fd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002fd4:	e7f4      	b.n	8002fc0 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002fd6:	4b2d      	ldr	r3, [pc, #180]	; (800308c <UART_SetConfig+0x304>)
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d08f      	beq.n	8002efc <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fdc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002fe0:	d1e8      	bne.n	8002fb4 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002fe2:	6860      	ldr	r0, [r4, #4]
 8002fe4:	0843      	lsrs	r3, r0, #1
 8002fe6:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002fea:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fee:	fbb3 f3f0 	udiv	r3, r3, r0
 8002ff2:	e01f      	b.n	8003034 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ff4:	4b25      	ldr	r3, [pc, #148]	; (800308c <UART_SetConfig+0x304>)
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d10b      	bne.n	8003012 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002ffa:	f7fe fce3 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
        break;
 8002ffe:	2304      	movs	r3, #4
 8003000:	e746      	b.n	8002e90 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8003002:	4b22      	ldr	r3, [pc, #136]	; (800308c <UART_SetConfig+0x304>)
 8003004:	429a      	cmp	r2, r3
 8003006:	f47f af25 	bne.w	8002e54 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800300a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 800300e:	2308      	movs	r3, #8
 8003010:	e776      	b.n	8002f00 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003012:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003016:	d1d6      	bne.n	8002fc6 <UART_SetConfig+0x23e>
        pclk = HAL_RCC_GetSysClockFreq();
 8003018:	f7fe fcd4 	bl	80019c4 <HAL_RCC_GetSysClockFreq>
 800301c:	e004      	b.n	8003028 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800301e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003022:	d1b2      	bne.n	8002f8a <UART_SetConfig+0x202>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003024:	f7ff f838 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003028:	6861      	ldr	r1, [r4, #4]
 800302a:	084a      	lsrs	r2, r1, #1
 800302c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8003030:	fbb3 f3f1 	udiv	r3, r3, r1
 8003034:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003036:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003038:	f1a3 0010 	sub.w	r0, r3, #16
 800303c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8003040:	4288      	cmp	r0, r1
 8003042:	f63f af62 	bhi.w	8002f0a <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003046:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800304a:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800304c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003050:	430b      	orrs	r3, r1
 8003052:	60c3      	str	r3, [r0, #12]
 8003054:	e75a      	b.n	8002f0c <UART_SetConfig+0x184>
    switch (clocksource)
 8003056:	2b08      	cmp	r3, #8
 8003058:	f63f af57 	bhi.w	8002f0a <UART_SetConfig+0x182>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <UART_SetConfig+0x2dc>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08002f8b 	.word	0x08002f8b
 8003068:	08002faf 	.word	0x08002faf
 800306c:	08002fb5 	.word	0x08002fb5
 8003070:	08002f0b 	.word	0x08002f0b
 8003074:	08002fc7 	.word	0x08002fc7
 8003078:	08002f0b 	.word	0x08002f0b
 800307c:	08002f0b 	.word	0x08002f0b
 8003080:	08002f0b 	.word	0x08002f0b
 8003084:	08002fcd 	.word	0x08002fcd
 8003088:	efff69f3 	.word	0xefff69f3
 800308c:	40008000 	.word	0x40008000
 8003090:	40013800 	.word	0x40013800
 8003094:	0800741b 	.word	0x0800741b
 8003098:	40004400 	.word	0x40004400
 800309c:	0800741f 	.word	0x0800741f
 80030a0:	40004800 	.word	0x40004800
 80030a4:	40004c00 	.word	0x40004c00
 80030a8:	40005000 	.word	0x40005000
 80030ac:	00f42400 	.word	0x00f42400
 80030b0:	000ffcff 	.word	0x000ffcff
 80030b4:	f4240000 	.word	0xf4240000

080030b8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80030ba:	07da      	lsls	r2, r3, #31
{
 80030bc:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030be:	d506      	bpl.n	80030ce <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030c0:	6801      	ldr	r1, [r0, #0]
 80030c2:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80030c4:	684a      	ldr	r2, [r1, #4]
 80030c6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80030ca:	4322      	orrs	r2, r4
 80030cc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030ce:	079c      	lsls	r4, r3, #30
 80030d0:	d506      	bpl.n	80030e0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030d2:	6801      	ldr	r1, [r0, #0]
 80030d4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80030d6:	684a      	ldr	r2, [r1, #4]
 80030d8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030dc:	4322      	orrs	r2, r4
 80030de:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030e0:	0759      	lsls	r1, r3, #29
 80030e2:	d506      	bpl.n	80030f2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030e4:	6801      	ldr	r1, [r0, #0]
 80030e6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80030e8:	684a      	ldr	r2, [r1, #4]
 80030ea:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ee:	4322      	orrs	r2, r4
 80030f0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030f2:	071a      	lsls	r2, r3, #28
 80030f4:	d506      	bpl.n	8003104 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030f6:	6801      	ldr	r1, [r0, #0]
 80030f8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80030fa:	684a      	ldr	r2, [r1, #4]
 80030fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003100:	4322      	orrs	r2, r4
 8003102:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003104:	06dc      	lsls	r4, r3, #27
 8003106:	d506      	bpl.n	8003116 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003108:	6801      	ldr	r1, [r0, #0]
 800310a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800310c:	688a      	ldr	r2, [r1, #8]
 800310e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003112:	4322      	orrs	r2, r4
 8003114:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003116:	0699      	lsls	r1, r3, #26
 8003118:	d506      	bpl.n	8003128 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800311a:	6801      	ldr	r1, [r0, #0]
 800311c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800311e:	688a      	ldr	r2, [r1, #8]
 8003120:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003124:	4322      	orrs	r2, r4
 8003126:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003128:	065a      	lsls	r2, r3, #25
 800312a:	d50f      	bpl.n	800314c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800312c:	6801      	ldr	r1, [r0, #0]
 800312e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003130:	684a      	ldr	r2, [r1, #4]
 8003132:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8003136:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003138:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800313c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800313e:	d105      	bne.n	800314c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003140:	684a      	ldr	r2, [r1, #4]
 8003142:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8003144:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003148:	4322      	orrs	r2, r4
 800314a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800314c:	061b      	lsls	r3, r3, #24
 800314e:	d506      	bpl.n	800315e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003150:	6802      	ldr	r2, [r0, #0]
 8003152:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003154:	6853      	ldr	r3, [r2, #4]
 8003156:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800315a:	430b      	orrs	r3, r1
 800315c:	6053      	str	r3, [r2, #4]
 800315e:	bd10      	pop	{r4, pc}

08003160 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003160:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003164:	9d06      	ldr	r5, [sp, #24]
 8003166:	4604      	mov	r4, r0
 8003168:	460f      	mov	r7, r1
 800316a:	4616      	mov	r6, r2
 800316c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800316e:	6821      	ldr	r1, [r4, #0]
 8003170:	69ca      	ldr	r2, [r1, #28]
 8003172:	ea37 0302 	bics.w	r3, r7, r2
 8003176:	bf0c      	ite	eq
 8003178:	2201      	moveq	r2, #1
 800317a:	2200      	movne	r2, #0
 800317c:	42b2      	cmp	r2, r6
 800317e:	d002      	beq.n	8003186 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8003180:	2000      	movs	r0, #0
}
 8003182:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8003186:	1c68      	adds	r0, r5, #1
 8003188:	d0f2      	beq.n	8003170 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7fe f997 	bl	80014bc <HAL_GetTick>
 800318e:	eba0 0008 	sub.w	r0, r0, r8
 8003192:	4285      	cmp	r5, r0
 8003194:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003196:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003198:	d300      	bcc.n	800319c <UART_WaitOnFlagUntilTimeout+0x3c>
 800319a:	b97d      	cbnz	r5, 80031bc <UART_WaitOnFlagUntilTimeout+0x5c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800319c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031a0:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a2:	6883      	ldr	r3, [r0, #8]
 80031a4:	f023 0301 	bic.w	r3, r3, #1
 80031a8:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80031aa:	2320      	movs	r3, #32
 80031ac:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80031ae:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80031b0:	2300      	movs	r3, #0
 80031b2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80031b6:	2003      	movs	r0, #3
 80031b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031bc:	075a      	lsls	r2, r3, #29
 80031be:	d5d6      	bpl.n	800316e <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031c0:	69c3      	ldr	r3, [r0, #28]
 80031c2:	051b      	lsls	r3, r3, #20
 80031c4:	d5d3      	bpl.n	800316e <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031ca:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031cc:	6803      	ldr	r3, [r0, #0]
 80031ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031d2:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d4:	6883      	ldr	r3, [r0, #8]
 80031d6:	f023 0301 	bic.w	r3, r3, #1
 80031da:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 80031dc:	2320      	movs	r3, #32
 80031de:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80031e0:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031e2:	67e3      	str	r3, [r4, #124]	; 0x7c
 80031e4:	e7e4      	b.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x50>

080031e6 <HAL_UART_Transmit>:
{
 80031e6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80031ea:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80031ec:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80031ee:	2b20      	cmp	r3, #32
{
 80031f0:	4604      	mov	r4, r0
 80031f2:	460e      	mov	r6, r1
 80031f4:	4691      	mov	r9, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80031f6:	d14c      	bne.n	8003292 <HAL_UART_Transmit+0xac>
    if ((pData == NULL) || (Size == 0U))
 80031f8:	2900      	cmp	r1, #0
 80031fa:	d048      	beq.n	800328e <HAL_UART_Transmit+0xa8>
 80031fc:	2a00      	cmp	r2, #0
 80031fe:	d046      	beq.n	800328e <HAL_UART_Transmit+0xa8>
    __HAL_LOCK(huart);
 8003200:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8003204:	2b01      	cmp	r3, #1
 8003206:	d044      	beq.n	8003292 <HAL_UART_Transmit+0xac>
 8003208:	2301      	movs	r3, #1
 800320a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800320e:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003210:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003212:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003214:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8003216:	f7fe f951 	bl	80014bc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800321a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800321c:	f8a4 9050 	strh.w	r9, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003224:	4607      	mov	r7, r0
    huart->TxXferCount = Size;
 8003226:	f8a4 9052 	strh.w	r9, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322a:	d103      	bne.n	8003234 <HAL_UART_Transmit+0x4e>
 800322c:	6923      	ldr	r3, [r4, #16]
 800322e:	b90b      	cbnz	r3, 8003234 <HAL_UART_Transmit+0x4e>
 8003230:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003232:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8003234:	2300      	movs	r3, #0
 8003236:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 800323a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800323e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003242:	b292      	uxth	r2, r2
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003244:	463b      	mov	r3, r7
    while (huart->TxXferCount > 0U)
 8003246:	b93a      	cbnz	r2, 8003258 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003248:	2140      	movs	r1, #64	; 0x40
 800324a:	4620      	mov	r0, r4
 800324c:	f7ff ff88 	bl	8003160 <UART_WaitOnFlagUntilTimeout>
 8003250:	b940      	cbnz	r0, 8003264 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8003252:	2320      	movs	r3, #32
 8003254:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8003256:	e006      	b.n	8003266 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003258:	2200      	movs	r2, #0
 800325a:	2180      	movs	r1, #128	; 0x80
 800325c:	4620      	mov	r0, r4
 800325e:	f7ff ff7f 	bl	8003160 <UART_WaitOnFlagUntilTimeout>
 8003262:	b118      	cbz	r0, 800326c <HAL_UART_Transmit+0x86>
        return HAL_TIMEOUT;
 8003264:	2003      	movs	r0, #3
}
 8003266:	b003      	add	sp, #12
 8003268:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800326c:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800326e:	b95e      	cbnz	r6, 8003288 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003270:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003274:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003278:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 800327a:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800327e:	3b01      	subs	r3, #1
 8003280:	b29b      	uxth	r3, r3
 8003282:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
 8003286:	e7d8      	b.n	800323a <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003288:	f816 3b01 	ldrb.w	r3, [r6], #1
 800328c:	e7f4      	b.n	8003278 <HAL_UART_Transmit+0x92>
      return  HAL_ERROR;
 800328e:	2001      	movs	r0, #1
 8003290:	e7e9      	b.n	8003266 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8003292:	2002      	movs	r0, #2
 8003294:	e7e7      	b.n	8003266 <HAL_UART_Transmit+0x80>

08003296 <UART_CheckIdleState>:
{
 8003296:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003298:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800329a:	2600      	movs	r6, #0
 800329c:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 800329e:	f7fe f90d 	bl	80014bc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80032a8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032aa:	d415      	bmi.n	80032d8 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032ac:	6823      	ldr	r3, [r4, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	075b      	lsls	r3, r3, #29
 80032b2:	d50a      	bpl.n	80032ca <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2200      	movs	r2, #0
 80032bc:	462b      	mov	r3, r5
 80032be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032c2:	4620      	mov	r0, r4
 80032c4:	f7ff ff4c 	bl	8003160 <UART_WaitOnFlagUntilTimeout>
 80032c8:	b990      	cbnz	r0, 80032f0 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80032ca:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80032cc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80032ce:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80032d0:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 80032d4:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 80032d6:	e00c      	b.n	80032f2 <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	4632      	mov	r2, r6
 80032e0:	4603      	mov	r3, r0
 80032e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032e6:	4620      	mov	r0, r4
 80032e8:	f7ff ff3a 	bl	8003160 <UART_WaitOnFlagUntilTimeout>
 80032ec:	2800      	cmp	r0, #0
 80032ee:	d0dd      	beq.n	80032ac <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80032f0:	2003      	movs	r0, #3
}
 80032f2:	b002      	add	sp, #8
 80032f4:	bd70      	pop	{r4, r5, r6, pc}

080032f6 <HAL_UART_Init>:
{
 80032f6:	b510      	push	{r4, lr}
  if (huart == NULL)
 80032f8:	4604      	mov	r4, r0
 80032fa:	b340      	cbz	r0, 800334e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80032fc:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80032fe:	b91b      	cbnz	r3, 8003308 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003300:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003304:	f002 fcfe 	bl	8005d04 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003308:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800330a:	2324      	movs	r3, #36	; 0x24
 800330c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800330e:	6813      	ldr	r3, [r2, #0]
 8003310:	f023 0301 	bic.w	r3, r3, #1
 8003314:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003316:	4620      	mov	r0, r4
 8003318:	f7ff fd36 	bl	8002d88 <UART_SetConfig>
 800331c:	2801      	cmp	r0, #1
 800331e:	d016      	beq.n	800334e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003322:	b113      	cbz	r3, 800332a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8003324:	4620      	mov	r0, r4
 8003326:	f7ff fec7 	bl	80030b8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800332a:	6823      	ldr	r3, [r4, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800333a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003342:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003344:	601a      	str	r2, [r3, #0]
}
 8003346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800334a:	f7ff bfa4 	b.w	8003296 <UART_CheckIdleState>
}
 800334e:	2001      	movs	r0, #1
 8003350:	bd10      	pop	{r4, pc}

08003352 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003352:	b570      	push	{r4, r5, r6, lr}
 8003354:	b08a      	sub	sp, #40	; 0x28
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003356:	2400      	movs	r4, #0
  cp.role = role;
 8003358:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 800335c:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 8003360:	f88d 2006 	strb.w	r2, [sp, #6]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003364:	4621      	mov	r1, r4
 8003366:	2218      	movs	r2, #24
 8003368:	a804      	add	r0, sp, #16
{
 800336a:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800336c:	9402      	str	r4, [sp, #8]
 800336e:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003372:	f003 f948 	bl	8006606 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003376:	233f      	movs	r3, #63	; 0x3f
 8003378:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 800337c:	238a      	movs	r3, #138	; 0x8a
 800337e:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 8003382:	ab01      	add	r3, sp, #4
 8003384:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 8003386:	2303      	movs	r3, #3
 8003388:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800338a:	ad02      	add	r5, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 800338c:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 800338e:	4621      	mov	r1, r4
 8003390:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8003392:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 8003394:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 8003396:	f000 fa13 	bl	80037c0 <hci_send_req>
 800339a:	42a0      	cmp	r0, r4
 800339c:	db15      	blt.n	80033ca <aci_gap_init_IDB05A1+0x78>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 800339e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80033a2:	b980      	cbnz	r0, 80033c6 <aci_gap_init_IDB05A1+0x74>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 80033a4:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80033a6:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *service_handle = btohs(resp.service_handle);
 80033aa:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80033ae:	8032      	strh	r2, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80033b0:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80033b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80033b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80033ba:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80033bc:	9b03      	ldr	r3, [sp, #12]
 80033be:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80033c0:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80033c4:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 80033c6:	b00a      	add	sp, #40	; 0x28
 80033c8:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80033ca:	20ff      	movs	r0, #255	; 0xff
 80033cc:	e7fb      	b.n	80033c6 <aci_gap_init_IDB05A1+0x74>

080033ce <aci_gap_create_connection>:
				     uint8_t peer_bdaddr_type, tBDAddr peer_bdaddr,	
				     uint8_t own_bdaddr_type, uint16_t conn_min_interval,	
				     uint16_t conn_max_interval, uint16_t conn_latency,	
				     uint16_t supervision_timeout, uint16_t min_conn_length, 
				     uint16_t max_conn_length)
{
 80033ce:	b510      	push	{r4, lr}
 80033d0:	b08e      	sub	sp, #56	; 0x38
  cp.conn_latency = htobs(conn_latency);
  cp.supervision_timeout = htobs(supervision_timeout);
  cp.min_conn_length = htobs(min_conn_length);
  cp.max_conn_length = htobs(max_conn_length);

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80033d2:	2418      	movs	r4, #24
  cp.peer_bdaddr_type = peer_bdaddr_type;
 80033d4:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	889b      	ldrh	r3, [r3, #4]
 80033dc:	f8ad 3029 	strh.w	r3, [sp, #41]	; 0x29
  cp.own_bdaddr_type = own_bdaddr_type;
 80033e0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 80033e4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
  cp.conn_min_interval = htobs(conn_min_interval);
 80033e8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 80033ec:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
  cp.conn_max_interval = htobs(conn_max_interval);
 80033f0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80033f4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
  cp.conn_latency = htobs(conn_latency);
 80033f8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 80033fc:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
  cp.supervision_timeout = htobs(supervision_timeout);
 8003400:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8003404:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
  cp.min_conn_length = htobs(min_conn_length);
 8003408:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
  cp.scanInterval = htobs(scanInterval);
 800340c:	f8ad 0020 	strh.w	r0, [sp, #32]
  cp.scanWindow = htobs(scanWindow);
 8003410:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  BLUENRG_memcpy(cp.peer_bdaddr, peer_bdaddr, 6);
 8003414:	f8cd 2025 	str.w	r2, [sp, #37]	; 0x25
  cp.min_conn_length = htobs(min_conn_length);
 8003418:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800341c:	4622      	mov	r2, r4
  cp.max_conn_length = htobs(max_conn_length);
 800341e:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 8003422:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003426:	2100      	movs	r1, #0
 8003428:	a802      	add	r0, sp, #8
 800342a:	f003 f8ec 	bl	8006606 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800342e:	233f      	movs	r3, #63	; 0x3f
 8003430:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_CREATE_CONNECTION;
 8003434:	239c      	movs	r3, #156	; 0x9c
 8003436:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 800343a:	ab08      	add	r3, sp, #32
 800343c:	9304      	str	r3, [sp, #16]
  rq.clen = sizeof(cp);
  rq.event = EVT_CMD_STATUS;
 800343e:	230f      	movs	r3, #15
 8003440:	9303      	str	r3, [sp, #12]
  rq.rparam = &status;
 8003442:	f10d 0307 	add.w	r3, sp, #7
 8003446:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003448:	2100      	movs	r1, #0
  rq.rlen = 1;
 800344a:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800344c:	a802      	add	r0, sp, #8
  rq.clen = sizeof(cp);
 800344e:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003450:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003452:	f000 f9b5 	bl	80037c0 <hci_send_req>
 8003456:	2800      	cmp	r0, #0

  //TODO check
//  if (hci_send_req(&rq, TRUE) < 0)
//    return BLE_STATUS_TIMEOUT;

  return status;
 8003458:	bfac      	ite	ge
 800345a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800345e:	20ff      	movlt	r0, #255	; 0xff
}
 8003460:	b00e      	add	sp, #56	; 0x38
 8003462:	bd10      	pop	{r4, pc}

08003464 <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 8003464:	b500      	push	{lr}
 8003466:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003468:	2218      	movs	r2, #24
 800346a:	2100      	movs	r1, #0
 800346c:	a802      	add	r0, sp, #8
 800346e:	f003 f8ca 	bl	8006606 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003472:	233f      	movs	r3, #63	; 0x3f
 8003474:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 8003478:	f240 1301 	movw	r3, #257	; 0x101
 800347c:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8003480:	f10d 0307 	add.w	r3, sp, #7
 8003484:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8003486:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003488:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800348a:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800348c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800348e:	f000 f997 	bl	80037c0 <hci_send_req>
 8003492:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8003494:	bfac      	ite	ge
 8003496:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 800349a:	20ff      	movlt	r0, #255	; 0xff
}
 800349c:	b009      	add	sp, #36	; 0x24
 800349e:	f85d fb04 	ldr.w	pc, [sp], #4

080034a2 <aci_gatt_disc_charac_by_uuid>:
}

tBleStatus aci_gatt_disc_charac_by_uuid(uint16_t conn_handle, uint16_t start_handle,
				                     uint16_t end_handle, uint8_t charUuidType,
                                                     const uint8_t* charUuid)
{
 80034a2:	b510      	push	{r4, lr}
  indx += 2;
  
  buffer[indx] = charUuidType;
  indx++;
    
  if(charUuidType == 0x01){
 80034a4:	2b01      	cmp	r3, #1
{
 80034a6:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80034a8:	bf0c      	ite	eq
 80034aa:	2402      	moveq	r4, #2
 80034ac:	2410      	movne	r4, #16
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 80034ae:	f8ad 0008 	strh.w	r0, [sp, #8]
  BLUENRG_memcpy(buffer + indx, &start_handle, 2);
 80034b2:	f8ad 100a 	strh.w	r1, [sp, #10]
  BLUENRG_memcpy(buffer + indx, &end_handle, 2);
 80034b6:	f8ad 200c 	strh.w	r2, [sp, #12]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80034ba:	9910      	ldr	r1, [sp, #64]	; 0x40
  buffer[indx] = charUuidType;
 80034bc:	f88d 300e 	strb.w	r3, [sp, #14]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80034c0:	4622      	mov	r2, r4
 80034c2:	f10d 000f 	add.w	r0, sp, #15
 80034c6:	f003 f893 	bl	80065f0 <memcpy>
  indx +=  uuid_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80034ca:	2218      	movs	r2, #24
 80034cc:	2100      	movs	r1, #0
 80034ce:	a808      	add	r0, sp, #32
 80034d0:	f003 f899 	bl	8006606 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80034d4:	233f      	movs	r3, #63	; 0x3f
 80034d6:	f8ad 3020 	strh.w	r3, [sp, #32]
  rq.ocf = OCF_GATT_DISC_CHARAC_BY_UUID;
 80034da:	f44f 738b 	mov.w	r3, #278	; 0x116
 80034de:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
  rq.cparam = (void *)buffer;
 80034e2:	ab02      	add	r3, sp, #8
 80034e4:	930a      	str	r3, [sp, #40]	; 0x28
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS;
 80034e6:	230f      	movs	r3, #15
 80034e8:	9309      	str	r3, [sp, #36]	; 0x24
  rq.rparam = &status;
 80034ea:	f10d 0307 	add.w	r3, sp, #7
 80034ee:	930c      	str	r3, [sp, #48]	; 0x30
  rq.clen = indx;
 80034f0:	3407      	adds	r4, #7
  rq.rlen = 1;
 80034f2:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80034f4:	2100      	movs	r1, #0
 80034f6:	a808      	add	r0, sp, #32
  rq.clen = indx;
 80034f8:	940b      	str	r4, [sp, #44]	; 0x2c
  rq.rlen = 1;
 80034fa:	930d      	str	r3, [sp, #52]	; 0x34
  if (hci_send_req(&rq, FALSE) < 0)
 80034fc:	f000 f960 	bl	80037c0 <hci_send_req>
 8003500:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 8003502:	bfac      	ite	ge
 8003504:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8003508:	20ff      	movlt	r0, #255	; 0xff
}
 800350a:	b00e      	add	sp, #56	; 0x38
 800350c:	bd10      	pop	{r4, pc}

0800350e <aci_gatt_write_charac_descriptor>:
  return status;
}

tBleStatus aci_gatt_write_charac_descriptor(uint16_t conn_handle, uint16_t attr_handle, 
					   uint8_t value_len, uint8_t *attr_value)
{
 800350e:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8003510:	2a7b      	cmp	r2, #123	; 0x7b
{
 8003512:	b0a8      	sub	sp, #160	; 0xa0
 8003514:	4614      	mov	r4, r2
  if ((value_len+5) > HCI_MAX_PAYLOAD_SIZE)
 8003516:	dc2c      	bgt.n	8003572 <aci_gatt_write_charac_descriptor+0x64>
    return BLE_STATUS_INVALID_PARAMS;

  conn_handle = htobs(conn_handle);
  BLUENRG_memcpy(buffer + indx, &conn_handle, 2);
 8003518:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  attr_handle = htobs(attr_handle);
  BLUENRG_memcpy(buffer + indx, &attr_handle, 2);
 800351c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;

  buffer[indx] = value_len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 8003520:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 8003524:	4619      	mov	r1, r3
  buffer[indx] = value_len;
 8003526:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  BLUENRG_memcpy(buffer + indx, attr_value, value_len);
 800352a:	f003 f861 	bl	80065f0 <memcpy>
  indx +=  value_len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800352e:	2218      	movs	r2, #24
 8003530:	2100      	movs	r1, #0
 8003532:	a802      	add	r0, sp, #8
 8003534:	f003 f867 	bl	8006606 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003538:	233f      	movs	r3, #63	; 0x3f
 800353a:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_WRITE_CHAR_DESCRIPTOR;
 800353e:	f240 1321 	movw	r3, #289	; 0x121
 8003542:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 8003546:	ab08      	add	r3, sp, #32
 8003548:	9304      	str	r3, [sp, #16]
  rq.clen = indx;
  rq.event = EVT_CMD_STATUS; 
 800354a:	230f      	movs	r3, #15
 800354c:	9303      	str	r3, [sp, #12]
  indx +=  value_len;
 800354e:	3405      	adds	r4, #5
  rq.rparam = &status;
 8003550:	f10d 0307 	add.w	r3, sp, #7
 8003554:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8003556:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8003558:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800355a:	2100      	movs	r1, #0
 800355c:	a802      	add	r0, sp, #8
  rq.clen = indx;
 800355e:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003560:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003562:	f000 f92d 	bl	80037c0 <hci_send_req>
 8003566:	2800      	cmp	r0, #0
 8003568:	db05      	blt.n	8003576 <aci_gatt_write_charac_descriptor+0x68>
    return BLE_STATUS_TIMEOUT;

  return status;
 800356a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800356e:	b028      	add	sp, #160	; 0xa0
 8003570:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8003572:	2042      	movs	r0, #66	; 0x42
 8003574:	e7fb      	b.n	800356e <aci_gatt_write_charac_descriptor+0x60>
    return BLE_STATUS_TIMEOUT;
 8003576:	20ff      	movs	r0, #255	; 0xff
 8003578:	e7f9      	b.n	800356e <aci_gatt_write_charac_descriptor+0x60>

0800357a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 800357a:	b510      	push	{r4, lr}
 800357c:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800357e:	2c7e      	cmp	r4, #126	; 0x7e
{
 8003580:	b0a8      	sub	sp, #160	; 0xa0
 8003582:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8003584:	dc27      	bgt.n	80035d6 <aci_hal_write_config_data+0x5c>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8003586:	4622      	mov	r2, r4
  buffer[indx] = offset;
 8003588:	f88d 0020 	strb.w	r0, [sp, #32]
  BLUENRG_memcpy(buffer + indx, val, len);
 800358c:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 8003590:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  BLUENRG_memcpy(buffer + indx, val, len);
 8003594:	f003 f82c 	bl	80065f0 <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003598:	2218      	movs	r2, #24
 800359a:	2100      	movs	r1, #0
 800359c:	a802      	add	r0, sp, #8
 800359e:	f003 f832 	bl	8006606 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80035a2:	233f      	movs	r3, #63	; 0x3f
 80035a4:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 80035a8:	230c      	movs	r3, #12
 80035aa:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 80035ae:	ab08      	add	r3, sp, #32
 80035b0:	9304      	str	r3, [sp, #16]
  indx +=  len;
 80035b2:	3402      	adds	r4, #2
  rq.clen = indx;
  rq.rparam = &status;
 80035b4:	f10d 0307 	add.w	r3, sp, #7
 80035b8:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 80035ba:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80035bc:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80035be:	2100      	movs	r1, #0
 80035c0:	a802      	add	r0, sp, #8
  rq.clen = indx;
 80035c2:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 80035c4:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80035c6:	f000 f8fb 	bl	80037c0 <hci_send_req>
 80035ca:	2800      	cmp	r0, #0
 80035cc:	db05      	blt.n	80035da <aci_hal_write_config_data+0x60>
    return BLE_STATUS_TIMEOUT;

  return status;
 80035ce:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80035d2:	b028      	add	sp, #160	; 0xa0
 80035d4:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80035d6:	2042      	movs	r0, #66	; 0x42
 80035d8:	e7fb      	b.n	80035d2 <aci_hal_write_config_data+0x58>
    return BLE_STATUS_TIMEOUT;
 80035da:	20ff      	movs	r0, #255	; 0xff
 80035dc:	e7f9      	b.n	80035d2 <aci_hal_write_config_data+0x58>

080035de <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 80035de:	b500      	push	{lr}
 80035e0:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80035e2:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 80035e4:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 80035e8:	f88d 1005 	strb.w	r1, [sp, #5]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80035ec:	a802      	add	r0, sp, #8
 80035ee:	2100      	movs	r1, #0
 80035f0:	f003 f809 	bl	8006606 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80035f4:	233f      	movs	r3, #63	; 0x3f
 80035f6:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80035fa:	230f      	movs	r3, #15
 80035fc:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 8003600:	ab01      	add	r3, sp, #4
 8003602:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 8003604:	2302      	movs	r3, #2
 8003606:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 8003608:	f10d 0303 	add.w	r3, sp, #3
 800360c:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 800360e:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003610:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003612:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8003614:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003616:	f000 f8d3 	bl	80037c0 <hci_send_req>
 800361a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800361c:	bfac      	ite	ge
 800361e:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 8003622:	20ff      	movlt	r0, #255	; 0xff
}
 8003624:	b009      	add	sp, #36	; 0x24
 8003626:	f85d fb04 	ldr.w	pc, [sp], #4

0800362a <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 800362a:	b530      	push	{r4, r5, lr}
 800362c:	b085      	sub	sp, #20
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 800362e:	f10d 030e 	add.w	r3, sp, #14
 8003632:	9300      	str	r3, [sp, #0]
{
 8003634:	4605      	mov	r5, r0
 8003636:	460c      	mov	r4, r1
  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 8003638:	ab03      	add	r3, sp, #12
 800363a:	f10d 0209 	add.w	r2, sp, #9
 800363e:	f10d 010a 	add.w	r1, sp, #10
 8003642:	a802      	add	r0, sp, #8
 8003644:	f000 f82f 	bl	80036a6 <hci_le_read_local_version>
 8003648:	b2c0      	uxtb	r0, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 800364a:	b968      	cbnz	r0, 8003668 <getBlueNRGVersion+0x3e>
    *hwVersion = hci_revision >> 8;
 800364c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8003650:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    *hwVersion = hci_revision >> 8;
 8003654:	0a0b      	lsrs	r3, r1, #8
 8003656:	702b      	strb	r3, [r5, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8003658:	f002 030f 	and.w	r3, r2, #15
 800365c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 8003660:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8003664:	4313      	orrs	r3, r2
 8003666:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 8003668:	b005      	add	sp, #20
 800366a:	bd30      	pop	{r4, r5, pc}

0800366c <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 800366c:	b500      	push	{lr}
 800366e:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003670:	2218      	movs	r2, #24
 8003672:	2100      	movs	r1, #0
 8003674:	a802      	add	r0, sp, #8
 8003676:	f002 ffc6 	bl	8006606 <memset>
  rq.ogf = OGF_HOST_CTL;
 800367a:	2303      	movs	r3, #3
 800367c:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 8003680:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8003684:	f10d 0307 	add.w	r3, sp, #7
 8003688:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800368a:	2100      	movs	r1, #0
  rq.rlen = 1;
 800368c:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800368e:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8003690:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003692:	f000 f895 	bl	80037c0 <hci_send_req>
 8003696:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 8003698:	bfac      	ite	ge
 800369a:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 800369e:	20ff      	movlt	r0, #255	; 0xff
}
 80036a0:	b009      	add	sp, #36	; 0x24
 80036a2:	f85d fb04 	ldr.w	pc, [sp], #4

080036a6 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 80036a6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80036aa:	2400      	movs	r4, #0
{
 80036ac:	b08b      	sub	sp, #44	; 0x2c
 80036ae:	4681      	mov	r9, r0
 80036b0:	4688      	mov	r8, r1
 80036b2:	4617      	mov	r7, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80036b4:	4621      	mov	r1, r4
 80036b6:	2218      	movs	r2, #24
 80036b8:	a804      	add	r0, sp, #16
{
 80036ba:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80036bc:	9401      	str	r4, [sp, #4]
 80036be:	9402      	str	r4, [sp, #8]
 80036c0:	f88d 400c 	strb.w	r4, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80036c4:	f002 ff9f 	bl	8006606 <memset>
  rq.ogf = OGF_INFO_PARAM;
 80036c8:	2304      	movs	r3, #4
 80036ca:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f8ad 3012 	strh.w	r3, [sp, #18]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80036d4:	ad01      	add	r5, sp, #4
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80036d6:	2309      	movs	r3, #9
  
  if (hci_send_req(&rq, FALSE) < 0)
 80036d8:	4621      	mov	r1, r4
 80036da:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 80036dc:	9508      	str	r5, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 80036de:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80036e0:	f000 f86e 	bl	80037c0 <hci_send_req>
 80036e4:	42a0      	cmp	r0, r4
 80036e6:	db1c      	blt.n	8003722 <hci_le_read_local_version+0x7c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80036e8:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80036ec:	b9b0      	cbnz	r0, 800371c <hci_le_read_local_version+0x76>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 80036ee:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80036f2:	f889 3000 	strb.w	r3, [r9]
  *hci_revision =  btohs(resp.hci_revision);
 80036f6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80036fa:	f8a8 3000 	strh.w	r3, [r8]
  *lmp_pal_version = resp.lmp_pal_version;
 80036fe:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003702:	703b      	strb	r3, [r7, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 8003704:	9a02      	ldr	r2, [sp, #8]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8003706:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *manufacturer_name = btohs(resp.manufacturer_name);
 800370a:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800370e:	8032      	strh	r2, [r6, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 8003710:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8003714:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003718:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800371a:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 800371c:	b00b      	add	sp, #44	; 0x2c
 800371e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return BLE_STATUS_TIMEOUT;
 8003722:	20ff      	movs	r0, #255	; 0xff
 8003724:	e7fa      	b.n	800371c <hci_le_read_local_version+0x76>
	...

08003728 <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 8003728:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 800372a:	4d08      	ldr	r5, [pc, #32]	; (800374c <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 800372c:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 800372e:	4620      	mov	r0, r4
 8003730:	f000 f959 	bl	80039e6 <list_is_empty>
 8003734:	b108      	cbz	r0, 800373a <move_list.constprop.0+0x12>
  }
}
 8003736:	b003      	add	sp, #12
 8003738:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 800373a:	a901      	add	r1, sp, #4
 800373c:	4620      	mov	r0, r4
 800373e:	f000 f991 	bl	8003a64 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003742:	9901      	ldr	r1, [sp, #4]
 8003744:	4628      	mov	r0, r5
 8003746:	f000 f958 	bl	80039fa <list_insert_head>
 800374a:	e7f0      	b.n	800372e <move_list.constprop.0+0x6>
 800374c:	200036e4 	.word	0x200036e4

08003750 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8003750:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;
  
  /* Podczepianie wskaznika na funkcje sprawdzajaca typ eventu ktory przyszedl i wywolujaca odp. funkcje */
  /* Typy eventow: connection/disconnection/attribute modified(?)/gatt_notification(dane!)/read_char/procedure_complete */
  if(UserEvtRx != NULL)
 8003752:	b108      	cbz	r0, 8003758 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8003754:	4b0f      	ldr	r3, [pc, #60]	; (8003794 <hci_init+0x44>)
 8003756:	61d8      	str	r0, [r3, #28]
  }
  
  /* Initialize TL BLE layer */
  /* Ustawianie parametrow niskopoziomowej warstwy transportowej */
  hci_tl_lowlevel_init();
 8003758:	f001 fd4e 	bl	80051f8 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800375c:	480e      	ldr	r0, [pc, #56]	; (8003798 <hci_init+0x48>)
  
  /* Initialize the queue of free hci data packets */
  /* ?Tworzy pusta liste pakietow(?) do wypelnienia? */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800375e:	4e0f      	ldr	r6, [pc, #60]	; (800379c <hci_init+0x4c>)
 8003760:	4d0d      	ldr	r5, [pc, #52]	; (8003798 <hci_init+0x48>)
  list_init_head(&hciReadPktPool);
 8003762:	f000 f93d 	bl	80039e0 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8003766:	480e      	ldr	r0, [pc, #56]	; (80037a0 <hci_init+0x50>)
 8003768:	f000 f93a 	bl	80039e0 <list_init_head>
 800376c:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800376e:	1931      	adds	r1, r6, r4
 8003770:	4628      	mov	r0, r5
 8003772:	348c      	adds	r4, #140	; 0x8c
 8003774:	f000 f94d 	bl	8003a12 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003778:	f5b4 6f2f 	cmp.w	r4, #2800	; 0xaf0
 800377c:	d1f7      	bne.n	800376e <hci_init+0x1e>
  } 
  
  /* Initialize low level driver */
  /* Inicjalizacja niskopoziomowej warstwy transportowej ustawianej wyzej */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800377e:	4c05      	ldr	r4, [pc, #20]	; (8003794 <hci_init+0x44>)
 8003780:	6822      	ldr	r2, [r4, #0]
 8003782:	b10a      	cbz	r2, 8003788 <hci_init+0x38>
 8003784:	2000      	movs	r0, #0
 8003786:	4790      	blx	r2
  if (hciContext.io.Reset) hciContext.io.Reset();
 8003788:	68a3      	ldr	r3, [r4, #8]
 800378a:	b113      	cbz	r3, 8003792 <hci_init+0x42>
}
 800378c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 8003790:	4718      	bx	r3
 8003792:	bd70      	pop	{r4, r5, r6, pc}
 8003794:	200001ec 	.word	0x200001ec
 8003798:	200036dc 	.word	0x200036dc
 800379c:	2000020c 	.word	0x2000020c
 80037a0:	200036e4 	.word	0x200036e4

080037a4 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80037a4:	4b05      	ldr	r3, [pc, #20]	; (80037bc <hci_register_io_bus+0x18>)
 80037a6:	6802      	ldr	r2, [r0, #0]
 80037a8:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 80037aa:	68c2      	ldr	r2, [r0, #12]
 80037ac:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 80037ae:	6902      	ldr	r2, [r0, #16]
 80037b0:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 80037b2:	6982      	ldr	r2, [r0, #24]
 80037b4:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;    
 80037b6:	6882      	ldr	r2, [r0, #8]
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	4770      	bx	lr
 80037bc:	200001ec 	.word	0x200001ec

080037c0 <hci_send_req>:
}

int hci_send_req(struct hci_request* r, BOOL async)
{
 80037c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037c4:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80037c6:	8846      	ldrh	r6, [r0, #2]
 80037c8:	f8b0 8000 	ldrh.w	r8, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80037cc:	4f59      	ldr	r7, [pc, #356]	; (8003934 <hci_send_req+0x174>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80037ce:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800393c <hci_send_req+0x17c>
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80037d2:	2300      	movs	r3, #0
{
 80037d4:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80037d6:	a802      	add	r0, sp, #8
{
 80037d8:	460d      	mov	r5, r1
  tHciDataPacket * hciReadPacket = NULL;
 80037da:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 80037dc:	f000 f900 	bl	80039e0 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80037e0:	4638      	mov	r0, r7
 80037e2:	f000 f951 	bl	8003a88 <list_get_size>
 80037e6:	2809      	cmp	r0, #9
 80037e8:	dd53      	ble.n	8003892 <hci_send_req+0xd2>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80037ea:	8863      	ldrh	r3, [r4, #2]
 80037ec:	8822      	ldrh	r2, [r4, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 80037ee:	7b27      	ldrb	r7, [r4, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 80037f0:	68a1      	ldr	r1, [r4, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 80037f2:	f88d 7013 	strb.w	r7, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 80037f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037fa:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 80037fe:	2201      	movs	r2, #1
 8003800:	f88d 2010 	strb.w	r2, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003804:	a805      	add	r0, sp, #20
 8003806:	463a      	mov	r2, r7
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003808:	f8ad 3011 	strh.w	r3, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800380c:	f002 fef0 	bl	80065f0 <memcpy>
  if (hciContext.io.Send)
 8003810:	4b49      	ldr	r3, [pc, #292]	; (8003938 <hci_send_req+0x178>)
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	b113      	cbz	r3, 800381c <hci_send_req+0x5c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8003816:	1d39      	adds	r1, r7, #4
 8003818:	a804      	add	r0, sp, #16
 800381a:	4798      	blx	r3
  
  if (async)
 800381c:	2d00      	cmp	r5, #0
 800381e:	d178      	bne.n	8003912 <hci_send_req+0x152>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003820:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8003824:	ea45 2588 	orr.w	r5, r5, r8, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003828:	4e44      	ldr	r6, [pc, #272]	; (800393c <hci_send_req+0x17c>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800382a:	4f42      	ldr	r7, [pc, #264]	; (8003934 <hci_send_req+0x174>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800382c:	b2ad      	uxth	r5, r5
    uint32_t tickstart = HAL_GetTick();
 800382e:	f7fd fe45 	bl	80014bc <HAL_GetTick>
 8003832:	4680      	mov	r8, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003834:	f7fd fe42 	bl	80014bc <HAL_GetTick>
 8003838:	eba0 0008 	sub.w	r0, r0, r8
 800383c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003840:	d84a      	bhi.n	80038d8 <hci_send_req+0x118>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003842:	4630      	mov	r0, r6
 8003844:	f000 f8cf 	bl	80039e6 <list_is_empty>
 8003848:	2800      	cmp	r0, #0
 800384a:	d1f3      	bne.n	8003834 <hci_send_req+0x74>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800384c:	a901      	add	r1, sp, #4
 800384e:	4630      	mov	r0, r6
 8003850:	f000 f8f6 	bl	8003a40 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003854:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 8003856:	7a0b      	ldrb	r3, [r1, #8]
 8003858:	2b04      	cmp	r3, #4
 800385a:	d109      	bne.n	8003870 <hci_send_req+0xb0>
      switch (event_pckt->evt) 
 800385c:	7a48      	ldrb	r0, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800385e:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 8003862:	280f      	cmp	r0, #15
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003864:	f1a3 0203 	sub.w	r2, r3, #3
      switch (event_pckt->evt) 
 8003868:	d02c      	beq.n	80038c4 <hci_send_req+0x104>
 800386a:	d81b      	bhi.n	80038a4 <hci_send_req+0xe4>
 800386c:	280e      	cmp	r0, #14
 800386e:	d052      	beq.n	8003916 <hci_send_req+0x156>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8003870:	4638      	mov	r0, r7
 8003872:	f000 f8b8 	bl	80039e6 <list_is_empty>
 8003876:	2800      	cmp	r0, #0
 8003878:	d058      	beq.n	800392c <hci_send_req+0x16c>
 800387a:	4630      	mov	r0, r6
 800387c:	f000 f8b3 	bl	80039e6 <list_is_empty>
 8003880:	2800      	cmp	r0, #0
 8003882:	d053      	beq.n	800392c <hci_send_req+0x16c>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003884:	9901      	ldr	r1, [sp, #4]
 8003886:	4638      	mov	r0, r7
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 8003888:	f000 f8c3 	bl	8003a12 <list_insert_tail>
      hciReadPacket=NULL;
 800388c:	2300      	movs	r3, #0
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	e7cd      	b.n	800382e <hci_send_req+0x6e>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 8003892:	a904      	add	r1, sp, #16
 8003894:	4648      	mov	r0, r9
 8003896:	f000 f8d3 	bl	8003a40 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 800389a:	9904      	ldr	r1, [sp, #16]
 800389c:	4638      	mov	r0, r7
 800389e:	f000 f8b8 	bl	8003a12 <list_insert_tail>
 80038a2:	e79d      	b.n	80037e0 <hci_send_req+0x20>
      switch (event_pckt->evt) 
 80038a4:	2810      	cmp	r0, #16
 80038a6:	d017      	beq.n	80038d8 <hci_send_req+0x118>
 80038a8:	283e      	cmp	r0, #62	; 0x3e
 80038aa:	d1e1      	bne.n	8003870 <hci_send_req+0xb0>
        if (me->subevent != r->event)
 80038ac:	7ac8      	ldrb	r0, [r1, #11]
 80038ae:	6862      	ldr	r2, [r4, #4]
 80038b0:	4290      	cmp	r0, r2
 80038b2:	d1dd      	bne.n	8003870 <hci_send_req+0xb0>
        len -= 1;
 80038b4:	1f1a      	subs	r2, r3, #4
        r->rlen = MIN(len, r->rlen);
 80038b6:	6963      	ldr	r3, [r4, #20]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	bf28      	it	cs
 80038bc:	461a      	movcs	r2, r3
 80038be:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80038c0:	310c      	adds	r1, #12
 80038c2:	e01c      	b.n	80038fe <hci_send_req+0x13e>
        if (cs->opcode != opcode)
 80038c4:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 80038c8:	42ab      	cmp	r3, r5
 80038ca:	d105      	bne.n	80038d8 <hci_send_req+0x118>
        if (r->event != EVT_CMD_STATUS) {
 80038cc:	6863      	ldr	r3, [r4, #4]
 80038ce:	2b0f      	cmp	r3, #15
 80038d0:	d00f      	beq.n	80038f2 <hci_send_req+0x132>
          if (cs->status) {
 80038d2:	7acb      	ldrb	r3, [r1, #11]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d0cb      	beq.n	8003870 <hci_send_req+0xb0>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80038d8:	9901      	ldr	r1, [sp, #4]
 80038da:	b111      	cbz	r1, 80038e2 <hci_send_req+0x122>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80038dc:	4815      	ldr	r0, [pc, #84]	; (8003934 <hci_send_req+0x174>)
 80038de:	f000 f88c 	bl	80039fa <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 80038e2:	a802      	add	r0, sp, #8
 80038e4:	f7ff ff20 	bl	8003728 <move_list.constprop.0>
  return -1;
 80038e8:	f04f 30ff 	mov.w	r0, #4294967295
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);
  return 0;
}
 80038ec:	b025      	add	sp, #148	; 0x94
 80038ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        r->rlen = MIN(len, r->rlen);
 80038f2:	6963      	ldr	r3, [r4, #20]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	bf28      	it	cs
 80038f8:	461a      	movcs	r2, r3
 80038fa:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 80038fc:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80038fe:	6920      	ldr	r0, [r4, #16]
 8003900:	f002 fe76 	bl	80065f0 <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8003904:	480b      	ldr	r0, [pc, #44]	; (8003934 <hci_send_req+0x174>)
 8003906:	9901      	ldr	r1, [sp, #4]
 8003908:	f000 f877 	bl	80039fa <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800390c:	a802      	add	r0, sp, #8
 800390e:	f7ff ff0b 	bl	8003728 <move_list.constprop.0>
    return 0;
 8003912:	2000      	movs	r0, #0
 8003914:	e7ea      	b.n	80038ec <hci_send_req+0x12c>
        if (cc->opcode != opcode)
 8003916:	898a      	ldrh	r2, [r1, #12]
 8003918:	42aa      	cmp	r2, r5
 800391a:	d1dd      	bne.n	80038d8 <hci_send_req+0x118>
        len -= EVT_CMD_COMPLETE_SIZE;
 800391c:	1f9a      	subs	r2, r3, #6
        r->rlen = MIN(len, r->rlen);
 800391e:	6963      	ldr	r3, [r4, #20]
 8003920:	429a      	cmp	r2, r3
 8003922:	bf28      	it	cs
 8003924:	461a      	movcs	r2, r3
 8003926:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003928:	310e      	adds	r1, #14
 800392a:	e7e8      	b.n	80038fe <hci_send_req+0x13e>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800392c:	9901      	ldr	r1, [sp, #4]
 800392e:	a802      	add	r0, sp, #8
 8003930:	e7aa      	b.n	8003888 <hci_send_req+0xc8>
 8003932:	bf00      	nop
 8003934:	200036dc 	.word	0x200036dc
 8003938:	200001ec 	.word	0x200001ec
 800393c:	200036e4 	.word	0x200036e4

08003940 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8003940:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8003942:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8003944:	4c0b      	ldr	r4, [pc, #44]	; (8003974 <hci_user_evt_proc+0x34>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket); /* Tu jest otrzymany pakiet */
    if (hciContext.UserEvtRx != NULL)
 8003946:	4d0c      	ldr	r5, [pc, #48]	; (8003978 <hci_user_evt_proc+0x38>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff); /* Przeparsuj otrzymane dane! UserEvtRx to user_notify, funkcja od parsowania eventu */
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket); /* Dolacz do odczytanych (przeparsowanych) pakietow */
 8003948:	4e0c      	ldr	r6, [pc, #48]	; (800397c <hci_user_evt_proc+0x3c>)
  tHciDataPacket * hciReadPacket = NULL;
 800394a:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800394c:	4620      	mov	r0, r4
 800394e:	f000 f84a 	bl	80039e6 <list_is_empty>
 8003952:	b108      	cbz	r0, 8003958 <hci_user_evt_proc+0x18>
  }
}
 8003954:	b002      	add	sp, #8
 8003956:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket); /* Tu jest otrzymany pakiet */
 8003958:	a901      	add	r1, sp, #4
 800395a:	4620      	mov	r0, r4
 800395c:	f000 f870 	bl	8003a40 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8003960:	69eb      	ldr	r3, [r5, #28]
 8003962:	b113      	cbz	r3, 800396a <hci_user_evt_proc+0x2a>
      hciContext.UserEvtRx(hciReadPacket->dataBuff); /* Przeparsuj otrzymane dane! UserEvtRx to user_notify, funkcja od parsowania eventu */
 8003964:	9801      	ldr	r0, [sp, #4]
 8003966:	3008      	adds	r0, #8
 8003968:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket); /* Dolacz do odczytanych (przeparsowanych) pakietow */
 800396a:	9901      	ldr	r1, [sp, #4]
 800396c:	4630      	mov	r0, r6
 800396e:	f000 f850 	bl	8003a12 <list_insert_tail>
 8003972:	e7eb      	b.n	800394c <hci_user_evt_proc+0xc>
 8003974:	200036e4 	.word	0x200036e4
 8003978:	200001ec 	.word	0x200001ec
 800397c:	200036dc 	.word	0x200036dc

08003980 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 8003980:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8003982:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8003984:	4813      	ldr	r0, [pc, #76]	; (80039d4 <hci_notify_asynch_evt+0x54>)
  tHciDataPacket * hciReadPacket = NULL;
 8003986:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 8003988:	f000 f82d 	bl	80039e6 <list_is_empty>
 800398c:	b9d8      	cbnz	r0, 80039c6 <hci_notify_asynch_evt+0x46>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 800398e:	a901      	add	r1, sp, #4
 8003990:	4810      	ldr	r0, [pc, #64]	; (80039d4 <hci_notify_asynch_evt+0x54>)
 8003992:	f000 f855 	bl	8003a40 <list_remove_head>
    
    if (hciContext.io.Receive)
 8003996:	4b10      	ldr	r3, [pc, #64]	; (80039d8 <hci_notify_asynch_evt+0x58>)
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	b193      	cbz	r3, 80039c2 <hci_notify_asynch_evt+0x42>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 800399c:	9801      	ldr	r0, [sp, #4]
 800399e:	2180      	movs	r1, #128	; 0x80
 80039a0:	3008      	adds	r0, #8
 80039a2:	4798      	blx	r3
 80039a4:	b2c5      	uxtb	r5, r0
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
 80039a6:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 80039a8:	b185      	cbz	r5, 80039cc <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80039aa:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 80039ac:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80039b0:	2b04      	cmp	r3, #4
 80039b2:	d10b      	bne.n	80039cc <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80039b4:	7a8b      	ldrb	r3, [r1, #10]
 80039b6:	1ee8      	subs	r0, r5, #3
 80039b8:	4283      	cmp	r3, r0
 80039ba:	d107      	bne.n	80039cc <hci_notify_asynch_evt+0x4c>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80039bc:	4807      	ldr	r0, [pc, #28]	; (80039dc <hci_notify_asynch_evt+0x5c>)
 80039be:	f000 f828 	bl	8003a12 <list_insert_tail>
  int32_t ret = 0;
 80039c2:	2000      	movs	r0, #0
 80039c4:	e000      	b.n	80039c8 <hci_notify_asynch_evt+0x48>
      }
    }
  }
  else 
  {
    ret = 1;
 80039c6:	2001      	movs	r0, #1
  }
  return ret;

}
 80039c8:	b003      	add	sp, #12
 80039ca:	bd30      	pop	{r4, r5, pc}
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80039cc:	4801      	ldr	r0, [pc, #4]	; (80039d4 <hci_notify_asynch_evt+0x54>)
 80039ce:	f000 f814 	bl	80039fa <list_insert_head>
 80039d2:	e7f6      	b.n	80039c2 <hci_notify_asynch_evt+0x42>
 80039d4:	200036dc 	.word	0x200036dc
 80039d8:	200001ec 	.word	0x200001ec
 80039dc:	200036e4 	.word	0x200036e4

080039e0 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 80039e0:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 80039e2:	6040      	str	r0, [r0, #4]
 80039e4:	4770      	bx	lr

080039e6 <list_is_empty>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039e6:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80039ea:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 80039ec:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 80039ee:	1a1b      	subs	r3, r3, r0
 80039f0:	4258      	negs	r0, r3
 80039f2:	4158      	adcs	r0, r3
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f4:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 80039f8:	4770      	bx	lr

080039fa <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fa:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80039fe:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8003a00:	6802      	ldr	r2, [r0, #0]
 8003a02:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8003a04:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8003a06:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8003a08:	680a      	ldr	r2, [r1, #0]
 8003a0a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0c:	f383 8810 	msr	PRIMASK, r3
 8003a10:	4770      	bx	lr

08003a12 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a12:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a16:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 8003a18:	6842      	ldr	r2, [r0, #4]
 8003a1a:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 8003a1c:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 8003a1e:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8003a20:	684a      	ldr	r2, [r1, #4]
 8003a22:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a24:	f383 8810 	msr	PRIMASK, r3
 8003a28:	4770      	bx	lr

08003a2a <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a2a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a2e:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8003a30:	e890 000a 	ldmia.w	r0, {r1, r3}
 8003a34:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 8003a36:	6801      	ldr	r1, [r0, #0]
 8003a38:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3a:	f382 8810 	msr	PRIMASK, r2
 8003a3e:	4770      	bx	lr

08003a40 <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8003a40:	b538      	push	{r3, r4, r5, lr}
 8003a42:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a44:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a48:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8003a4a:	6803      	ldr	r3, [r0, #0]
 8003a4c:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->next);
 8003a4e:	6800      	ldr	r0, [r0, #0]
 8003a50:	f7ff ffeb 	bl	8003a2a <list_remove_node>
  (*node)->next = NULL;
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	2300      	movs	r3, #0
 8003a58:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8003a5a:	6822      	ldr	r2, [r4, #0]
 8003a5c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5e:	f385 8810 	msr	PRIMASK, r5
 8003a62:	bd38      	pop	{r3, r4, r5, pc}

08003a64 <list_remove_tail>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8003a64:	b538      	push	{r3, r4, r5, lr}
 8003a66:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a68:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a6c:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8003a6e:	6843      	ldr	r3, [r0, #4]
 8003a70:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->prev);
 8003a72:	6840      	ldr	r0, [r0, #4]
 8003a74:	f7ff ffd9 	bl	8003a2a <list_remove_node>
  (*node)->next = NULL;
 8003a78:	6822      	ldr	r2, [r4, #0]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8003a7e:	6822      	ldr	r2, [r4, #0]
 8003a80:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a82:	f385 8810 	msr	PRIMASK, r5
 8003a86:	bd38      	pop	{r3, r4, r5, pc}

08003a88 <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a88:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a8c:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8003a8e:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 8003a90:	2300      	movs	r3, #0
  while (temp != listHead)
 8003a92:	4282      	cmp	r2, r0
 8003a94:	d103      	bne.n	8003a9e <list_get_size+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a96:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	4770      	bx	lr
    size++;
 8003a9e:	3301      	adds	r3, #1
    temp = temp->next;		
 8003aa0:	6812      	ldr	r2, [r2, #0]
 8003aa2:	e7f6      	b.n	8003a92 <list_get_size+0xa>

08003aa4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003aa4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8003aa6:	f000 fe4b 	bl	8004740 <vTaskStartScheduler>
  
  return osOK;
}
 8003aaa:	2000      	movs	r0, #0
 8003aac:	bd08      	pop	{r3, pc}

08003aae <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003aae:	b570      	push	{r4, r5, r6, lr}
 8003ab0:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ab2:	6946      	ldr	r6, [r0, #20]
 8003ab4:	692a      	ldr	r2, [r5, #16]
 8003ab6:	6840      	ldr	r0, [r0, #4]
 8003ab8:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8003abc:	460b      	mov	r3, r1
 8003abe:	b086      	sub	sp, #24
 8003ac0:	6829      	ldr	r1, [r5, #0]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003ac2:	b176      	cbz	r6, 8003ae2 <osThreadCreate+0x34>
 8003ac4:	69ad      	ldr	r5, [r5, #24]
 8003ac6:	b165      	cbz	r5, 8003ae2 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8003ac8:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003aca:	bf14      	ite	ne
 8003acc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ace:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ad0:	9502      	str	r5, [sp, #8]
 8003ad2:	e88d 0050 	stmia.w	sp, {r4, r6}
 8003ad6:	f000 fdd4 	bl	8004682 <xTaskCreateStatic>
 8003ada:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003adc:	9805      	ldr	r0, [sp, #20]
}
 8003ade:	b006      	add	sp, #24
 8003ae0:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8003ae2:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8003ae4:	bf14      	ite	ne
 8003ae6:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003ae8:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003aea:	ad05      	add	r5, sp, #20
 8003aec:	b292      	uxth	r2, r2
 8003aee:	e88d 0030 	stmia.w	sp, {r4, r5}
 8003af2:	f000 fdf7 	bl	80046e4 <xTaskCreate>
 8003af6:	2801      	cmp	r0, #1
 8003af8:	d0f0      	beq.n	8003adc <osThreadCreate+0x2e>
      return NULL;
 8003afa:	2000      	movs	r0, #0
 8003afc:	e7ef      	b.n	8003ade <osThreadCreate+0x30>
	...

08003b00 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003b00:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003b02:	4b0f      	ldr	r3, [pc, #60]	; (8003b40 <prvInsertBlockIntoFreeList+0x40>)
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	4282      	cmp	r2, r0
 8003b08:	d318      	bcc.n	8003b3c <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b0a:	685c      	ldr	r4, [r3, #4]
 8003b0c:	1919      	adds	r1, r3, r4
 8003b0e:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b10:	bf01      	itttt	eq
 8003b12:	6841      	ldreq	r1, [r0, #4]
 8003b14:	4618      	moveq	r0, r3
 8003b16:	1909      	addeq	r1, r1, r4
 8003b18:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003b1a:	6844      	ldr	r4, [r0, #4]
 8003b1c:	1901      	adds	r1, r0, r4
 8003b1e:	428a      	cmp	r2, r1
 8003b20:	d107      	bne.n	8003b32 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003b22:	4908      	ldr	r1, [pc, #32]	; (8003b44 <prvInsertBlockIntoFreeList+0x44>)
 8003b24:	6809      	ldr	r1, [r1, #0]
 8003b26:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b28:	bf1f      	itttt	ne
 8003b2a:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003b2c:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003b2e:	1909      	addne	r1, r1, r4
 8003b30:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003b32:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003b34:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003b36:	bf18      	it	ne
 8003b38:	6018      	strne	r0, [r3, #0]
 8003b3a:	bd10      	pop	{r4, pc}
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	e7e1      	b.n	8003b04 <prvInsertBlockIntoFreeList+0x4>
 8003b40:	2000247c 	.word	0x2000247c
 8003b44:	20000cfc 	.word	0x20000cfc

08003b48 <pvPortMalloc>:
{
 8003b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b4c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003b4e:	f000 fe2d 	bl	80047ac <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003b52:	493d      	ldr	r1, [pc, #244]	; (8003c48 <pvPortMalloc+0x100>)
 8003b54:	4d3d      	ldr	r5, [pc, #244]	; (8003c4c <pvPortMalloc+0x104>)
 8003b56:	680b      	ldr	r3, [r1, #0]
 8003b58:	b9fb      	cbnz	r3, 8003b9a <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 8003b5a:	4a3d      	ldr	r2, [pc, #244]	; (8003c50 <pvPortMalloc+0x108>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b5c:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b5e:	bf1c      	itt	ne
 8003b60:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b62:	4b3c      	ldrne	r3, [pc, #240]	; (8003c54 <pvPortMalloc+0x10c>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b64:	4e3c      	ldr	r6, [pc, #240]	; (8003c58 <pvPortMalloc+0x110>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b66:	bf1a      	itte	ne
 8003b68:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003b6c:	1a9b      	subne	r3, r3, r2
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b6e:	f241 7370 	movweq	r3, #6000	; 0x1770
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003b72:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8003b74:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003b76:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003b7a:	2000      	movs	r0, #0
 8003b7c:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003b7e:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8003b80:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003b82:	6018      	str	r0, [r3, #0]
	pxEnd = ( void * ) uxAddress;
 8003b84:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b86:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003b88:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b8a:	4b34      	ldr	r3, [pc, #208]	; (8003c5c <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003b8c:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b8e:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003b90:	4b33      	ldr	r3, [pc, #204]	; (8003c60 <pvPortMalloc+0x118>)
 8003b92:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003b94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b98:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003b9a:	682f      	ldr	r7, [r5, #0]
 8003b9c:	4227      	tst	r7, r4
 8003b9e:	d116      	bne.n	8003bce <pvPortMalloc+0x86>
			if( xWantedSize > 0 )
 8003ba0:	2c00      	cmp	r4, #0
 8003ba2:	d041      	beq.n	8003c28 <pvPortMalloc+0xe0>
				xWantedSize += xHeapStructSize;
 8003ba4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ba8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003baa:	bf1c      	itt	ne
 8003bac:	f023 0307 	bicne.w	r3, r3, #7
 8003bb0:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003bb2:	b163      	cbz	r3, 8003bce <pvPortMalloc+0x86>
 8003bb4:	4a2a      	ldr	r2, [pc, #168]	; (8003c60 <pvPortMalloc+0x118>)
 8003bb6:	6816      	ldr	r6, [r2, #0]
 8003bb8:	42b3      	cmp	r3, r6
 8003bba:	4690      	mov	r8, r2
 8003bbc:	d807      	bhi.n	8003bce <pvPortMalloc+0x86>
				pxBlock = xStart.pxNextFreeBlock;
 8003bbe:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <pvPortMalloc+0x110>)
 8003bc0:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bc2:	6868      	ldr	r0, [r5, #4]
 8003bc4:	4283      	cmp	r3, r0
 8003bc6:	d804      	bhi.n	8003bd2 <pvPortMalloc+0x8a>
				if( pxBlock != pxEnd )
 8003bc8:	6809      	ldr	r1, [r1, #0]
 8003bca:	428d      	cmp	r5, r1
 8003bcc:	d107      	bne.n	8003bde <pvPortMalloc+0x96>
void *pvReturn = NULL;
 8003bce:	2400      	movs	r4, #0
 8003bd0:	e02a      	b.n	8003c28 <pvPortMalloc+0xe0>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003bd2:	682c      	ldr	r4, [r5, #0]
 8003bd4:	2c00      	cmp	r4, #0
 8003bd6:	d0f7      	beq.n	8003bc8 <pvPortMalloc+0x80>
 8003bd8:	462a      	mov	r2, r5
 8003bda:	4625      	mov	r5, r4
 8003bdc:	e7f1      	b.n	8003bc2 <pvPortMalloc+0x7a>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003bde:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003be0:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003be2:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003be4:	1ac2      	subs	r2, r0, r3
 8003be6:	2a10      	cmp	r2, #16
 8003be8:	d90f      	bls.n	8003c0a <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003bea:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003bec:	0741      	lsls	r1, r0, #29
 8003bee:	d008      	beq.n	8003c02 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	e7fe      	b.n	8003c00 <pvPortMalloc+0xb8>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003c02:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003c04:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003c06:	f7ff ff7b 	bl	8003b00 <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c0a:	4914      	ldr	r1, [pc, #80]	; (8003c5c <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c0c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c0e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c10:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c12:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003c14:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8003c16:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003c1a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003c1e:	bf38      	it	cc
 8003c20:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003c22:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003c24:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003c26:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003c28:	f000 fe5a 	bl	80048e0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c2c:	0763      	lsls	r3, r4, #29
 8003c2e:	d008      	beq.n	8003c42 <pvPortMalloc+0xfa>
 8003c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c34:	f383 8811 	msr	BASEPRI, r3
 8003c38:	f3bf 8f6f 	isb	sy
 8003c3c:	f3bf 8f4f 	dsb	sy
 8003c40:	e7fe      	b.n	8003c40 <pvPortMalloc+0xf8>
}
 8003c42:	4620      	mov	r0, r4
 8003c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c48:	20000cfc 	.word	0x20000cfc
 8003c4c:	20002470 	.word	0x20002470
 8003c50:	20000d00 	.word	0x20000d00
 8003c54:	20002470 	.word	0x20002470
 8003c58:	2000247c 	.word	0x2000247c
 8003c5c:	20002478 	.word	0x20002478
 8003c60:	20002474 	.word	0x20002474

08003c64 <vPortFree>:
{
 8003c64:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003c66:	4604      	mov	r4, r0
 8003c68:	b370      	cbz	r0, 8003cc8 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c6a:	4a18      	ldr	r2, [pc, #96]	; (8003ccc <vPortFree+0x68>)
 8003c6c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8003c70:	6812      	ldr	r2, [r2, #0]
 8003c72:	4213      	tst	r3, r2
 8003c74:	d108      	bne.n	8003c88 <vPortFree+0x24>
 8003c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7a:	f383 8811 	msr	BASEPRI, r3
 8003c7e:	f3bf 8f6f 	isb	sy
 8003c82:	f3bf 8f4f 	dsb	sy
 8003c86:	e7fe      	b.n	8003c86 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c88:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003c8c:	b141      	cbz	r1, 8003ca0 <vPortFree+0x3c>
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	e7fe      	b.n	8003c9e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ca0:	ea23 0302 	bic.w	r3, r3, r2
 8003ca4:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003ca8:	f000 fd80 	bl	80047ac <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003cac:	4a08      	ldr	r2, [pc, #32]	; (8003cd0 <vPortFree+0x6c>)
 8003cae:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8003cb2:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003cb4:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003cb8:	440b      	add	r3, r1
 8003cba:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003cbc:	f7ff ff20 	bl	8003b00 <prvInsertBlockIntoFreeList>
}
 8003cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003cc4:	f000 be0c 	b.w	80048e0 <xTaskResumeAll>
 8003cc8:	bd10      	pop	{r4, pc}
 8003cca:	bf00      	nop
 8003ccc:	20002470 	.word	0x20002470
 8003cd0:	20002474 	.word	0x20002474

08003cd4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cd4:	f100 0308 	add.w	r3, r0, #8
 8003cd8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003cda:	f04f 32ff 	mov.w	r2, #4294967295

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cde:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ce0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ce2:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ce4:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ce6:	6003      	str	r3, [r0, #0]
 8003ce8:	4770      	bx	lr

08003cea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	6103      	str	r3, [r0, #16]
 8003cee:	4770      	bx	lr

08003cf0 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8003cf0:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003cf2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cf8:	689a      	ldr	r2, [r3, #8]
 8003cfa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cfc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003cfe:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8003d00:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003d02:	3301      	adds	r3, #1
 8003d04:	6003      	str	r3, [r0, #0]
 8003d06:	4770      	bx	lr

08003d08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d08:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d0a:	1c53      	adds	r3, r2, #1
{
 8003d0c:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8003d0e:	d10a      	bne.n	8003d26 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d10:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d16:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d18:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d1a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8003d1c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8003d1e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8003d20:	3301      	adds	r3, #1
 8003d22:	6003      	str	r3, [r0, #0]
 8003d24:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d26:	f100 0308 	add.w	r3, r0, #8
 8003d2a:	685c      	ldr	r4, [r3, #4]
 8003d2c:	6825      	ldr	r5, [r4, #0]
 8003d2e:	42aa      	cmp	r2, r5
 8003d30:	d3ef      	bcc.n	8003d12 <vListInsert+0xa>
 8003d32:	4623      	mov	r3, r4
 8003d34:	e7f9      	b.n	8003d2a <vListInsert+0x22>

08003d36 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d36:	6841      	ldr	r1, [r0, #4]
 8003d38:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d3a:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d3c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d3e:	6882      	ldr	r2, [r0, #8]
 8003d40:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d42:	6859      	ldr	r1, [r3, #4]
 8003d44:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d46:	bf08      	it	eq
 8003d48:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	3a01      	subs	r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d54:	6818      	ldr	r0, [r3, #0]
}
 8003d56:	4770      	bx	lr

08003d58 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d58:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d5e:	4b0d      	ldr	r3, [pc, #52]	; (8003d94 <prvTaskExitError+0x3c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	d008      	beq.n	8003d78 <prvTaskExitError+0x20>
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	f383 8811 	msr	BASEPRI, r3
 8003d6e:	f3bf 8f6f 	isb	sy
 8003d72:	f3bf 8f4f 	dsb	sy
 8003d76:	e7fe      	b.n	8003d76 <prvTaskExitError+0x1e>
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003d88:	9b01      	ldr	r3, [sp, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d0fc      	beq.n	8003d88 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003d8e:	b002      	add	sp, #8
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	20000008 	.word	0x20000008

08003d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d98:	4808      	ldr	r0, [pc, #32]	; (8003dbc <prvPortStartFirstTask+0x24>)
 8003d9a:	6800      	ldr	r0, [r0, #0]
 8003d9c:	6800      	ldr	r0, [r0, #0]
 8003d9e:	f380 8808 	msr	MSP, r0
 8003da2:	f04f 0000 	mov.w	r0, #0
 8003da6:	f380 8814 	msr	CONTROL, r0
 8003daa:	b662      	cpsie	i
 8003dac:	b661      	cpsie	f
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	df00      	svc	0
 8003db8:	bf00      	nop
 8003dba:	0000      	.short	0x0000
 8003dbc:	e000ed08 	.word	0xe000ed08

08003dc0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003dc0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003dd0 <vPortEnableVFP+0x10>
 8003dc4:	6801      	ldr	r1, [r0, #0]
 8003dc6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003dca:	6001      	str	r1, [r0, #0]
 8003dcc:	4770      	bx	lr
 8003dce:	0000      	.short	0x0000
 8003dd0:	e000ed88 	.word	0xe000ed88

08003dd4 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dd8:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ddc:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <pxPortInitialiseStack+0x28>)
 8003dde:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003de2:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003de6:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003dea:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003dee:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003df2:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8003df6:	3844      	subs	r0, #68	; 0x44
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	08003d59 	.word	0x08003d59

08003e00 <SVC_Handler>:
	__asm volatile (
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <pxCurrentTCBConst2>)
 8003e02:	6819      	ldr	r1, [r3, #0]
 8003e04:	6808      	ldr	r0, [r1, #0]
 8003e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0a:	f380 8809 	msr	PSP, r0
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f380 8811 	msr	BASEPRI, r0
 8003e1a:	4770      	bx	lr
 8003e1c:	f3af 8000 	nop.w

08003e20 <pxCurrentTCBConst2>:
 8003e20:	2000248c 	.word	0x2000248c

08003e24 <vPortEnterCritical>:
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 8003e34:	4a0a      	ldr	r2, [pc, #40]	; (8003e60 <vPortEnterCritical+0x3c>)
 8003e36:	6813      	ldr	r3, [r2, #0]
 8003e38:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8003e3a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003e3c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003e3e:	d10d      	bne.n	8003e5c <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e40:	4b08      	ldr	r3, [pc, #32]	; (8003e64 <vPortEnterCritical+0x40>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f013 0fff 	tst.w	r3, #255	; 0xff
 8003e48:	d008      	beq.n	8003e5c <vPortEnterCritical+0x38>
 8003e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	e7fe      	b.n	8003e5a <vPortEnterCritical+0x36>
 8003e5c:	4770      	bx	lr
 8003e5e:	bf00      	nop
 8003e60:	20000008 	.word	0x20000008
 8003e64:	e000ed04 	.word	0xe000ed04

08003e68 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8003e68:	4a08      	ldr	r2, [pc, #32]	; (8003e8c <vPortExitCritical+0x24>)
 8003e6a:	6813      	ldr	r3, [r2, #0]
 8003e6c:	b943      	cbnz	r3, 8003e80 <vPortExitCritical+0x18>
 8003e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e72:	f383 8811 	msr	BASEPRI, r3
 8003e76:	f3bf 8f6f 	isb	sy
 8003e7a:	f3bf 8f4f 	dsb	sy
 8003e7e:	e7fe      	b.n	8003e7e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003e80:	3b01      	subs	r3, #1
 8003e82:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e84:	b90b      	cbnz	r3, 8003e8a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	4770      	bx	lr
 8003e8c:	20000008 	.word	0x20000008

08003e90 <PendSV_Handler>:
	__asm volatile
 8003e90:	f3ef 8009 	mrs	r0, PSP
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <pxCurrentTCBConst>)
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	f01e 0f10 	tst.w	lr, #16
 8003ea0:	bf08      	it	eq
 8003ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eaa:	6010      	str	r0, [r2, #0]
 8003eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003eb4:	f380 8811 	msr	BASEPRI, r0
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
 8003ec0:	f000 fd86 	bl	80049d0 <vTaskSwitchContext>
 8003ec4:	f04f 0000 	mov.w	r0, #0
 8003ec8:	f380 8811 	msr	BASEPRI, r0
 8003ecc:	bc09      	pop	{r0, r3}
 8003ece:	6819      	ldr	r1, [r3, #0]
 8003ed0:	6808      	ldr	r0, [r1, #0]
 8003ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed6:	f01e 0f10 	tst.w	lr, #16
 8003eda:	bf08      	it	eq
 8003edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003ee0:	f380 8809 	msr	PSP, r0
 8003ee4:	f3bf 8f6f 	isb	sy
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	f3af 8000 	nop.w

08003ef0 <pxCurrentTCBConst>:
 8003ef0:	2000248c 	.word	0x2000248c

08003ef4 <SysTick_Handler>:
{
 8003ef4:	b508      	push	{r3, lr}
	__asm volatile
 8003ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efa:	f383 8811 	msr	BASEPRI, r3
 8003efe:	f3bf 8f6f 	isb	sy
 8003f02:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8003f06:	f000 fc59 	bl	80047bc <xTaskIncrementTick>
 8003f0a:	b118      	cbz	r0, 8003f14 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f0c:	4b03      	ldr	r3, [pc, #12]	; (8003f1c <SysTick_Handler+0x28>)
 8003f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f12:	601a      	str	r2, [r3, #0]
	__asm volatile
 8003f14:	2300      	movs	r3, #0
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	bd08      	pop	{r3, pc}
 8003f1c:	e000ed04 	.word	0xe000ed04

08003f20 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f20:	4a08      	ldr	r2, [pc, #32]	; (8003f44 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f22:	4909      	ldr	r1, [pc, #36]	; (8003f48 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003f24:	2300      	movs	r3, #0
 8003f26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003f28:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <vPortSetupTimerInterrupt+0x2c>)
 8003f2c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f36:	4906      	ldr	r1, [pc, #24]	; (8003f50 <vPortSetupTimerInterrupt+0x30>)
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f3c:	2307      	movs	r3, #7
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	e000e010 	.word	0xe000e010
 8003f48:	e000e018 	.word	0xe000e018
 8003f4c:	2000001c 	.word	0x2000001c
 8003f50:	e000e014 	.word	0xe000e014

08003f54 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f54:	4b39      	ldr	r3, [pc, #228]	; (800403c <xPortStartScheduler+0xe8>)
 8003f56:	4a3a      	ldr	r2, [pc, #232]	; (8004040 <xPortStartScheduler+0xec>)
{
 8003f58:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f5a:	6819      	ldr	r1, [r3, #0]
 8003f5c:	4291      	cmp	r1, r2
 8003f5e:	d108      	bne.n	8003f72 <xPortStartScheduler+0x1e>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	e7fe      	b.n	8003f70 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	4b33      	ldr	r3, [pc, #204]	; (8004044 <xPortStartScheduler+0xf0>)
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d108      	bne.n	8003f8c <xPortStartScheduler+0x38>
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	e7fe      	b.n	8003f8a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f8c:	4b2e      	ldr	r3, [pc, #184]	; (8004048 <xPortStartScheduler+0xf4>)
 8003f8e:	781a      	ldrb	r2, [r3, #0]
 8003f90:	b2d2      	uxtb	r2, r2
 8003f92:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f94:	22ff      	movs	r2, #255	; 0xff
 8003f96:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f98:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f9a:	4a2c      	ldr	r2, [pc, #176]	; (800404c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fa2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003fa6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003faa:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fac:	4b28      	ldr	r3, [pc, #160]	; (8004050 <xPortStartScheduler+0xfc>)
 8003fae:	2207      	movs	r2, #7
 8003fb0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fb2:	2100      	movs	r1, #0
 8003fb4:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003fb8:	0600      	lsls	r0, r0, #24
 8003fba:	f102 34ff 	add.w	r4, r2, #4294967295
 8003fbe:	d40d      	bmi.n	8003fdc <xPortStartScheduler+0x88>
 8003fc0:	b101      	cbz	r1, 8003fc4 <xPortStartScheduler+0x70>
 8003fc2:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	2a03      	cmp	r2, #3
 8003fc8:	d011      	beq.n	8003fee <xPortStartScheduler+0x9a>
 8003fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fce:	f383 8811 	msr	BASEPRI, r3
 8003fd2:	f3bf 8f6f 	isb	sy
 8003fd6:	f3bf 8f4f 	dsb	sy
 8003fda:	e7fe      	b.n	8003fda <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fdc:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8003fe0:	0052      	lsls	r2, r2, #1
 8003fe2:	b2d2      	uxtb	r2, r2
 8003fe4:	f88d 2003 	strb.w	r2, [sp, #3]
 8003fe8:	2101      	movs	r1, #1
 8003fea:	4622      	mov	r2, r4
 8003fec:	e7e2      	b.n	8003fb4 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003fee:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ff0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8003ff4:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ff6:	9b01      	ldr	r3, [sp, #4]
 8003ff8:	4a13      	ldr	r2, [pc, #76]	; (8004048 <xPortStartScheduler+0xf4>)
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003ffe:	4b15      	ldr	r3, [pc, #84]	; (8004054 <xPortStartScheduler+0x100>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004006:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 800400e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8004010:	f7ff ff86 	bl	8003f20 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004014:	4b10      	ldr	r3, [pc, #64]	; (8004058 <xPortStartScheduler+0x104>)
 8004016:	2400      	movs	r4, #0
 8004018:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 800401a:	f7ff fed1 	bl	8003dc0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800401e:	4a0f      	ldr	r2, [pc, #60]	; (800405c <xPortStartScheduler+0x108>)
 8004020:	6813      	ldr	r3, [r2, #0]
 8004022:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004026:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8004028:	f7ff feb6 	bl	8003d98 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800402c:	f000 fcd0 	bl	80049d0 <vTaskSwitchContext>
	prvTaskExitError();
 8004030:	f7ff fe92 	bl	8003d58 <prvTaskExitError>
}
 8004034:	4620      	mov	r0, r4
 8004036:	b002      	add	sp, #8
 8004038:	bd10      	pop	{r4, pc}
 800403a:	bf00      	nop
 800403c:	e000ed00 	.word	0xe000ed00
 8004040:	410fc271 	.word	0x410fc271
 8004044:	410fc270 	.word	0x410fc270
 8004048:	e000e400 	.word	0xe000e400
 800404c:	20002484 	.word	0x20002484
 8004050:	20002488 	.word	0x20002488
 8004054:	e000ed20 	.word	0xe000ed20
 8004058:	20000008 	.word	0x20000008
 800405c:	e000ef34 	.word	0xe000ef34

08004060 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004064:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004066:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8004068:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800406a:	b942      	cbnz	r2, 800407e <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800406c:	6805      	ldr	r5, [r0, #0]
 800406e:	b99d      	cbnz	r5, 8004098 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004070:	6880      	ldr	r0, [r0, #8]
 8004072:	f000 fda1 	bl	8004bb8 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004076:	60a5      	str	r5, [r4, #8]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004078:	3601      	adds	r6, #1
 800407a:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 800407c:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800407e:	b96d      	cbnz	r5, 800409c <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004080:	6840      	ldr	r0, [r0, #4]
 8004082:	f002 fab5 	bl	80065f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004086:	6863      	ldr	r3, [r4, #4]
 8004088:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800408a:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800408c:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800408e:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004090:	4293      	cmp	r3, r2
 8004092:	d301      	bcc.n	8004098 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8004098:	2000      	movs	r0, #0
 800409a:	e7ed      	b.n	8004078 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800409c:	68c0      	ldr	r0, [r0, #12]
 800409e:	f002 faa7 	bl	80065f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040a4:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040a6:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040a8:	425b      	negs	r3, r3
 80040aa:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040ac:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040ae:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040b0:	bf3e      	ittt	cc
 80040b2:	68a2      	ldrcc	r2, [r4, #8]
 80040b4:	189b      	addcc	r3, r3, r2
 80040b6:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80040b8:	2d02      	cmp	r5, #2
 80040ba:	d1ed      	bne.n	8004098 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040bc:	b10e      	cbz	r6, 80040c2 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80040be:	3e01      	subs	r6, #1
 80040c0:	e7ea      	b.n	8004098 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80040c2:	4630      	mov	r0, r6
 80040c4:	e7d8      	b.n	8004078 <prvCopyDataToQueue+0x18>

080040c6 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040c6:	b570      	push	{r4, r5, r6, lr}
 80040c8:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040ca:	f7ff feab 	bl	8003e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040ce:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040d2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80040d6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040d8:	2d00      	cmp	r5, #0
 80040da:	dc14      	bgt.n	8004106 <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80040dc:	23ff      	movs	r3, #255	; 0xff
 80040de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80040e2:	f7ff fec1 	bl	8003e68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80040e6:	f7ff fe9d 	bl	8003e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80040ea:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ee:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 80040f2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80040f4:	2d00      	cmp	r5, #0
 80040f6:	dc12      	bgt.n	800411e <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80040f8:	23ff      	movs	r3, #255	; 0xff
 80040fa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80040fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8004102:	f7ff beb1 	b.w	8003e68 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0e7      	beq.n	80040dc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800410c:	4630      	mov	r0, r6
 800410e:	f000 fcb3 	bl	8004a78 <xTaskRemoveFromEventList>
 8004112:	b108      	cbz	r0, 8004118 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8004114:	f000 fd3a 	bl	8004b8c <vTaskMissedYield>
 8004118:	3d01      	subs	r5, #1
 800411a:	b26d      	sxtb	r5, r5
 800411c:	e7dc      	b.n	80040d8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800411e:	6923      	ldr	r3, [r4, #16]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0e9      	beq.n	80040f8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004124:	4630      	mov	r0, r6
 8004126:	f000 fca7 	bl	8004a78 <xTaskRemoveFromEventList>
 800412a:	b108      	cbz	r0, 8004130 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800412c:	f000 fd2e 	bl	8004b8c <vTaskMissedYield>
 8004130:	3d01      	subs	r5, #1
 8004132:	b26d      	sxtb	r5, r5
 8004134:	e7de      	b.n	80040f4 <prvUnlockQueue+0x2e>
	...

08004138 <xQueueGenericReset>:
{
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800413c:	4604      	mov	r4, r0
 800413e:	b940      	cbnz	r0, 8004152 <xQueueGenericReset+0x1a>
 8004140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004144:	f383 8811 	msr	BASEPRI, r3
 8004148:	f3bf 8f6f 	isb	sy
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	e7fe      	b.n	8004150 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8004152:	f7ff fe67 	bl	8003e24 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004156:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004158:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800415a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800415c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800415e:	4343      	muls	r3, r0
 8004160:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004162:	1a1b      	subs	r3, r3, r0
 8004164:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004166:	60a1      	str	r1, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004168:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800416a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800416c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800416e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8004170:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004174:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8004178:	b995      	cbnz	r5, 80041a0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800417a:	6923      	ldr	r3, [r4, #16]
 800417c:	b163      	cbz	r3, 8004198 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800417e:	f104 0010 	add.w	r0, r4, #16
 8004182:	f000 fc79 	bl	8004a78 <xTaskRemoveFromEventList>
 8004186:	b138      	cbz	r0, 8004198 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8004188:	4b0a      	ldr	r3, [pc, #40]	; (80041b4 <xQueueGenericReset+0x7c>)
 800418a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8004198:	f7ff fe66 	bl	8003e68 <vPortExitCritical>
}
 800419c:	2001      	movs	r0, #1
 800419e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041a0:	f104 0010 	add.w	r0, r4, #16
 80041a4:	f7ff fd96 	bl	8003cd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041a8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041ac:	f7ff fd92 	bl	8003cd4 <vListInitialise>
 80041b0:	e7f2      	b.n	8004198 <xQueueGenericReset+0x60>
 80041b2:	bf00      	nop
 80041b4:	e000ed04 	.word	0xe000ed04

080041b8 <xQueueGenericCreate>:
	{
 80041b8:	b570      	push	{r4, r5, r6, lr}
 80041ba:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041bc:	4606      	mov	r6, r0
 80041be:	b940      	cbnz	r0, 80041d2 <xQueueGenericCreate+0x1a>
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	e7fe      	b.n	80041d0 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041d2:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041d4:	3048      	adds	r0, #72	; 0x48
 80041d6:	f7ff fcb7 	bl	8003b48 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80041da:	4604      	mov	r4, r0
 80041dc:	b150      	cbz	r0, 80041f4 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80041de:	2300      	movs	r3, #0
 80041e0:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80041e4:	b945      	cbnz	r5, 80041f8 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80041e6:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80041e8:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80041ea:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80041ec:	2101      	movs	r1, #1
 80041ee:	4620      	mov	r0, r4
 80041f0:	f7ff ffa2 	bl	8004138 <xQueueGenericReset>
	}
 80041f4:	4620      	mov	r0, r4
 80041f6:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041f8:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80041fc:	6003      	str	r3, [r0, #0]
 80041fe:	e7f3      	b.n	80041e8 <xQueueGenericCreate+0x30>

08004200 <xQueueGenericSend>:
{
 8004200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004204:	4689      	mov	r9, r1
 8004206:	9201      	str	r2, [sp, #4]
 8004208:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800420a:	4604      	mov	r4, r0
 800420c:	b940      	cbnz	r0, 8004220 <xQueueGenericSend+0x20>
 800420e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004212:	f383 8811 	msr	BASEPRI, r3
 8004216:	f3bf 8f6f 	isb	sy
 800421a:	f3bf 8f4f 	dsb	sy
 800421e:	e7fe      	b.n	800421e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004220:	2900      	cmp	r1, #0
 8004222:	f040 8088 	bne.w	8004336 <xQueueGenericSend+0x136>
 8004226:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004228:	2b00      	cmp	r3, #0
 800422a:	f000 8084 	beq.w	8004336 <xQueueGenericSend+0x136>
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	e7fe      	b.n	800423e <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004240:	9e01      	ldr	r6, [sp, #4]
 8004242:	2e00      	cmp	r6, #0
 8004244:	f000 8082 	beq.w	800434c <xQueueGenericSend+0x14c>
 8004248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424c:	f383 8811 	msr	BASEPRI, r3
 8004250:	f3bf 8f6f 	isb	sy
 8004254:	f3bf 8f4f 	dsb	sy
 8004258:	e7fe      	b.n	8004258 <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 800425a:	9d01      	ldr	r5, [sp, #4]
 800425c:	b91d      	cbnz	r5, 8004266 <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 800425e:	f7ff fe03 	bl	8003e68 <vPortExitCritical>
			return errQUEUE_FULL;
 8004262:	2000      	movs	r0, #0
 8004264:	e058      	b.n	8004318 <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 8004266:	b916      	cbnz	r6, 800426e <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004268:	a802      	add	r0, sp, #8
 800426a:	f000 fc47 	bl	8004afc <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800426e:	f7ff fdfb 	bl	8003e68 <vPortExitCritical>
		vTaskSuspendAll();
 8004272:	f000 fa9b 	bl	80047ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004276:	f7ff fdd5 	bl	8003e24 <vPortEnterCritical>
 800427a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800427e:	2bff      	cmp	r3, #255	; 0xff
 8004280:	bf08      	it	eq
 8004282:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8004286:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800428a:	2bff      	cmp	r3, #255	; 0xff
 800428c:	bf08      	it	eq
 800428e:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8004292:	f7ff fde9 	bl	8003e68 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004296:	a901      	add	r1, sp, #4
 8004298:	a802      	add	r0, sp, #8
 800429a:	f000 fc3b 	bl	8004b14 <xTaskCheckForTimeOut>
 800429e:	2800      	cmp	r0, #0
 80042a0:	d143      	bne.n	800432a <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80042a2:	f7ff fdbf 	bl	8003e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80042a6:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80042a8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80042aa:	f7ff fddd 	bl	8003e68 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80042ae:	42ae      	cmp	r6, r5
 80042b0:	d135      	bne.n	800431e <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80042b2:	9901      	ldr	r1, [sp, #4]
 80042b4:	f104 0010 	add.w	r0, r4, #16
 80042b8:	f000 fbc4 	bl	8004a44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80042bc:	4620      	mov	r0, r4
 80042be:	f7ff ff02 	bl	80040c6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80042c2:	f000 fb0d 	bl	80048e0 <xTaskResumeAll>
 80042c6:	b938      	cbnz	r0, 80042d8 <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 80042c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042cc:	f8ca 3000 	str.w	r3, [sl]
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80042da:	f7ff fda3 	bl	8003e24 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80042e0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d301      	bcc.n	80042ea <xQueueGenericSend+0xea>
 80042e6:	2f02      	cmp	r7, #2
 80042e8:	d1b7      	bne.n	800425a <xQueueGenericSend+0x5a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042ea:	463a      	mov	r2, r7
 80042ec:	4649      	mov	r1, r9
 80042ee:	4620      	mov	r0, r4
 80042f0:	f7ff feb6 	bl	8004060 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80042f6:	b11b      	cbz	r3, 8004300 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042fc:	f000 fbbc 	bl	8004a78 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004300:	b138      	cbz	r0, 8004312 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8004302:	4b19      	ldr	r3, [pc, #100]	; (8004368 <xQueueGenericSend+0x168>)
 8004304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	f3bf 8f4f 	dsb	sy
 800430e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004312:	f7ff fda9 	bl	8003e68 <vPortExitCritical>
				return pdPASS;
 8004316:	2001      	movs	r0, #1
}
 8004318:	b004      	add	sp, #16
 800431a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800431e:	4620      	mov	r0, r4
 8004320:	f7ff fed1 	bl	80040c6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004324:	f000 fadc 	bl	80048e0 <xTaskResumeAll>
 8004328:	e7d6      	b.n	80042d8 <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 800432a:	4620      	mov	r0, r4
 800432c:	f7ff fecb 	bl	80040c6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004330:	f000 fad6 	bl	80048e0 <xTaskResumeAll>
 8004334:	e795      	b.n	8004262 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004336:	2f02      	cmp	r7, #2
 8004338:	d102      	bne.n	8004340 <xQueueGenericSend+0x140>
 800433a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800433c:	2b01      	cmp	r3, #1
 800433e:	d10a      	bne.n	8004356 <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004340:	f000 fc2a 	bl	8004b98 <xTaskGetSchedulerState>
 8004344:	2800      	cmp	r0, #0
 8004346:	f43f af7b 	beq.w	8004240 <xQueueGenericSend+0x40>
 800434a:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800434c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004350:	f8df a014 	ldr.w	sl, [pc, #20]	; 8004368 <xQueueGenericSend+0x168>
 8004354:	e7c1      	b.n	80042da <xQueueGenericSend+0xda>
 8004356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435a:	f383 8811 	msr	BASEPRI, r3
 800435e:	f3bf 8f6f 	isb	sy
 8004362:	f3bf 8f4f 	dsb	sy
 8004366:	e7fe      	b.n	8004366 <xQueueGenericSend+0x166>
 8004368:	e000ed04 	.word	0xe000ed04

0800436c <prvInitialiseMutex>:
		if( pxNewQueue != NULL )
 800436c:	b138      	cbz	r0, 800437e <prvInitialiseMutex+0x12>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800436e:	2300      	movs	r3, #0
 8004370:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004372:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004374:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004376:	461a      	mov	r2, r3
 8004378:	4619      	mov	r1, r3
 800437a:	f7ff bf41 	b.w	8004200 <xQueueGenericSend>
 800437e:	4770      	bx	lr

08004380 <xQueueCreateMutex>:
	{
 8004380:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004382:	4602      	mov	r2, r0
 8004384:	2100      	movs	r1, #0
 8004386:	2001      	movs	r0, #1
 8004388:	f7ff ff16 	bl	80041b8 <xQueueGenericCreate>
 800438c:	4604      	mov	r4, r0
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800438e:	f7ff ffed 	bl	800436c <prvInitialiseMutex>
	}
 8004392:	4620      	mov	r0, r4
 8004394:	bd10      	pop	{r4, pc}
	...

08004398 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800439c:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800439e:	f7ff fd41 	bl	8003e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80043a2:	4b2d      	ldr	r3, [pc, #180]	; (8004458 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 80043a4:	4c2d      	ldr	r4, [pc, #180]	; (800445c <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4f2d      	ldr	r7, [pc, #180]	; (8004460 <prvAddNewTaskToReadyList+0xc8>)
 80043aa:	3201      	adds	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80043ae:	6825      	ldr	r5, [r4, #0]
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	d145      	bne.n	8004440 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80043b4:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d11c      	bne.n	80043f6 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043bc:	1978      	adds	r0, r7, r5
 80043be:	3514      	adds	r5, #20
 80043c0:	f7ff fc88 	bl	8003cd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043c4:	2d8c      	cmp	r5, #140	; 0x8c
 80043c6:	d1f9      	bne.n	80043bc <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 80043c8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800448c <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 80043cc:	4d25      	ldr	r5, [pc, #148]	; (8004464 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 80043ce:	4640      	mov	r0, r8
 80043d0:	f7ff fc80 	bl	8003cd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80043d4:	4628      	mov	r0, r5
 80043d6:	f7ff fc7d 	bl	8003cd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80043da:	4823      	ldr	r0, [pc, #140]	; (8004468 <prvAddNewTaskToReadyList+0xd0>)
 80043dc:	f7ff fc7a 	bl	8003cd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80043e0:	4822      	ldr	r0, [pc, #136]	; (800446c <prvAddNewTaskToReadyList+0xd4>)
 80043e2:	f7ff fc77 	bl	8003cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80043e6:	4822      	ldr	r0, [pc, #136]	; (8004470 <prvAddNewTaskToReadyList+0xd8>)
 80043e8:	f7ff fc74 	bl	8003cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80043ec:	4b21      	ldr	r3, [pc, #132]	; (8004474 <prvAddNewTaskToReadyList+0xdc>)
 80043ee:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80043f2:	4b21      	ldr	r3, [pc, #132]	; (8004478 <prvAddNewTaskToReadyList+0xe0>)
 80043f4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80043f6:	4a21      	ldr	r2, [pc, #132]	; (800447c <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 80043f8:	4921      	ldr	r1, [pc, #132]	; (8004480 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80043fa:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80043fc:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80043fe:	3301      	adds	r3, #1
 8004400:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004402:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004404:	2301      	movs	r3, #1
 8004406:	4093      	lsls	r3, r2
 8004408:	4303      	orrs	r3, r0
 800440a:	2014      	movs	r0, #20
 800440c:	600b      	str	r3, [r1, #0]
 800440e:	fb00 7002 	mla	r0, r0, r2, r7
 8004412:	1d31      	adds	r1, r6, #4
 8004414:	f7ff fc6c 	bl	8003cf0 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004418:	f7ff fd26 	bl	8003e68 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800441c:	4b19      	ldr	r3, [pc, #100]	; (8004484 <prvAddNewTaskToReadyList+0xec>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	b163      	cbz	r3, 800443c <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004422:	6823      	ldr	r3, [r4, #0]
 8004424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004426:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004428:	429a      	cmp	r2, r3
 800442a:	d207      	bcs.n	800443c <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 800442c:	4b16      	ldr	r3, [pc, #88]	; (8004488 <prvAddNewTaskToReadyList+0xf0>)
 800442e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8004440:	4b10      	ldr	r3, [pc, #64]	; (8004484 <prvAddNewTaskToReadyList+0xec>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1d6      	bne.n	80043f6 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800444e:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8004450:	bf98      	it	ls
 8004452:	6026      	strls	r6, [r4, #0]
 8004454:	e7cf      	b.n	80043f6 <prvAddNewTaskToReadyList+0x5e>
 8004456:	bf00      	nop
 8004458:	20002524 	.word	0x20002524
 800445c:	2000248c 	.word	0x2000248c
 8004460:	20002498 	.word	0x20002498
 8004464:	20002550 	.word	0x20002550
 8004468:	2000256c 	.word	0x2000256c
 800446c:	20002598 	.word	0x20002598
 8004470:	20002584 	.word	0x20002584
 8004474:	20002490 	.word	0x20002490
 8004478:	20002494 	.word	0x20002494
 800447c:	20002534 	.word	0x20002534
 8004480:	20002538 	.word	0x20002538
 8004484:	20002580 	.word	0x20002580
 8004488:	e000ed04 	.word	0xe000ed04
 800448c:	2000253c 	.word	0x2000253c

08004490 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004490:	4a06      	ldr	r2, [pc, #24]	; (80044ac <prvResetNextTaskUnblockTime+0x1c>)
 8004492:	6813      	ldr	r3, [r2, #0]
 8004494:	6819      	ldr	r1, [r3, #0]
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <prvResetNextTaskUnblockTime+0x20>)
 8004498:	b919      	cbnz	r1, 80044a2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800449a:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044a2:	6812      	ldr	r2, [r2, #0]
 80044a4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80044a6:	68d2      	ldr	r2, [r2, #12]
 80044a8:	6852      	ldr	r2, [r2, #4]
 80044aa:	e7f8      	b.n	800449e <prvResetNextTaskUnblockTime+0xe>
 80044ac:	20002490 	.word	0x20002490
 80044b0:	20002564 	.word	0x20002564

080044b4 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80044b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80044ba:	9e09      	ldr	r6, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044bc:	ea4f 0982 	mov.w	r9, r2, lsl #2
 80044c0:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80044c2:	4607      	mov	r7, r0
 80044c4:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80044c8:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80044ca:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044cc:	f002 f89b 	bl	8006606 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80044d2:	f1a9 0904 	sub.w	r9, r9, #4
 80044d6:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044d8:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 80044dc:	b395      	cbz	r5, 8004544 <prvInitialiseNewTask.isra.2+0x90>
 80044de:	1e6b      	subs	r3, r5, #1
 80044e0:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80044e4:	351f      	adds	r5, #31
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044e6:	7859      	ldrb	r1, [r3, #1]
 80044e8:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80044ec:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80044f0:	b109      	cbz	r1, 80044f6 <prvInitialiseNewTask.isra.2+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044f2:	42ab      	cmp	r3, r5
 80044f4:	d1f7      	bne.n	80044e6 <prvInitialiseNewTask.isra.2+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044f6:	2300      	movs	r3, #0
 80044f8:	f884 3053 	strb.w	r3, [r4, #83]	; 0x53
 80044fc:	9d08      	ldr	r5, [sp, #32]
 80044fe:	2d06      	cmp	r5, #6
 8004500:	bf28      	it	cs
 8004502:	2506      	movcs	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 8004504:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 8004508:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800450a:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800450c:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 800450e:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004512:	f7ff fbea 	bl	8003cea <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004516:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800451a:	f104 0018 	add.w	r0, r4, #24
 800451e:	f7ff fbe4 	bl	8003cea <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8004522:	f8c4 a05c 	str.w	sl, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004526:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004528:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800452a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800452c:	f884 a060 	strb.w	sl, [r4, #96]	; 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004530:	4642      	mov	r2, r8
 8004532:	4639      	mov	r1, r7
 8004534:	4648      	mov	r0, r9
 8004536:	f7ff fc4d 	bl	8003dd4 <pxPortInitialiseStack>
 800453a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800453c:	b106      	cbz	r6, 8004540 <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800453e:	6034      	str	r4, [r6, #0]
 8004540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004544:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8004548:	e7d8      	b.n	80044fc <prvInitialiseNewTask.isra.2+0x48>

0800454a <prvDeleteTCB>:
	{
 800454a:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800454c:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
	{
 8004550:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004552:	b93b      	cbnz	r3, 8004564 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 8004554:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004556:	f7ff fb85 	bl	8003c64 <vPortFree>
				vPortFree( pxTCB );
 800455a:	4620      	mov	r0, r4
	}
 800455c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8004560:	f7ff bb80 	b.w	8003c64 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004564:	2b01      	cmp	r3, #1
 8004566:	d0f9      	beq.n	800455c <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004568:	2b02      	cmp	r3, #2
 800456a:	d008      	beq.n	800457e <prvDeleteTCB+0x34>
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	e7fe      	b.n	800457c <prvDeleteTCB+0x32>
 800457e:	bd10      	pop	{r4, pc}

08004580 <prvIdleTask>:
{
 8004580:	b580      	push	{r7, lr}
				taskYIELD();
 8004582:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80045e0 <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004586:	4f12      	ldr	r7, [pc, #72]	; (80045d0 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004588:	4c12      	ldr	r4, [pc, #72]	; (80045d4 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800458a:	4d13      	ldr	r5, [pc, #76]	; (80045d8 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800458c:	6823      	ldr	r3, [r4, #0]
 800458e:	b963      	cbnz	r3, 80045aa <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004590:	4b12      	ldr	r3, [pc, #72]	; (80045dc <prvIdleTask+0x5c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2b01      	cmp	r3, #1
 8004596:	d9f8      	bls.n	800458a <prvIdleTask+0xa>
				taskYIELD();
 8004598:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800459c:	f8c8 3000 	str.w	r3, [r8]
 80045a0:	f3bf 8f4f 	dsb	sy
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	e7ee      	b.n	8004588 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 80045aa:	f7ff fc3b 	bl	8003e24 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045b2:	1d30      	adds	r0, r6, #4
 80045b4:	f7ff fbbf 	bl	8003d36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80045b8:	682b      	ldr	r3, [r5, #0]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	3b01      	subs	r3, #1
 80045c2:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80045c4:	f7ff fc50 	bl	8003e68 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80045c8:	4630      	mov	r0, r6
 80045ca:	f7ff ffbe 	bl	800454a <prvDeleteTCB>
 80045ce:	e7dd      	b.n	800458c <prvIdleTask+0xc>
 80045d0:	20002598 	.word	0x20002598
 80045d4:	20002528 	.word	0x20002528
 80045d8:	20002524 	.word	0x20002524
 80045dc:	20002498 	.word	0x20002498
 80045e0:	e000ed04 	.word	0xe000ed04

080045e4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045e6:	4b1b      	ldr	r3, [pc, #108]	; (8004654 <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045e8:	4e1b      	ldr	r6, [pc, #108]	; (8004658 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80045ea:	681d      	ldr	r5, [r3, #0]
{
 80045ec:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ee:	6830      	ldr	r0, [r6, #0]
 80045f0:	3004      	adds	r0, #4
{
 80045f2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045f4:	f7ff fb9f 	bl	8003d36 <uxListRemove>
 80045f8:	4633      	mov	r3, r6
 80045fa:	b940      	cbnz	r0, 800460e <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80045fc:	6831      	ldr	r1, [r6, #0]
 80045fe:	4e17      	ldr	r6, [pc, #92]	; (800465c <prvAddCurrentTaskToDelayedList+0x78>)
 8004600:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 8004602:	6832      	ldr	r2, [r6, #0]
 8004604:	2001      	movs	r0, #1
 8004606:	4088      	lsls	r0, r1
 8004608:	ea22 0200 	bic.w	r2, r2, r0
 800460c:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800460e:	1c62      	adds	r2, r4, #1
 8004610:	d107      	bne.n	8004622 <prvAddCurrentTaskToDelayedList+0x3e>
 8004612:	b137      	cbz	r7, 8004622 <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004614:	6819      	ldr	r1, [r3, #0]
 8004616:	4812      	ldr	r0, [pc, #72]	; (8004660 <prvAddCurrentTaskToDelayedList+0x7c>)
 8004618:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800461a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800461e:	f7ff bb67 	b.w	8003cf0 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004622:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004624:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 8004626:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004628:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 800462a:	d907      	bls.n	800463c <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800462c:	4a0d      	ldr	r2, [pc, #52]	; (8004664 <prvAddCurrentTaskToDelayedList+0x80>)
 800462e:	6810      	ldr	r0, [r2, #0]
 8004630:	6819      	ldr	r1, [r3, #0]
}
 8004632:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004636:	3104      	adds	r1, #4
 8004638:	f7ff bb66 	b.w	8003d08 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800463c:	4a0a      	ldr	r2, [pc, #40]	; (8004668 <prvAddCurrentTaskToDelayedList+0x84>)
 800463e:	6810      	ldr	r0, [r2, #0]
 8004640:	6819      	ldr	r1, [r3, #0]
 8004642:	3104      	adds	r1, #4
 8004644:	f7ff fb60 	bl	8003d08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004648:	4b08      	ldr	r3, [pc, #32]	; (800466c <prvAddCurrentTaskToDelayedList+0x88>)
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 800464e:	bf38      	it	cc
 8004650:	601c      	strcc	r4, [r3, #0]
 8004652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004654:	200025ac 	.word	0x200025ac
 8004658:	2000248c 	.word	0x2000248c
 800465c:	20002538 	.word	0x20002538
 8004660:	20002584 	.word	0x20002584
 8004664:	20002494 	.word	0x20002494
 8004668:	20002490 	.word	0x20002490
 800466c:	20002564 	.word	0x20002564

08004670 <prvTaskIsTaskSuspended.part.0>:
 8004670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	e7fe      	b.n	8004680 <prvTaskIsTaskSuspended.part.0+0x10>

08004682 <xTaskCreateStatic>:
	{
 8004682:	b570      	push	{r4, r5, r6, lr}
 8004684:	b086      	sub	sp, #24
 8004686:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004688:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 800468a:	b90d      	cbnz	r5, 8004690 <xTaskCreateStatic+0xe>
 800468c:	f7ff fff0 	bl	8004670 <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 8004690:	b944      	cbnz	r4, 80046a4 <xTaskCreateStatic+0x22>
 8004692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	e7fe      	b.n	80046a2 <xTaskCreateStatic+0x20>
			volatile size_t xSize = sizeof( StaticTask_t );
 80046a4:	2664      	movs	r6, #100	; 0x64
 80046a6:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046a8:	9e05      	ldr	r6, [sp, #20]
 80046aa:	2e64      	cmp	r6, #100	; 0x64
 80046ac:	d008      	beq.n	80046c0 <xTaskCreateStatic+0x3e>
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	e7fe      	b.n	80046be <xTaskCreateStatic+0x3c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046c0:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046c2:	2502      	movs	r5, #2
 80046c4:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046c8:	ad04      	add	r5, sp, #16
 80046ca:	9501      	str	r5, [sp, #4]
 80046cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80046ce:	9402      	str	r4, [sp, #8]
 80046d0:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046d2:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046d4:	f7ff feee 	bl	80044b4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046d8:	4620      	mov	r0, r4
 80046da:	f7ff fe5d 	bl	8004398 <prvAddNewTaskToReadyList>
	}
 80046de:	9804      	ldr	r0, [sp, #16]
 80046e0:	b006      	add	sp, #24
 80046e2:	bd70      	pop	{r4, r5, r6, pc}

080046e4 <xTaskCreate>:
	{
 80046e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046e8:	4607      	mov	r7, r0
 80046ea:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046ec:	0090      	lsls	r0, r2, #2
	{
 80046ee:	4688      	mov	r8, r1
 80046f0:	4616      	mov	r6, r2
 80046f2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80046f4:	f7ff fa28 	bl	8003b48 <pvPortMalloc>
			if( pxStack != NULL )
 80046f8:	4605      	mov	r5, r0
 80046fa:	b1e8      	cbz	r0, 8004738 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80046fc:	2064      	movs	r0, #100	; 0x64
 80046fe:	f7ff fa23 	bl	8003b48 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8004702:	4604      	mov	r4, r0
 8004704:	b1a8      	cbz	r0, 8004732 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004706:	2300      	movs	r3, #0
 8004708:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800470c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 800470e:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004710:	9301      	str	r3, [sp, #4]
 8004712:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004714:	9002      	str	r0, [sp, #8]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	4632      	mov	r2, r6
 800471a:	464b      	mov	r3, r9
 800471c:	4641      	mov	r1, r8
 800471e:	4638      	mov	r0, r7
 8004720:	f7ff fec8 	bl	80044b4 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004724:	4620      	mov	r0, r4
 8004726:	f7ff fe37 	bl	8004398 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800472a:	2001      	movs	r0, #1
	}
 800472c:	b005      	add	sp, #20
 800472e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8004732:	4628      	mov	r0, r5
 8004734:	f7ff fa96 	bl	8003c64 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004738:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800473c:	e7f6      	b.n	800472c <xTaskCreate+0x48>
	...

08004740 <vTaskStartScheduler>:
{
 8004740:	b510      	push	{r4, lr}
 8004742:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004744:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004746:	aa07      	add	r2, sp, #28
 8004748:	a906      	add	r1, sp, #24
 800474a:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800474c:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800474e:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004750:	f000 fc48 	bl	8004fe4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004754:	9b05      	ldr	r3, [sp, #20]
 8004756:	9302      	str	r3, [sp, #8]
 8004758:	9b06      	ldr	r3, [sp, #24]
 800475a:	9301      	str	r3, [sp, #4]
 800475c:	9400      	str	r4, [sp, #0]
 800475e:	4623      	mov	r3, r4
 8004760:	9a07      	ldr	r2, [sp, #28]
 8004762:	490d      	ldr	r1, [pc, #52]	; (8004798 <vTaskStartScheduler+0x58>)
 8004764:	480d      	ldr	r0, [pc, #52]	; (800479c <vTaskStartScheduler+0x5c>)
 8004766:	f7ff ff8c 	bl	8004682 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800476a:	b190      	cbz	r0, 8004792 <vTaskStartScheduler+0x52>
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800477c:	4b08      	ldr	r3, [pc, #32]	; (80047a0 <vTaskStartScheduler+0x60>)
 800477e:	f04f 32ff 	mov.w	r2, #4294967295
 8004782:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004784:	4b07      	ldr	r3, [pc, #28]	; (80047a4 <vTaskStartScheduler+0x64>)
 8004786:	2201      	movs	r2, #1
 8004788:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800478a:	4b07      	ldr	r3, [pc, #28]	; (80047a8 <vTaskStartScheduler+0x68>)
 800478c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800478e:	f7ff fbe1 	bl	8003f54 <xPortStartScheduler>
}
 8004792:	b008      	add	sp, #32
 8004794:	bd10      	pop	{r4, pc}
 8004796:	bf00      	nop
 8004798:	0800742c 	.word	0x0800742c
 800479c:	08004581 	.word	0x08004581
 80047a0:	20002564 	.word	0x20002564
 80047a4:	20002580 	.word	0x20002580
 80047a8:	200025ac 	.word	0x200025ac

080047ac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80047ac:	4a02      	ldr	r2, [pc, #8]	; (80047b8 <vTaskSuspendAll+0xc>)
 80047ae:	6813      	ldr	r3, [r2, #0]
 80047b0:	3301      	adds	r3, #1
 80047b2:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20002530 	.word	0x20002530

080047bc <xTaskIncrementTick>:
{
 80047bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c0:	4b3c      	ldr	r3, [pc, #240]	; (80048b4 <xTaskIncrementTick+0xf8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d16d      	bne.n	80048a4 <xTaskIncrementTick+0xe8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80047c8:	4b3b      	ldr	r3, [pc, #236]	; (80048b8 <xTaskIncrementTick+0xfc>)
 80047ca:	681c      	ldr	r4, [r3, #0]
 80047cc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80047ce:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80047d0:	b9bc      	cbnz	r4, 8004802 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80047d2:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <xTaskIncrementTick+0x100>)
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	b142      	cbz	r2, 80047ec <xTaskIncrementTick+0x30>
 80047da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047de:	f383 8811 	msr	BASEPRI, r3
 80047e2:	f3bf 8f6f 	isb	sy
 80047e6:	f3bf 8f4f 	dsb	sy
 80047ea:	e7fe      	b.n	80047ea <xTaskIncrementTick+0x2e>
 80047ec:	4a34      	ldr	r2, [pc, #208]	; (80048c0 <xTaskIncrementTick+0x104>)
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	6810      	ldr	r0, [r2, #0]
 80047f2:	6018      	str	r0, [r3, #0]
 80047f4:	6011      	str	r1, [r2, #0]
 80047f6:	4a33      	ldr	r2, [pc, #204]	; (80048c4 <xTaskIncrementTick+0x108>)
 80047f8:	6813      	ldr	r3, [r2, #0]
 80047fa:	3301      	adds	r3, #1
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	f7ff fe47 	bl	8004490 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004802:	4d31      	ldr	r5, [pc, #196]	; (80048c8 <xTaskIncrementTick+0x10c>)
 8004804:	4f31      	ldr	r7, [pc, #196]	; (80048cc <xTaskIncrementTick+0x110>)
 8004806:	682b      	ldr	r3, [r5, #0]
 8004808:	429c      	cmp	r4, r3
 800480a:	f04f 0b00 	mov.w	fp, #0
 800480e:	d30a      	bcc.n	8004826 <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004810:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80048bc <xTaskIncrementTick+0x100>
					prvAddTaskToReadyList( pxTCB );
 8004814:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80048dc <xTaskIncrementTick+0x120>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004818:	f8da 2000 	ldr.w	r2, [sl]
 800481c:	6812      	ldr	r2, [r2, #0]
 800481e:	b9a2      	cbnz	r2, 800484a <xTaskIncrementTick+0x8e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004820:	f04f 32ff 	mov.w	r2, #4294967295
 8004824:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	4b29      	ldr	r3, [pc, #164]	; (80048d0 <xTaskIncrementTick+0x114>)
 800482a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800482c:	2214      	movs	r2, #20
 800482e:	434a      	muls	r2, r1
 8004830:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8004832:	2a02      	cmp	r2, #2
 8004834:	bf28      	it	cs
 8004836:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800483a:	4a26      	ldr	r2, [pc, #152]	; (80048d4 <xTaskIncrementTick+0x118>)
 800483c:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800483e:	2a00      	cmp	r2, #0
}
 8004840:	bf0c      	ite	eq
 8004842:	4658      	moveq	r0, fp
 8004844:	2001      	movne	r0, #1
 8004846:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800484a:	f8da 2000 	ldr.w	r2, [sl]
 800484e:	68d2      	ldr	r2, [r2, #12]
 8004850:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004852:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8004854:	428c      	cmp	r4, r1
 8004856:	d201      	bcs.n	800485c <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = xItemValue;
 8004858:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800485a:	e7e4      	b.n	8004826 <xTaskIncrementTick+0x6a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800485c:	f106 0804 	add.w	r8, r6, #4
 8004860:	4640      	mov	r0, r8
 8004862:	f7ff fa68 	bl	8003d36 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004866:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8004868:	b119      	cbz	r1, 8004872 <xTaskIncrementTick+0xb6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800486a:	f106 0018 	add.w	r0, r6, #24
 800486e:	f7ff fa62 	bl	8003d36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004872:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8004874:	f8d9 3000 	ldr.w	r3, [r9]
 8004878:	2201      	movs	r2, #1
 800487a:	fa02 f100 	lsl.w	r1, r2, r0
 800487e:	4319      	orrs	r1, r3
 8004880:	4b13      	ldr	r3, [pc, #76]	; (80048d0 <xTaskIncrementTick+0x114>)
 8004882:	f8c9 1000 	str.w	r1, [r9]
 8004886:	f04f 0e14 	mov.w	lr, #20
 800488a:	4641      	mov	r1, r8
 800488c:	fb0e 3000 	mla	r0, lr, r0, r3
 8004890:	f7ff fa2e 	bl	8003cf0 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004894:	6838      	ldr	r0, [r7, #0]
 8004896:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8004898:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800489a:	4291      	cmp	r1, r2
 800489c:	bf28      	it	cs
 800489e:	f04f 0b01 	movcs.w	fp, #1
 80048a2:	e7b9      	b.n	8004818 <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 80048a4:	4a0c      	ldr	r2, [pc, #48]	; (80048d8 <xTaskIncrementTick+0x11c>)
 80048a6:	6813      	ldr	r3, [r2, #0]
 80048a8:	3301      	adds	r3, #1
 80048aa:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 80048ac:	f04f 0b00 	mov.w	fp, #0
 80048b0:	e7c3      	b.n	800483a <xTaskIncrementTick+0x7e>
 80048b2:	bf00      	nop
 80048b4:	20002530 	.word	0x20002530
 80048b8:	200025ac 	.word	0x200025ac
 80048bc:	20002490 	.word	0x20002490
 80048c0:	20002494 	.word	0x20002494
 80048c4:	20002568 	.word	0x20002568
 80048c8:	20002564 	.word	0x20002564
 80048cc:	2000248c 	.word	0x2000248c
 80048d0:	20002498 	.word	0x20002498
 80048d4:	200025b0 	.word	0x200025b0
 80048d8:	2000252c 	.word	0x2000252c
 80048dc:	20002538 	.word	0x20002538

080048e0 <xTaskResumeAll>:
{
 80048e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80048e4:	4c31      	ldr	r4, [pc, #196]	; (80049ac <xTaskResumeAll+0xcc>)
 80048e6:	6823      	ldr	r3, [r4, #0]
 80048e8:	b943      	cbnz	r3, 80048fc <xTaskResumeAll+0x1c>
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	e7fe      	b.n	80048fa <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80048fc:	f7ff fa92 	bl	8003e24 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8004900:	6823      	ldr	r3, [r4, #0]
 8004902:	3b01      	subs	r3, #1
 8004904:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004906:	6824      	ldr	r4, [r4, #0]
 8004908:	b12c      	cbz	r4, 8004916 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800490a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800490c:	f7ff faac 	bl	8003e68 <vPortExitCritical>
}
 8004910:	4620      	mov	r0, r4
 8004912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004916:	4b26      	ldr	r3, [pc, #152]	; (80049b0 <xTaskResumeAll+0xd0>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d0f5      	beq.n	800490a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800491e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80049c8 <xTaskResumeAll+0xe8>
					prvAddTaskToReadyList( pxTCB );
 8004922:	4f24      	ldr	r7, [pc, #144]	; (80049b4 <xTaskResumeAll+0xd4>)
 8004924:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80049cc <xTaskResumeAll+0xec>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004928:	f8d9 3000 	ldr.w	r3, [r9]
 800492c:	b9e3      	cbnz	r3, 8004968 <xTaskResumeAll+0x88>
				if( pxTCB != NULL )
 800492e:	b10c      	cbz	r4, 8004934 <xTaskResumeAll+0x54>
					prvResetNextTaskUnblockTime();
 8004930:	f7ff fdae 	bl	8004490 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004934:	4d20      	ldr	r5, [pc, #128]	; (80049b8 <xTaskResumeAll+0xd8>)
 8004936:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004938:	b144      	cbz	r4, 800494c <xTaskResumeAll+0x6c>
								xYieldPending = pdTRUE;
 800493a:	4e20      	ldr	r6, [pc, #128]	; (80049bc <xTaskResumeAll+0xdc>)
 800493c:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800493e:	f7ff ff3d 	bl	80047bc <xTaskIncrementTick>
 8004942:	b100      	cbz	r0, 8004946 <xTaskResumeAll+0x66>
								xYieldPending = pdTRUE;
 8004944:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004946:	3c01      	subs	r4, #1
 8004948:	d1f9      	bne.n	800493e <xTaskResumeAll+0x5e>
						uxPendedTicks = 0;
 800494a:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800494c:	4b1b      	ldr	r3, [pc, #108]	; (80049bc <xTaskResumeAll+0xdc>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0da      	beq.n	800490a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8004954:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <xTaskResumeAll+0xe0>)
 8004956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f3bf 8f4f 	dsb	sy
 8004960:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8004964:	2401      	movs	r4, #1
 8004966:	e7d1      	b.n	800490c <xTaskResumeAll+0x2c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004968:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800496c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800496e:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004970:	f104 0018 	add.w	r0, r4, #24
 8004974:	f7ff f9df 	bl	8003d36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004978:	4630      	mov	r0, r6
 800497a:	f7ff f9dc 	bl	8003d36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800497e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	2501      	movs	r5, #1
 8004984:	fa05 f302 	lsl.w	r3, r5, r2
 8004988:	2014      	movs	r0, #20
 800498a:	430b      	orrs	r3, r1
 800498c:	fb00 8002 	mla	r0, r0, r2, r8
 8004990:	4631      	mov	r1, r6
 8004992:	603b      	str	r3, [r7, #0]
 8004994:	f7ff f9ac 	bl	8003cf0 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004998:	4b0a      	ldr	r3, [pc, #40]	; (80049c4 <xTaskResumeAll+0xe4>)
 800499a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a0:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 80049a2:	bf24      	itt	cs
 80049a4:	4b05      	ldrcs	r3, [pc, #20]	; (80049bc <xTaskResumeAll+0xdc>)
 80049a6:	601d      	strcs	r5, [r3, #0]
 80049a8:	e7be      	b.n	8004928 <xTaskResumeAll+0x48>
 80049aa:	bf00      	nop
 80049ac:	20002530 	.word	0x20002530
 80049b0:	20002524 	.word	0x20002524
 80049b4:	20002538 	.word	0x20002538
 80049b8:	2000252c 	.word	0x2000252c
 80049bc:	200025b0 	.word	0x200025b0
 80049c0:	e000ed04 	.word	0xe000ed04
 80049c4:	2000248c 	.word	0x2000248c
 80049c8:	2000256c 	.word	0x2000256c
 80049cc:	20002498 	.word	0x20002498

080049d0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049d0:	4b17      	ldr	r3, [pc, #92]	; (8004a30 <vTaskSwitchContext+0x60>)
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	4b17      	ldr	r3, [pc, #92]	; (8004a34 <vTaskSwitchContext+0x64>)
{
 80049d6:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049d8:	b112      	cbz	r2, 80049e0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80049da:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049dc:	601a      	str	r2, [r3, #0]
 80049de:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80049e0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049e2:	4b15      	ldr	r3, [pc, #84]	; (8004a38 <vTaskSwitchContext+0x68>)
 80049e4:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80049e6:	fab3 f383 	clz	r3, r3
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f1c3 031f 	rsb	r3, r3, #31
 80049f0:	2214      	movs	r2, #20
 80049f2:	4912      	ldr	r1, [pc, #72]	; (8004a3c <vTaskSwitchContext+0x6c>)
 80049f4:	435a      	muls	r2, r3
 80049f6:	1888      	adds	r0, r1, r2
 80049f8:	588c      	ldr	r4, [r1, r2]
 80049fa:	b944      	cbnz	r4, 8004a0e <vTaskSwitchContext+0x3e>
	__asm volatile
 80049fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a00:	f383 8811 	msr	BASEPRI, r3
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	f3bf 8f4f 	dsb	sy
 8004a0c:	e7fe      	b.n	8004a0c <vTaskSwitchContext+0x3c>
 8004a0e:	6844      	ldr	r4, [r0, #4]
 8004a10:	3208      	adds	r2, #8
 8004a12:	6864      	ldr	r4, [r4, #4]
 8004a14:	6044      	str	r4, [r0, #4]
 8004a16:	440a      	add	r2, r1
 8004a18:	4294      	cmp	r4, r2
 8004a1a:	bf04      	itt	eq
 8004a1c:	6862      	ldreq	r2, [r4, #4]
 8004a1e:	6042      	streq	r2, [r0, #4]
 8004a20:	2214      	movs	r2, #20
 8004a22:	fb02 1303 	mla	r3, r2, r3, r1
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	68da      	ldr	r2, [r3, #12]
 8004a2a:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <vTaskSwitchContext+0x70>)
 8004a2c:	e7d6      	b.n	80049dc <vTaskSwitchContext+0xc>
 8004a2e:	bf00      	nop
 8004a30:	20002530 	.word	0x20002530
 8004a34:	200025b0 	.word	0x200025b0
 8004a38:	20002538 	.word	0x20002538
 8004a3c:	20002498 	.word	0x20002498
 8004a40:	2000248c 	.word	0x2000248c

08004a44 <vTaskPlaceOnEventList>:
{
 8004a44:	b510      	push	{r4, lr}
 8004a46:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8004a48:	b940      	cbnz	r0, 8004a5c <vTaskPlaceOnEventList+0x18>
 8004a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4e:	f383 8811 	msr	BASEPRI, r3
 8004a52:	f3bf 8f6f 	isb	sy
 8004a56:	f3bf 8f4f 	dsb	sy
 8004a5a:	e7fe      	b.n	8004a5a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a5c:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <vTaskPlaceOnEventList+0x30>)
 8004a5e:	6819      	ldr	r1, [r3, #0]
 8004a60:	3118      	adds	r1, #24
 8004a62:	f7ff f951 	bl	8003d08 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a66:	4620      	mov	r0, r4
 8004a68:	2101      	movs	r1, #1
}
 8004a6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a6e:	f7ff bdb9 	b.w	80045e4 <prvAddCurrentTaskToDelayedList>
 8004a72:	bf00      	nop
 8004a74:	2000248c 	.word	0x2000248c

08004a78 <xTaskRemoveFromEventList>:
{
 8004a78:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a7a:	68c3      	ldr	r3, [r0, #12]
 8004a7c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8004a7e:	b944      	cbnz	r4, 8004a92 <xTaskRemoveFromEventList+0x1a>
 8004a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	e7fe      	b.n	8004a90 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004a92:	f104 0518 	add.w	r5, r4, #24
 8004a96:	4628      	mov	r0, r5
 8004a98:	f7ff f94d 	bl	8003d36 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a9c:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <xTaskRemoveFromEventList+0x6c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	b9e3      	cbnz	r3, 8004adc <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004aa2:	1d25      	adds	r5, r4, #4
 8004aa4:	4628      	mov	r0, r5
 8004aa6:	f7ff f946 	bl	8003d36 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004aaa:	490f      	ldr	r1, [pc, #60]	; (8004ae8 <xTaskRemoveFromEventList+0x70>)
 8004aac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004aae:	6808      	ldr	r0, [r1, #0]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4093      	lsls	r3, r2
 8004ab4:	4303      	orrs	r3, r0
 8004ab6:	600b      	str	r3, [r1, #0]
 8004ab8:	4b0c      	ldr	r3, [pc, #48]	; (8004aec <xTaskRemoveFromEventList+0x74>)
 8004aba:	2014      	movs	r0, #20
 8004abc:	4629      	mov	r1, r5
 8004abe:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ac2:	f7ff f915 	bl	8003cf0 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ac6:	4b0a      	ldr	r3, [pc, #40]	; (8004af0 <xTaskRemoveFromEventList+0x78>)
 8004ac8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ace:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8004ad0:	bf83      	ittte	hi
 8004ad2:	4b08      	ldrhi	r3, [pc, #32]	; (8004af4 <xTaskRemoveFromEventList+0x7c>)
 8004ad4:	2001      	movhi	r0, #1
 8004ad6:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8004ad8:	2000      	movls	r0, #0
}
 8004ada:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004adc:	4629      	mov	r1, r5
 8004ade:	4806      	ldr	r0, [pc, #24]	; (8004af8 <xTaskRemoveFromEventList+0x80>)
 8004ae0:	e7ef      	b.n	8004ac2 <xTaskRemoveFromEventList+0x4a>
 8004ae2:	bf00      	nop
 8004ae4:	20002530 	.word	0x20002530
 8004ae8:	20002538 	.word	0x20002538
 8004aec:	20002498 	.word	0x20002498
 8004af0:	2000248c 	.word	0x2000248c
 8004af4:	200025b0 	.word	0x200025b0
 8004af8:	2000256c 	.word	0x2000256c

08004afc <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <vTaskInternalSetTimeOutState+0x10>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004b02:	4b03      	ldr	r3, [pc, #12]	; (8004b10 <vTaskInternalSetTimeOutState+0x14>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6043      	str	r3, [r0, #4]
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20002568 	.word	0x20002568
 8004b10:	200025ac 	.word	0x200025ac

08004b14 <xTaskCheckForTimeOut>:
{
 8004b14:	b570      	push	{r4, r5, r6, lr}
 8004b16:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004b18:	4605      	mov	r5, r0
 8004b1a:	b940      	cbnz	r0, 8004b2e <xTaskCheckForTimeOut+0x1a>
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	e7fe      	b.n	8004b2c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8004b2e:	b941      	cbnz	r1, 8004b42 <xTaskCheckForTimeOut+0x2e>
 8004b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b34:	f383 8811 	msr	BASEPRI, r3
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	e7fe      	b.n	8004b40 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8004b42:	f7ff f96f 	bl	8003e24 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8004b46:	4b0f      	ldr	r3, [pc, #60]	; (8004b84 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b48:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8004b4a:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8004b4c:	6823      	ldr	r3, [r4, #0]
 8004b4e:	1c58      	adds	r0, r3, #1
 8004b50:	d00e      	beq.n	8004b70 <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b52:	480d      	ldr	r0, [pc, #52]	; (8004b88 <xTaskCheckForTimeOut+0x74>)
 8004b54:	682e      	ldr	r6, [r5, #0]
 8004b56:	6800      	ldr	r0, [r0, #0]
 8004b58:	4286      	cmp	r6, r0
 8004b5a:	d001      	beq.n	8004b60 <xTaskCheckForTimeOut+0x4c>
 8004b5c:	428a      	cmp	r2, r1
 8004b5e:	d20e      	bcs.n	8004b7e <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b60:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d209      	bcs.n	8004b7a <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f7ff ffc6 	bl	8004afc <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8004b70:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004b72:	f7ff f979 	bl	8003e68 <vPortExitCritical>
}
 8004b76:	4620      	mov	r0, r4
 8004b78:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8004b7e:	2401      	movs	r4, #1
 8004b80:	e7f7      	b.n	8004b72 <xTaskCheckForTimeOut+0x5e>
 8004b82:	bf00      	nop
 8004b84:	200025ac 	.word	0x200025ac
 8004b88:	20002568 	.word	0x20002568

08004b8c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004b8c:	4b01      	ldr	r3, [pc, #4]	; (8004b94 <vTaskMissedYield+0x8>)
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	4770      	bx	lr
 8004b94:	200025b0 	.word	0x200025b0

08004b98 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004b98:	4b05      	ldr	r3, [pc, #20]	; (8004bb0 <xTaskGetSchedulerState+0x18>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	b133      	cbz	r3, 8004bac <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b9e:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <xTaskGetSchedulerState+0x1c>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ba4:	bf0c      	ite	eq
 8004ba6:	2002      	moveq	r0, #2
 8004ba8:	2000      	movne	r0, #0
 8004baa:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004bac:	2001      	movs	r0, #1
	}
 8004bae:	4770      	bx	lr
 8004bb0:	20002580 	.word	0x20002580
 8004bb4:	20002530 	.word	0x20002530

08004bb8 <xTaskPriorityDisinherit>:
	{
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8004bba:	4604      	mov	r4, r0
 8004bbc:	b908      	cbnz	r0, 8004bc2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8004bc2:	4b22      	ldr	r3, [pc, #136]	; (8004c4c <xTaskPriorityDisinherit+0x94>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4298      	cmp	r0, r3
 8004bc8:	d008      	beq.n	8004bdc <xTaskPriorityDisinherit+0x24>
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	e7fe      	b.n	8004bda <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bdc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004bde:	b943      	cbnz	r3, 8004bf2 <xTaskPriorityDisinherit+0x3a>
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	e7fe      	b.n	8004bf0 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bf2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004bf4:	6d42      	ldr	r2, [r0, #84]	; 0x54
			( pxTCB->uxMutexesHeld )--;
 8004bf6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bf8:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004bfa:	6583      	str	r3, [r0, #88]	; 0x58
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bfc:	d0df      	beq.n	8004bbe <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1dd      	bne.n	8004bbe <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c02:	1d05      	adds	r5, r0, #4
 8004c04:	4628      	mov	r0, r5
 8004c06:	f7ff f896 	bl	8003d36 <uxListRemove>
 8004c0a:	4e11      	ldr	r6, [pc, #68]	; (8004c50 <xTaskPriorityDisinherit+0x98>)
 8004c0c:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <xTaskPriorityDisinherit+0x9c>)
 8004c0e:	b950      	cbnz	r0, 8004c26 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004c10:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004c12:	2114      	movs	r1, #20
 8004c14:	4379      	muls	r1, r7
 8004c16:	5873      	ldr	r3, [r6, r1]
 8004c18:	b92b      	cbnz	r3, 8004c26 <xTaskPriorityDisinherit+0x6e>
 8004c1a:	6813      	ldr	r3, [r2, #0]
 8004c1c:	2001      	movs	r0, #1
 8004c1e:	40b8      	lsls	r0, r7
 8004c20:	ea23 0300 	bic.w	r3, r3, r0
 8004c24:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c26:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004c28:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c2a:	f1c3 0107 	rsb	r1, r3, #7
 8004c2e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c30:	6811      	ldr	r1, [r2, #0]
 8004c32:	2401      	movs	r4, #1
 8004c34:	fa04 f003 	lsl.w	r0, r4, r3
 8004c38:	4308      	orrs	r0, r1
 8004c3a:	6010      	str	r0, [r2, #0]
 8004c3c:	2014      	movs	r0, #20
 8004c3e:	fb00 6003 	mla	r0, r0, r3, r6
 8004c42:	4629      	mov	r1, r5
 8004c44:	f7ff f854 	bl	8003cf0 <vListInsertEnd>
					xReturn = pdTRUE;
 8004c48:	4620      	mov	r0, r4
	}
 8004c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c4c:	2000248c 	.word	0x2000248c
 8004c50:	20002498 	.word	0x20002498
 8004c54:	20002538 	.word	0x20002538

08004c58 <xTaskNotifyWait>:
	{
 8004c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004c5c:	4c1f      	ldr	r4, [pc, #124]	; (8004cdc <xTaskNotifyWait+0x84>)
	{
 8004c5e:	461e      	mov	r6, r3
 8004c60:	4680      	mov	r8, r0
 8004c62:	460f      	mov	r7, r1
 8004c64:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 8004c66:	f7ff f8dd 	bl	8003e24 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d014      	beq.n	8004c9e <xTaskNotifyWait+0x46>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c78:	ea22 0208 	bic.w	r2, r2, r8
 8004c7c:	65da      	str	r2, [r3, #92]	; 0x5c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004c7e:	6823      	ldr	r3, [r4, #0]
 8004c80:	2101      	movs	r1, #1
 8004c82:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
				if( xTicksToWait > ( TickType_t ) 0 )
 8004c86:	b156      	cbz	r6, 8004c9e <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c88:	4630      	mov	r0, r6
 8004c8a:	f7ff fcab 	bl	80045e4 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8004c8e:	4b14      	ldr	r3, [pc, #80]	; (8004ce0 <xTaskNotifyWait+0x88>)
 8004c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 8004c9e:	f7ff f8e3 	bl	8003e68 <vPortExitCritical>
		taskENTER_CRITICAL();
 8004ca2:	f7ff f8bf 	bl	8003e24 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8004ca6:	b115      	cbz	r5, 8004cae <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cac:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004cb4:	2b02      	cmp	r3, #2
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8004cb6:	bf01      	itttt	eq
 8004cb8:	6823      	ldreq	r3, [r4, #0]
 8004cba:	6dd9      	ldreq	r1, [r3, #92]	; 0x5c
 8004cbc:	43b9      	biceq	r1, r7
 8004cbe:	65d9      	streq	r1, [r3, #92]	; 0x5c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004cc0:	6823      	ldr	r3, [r4, #0]
 8004cc2:	f04f 0200 	mov.w	r2, #0
				xReturn = pdTRUE;
 8004cc6:	bf0c      	ite	eq
 8004cc8:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
 8004cca:	2500      	movne	r5, #0
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ccc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
		taskEXIT_CRITICAL();
 8004cd0:	f7ff f8ca 	bl	8003e68 <vPortExitCritical>
	}
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cda:	bf00      	nop
 8004cdc:	2000248c 	.word	0x2000248c
 8004ce0:	e000ed04 	.word	0xe000ed04

08004ce4 <xTaskGenericNotify>:
	{
 8004ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce6:	460e      	mov	r6, r1
 8004ce8:	4617      	mov	r7, r2
 8004cea:	461d      	mov	r5, r3
		configASSERT( xTaskToNotify );
 8004cec:	4604      	mov	r4, r0
 8004cee:	b940      	cbnz	r0, 8004d02 <xTaskGenericNotify+0x1e>
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	e7fe      	b.n	8004d00 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8004d02:	f7ff f88f 	bl	8003e24 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8004d06:	b10d      	cbz	r5, 8004d0c <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004d08:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004d0a:	602b      	str	r3, [r5, #0]
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004d0c:	f894 5060 	ldrb.w	r5, [r4, #96]	; 0x60
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004d10:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004d12:	b2ed      	uxtb	r5, r5
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004d14:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
			switch( eAction )
 8004d18:	2f04      	cmp	r7, #4
 8004d1a:	d816      	bhi.n	8004d4a <xTaskGenericNotify+0x66>
 8004d1c:	e8df f007 	tbb	[pc, r7]
 8004d20:	0507030a 	.word	0x0507030a
 8004d24:	11          	.byte	0x11
 8004d25:	00          	.byte	0x00
					pxTCB->ulNotifiedValue |= ulValue;
 8004d26:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004d28:	430e      	orrs	r6, r1
						pxTCB->ulNotifiedValue = ulValue;
 8004d2a:	65e6      	str	r6, [r4, #92]	; 0x5c
 8004d2c:	e002      	b.n	8004d34 <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 8004d2e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004d30:	3301      	adds	r3, #1
 8004d32:	65e3      	str	r3, [r4, #92]	; 0x5c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004d34:	2d01      	cmp	r5, #1
 8004d36:	d014      	beq.n	8004d62 <xTaskGenericNotify+0x7e>
	{
 8004d38:	2501      	movs	r5, #1
		taskEXIT_CRITICAL();
 8004d3a:	f7ff f895 	bl	8003e68 <vPortExitCritical>
	}
 8004d3e:	4628      	mov	r0, r5
 8004d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004d42:	2d02      	cmp	r5, #2
 8004d44:	d1f1      	bne.n	8004d2a <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 8004d46:	2500      	movs	r5, #0
 8004d48:	e7f7      	b.n	8004d3a <xTaskGenericNotify+0x56>
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8004d4a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	d0f1      	beq.n	8004d34 <xTaskGenericNotify+0x50>
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	e7fe      	b.n	8004d60 <xTaskGenericNotify+0x7c>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d62:	1d26      	adds	r6, r4, #4
 8004d64:	4630      	mov	r0, r6
 8004d66:	f7fe ffe6 	bl	8003d36 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8004d6a:	4914      	ldr	r1, [pc, #80]	; (8004dbc <xTaskGenericNotify+0xd8>)
 8004d6c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004d6e:	6808      	ldr	r0, [r1, #0]
 8004d70:	fa05 f302 	lsl.w	r3, r5, r2
 8004d74:	4303      	orrs	r3, r0
 8004d76:	600b      	str	r3, [r1, #0]
 8004d78:	4b11      	ldr	r3, [pc, #68]	; (8004dc0 <xTaskGenericNotify+0xdc>)
 8004d7a:	2014      	movs	r0, #20
 8004d7c:	fb00 3002 	mla	r0, r0, r2, r3
 8004d80:	4631      	mov	r1, r6
 8004d82:	f7fe ffb5 	bl	8003cf0 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004d86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004d88:	b143      	cbz	r3, 8004d9c <xTaskGenericNotify+0xb8>
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	e7fe      	b.n	8004d9a <xTaskGenericNotify+0xb6>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <xTaskGenericNotify+0xe0>)
 8004d9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d9c7      	bls.n	8004d38 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 8004da8:	4b07      	ldr	r3, [pc, #28]	; (8004dc8 <xTaskGenericNotify+0xe4>)
 8004daa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	e7bf      	b.n	8004d3a <xTaskGenericNotify+0x56>
 8004dba:	bf00      	nop
 8004dbc:	20002538 	.word	0x20002538
 8004dc0:	20002498 	.word	0x20002498
 8004dc4:	2000248c 	.word	0x2000248c
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8004dcc:	b500      	push	{lr}
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8004dce:	2101      	movs	r1, #1
{
 8004dd0:	b089      	sub	sp, #36	; 0x24
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8004dd2:	2000      	movs	r0, #0
 8004dd4:	f001 f852 	bl	8005e7c <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f001 f819 	bl	8005e10 <BSP_LED_Init>
    
  BSP_COM_Init(COM1); 
 8004dde:	2000      	movs	r0, #0
 8004de0:	f001 f8c2 	bl	8005f68 <BSP_COM_Init>
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8004de4:	2000      	movs	r0, #0
 8004de6:	f001 f895 	bl	8005f14 <BSP_PB_GetState>
 8004dea:	4b35      	ldr	r3, [pc, #212]	; (8004ec0 <MX_BlueNRG_MS_Init+0xf4>)
 8004dec:	b2c0      	uxtb	r0, r0
 8004dee:	7018      	strb	r0, [r3, #0]
  hci_init(user_notify, NULL);
 8004df0:	2100      	movs	r1, #0
 8004df2:	4834      	ldr	r0, [pc, #208]	; (8004ec4 <MX_BlueNRG_MS_Init+0xf8>)
 8004df4:	f7fe fcac 	bl	8003750 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8004df8:	f10d 0116 	add.w	r1, sp, #22
 8004dfc:	f10d 000f 	add.w	r0, sp, #15
 8004e00:	f7fe fc13 	bl	800362a <getBlueNRGVersion>
  printf("HWver %d, FWver %d\n", hwVersion, fwVersion);
 8004e04:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8004e08:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8004e0c:	482e      	ldr	r0, [pc, #184]	; (8004ec8 <MX_BlueNRG_MS_Init+0xfc>)
 8004e0e:	f001 fcaf 	bl	8006770 <iprintf>
  if (hwVersion > 0x30) { /* Yes, X-NUCLEO-IDB05A1 expansion board is used */
 8004e12:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004e16:	2b30      	cmp	r3, #48	; 0x30
    bnrg_expansion_board = IDB05A1;
 8004e18:	bf82      	ittt	hi
 8004e1a:	4b2c      	ldrhi	r3, [pc, #176]	; (8004ecc <MX_BlueNRG_MS_Init+0x100>)
 8004e1c:	2201      	movhi	r2, #1
 8004e1e:	701a      	strbhi	r2, [r3, #0]
  hci_reset();
 8004e20:	f7fe fc24 	bl	800366c <hci_reset>
  const uint8_t stackMode[] = {0x03};
 8004e24:	aa08      	add	r2, sp, #32
 8004e26:	2303      	movs	r3, #3
  ret = aci_hal_write_config_data(CONFIG_DATA_MODE_OFFSET,
 8004e28:	2101      	movs	r1, #1
  const uint8_t stackMode[] = {0x03};
 8004e2a:	f802 3d14 	strb.w	r3, [r2, #-20]!
  ret = aci_hal_write_config_data(CONFIG_DATA_MODE_OFFSET,
 8004e2e:	202d      	movs	r0, #45	; 0x2d
 8004e30:	f7fe fba3 	bl	800357a <aci_hal_write_config_data>
  if (ret != BLE_STATUS_SUCCESS) {
 8004e34:	4601      	mov	r1, r0
 8004e36:	b110      	cbz	r0, 8004e3e <MX_BlueNRG_MS_Init+0x72>
    printf("Setting stack mode failed 0x%02x.\n", ret);
 8004e38:	4825      	ldr	r0, [pc, #148]	; (8004ed0 <MX_BlueNRG_MS_Init+0x104>)
 8004e3a:	f001 fc99 	bl	8006770 <iprintf>
  BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8004e3e:	23bb      	movs	r3, #187	; 0xbb
 8004e40:	f88d 3018 	strb.w	r3, [sp, #24]
 8004e44:	23e1      	movs	r3, #225	; 0xe1
 8004e46:	f88d 301b 	strb.w	r3, [sp, #27]
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	2000      	movs	r0, #0
 8004e4e:	f88d 301c 	strb.w	r3, [sp, #28]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8004e52:	2106      	movs	r1, #6
  BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8004e54:	2302      	movs	r3, #2
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8004e56:	aa06      	add	r2, sp, #24
  BLUENRG_memcpy(bdaddr, CLIENT_BDADDR, sizeof(CLIENT_BDADDR));
 8004e58:	f88d 0019 	strb.w	r0, [sp, #25]
 8004e5c:	f88d 001a 	strb.w	r0, [sp, #26]
 8004e60:	f88d 301d 	strb.w	r3, [sp, #29]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8004e64:	f7fe fb89 	bl	800357a <aci_hal_write_config_data>
  if (ret != BLE_STATUS_SUCCESS) {
 8004e68:	4601      	mov	r1, r0
 8004e6a:	b110      	cbz	r0, 8004e72 <MX_BlueNRG_MS_Init+0xa6>
    printf("Setting BD_ADDR failed 0x%02x.\n", ret);
 8004e6c:	4819      	ldr	r0, [pc, #100]	; (8004ed4 <MX_BlueNRG_MS_Init+0x108>)
 8004e6e:	f001 fc7f 	bl	8006770 <iprintf>
  ret = aci_hal_set_tx_power_level(1,4);
 8004e72:	2104      	movs	r1, #4
 8004e74:	2001      	movs	r0, #1
 8004e76:	f7fe fbb2 	bl	80035de <aci_hal_set_tx_power_level>
  if (ret != BLE_STATUS_SUCCESS) {
 8004e7a:	4601      	mov	r1, r0
 8004e7c:	b110      	cbz	r0, 8004e84 <MX_BlueNRG_MS_Init+0xb8>
    printf("Setting power level failed 0x%02x.\n", ret);
 8004e7e:	4816      	ldr	r0, [pc, #88]	; (8004ed8 <MX_BlueNRG_MS_Init+0x10c>)
 8004e80:	f001 fc76 	bl	8006770 <iprintf>
  ret = aci_gatt_init();    
 8004e84:	f7fe faee 	bl	8003464 <aci_gatt_init>
  if (ret != BLE_STATUS_SUCCESS) {
 8004e88:	b110      	cbz	r0, 8004e90 <MX_BlueNRG_MS_Init+0xc4>
    printf("GATT_Init failed.\n");
 8004e8a:	4814      	ldr	r0, [pc, #80]	; (8004edc <MX_BlueNRG_MS_Init+0x110>)
 8004e8c:	f001 fcf8 	bl	8006880 <puts>
  ret = aci_gap_init_IDB05A1(GAP_CENTRAL_ROLE_IDB05A1, 0x00, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8004e90:	ab05      	add	r3, sp, #20
 8004e92:	9301      	str	r3, [sp, #4]
 8004e94:	f10d 0312 	add.w	r3, sp, #18
 8004e98:	9300      	str	r3, [sp, #0]
 8004e9a:	2207      	movs	r2, #7
 8004e9c:	ab04      	add	r3, sp, #16
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	2004      	movs	r0, #4
 8004ea2:	f7fe fa56 	bl	8003352 <aci_gap_init_IDB05A1>
  if (ret != BLE_STATUS_SUCCESS) {
 8004ea6:	b140      	cbz	r0, 8004eba <MX_BlueNRG_MS_Init+0xee>
    printf("GAP_Init failed.\n");
 8004ea8:	480d      	ldr	r0, [pc, #52]	; (8004ee0 <MX_BlueNRG_MS_Init+0x114>)
 8004eaa:	f001 fce9 	bl	8006880 <puts>
  printf("CLIENT: BLE Stack Initialized\n");
 8004eae:	480d      	ldr	r0, [pc, #52]	; (8004ee4 <MX_BlueNRG_MS_Init+0x118>)
 8004eb0:	f001 fce6 	bl	8006880 <puts>
}
 8004eb4:	b009      	add	sp, #36	; 0x24
 8004eb6:	f85d fb04 	ldr.w	pc, [sp], #4
    printf("BLE Stack Initialized.\n");
 8004eba:	480b      	ldr	r0, [pc, #44]	; (8004ee8 <MX_BlueNRG_MS_Init+0x11c>)
 8004ebc:	e7f5      	b.n	8004eaa <MX_BlueNRG_MS_Init+0xde>
 8004ebe:	bf00      	nop
 8004ec0:	2000000c 	.word	0x2000000c
 8004ec4:	08005bc1 	.word	0x08005bc1
 8004ec8:	08007431 	.word	0x08007431
 8004ecc:	200025b5 	.word	0x200025b5
 8004ed0:	08007445 	.word	0x08007445
 8004ed4:	08007468 	.word	0x08007468
 8004ed8:	08007488 	.word	0x08007488
 8004edc:	080074ac 	.word	0x080074ac
 8004ee0:	080074be 	.word	0x080074be
 8004ee4:	080074cf 	.word	0x080074cf
 8004ee8:	080074ed 	.word	0x080074ed

08004eec <MX_BlueNRG_MS_Process>:
{
 8004eec:	b538      	push	{r3, r4, r5, lr}
//		}
//		discovery_started = TRUE;
//		delayMicrosecondsBLE(1000000);
//	}

  if (set_connectable)
 8004eee:	4d2f      	ldr	r5, [pc, #188]	; (8004fac <MX_BlueNRG_MS_Process+0xc0>)
 8004ef0:	782b      	ldrb	r3, [r5, #0]
 8004ef2:	b143      	cbz	r3, 8004f06 <MX_BlueNRG_MS_Process+0x1a>
//  if(set_connectable /*&& discovery_started*/)
  {
    /* Establish connection with remote device */
    Make_Connection(); /* Stworzenie (nie nawiazanie) polaczenia (master) lub ustawienie wykrywalnosci (slave) */
 8004ef4:	f000 fcfc 	bl	80058f0 <Make_Connection>
    set_connectable = FALSE;
 8004ef8:	2000      	movs	r0, #0
 8004efa:	7028      	strb	r0, [r5, #0]
    user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8004efc:	f001 f80a 	bl	8005f14 <BSP_PB_GetState>
 8004f00:	4b2b      	ldr	r3, [pc, #172]	; (8004fb0 <MX_BlueNRG_MS_Process+0xc4>)
 8004f02:	b2c0      	uxtb	r0, r0
 8004f04:	7018      	strb	r0, [r3, #0]
  }

    /* Start TX handle Characteristic dynamic discovery if not yet done */
	/* z user_notify ustawiamy connected po nawiazaniu polaczenia = Skad jest wywolywane GAP_ConnectionComplete_CB */
    if (connected && !end_read_tx_char_handle){
 8004f06:	4c2b      	ldr	r4, [pc, #172]	; (8004fb4 <MX_BlueNRG_MS_Process+0xc8>)
 8004f08:	6823      	ldr	r3, [r4, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d044      	beq.n	8004f98 <MX_BlueNRG_MS_Process+0xac>
 8004f0e:	4b2a      	ldr	r3, [pc, #168]	; (8004fb8 <MX_BlueNRG_MS_Process+0xcc>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d140      	bne.n	8004f98 <MX_BlueNRG_MS_Process+0xac>
      startReadTXCharHandle(); //trzeba wiedziec, od ktorego polaczenia!
 8004f16:	f000 fd25 	bl	8005964 <startReadTXCharHandle>
    /* Start RX handle Characteristic dynamic discovery if not yet done */
    else if (connected && !end_read_rx_char_handle){      
      startReadRXCharHandle();
    }
    
    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && !notification_enabled) 
 8004f1a:	6823      	ldr	r3, [r4, #0]
 8004f1c:	b173      	cbz	r3, 8004f3c <MX_BlueNRG_MS_Process+0x50>
 8004f1e:	4b26      	ldr	r3, [pc, #152]	; (8004fb8 <MX_BlueNRG_MS_Process+0xcc>)
 8004f20:	781b      	ldrb	r3, [r3, #0]
 8004f22:	b15b      	cbz	r3, 8004f3c <MX_BlueNRG_MS_Process+0x50>
 8004f24:	4b25      	ldr	r3, [pc, #148]	; (8004fbc <MX_BlueNRG_MS_Process+0xd0>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	b143      	cbz	r3, 8004f3c <MX_BlueNRG_MS_Process+0x50>
 8004f2a:	4b25      	ldr	r3, [pc, #148]	; (8004fc0 <MX_BlueNRG_MS_Process+0xd4>)
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8004f32:	b91b      	cbnz	r3, 8004f3c <MX_BlueNRG_MS_Process+0x50>
    {
      BSP_LED_Off(LED2); /* end of the connection and chars discovery phase */
 8004f34:	f000 ff99 	bl	8005e6a <BSP_LED_Off>
      enableNotification(); /* Wlacz wymiane danych? */
 8004f38:	f000 fd8c 	bl	8005a54 <enableNotification>
    }

    /* Klient wysyla dane serwerowi */
    if(client_ready)
 8004f3c:	4b21      	ldr	r3, [pc, #132]	; (8004fc4 <MX_BlueNRG_MS_Process+0xd8>)
 8004f3e:	781a      	ldrb	r2, [r3, #0]
 8004f40:	b122      	cbz	r2, 8004f4c <MX_BlueNRG_MS_Process+0x60>
    {
		if(newConfig == true){
 8004f42:	4a21      	ldr	r2, [pc, #132]	; (8004fc8 <MX_BlueNRG_MS_Process+0xdc>)
 8004f44:	7811      	ldrb	r1, [r2, #0]
 8004f46:	b109      	cbz	r1, 8004f4c <MX_BlueNRG_MS_Process+0x60>
		  newConfig = false; //TODO: problem - wiadomosc z konfiguracja moze byc gubiona, nie sprawdzam tego! rozwiazanie - ACK?
 8004f48:	2100      	movs	r1, #0
 8004f4a:	7011      	strb	r1, [r2, #0]
    	 * 4. funkcja od odczytywania z wielu sensorow da znac (?) gdy bedzie miec juz wszystkie dane
    	 * 5. slave wysle odpowiednia liczbe bajtow danych (obliczona wczesniej na podst. konfiguracji) masterowi
    	 * */
    }

    if (connected && end_read_tx_char_handle && end_read_rx_char_handle && notification_enabled)
 8004f4c:	6822      	ldr	r2, [r4, #0]
 8004f4e:	b152      	cbz	r2, 8004f66 <MX_BlueNRG_MS_Process+0x7a>
 8004f50:	4a19      	ldr	r2, [pc, #100]	; (8004fb8 <MX_BlueNRG_MS_Process+0xcc>)
 8004f52:	7812      	ldrb	r2, [r2, #0]
 8004f54:	b13a      	cbz	r2, 8004f66 <MX_BlueNRG_MS_Process+0x7a>
 8004f56:	4a19      	ldr	r2, [pc, #100]	; (8004fbc <MX_BlueNRG_MS_Process+0xd0>)
 8004f58:	7812      	ldrb	r2, [r2, #0]
 8004f5a:	b122      	cbz	r2, 8004f66 <MX_BlueNRG_MS_Process+0x7a>
 8004f5c:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <MX_BlueNRG_MS_Process+0xd4>)
 8004f5e:	7812      	ldrb	r2, [r2, #0]
 8004f60:	b10a      	cbz	r2, 8004f66 <MX_BlueNRG_MS_Process+0x7a>
    {
    	client_ready = true;
 8004f62:	2201      	movs	r2, #1
 8004f64:	701a      	strb	r2, [r3, #0]
    }

    //
    if(client_ready){
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	b193      	cbz	r3, 8004f90 <MX_BlueNRG_MS_Process+0xa4>
    	if(whichServerConnecting == 1){
 8004f6a:	4a18      	ldr	r2, [pc, #96]	; (8004fcc <MX_BlueNRG_MS_Process+0xe0>)
 8004f6c:	7813      	ldrb	r3, [r2, #0]
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d10e      	bne.n	8004f90 <MX_BlueNRG_MS_Process+0xa4>
			set_connectable = true;
			connected = false;
			start_read_tx_char_handle = false;
 8004f72:	4917      	ldr	r1, [pc, #92]	; (8004fd0 <MX_BlueNRG_MS_Process+0xe4>)
			set_connectable = true;
 8004f74:	702b      	strb	r3, [r5, #0]
			connected = false;
 8004f76:	2300      	movs	r3, #0
 8004f78:	6023      	str	r3, [r4, #0]
			start_read_tx_char_handle = false;
 8004f7a:	700b      	strb	r3, [r1, #0]
			start_read_rx_char_handle = false;
 8004f7c:	4915      	ldr	r1, [pc, #84]	; (8004fd4 <MX_BlueNRG_MS_Process+0xe8>)
 8004f7e:	700b      	strb	r3, [r1, #0]
			end_read_tx_char_handle = false;
 8004f80:	490d      	ldr	r1, [pc, #52]	; (8004fb8 <MX_BlueNRG_MS_Process+0xcc>)
 8004f82:	700b      	strb	r3, [r1, #0]
			end_read_rx_char_handle = false;
 8004f84:	490d      	ldr	r1, [pc, #52]	; (8004fbc <MX_BlueNRG_MS_Process+0xd0>)
 8004f86:	700b      	strb	r3, [r1, #0]
			notification_enabled = false;
 8004f88:	490d      	ldr	r1, [pc, #52]	; (8004fc0 <MX_BlueNRG_MS_Process+0xd4>)
 8004f8a:	700b      	strb	r3, [r1, #0]
			whichServerConnecting++;
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	7013      	strb	r3, [r2, #0]
}
 8004f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hci_user_evt_proc();
 8004f94:	f7fe bcd4 	b.w	8003940 <hci_user_evt_proc>
    else if (connected && !end_read_rx_char_handle){      
 8004f98:	6823      	ldr	r3, [r4, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d0bd      	beq.n	8004f1a <MX_BlueNRG_MS_Process+0x2e>
 8004f9e:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <MX_BlueNRG_MS_Process+0xd0>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1b9      	bne.n	8004f1a <MX_BlueNRG_MS_Process+0x2e>
      startReadRXCharHandle();
 8004fa6:	f000 fd0d 	bl	80059c4 <startReadRXCharHandle>
 8004faa:	e7b6      	b.n	8004f1a <MX_BlueNRG_MS_Process+0x2e>
 8004fac:	2000000e 	.word	0x2000000e
 8004fb0:	2000000c 	.word	0x2000000c
 8004fb4:	200036bc 	.word	0x200036bc
 8004fb8:	200036c3 	.word	0x200036c3
 8004fbc:	200036c2 	.word	0x200036c2
 8004fc0:	200036c4 	.word	0x200036c4
 8004fc4:	200036bb 	.word	0x200036bb
 8004fc8:	200001ea 	.word	0x200001ea
 8004fcc:	2000000d 	.word	0x2000000d
 8004fd0:	200036c6 	.word	0x200036c6
 8004fd4:	200036c5 	.word	0x200036c5

08004fd8 <BSP_PB_Callback>:
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
  /* Set the User Button flag */
  user_button_pressed = 1;
 8004fd8:	4b01      	ldr	r3, [pc, #4]	; (8004fe0 <BSP_PB_Callback+0x8>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	4770      	bx	lr
 8004fe0:	200025b6 	.word	0x200025b6

08004fe4 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8004fe4:	4b03      	ldr	r3, [pc, #12]	; (8004ff4 <vApplicationGetIdleTaskMemory+0x10>)
 8004fe6:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8004fe8:	4b03      	ldr	r3, [pc, #12]	; (8004ff8 <vApplicationGetIdleTaskMemory+0x14>)
 8004fea:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8004fec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ff0:	6013      	str	r3, [r2, #0]
 8004ff2:	4770      	bx	lr
 8004ff4:	20003558 	.word	0x20003558
 8004ff8:	200025b8 	.word	0x200025b8

08004ffc <HCI_TL_SPI_Init>:
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ffc:	4b17      	ldr	r3, [pc, #92]	; (800505c <HCI_TL_SPI_Init+0x60>)
{
 8004ffe:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005000:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	64da      	str	r2, [r3, #76]	; 0x4c
 8005008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 800500a:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800500c:	f003 0301 	and.w	r3, r3, #1
 8005010:	9300      	str	r3, [sp, #0]
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005012:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8005014:	2501      	movs	r5, #1
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005016:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005018:	4b11      	ldr	r3, [pc, #68]	; (8005060 <HCI_TL_SPI_Init+0x64>)
 800501a:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 800501c:	a901      	add	r1, sp, #4
 800501e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 8005022:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005024:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 8005026:	f7fc fadb 	bl	80015e0 <HAL_GPIO_Init>
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800502a:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800502e:	a901      	add	r1, sp, #4
 8005030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8005034:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005036:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005038:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800503a:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 800503c:	f7fc fad0 	bl	80015e0 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8005040:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8005042:	a901      	add	r1, sp, #4
 8005044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8005048:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800504a:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504c:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800504e:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8005050:	f7fc fac6 	bl	80015e0 <HAL_GPIO_Init>
    
  return BSP_SPI1_Init();
 8005054:	f001 f816 	bl	8006084 <BSP_SPI1_Init>
}
 8005058:	b007      	add	sp, #28
 800505a:	bd30      	pop	{r4, r5, pc}
 800505c:	40021000 	.word	0x40021000
 8005060:	10110000 	.word	0x10110000

08005064 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8005064:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8005066:	2101      	movs	r1, #1
 8005068:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800506c:	f7fc fb94 	bl	8001798 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 8005070:	2102      	movs	r1, #2
 8005072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005076:	f7fc fb8f 	bl	8001798 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 800507a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800507e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005082:	f7fc fb89 	bl	8001798 <HAL_GPIO_DeInit>
  return 0;
}
 8005086:	2000      	movs	r0, #0
 8005088:	bd08      	pop	{r3, pc}

0800508a <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 800508a:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 800508c:	2200      	movs	r2, #0
 800508e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005092:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005096:	f7fc fc0f 	bl	80018b8 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 800509a:	2005      	movs	r0, #5
 800509c:	f7fc fa14 	bl	80014c8 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 80050a0:	2201      	movs	r2, #1
 80050a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80050a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050aa:	f7fc fc05 	bl	80018b8 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 80050ae:	2005      	movs	r0, #5
 80050b0:	f7fc fa0a 	bl	80014c8 <HAL_Delay>
  return 0;
}  
 80050b4:	2000      	movs	r0, #0
 80050b6:	bd08      	pop	{r3, pc}

080050b8 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80050b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80050ba:	b087      	sub	sp, #28
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80050bc:	2400      	movs	r4, #0
  uint8_t char_ff = 0xff;
 80050be:	23ff      	movs	r3, #255	; 0xff
 80050c0:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80050c4:	4622      	mov	r2, r4
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80050c6:	230b      	movs	r3, #11
{
 80050c8:	4607      	mov	r7, r0
 80050ca:	460e      	mov	r6, r1
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80050cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80050d0:	2102      	movs	r1, #2
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80050d2:	f88d 3008 	strb.w	r3, [sp, #8]
 80050d6:	f88d 4009 	strb.w	r4, [sp, #9]
 80050da:	f88d 400a 	strb.w	r4, [sp, #10]
 80050de:	f88d 400b 	strb.w	r4, [sp, #11]
 80050e2:	f88d 400c 	strb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80050e6:	f7fc fbe7 	bl	80018b8 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 80050ea:	2205      	movs	r2, #5
 80050ec:	a904      	add	r1, sp, #16
 80050ee:	a802      	add	r0, sp, #8
 80050f0:	f000 ff90 	bl	8006014 <BSP_SPI1_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 80050f4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80050f8:	2b02      	cmp	r3, #2
 80050fa:	d122      	bne.n	8005142 <HCI_TL_SPI_Receive+0x8a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80050fc:	f89d 5014 	ldrb.w	r5, [sp, #20]
 8005100:	f89d 3013 	ldrb.w	r3, [sp, #19]
  
    if(byte_count > 0) {
 8005104:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 8005108:	d007      	beq.n	800511a <HCI_TL_SPI_Receive+0x62>
 800510a:	42ae      	cmp	r6, r5
 800510c:	bf28      	it	cs
 800510e:	462e      	movcs	r6, r5
 8005110:	b2e5      	uxtb	r5, r4

      if (byte_count > size){
        byte_count = size;
      }        
  
      for(len = 0; len < byte_count; len++)
 8005112:	42b5      	cmp	r5, r6
 8005114:	f104 0401 	add.w	r4, r4, #1
 8005118:	d308      	bcc.n	800512c <HCI_TL_SPI_Receive+0x74>
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 800511a:	2201      	movs	r2, #1
 800511c:	2102      	movs	r1, #2
 800511e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005122:	f7fc fbc9 	bl	80018b8 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 8005126:	4628      	mov	r0, r5
 8005128:	b007      	add	sp, #28
 800512a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        BSP_SPI1_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 800512c:	2201      	movs	r2, #1
 800512e:	f10d 0107 	add.w	r1, sp, #7
 8005132:	f10d 0006 	add.w	r0, sp, #6
 8005136:	f000 ff6d 	bl	8006014 <BSP_SPI1_SendRecv>
        buffer[len] = read_char;
 800513a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800513e:	557b      	strb	r3, [r7, r5]
 8005140:	e7e6      	b.n	8005110 <HCI_TL_SPI_Receive+0x58>
  uint8_t len = 0;
 8005142:	4625      	mov	r5, r4
 8005144:	e7e9      	b.n	800511a <HCI_TL_SPI_Receive+0x62>
	...

08005148 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8005148:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800514c:	230a      	movs	r3, #10
 800514e:	f88d 3000 	strb.w	r3, [sp]
 8005152:	2300      	movs	r3, #0
{  
 8005154:	4607      	mov	r7, r0
 8005156:	460d      	mov	r5, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8005158:	f88d 3001 	strb.w	r3, [sp, #1]
 800515c:	f88d 3002 	strb.w	r3, [sp, #2]
 8005160:	f88d 3003 	strb.w	r3, [sp, #3]
 8005164:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8005168:	f7fc f9a8 	bl	80014bc <HAL_GetTick>
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
      {
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 800516c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80051d8 <HCI_TL_SPI_Send+0x90>
  uint32_t tickstart = HAL_GetTick();
 8005170:	4606      	mov	r6, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8005172:	2200      	movs	r2, #0
 8005174:	2102      	movs	r1, #2
 8005176:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800517a:	f7fc fb9d 	bl	80018b8 <HAL_GPIO_WritePin>
    BSP_SPI1_SendRecv(header_master, header_slave, HEADER_SIZE);
 800517e:	2205      	movs	r2, #5
 8005180:	a902      	add	r1, sp, #8
 8005182:	4668      	mov	r0, sp
 8005184:	f000 ff46 	bl	8006014 <BSP_SPI1_SendRecv>
    if(header_slave[0] == 0x02) 
 8005188:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800518c:	2b02      	cmp	r3, #2
 800518e:	d11a      	bne.n	80051c6 <HCI_TL_SPI_Send+0x7e>
      if(header_slave[1] >= size) 
 8005190:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8005194:	42ab      	cmp	r3, r5
 8005196:	d319      	bcc.n	80051cc <HCI_TL_SPI_Send+0x84>
        BSP_SPI1_SendRecv(buffer, read_char_buf, size);
 8005198:	462a      	mov	r2, r5
 800519a:	4641      	mov	r1, r8
 800519c:	4638      	mov	r0, r7
 800519e:	f000 ff39 	bl	8006014 <BSP_SPI1_SendRecv>
    result = 0;
 80051a2:	2400      	movs	r4, #0
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 80051a4:	2201      	movs	r2, #1
 80051a6:	2102      	movs	r1, #2
 80051a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051ac:	f7fc fb84 	bl	80018b8 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80051b0:	f7fc f984 	bl	80014bc <HAL_GetTick>
 80051b4:	1b80      	subs	r0, r0, r6
 80051b6:	280f      	cmp	r0, #15
 80051b8:	d80b      	bhi.n	80051d2 <HCI_TL_SPI_Send+0x8a>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 80051ba:	2c00      	cmp	r4, #0
 80051bc:	d1d9      	bne.n	8005172 <HCI_TL_SPI_Send+0x2a>
  
  return result;
}
 80051be:	4620      	mov	r0, r4
 80051c0:	b004      	add	sp, #16
 80051c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      result = -1;
 80051c6:	f04f 34ff 	mov.w	r4, #4294967295
 80051ca:	e7eb      	b.n	80051a4 <HCI_TL_SPI_Send+0x5c>
        result = -2;
 80051cc:	f06f 0401 	mvn.w	r4, #1
 80051d0:	e7e8      	b.n	80051a4 <HCI_TL_SPI_Send+0x5c>
      result = -3;
 80051d2:	f06f 0402 	mvn.w	r4, #2
  return result;
 80051d6:	e7f2      	b.n	80051be <HCI_TL_SPI_Send+0x76>
 80051d8:	200035bc 	.word	0x200035bc

080051dc <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80051dc:	b508      	push	{r3, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80051de:	2101      	movs	r1, #1
 80051e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051e4:	f7fc fb62 	bl	80018ac <HAL_GPIO_ReadPin>
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80051e8:	2801      	cmp	r0, #1
 80051ea:	d104      	bne.n	80051f6 <hci_tl_lowlevel_isr+0x1a>
  {        
    if (hci_notify_asynch_evt(NULL))
 80051ec:	2000      	movs	r0, #0
 80051ee:	f7fe fbc7 	bl	8003980 <hci_notify_asynch_evt>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	d0f3      	beq.n	80051de <hci_tl_lowlevel_isr+0x2>
 80051f6:	bd08      	pop	{r3, pc}

080051f8 <hci_tl_lowlevel_init>:
{
 80051f8:	b510      	push	{r4, lr}
 80051fa:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 80051fc:	4b11      	ldr	r3, [pc, #68]	; (8005244 <hci_tl_lowlevel_init+0x4c>)
 80051fe:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 8005200:	4b11      	ldr	r3, [pc, #68]	; (8005248 <hci_tl_lowlevel_init+0x50>)
 8005202:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 8005204:	4b11      	ldr	r3, [pc, #68]	; (800524c <hci_tl_lowlevel_init+0x54>)
 8005206:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8005208:	4b11      	ldr	r3, [pc, #68]	; (8005250 <hci_tl_lowlevel_init+0x58>)
 800520a:	9304      	str	r3, [sp, #16]
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800520c:	4c11      	ldr	r4, [pc, #68]	; (8005254 <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 800520e:	4b12      	ldr	r3, [pc, #72]	; (8005258 <hci_tl_lowlevel_init+0x60>)
 8005210:	9303      	str	r3, [sp, #12]
  hci_register_io_bus (&fops);
 8005212:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 8005214:	4b11      	ldr	r3, [pc, #68]	; (800525c <hci_tl_lowlevel_init+0x64>)
 8005216:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8005218:	f7fe fac4 	bl	80037a4 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti0, EXTI_LINE_0);
 800521c:	f04f 51b0 	mov.w	r1, #369098752	; 0x16000000
 8005220:	4620      	mov	r0, r4
 8005222:	f7fc f9bf 	bl	80015a4 <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti0, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8005226:	4a0e      	ldr	r2, [pc, #56]	; (8005260 <hci_tl_lowlevel_init+0x68>)
 8005228:	2100      	movs	r1, #0
 800522a:	4620      	mov	r0, r4
 800522c:	f7fc f9b4 	bl	8001598 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005230:	2200      	movs	r2, #0
 8005232:	4611      	mov	r1, r2
 8005234:	2006      	movs	r0, #6
 8005236:	f7fc f96d 	bl	8001514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800523a:	2006      	movs	r0, #6
 800523c:	f7fc f99e 	bl	800157c <HAL_NVIC_EnableIRQ>
}
 8005240:	b008      	add	sp, #32
 8005242:	bd10      	pop	{r4, pc}
 8005244:	08004ffd 	.word	0x08004ffd
 8005248:	08005065 	.word	0x08005065
 800524c:	08005149 	.word	0x08005149
 8005250:	080050b9 	.word	0x080050b9
 8005254:	200036ec 	.word	0x200036ec
 8005258:	0800508b 	.word	0x0800508b
 800525c:	0800603d 	.word	0x0800603d
 8005260:	080051dd 	.word	0x080051dd

08005264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005264:	b5b0      	push	{r4, r5, r7, lr}
 8005266:	b096      	sub	sp, #88	; 0x58
 8005268:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800526a:	f7fc f905 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800526e:	f000 f85f 	bl	8005330 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005272:	f000 f91d 	bl	80054b0 <_ZL12MX_GPIO_Initv>
  MX_USART3_UART_Init();
 8005276:	f000 f8e7 	bl	8005448 <_ZL19MX_USART3_UART_Initv>
  MX_BlueNRG_MS_Init();
 800527a:	f7ff fda7 	bl	8004dcc <MX_BlueNRG_MS_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  uartMutexHandle = xSemaphoreCreateMutex();
 800527e:	2001      	movs	r0, #1
 8005280:	f7ff f87e 	bl	8004380 <xQueueCreateMutex>
 8005284:	4602      	mov	r2, r0
 8005286:	4b22      	ldr	r3, [pc, #136]	; (8005310 <main+0xac>)
 8005288:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  msgQueueHandle = xQueueCreate(MAX_MSGS, sizeof(uartData));
 800528a:	2200      	movs	r2, #0
 800528c:	2132      	movs	r1, #50	; 0x32
 800528e:	2005      	movs	r0, #5
 8005290:	f7fe ff92 	bl	80041b8 <xQueueGenericCreate>
 8005294:	4602      	mov	r2, r0
 8005296:	4b1f      	ldr	r3, [pc, #124]	; (8005314 <main+0xb0>)
 8005298:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128/*256*/);
 800529a:	4b1f      	ldr	r3, [pc, #124]	; (8005318 <main+0xb4>)
 800529c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80052a0:	461d      	mov	r5, r3
 80052a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80052aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80052ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7fe fbfa 	bl	8003aae <osThreadCreate>
 80052ba:	4602      	mov	r2, r0
 80052bc:	4b17      	ldr	r3, [pc, #92]	; (800531c <main+0xb8>)
 80052be:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
	osThreadDef(askForDataTask, AskForDataTaskThread, osPriorityNormal, 0, 128/*256*/);
 80052c0:	4b17      	ldr	r3, [pc, #92]	; (8005320 <main+0xbc>)
 80052c2:	f107 0420 	add.w	r4, r7, #32
 80052c6:	461d      	mov	r5, r3
 80052c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80052d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	askForDataTaskHandle = osThreadCreate(osThread(askForDataTask), NULL);
 80052d4:	f107 0320 	add.w	r3, r7, #32
 80052d8:	2100      	movs	r1, #0
 80052da:	4618      	mov	r0, r3
 80052dc:	f7fe fbe7 	bl	8003aae <osThreadCreate>
 80052e0:	4602      	mov	r2, r0
 80052e2:	4b10      	ldr	r3, [pc, #64]	; (8005324 <main+0xc0>)
 80052e4:	601a      	str	r2, [r3, #0]

	osThreadDef(presentationTask, PresentationTaskThread, osPriorityNormal, 0, /*128*/512);
 80052e6:	4b10      	ldr	r3, [pc, #64]	; (8005328 <main+0xc4>)
 80052e8:	1d3c      	adds	r4, r7, #4
 80052ea:	461d      	mov	r5, r3
 80052ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80052ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80052f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80052f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	presentationTaskHandle = osThreadCreate(osThread(presentationTask), NULL);
 80052f8:	1d3b      	adds	r3, r7, #4
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fe fbd6 	bl	8003aae <osThreadCreate>
 8005302:	4602      	mov	r2, r0
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <main+0xc8>)
 8005306:	601a      	str	r2, [r3, #0]
//	osThreadDef(communicationTask, CommunicationTaskThread, osPriorityLow, 0, /*128*/256);
//	communicationTaskHandle = osThreadCreate(osThread(communicationTask), NULL);
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8005308:	f7fe fbcc 	bl	8003aa4 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800530c:	e7fe      	b.n	800530c <main+0xa8>
 800530e:	bf00      	nop
 8005310:	20000194 	.word	0x20000194
 8005314:	20000198 	.word	0x20000198
 8005318:	08007328 	.word	0x08007328
 800531c:	20000184 	.word	0x20000184
 8005320:	08007354 	.word	0x08007354
 8005324:	20000188 	.word	0x20000188
 8005328:	08007384 	.word	0x08007384
 800532c:	2000018c 	.word	0x2000018c

08005330 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b0b8      	sub	sp, #224	; 0xe0
 8005334:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005336:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800533a:	2244      	movs	r2, #68	; 0x44
 800533c:	2100      	movs	r1, #0
 800533e:	4618      	mov	r0, r3
 8005340:	f001 f961 	bl	8006606 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005344:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8005348:	2200      	movs	r2, #0
 800534a:	601a      	str	r2, [r3, #0]
 800534c:	605a      	str	r2, [r3, #4]
 800534e:	609a      	str	r2, [r3, #8]
 8005350:	60da      	str	r2, [r3, #12]
 8005352:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005354:	463b      	mov	r3, r7
 8005356:	2288      	movs	r2, #136	; 0x88
 8005358:	2100      	movs	r1, #0
 800535a:	4618      	mov	r0, r3
 800535c:	f001 f953 	bl	8006606 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005360:	2302      	movs	r3, #2
 8005362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005366:	f44f 7380 	mov.w	r3, #256	; 0x100
 800536a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800536e:	2310      	movs	r3, #16
 8005370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005374:	2302      	movs	r3, #2
 8005376:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800537a:	2302      	movs	r3, #2
 800537c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005380:	2301      	movs	r3, #1
 8005382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8005386:	230a      	movs	r3, #10
 8005388:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800538c:	2307      	movs	r3, #7
 800538e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005392:	2302      	movs	r3, #2
 8005394:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005398:	2302      	movs	r3, #2
 800539a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800539e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fc fb5c 	bl	8001a60 <HAL_RCC_OscConfig>
 80053a8:	4603      	mov	r3, r0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bf14      	ite	ne
 80053ae:	2301      	movne	r3, #1
 80053b0:	2300      	moveq	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80053b8:	f000 fa92 	bl	80058e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80053bc:	230f      	movs	r3, #15
 80053be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80053c2:	2303      	movs	r3, #3
 80053c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80053c8:	2300      	movs	r3, #0
 80053ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80053ce:	2300      	movs	r3, #0
 80053d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80053d4:	2300      	movs	r3, #0
 80053d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80053da:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80053de:	2104      	movs	r1, #4
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fc fdc3 	bl	8001f6c <HAL_RCC_ClockConfig>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	bf14      	ite	ne
 80053ec:	2301      	movne	r3, #1
 80053ee:	2300      	moveq	r3, #0
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <_Z18SystemClock_Configv+0xca>
  {
    Error_Handler();
 80053f6:	f000 fa73 	bl	80058e0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80053fa:	2306      	movs	r3, #6
 80053fc:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80053fe:	2300      	movs	r3, #0
 8005400:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005402:	2300      	movs	r3, #0
 8005404:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005406:	463b      	mov	r3, r7
 8005408:	4618      	mov	r0, r3
 800540a:	f7fc ff93 	bl	8002334 <HAL_RCCEx_PeriphCLKConfig>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf14      	ite	ne
 8005414:	2301      	movne	r3, #1
 8005416:	2300      	moveq	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 800541e:	f000 fa5f 	bl	80058e0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005422:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005426:	f7fc fa55 	bl	80018d4 <HAL_PWREx_ControlVoltageScaling>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	bf14      	ite	ne
 8005430:	2301      	movne	r3, #1
 8005432:	2300      	moveq	r3, #0
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <_Z18SystemClock_Configv+0x10e>
  {
    Error_Handler();
 800543a:	f000 fa51 	bl	80058e0 <Error_Handler>
  }
}
 800543e:	bf00      	nop
 8005440:	37e0      	adds	r7, #224	; 0xe0
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800544c:	4b16      	ldr	r3, [pc, #88]	; (80054a8 <_ZL19MX_USART3_UART_Initv+0x60>)
 800544e:	4a17      	ldr	r2, [pc, #92]	; (80054ac <_ZL19MX_USART3_UART_Initv+0x64>)
 8005450:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005452:	4b15      	ldr	r3, [pc, #84]	; (80054a8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8005454:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005458:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800545a:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <_ZL19MX_USART3_UART_Initv+0x60>)
 800545c:	2200      	movs	r2, #0
 800545e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005460:	4b11      	ldr	r3, [pc, #68]	; (80054a8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8005462:	2200      	movs	r2, #0
 8005464:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005466:	4b10      	ldr	r3, [pc, #64]	; (80054a8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8005468:	2200      	movs	r2, #0
 800546a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800546c:	4b0e      	ldr	r3, [pc, #56]	; (80054a8 <_ZL19MX_USART3_UART_Initv+0x60>)
 800546e:	220c      	movs	r2, #12
 8005470:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005472:	4b0d      	ldr	r3, [pc, #52]	; (80054a8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8005474:	2200      	movs	r2, #0
 8005476:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005478:	4b0b      	ldr	r3, [pc, #44]	; (80054a8 <_ZL19MX_USART3_UART_Initv+0x60>)
 800547a:	2200      	movs	r2, #0
 800547c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8005480:	2200      	movs	r2, #0
 8005482:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005484:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <_ZL19MX_USART3_UART_Initv+0x60>)
 8005486:	2200      	movs	r2, #0
 8005488:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800548a:	4807      	ldr	r0, [pc, #28]	; (80054a8 <_ZL19MX_USART3_UART_Initv+0x60>)
 800548c:	f7fd ff33 	bl	80032f6 <HAL_UART_Init>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	bf14      	ite	ne
 8005496:	2301      	movne	r3, #1
 8005498:	2300      	moveq	r3, #0
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <_ZL19MX_USART3_UART_Initv+0x5c>
  {
    Error_Handler();
 80054a0:	f000 fa1e 	bl	80058e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80054a4:	bf00      	nop
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	20000104 	.word	0x20000104
 80054ac:	40004800 	.word	0x40004800

080054b0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	; 0x28
 80054b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054b6:	f107 0314 	add.w	r3, r7, #20
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	605a      	str	r2, [r3, #4]
 80054c0:	609a      	str	r2, [r3, #8]
 80054c2:	60da      	str	r2, [r3, #12]
 80054c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80054c6:	4a3a      	ldr	r2, [pc, #232]	; (80055b0 <_ZL12MX_GPIO_Initv+0x100>)
 80054c8:	4b39      	ldr	r3, [pc, #228]	; (80055b0 <_ZL12MX_GPIO_Initv+0x100>)
 80054ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054cc:	f043 0304 	orr.w	r3, r3, #4
 80054d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054d2:	4b37      	ldr	r3, [pc, #220]	; (80055b0 <_ZL12MX_GPIO_Initv+0x100>)
 80054d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054d6:	f003 0304 	and.w	r3, r3, #4
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80054de:	4a34      	ldr	r2, [pc, #208]	; (80055b0 <_ZL12MX_GPIO_Initv+0x100>)
 80054e0:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <_ZL12MX_GPIO_Initv+0x100>)
 80054e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054ea:	4b31      	ldr	r3, [pc, #196]	; (80055b0 <_ZL12MX_GPIO_Initv+0x100>)
 80054ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f2:	60fb      	str	r3, [r7, #12]
 80054f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80054f6:	4a2e      	ldr	r2, [pc, #184]	; (80055b0 <_ZL12MX_GPIO_Initv+0x100>)
 80054f8:	4b2d      	ldr	r3, [pc, #180]	; (80055b0 <_ZL12MX_GPIO_Initv+0x100>)
 80054fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fc:	f043 0301 	orr.w	r3, r3, #1
 8005500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005502:	4b2b      	ldr	r3, [pc, #172]	; (80055b0 <_ZL12MX_GPIO_Initv+0x100>)
 8005504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	60bb      	str	r3, [r7, #8]
 800550c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800550e:	4a28      	ldr	r2, [pc, #160]	; (80055b0 <_ZL12MX_GPIO_Initv+0x100>)
 8005510:	4b27      	ldr	r3, [pc, #156]	; (80055b0 <_ZL12MX_GPIO_Initv+0x100>)
 8005512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005514:	f043 0302 	orr.w	r3, r3, #2
 8005518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800551a:	4b25      	ldr	r3, [pc, #148]	; (80055b0 <_ZL12MX_GPIO_Initv+0x100>)
 800551c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	607b      	str	r3, [r7, #4]
 8005524:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8005526:	2200      	movs	r2, #0
 8005528:	f44f 7191 	mov.w	r1, #290	; 0x122
 800552c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005530:	f7fc f9c2 	bl	80018b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800553a:	4b1e      	ldr	r3, [pc, #120]	; (80055b4 <_ZL12MX_GPIO_Initv+0x104>)
 800553c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800553e:	2300      	movs	r3, #0
 8005540:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8005542:	f107 0314 	add.w	r3, r7, #20
 8005546:	4619      	mov	r1, r3
 8005548:	481b      	ldr	r0, [pc, #108]	; (80055b8 <_ZL12MX_GPIO_Initv+0x108>)
 800554a:	f7fc f849 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800554e:	2301      	movs	r3, #1
 8005550:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005552:	4b1a      	ldr	r3, [pc, #104]	; (80055bc <_ZL12MX_GPIO_Initv+0x10c>)
 8005554:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005556:	2300      	movs	r3, #0
 8005558:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800555a:	f107 0314 	add.w	r3, r7, #20
 800555e:	4619      	mov	r1, r3
 8005560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005564:	f7fc f83c 	bl	80015e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin|GPIO_PIN_8;
 8005568:	f44f 7391 	mov.w	r3, #290	; 0x122
 800556c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800556e:	2301      	movs	r3, #1
 8005570:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005572:	2300      	movs	r3, #0
 8005574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005576:	2300      	movs	r3, #0
 8005578:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800557a:	f107 0314 	add.w	r3, r7, #20
 800557e:	4619      	mov	r1, r3
 8005580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005584:	f7fc f82c 	bl	80015e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005588:	2200      	movs	r2, #0
 800558a:	2100      	movs	r1, #0
 800558c:	2006      	movs	r0, #6
 800558e:	f7fb ffc1 	bl	8001514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005592:	2006      	movs	r0, #6
 8005594:	f7fb fff2 	bl	800157c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8005598:	2200      	movs	r2, #0
 800559a:	2105      	movs	r1, #5
 800559c:	2028      	movs	r0, #40	; 0x28
 800559e:	f7fb ffb9 	bl	8001514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80055a2:	2028      	movs	r0, #40	; 0x28
 80055a4:	f7fb ffea 	bl	800157c <HAL_NVIC_EnableIRQ>

}
 80055a8:	bf00      	nop
 80055aa:	3728      	adds	r7, #40	; 0x28
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40021000 	.word	0x40021000
 80055b4:	10210000 	.word	0x10210000
 80055b8:	48000800 	.word	0x48000800
 80055bc:	10110000 	.word	0x10110000

080055c0 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  {
	  //
	  //printf("\r\nFree Heap size: %d\r\n", (int)xPortGetFreeHeapSize());
	  //printf("Default task stack pre: %lu\r\n", uxTaskGetStackHighWaterMark(NULL));

	  if(client_ready){
 80055c8:	4b07      	ldr	r3, [pc, #28]	; (80055e8 <_Z16StartDefaultTaskPKv+0x28>)
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d007      	beq.n	80055e0 <_Z16StartDefaultTaskPKv+0x20>
		  //Wyslij sygnal do taska odczytu ze powinien teraz sie uruchomic
		  xTaskNotify(askForDataTaskHandle, 0x01, eSetBits);
 80055d0:	4b06      	ldr	r3, [pc, #24]	; (80055ec <_Z16StartDefaultTaskPKv+0x2c>)
 80055d2:	6818      	ldr	r0, [r3, #0]
 80055d4:	2300      	movs	r3, #0
 80055d6:	2201      	movs	r2, #1
 80055d8:	2101      	movs	r1, #1
 80055da:	f7ff fb83 	bl	8004ce4 <xTaskGenericNotify>
 80055de:	e7f3      	b.n	80055c8 <_Z16StartDefaultTaskPKv+0x8>
	  }
	  else {
	  	  MX_BlueNRG_MS_Process();
 80055e0:	f7ff fc84 	bl	8004eec <MX_BlueNRG_MS_Process>
	  if(client_ready){
 80055e4:	e7f0      	b.n	80055c8 <_Z16StartDefaultTaskPKv+0x8>
 80055e6:	bf00      	nop
 80055e8:	200036bb 	.word	0x200036bb
 80055ec:	20000188 	.word	0x20000188

080055f0 <_Z20AskForDataTaskThreadPKv>:
  /* USER CODE END 5 */ 
}

/* USER CODE BEGIN 6 */
void AskForDataTaskThread(void const * argument)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b084      	sub	sp, #16
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
	/* Podejscie: trzy taski - supervisor -> odczyt -> prezentacja: task odczytu danych */
	uint32_t notifValue;
	/* Infinite loop */
	for(;;)
	{
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 80055f8:	f107 020c 	add.w	r2, r7, #12
 80055fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005600:	21ff      	movs	r1, #255	; 0xff
 8005602:	2000      	movs	r0, #0
 8005604:	f7ff fb28 	bl	8004c58 <xTaskNotifyWait>
		if((notifValue&0x01) != 0x00) //Sprawdza czy notifValue zawiera wartosc ktora wyslal task supervisora
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d0f2      	beq.n	80055f8 <_Z20AskForDataTaskThreadPKv+0x8>
//		  if(counter == 4){
//			  prepareNewConfig(DHT22, 4, (uint8_t *)"Kuchnia1");
//		  }
//		  counter++;

	      MX_BlueNRG_MS_Process();
 8005612:	f7ff fc6b 	bl	8004eec <MX_BlueNRG_MS_Process>

	      //!!!
//	      /*while*/if(newData > 0){ //uruchom task prezentacji tylko wtedy, gdy przyjda nowe dane

	      //!
	      if(newDataPresent == true){ //uruchom task prezentacji tylko wtedy, gdy przyjda nowe dane
 8005616:	4b07      	ldr	r3, [pc, #28]	; (8005634 <_Z20AskForDataTaskThreadPKv+0x44>)
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d0ec      	beq.n	80055f8 <_Z20AskForDataTaskThreadPKv+0x8>
	       	  newDataPresent = false;
 800561e:	4b05      	ldr	r3, [pc, #20]	; (8005634 <_Z20AskForDataTaskThreadPKv+0x44>)
 8005620:	2200      	movs	r2, #0
 8005622:	701a      	strb	r2, [r3, #0]
	    	  //Wyslij sygnal do taska od prezentacji ze powinien teraz sie uruchomic
	    	  xTaskNotify(presentationTaskHandle, 0x02, eSetBits);
 8005624:	4b04      	ldr	r3, [pc, #16]	; (8005638 <_Z20AskForDataTaskThreadPKv+0x48>)
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	2300      	movs	r3, #0
 800562a:	2201      	movs	r2, #1
 800562c:	2102      	movs	r1, #2
 800562e:	f7ff fb59 	bl	8004ce4 <xTaskGenericNotify>
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 8005632:	e7e1      	b.n	80055f8 <_Z20AskForDataTaskThreadPKv+0x8>
 8005634:	200001b6 	.word	0x200001b6
 8005638:	2000018c 	.word	0x2000018c

0800563c <_Z22PresentationTaskThreadPKv>:
		}
	}
}

void PresentationTaskThread(void const * argument)
{
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b08f      	sub	sp, #60	; 0x3c
 8005640:	af02      	add	r7, sp, #8
 8005642:	6078      	str	r0, [r7, #4]
	uint32_t notifValue;
	/* Infinite loop */
	for(;;)
	{
		//Czekaj na sygnal od taska odczytu
		xTaskNotifyWait(pdFALSE, 0xFF, &notifValue, portMAX_DELAY);
 8005644:	f107 0218 	add.w	r2, r7, #24
 8005648:	f04f 33ff 	mov.w	r3, #4294967295
 800564c:	21ff      	movs	r1, #255	; 0xff
 800564e:	2000      	movs	r0, #0
 8005650:	f7ff fb02 	bl	8004c58 <xTaskNotifyWait>
		if((notifValue&0x02) != 0x00) //Sprawdza czy notifValue zawiera wartosc ktora wyslal task odczytu
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d0f2      	beq.n	8005644 <_Z22PresentationTaskThreadPKv+0x8>
			//printf("Presentation task stack pre: %lu\r\n", uxTaskGetStackHighWaterMark(NULL));


			//Format: nazwa_czujnika '\0' dane
			char name[MAX_NAME_LEN]; int i;
			memset(name, 0x00, sizeof(name));
 800565e:	f107 030c 	add.w	r3, r7, #12
 8005662:	220c      	movs	r2, #12
 8005664:	2100      	movs	r1, #0
 8005666:	4618      	mov	r0, r3
 8005668:	f000 ffcd 	bl	8006606 <memset>
			//
			if(newData){ //problem klienta byl z synchronizacja wartosci tej zmiennej? chcial wypisywac dataBLE[-1][..]?
 800566c:	4b7c      	ldr	r3, [pc, #496]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0e7      	beq.n	8005644 <_Z22PresentationTaskThreadPKv+0x8>
				newData--;
 8005674:	4b7a      	ldr	r3, [pc, #488]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	3b01      	subs	r3, #1
 800567a:	b2da      	uxtb	r2, r3
 800567c:	4b78      	ldr	r3, [pc, #480]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 800567e:	701a      	strb	r2, [r3, #0]
//				newData = 0; //problem klienta byl z synchronizacja wartosci tej zmiennej? chcial wypisywac dataBLE[-1][..]?
				for(i=0; dataBLE[newData][i] != '\0' && i<MAX_NAME_LEN; i++){
 8005680:	2300      	movs	r3, #0
 8005682:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005684:	4b76      	ldr	r3, [pc, #472]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 8005686:	781b      	ldrb	r3, [r3, #0]
 8005688:	4619      	mov	r1, r3
 800568a:	4a76      	ldr	r2, [pc, #472]	; (8005864 <_Z22PresentationTaskThreadPKv+0x228>)
 800568c:	460b      	mov	r3, r1
 800568e:	009b      	lsls	r3, r3, #2
 8005690:	440b      	add	r3, r1
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	441a      	add	r2, r3
 8005696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005698:	4413      	add	r3, r2
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d018      	beq.n	80056d2 <_Z22PresentationTaskThreadPKv+0x96>
 80056a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a2:	2b0b      	cmp	r3, #11
 80056a4:	dc15      	bgt.n	80056d2 <_Z22PresentationTaskThreadPKv+0x96>
					name[i] = dataBLE[newData][i];
 80056a6:	4b6e      	ldr	r3, [pc, #440]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	4619      	mov	r1, r3
 80056ac:	4a6d      	ldr	r2, [pc, #436]	; (8005864 <_Z22PresentationTaskThreadPKv+0x228>)
 80056ae:	460b      	mov	r3, r1
 80056b0:	009b      	lsls	r3, r3, #2
 80056b2:	440b      	add	r3, r1
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	441a      	add	r2, r3
 80056b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ba:	4413      	add	r3, r2
 80056bc:	7819      	ldrb	r1, [r3, #0]
 80056be:	f107 020c 	add.w	r2, r7, #12
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	4413      	add	r3, r2
 80056c6:	460a      	mov	r2, r1
 80056c8:	701a      	strb	r2, [r3, #0]
				for(i=0; dataBLE[newData][i] != '\0' && i<MAX_NAME_LEN; i++){
 80056ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056cc:	3301      	adds	r3, #1
 80056ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056d0:	e7d8      	b.n	8005684 <_Z22PresentationTaskThreadPKv+0x48>
				}
//				for(i=0; dataBLE[i] != '\0' && i<MAX_NAME_LEN; i++){
//					name[i] = dataBLE[i];
//				}
				printf("\r\nCzujnik %s\r\n", name);
 80056d2:	f107 030c 	add.w	r3, r7, #12
 80056d6:	4619      	mov	r1, r3
 80056d8:	4863      	ldr	r0, [pc, #396]	; (8005868 <_Z22PresentationTaskThreadPKv+0x22c>)
 80056da:	f001 f849 	bl	8006770 <iprintf>

				uint32_t dataBits = (dataBLE[newData][i+1] << 24) + (dataBLE[newData][i+2] << 16)
 80056de:	4b60      	ldr	r3, [pc, #384]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056e6:	1c5a      	adds	r2, r3, #1
 80056e8:	495e      	ldr	r1, [pc, #376]	; (8005864 <_Z22PresentationTaskThreadPKv+0x228>)
 80056ea:	4603      	mov	r3, r0
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4403      	add	r3, r0
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	440b      	add	r3, r1
 80056f4:	4413      	add	r3, r2
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	061a      	lsls	r2, r3, #24
 80056fa:	4b59      	ldr	r3, [pc, #356]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	461c      	mov	r4, r3
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	1c99      	adds	r1, r3, #2
 8005704:	4857      	ldr	r0, [pc, #348]	; (8005864 <_Z22PresentationTaskThreadPKv+0x228>)
 8005706:	4623      	mov	r3, r4
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	4423      	add	r3, r4
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4403      	add	r3, r0
 8005710:	440b      	add	r3, r1
 8005712:	781b      	ldrb	r3, [r3, #0]
 8005714:	041b      	lsls	r3, r3, #16
 8005716:	441a      	add	r2, r3
								  + (dataBLE[newData][i+3] << 8)  + (dataBLE[newData][i+4]);
 8005718:	4b51      	ldr	r3, [pc, #324]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	461c      	mov	r4, r3
 800571e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005720:	1cd9      	adds	r1, r3, #3
 8005722:	4850      	ldr	r0, [pc, #320]	; (8005864 <_Z22PresentationTaskThreadPKv+0x228>)
 8005724:	4623      	mov	r3, r4
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4423      	add	r3, r4
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4403      	add	r3, r0
 800572e:	440b      	add	r3, r1
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	441a      	add	r2, r3
 8005736:	4b4a      	ldr	r3, [pc, #296]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	461c      	mov	r4, r3
 800573c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573e:	1d19      	adds	r1, r3, #4
 8005740:	4848      	ldr	r0, [pc, #288]	; (8005864 <_Z22PresentationTaskThreadPKv+0x228>)
 8005742:	4623      	mov	r3, r4
 8005744:	009b      	lsls	r3, r3, #2
 8005746:	4423      	add	r3, r4
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4403      	add	r3, r0
 800574c:	440b      	add	r3, r1
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	4413      	add	r3, r2
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
				uint8_t checksumBits = dataBLE[newData][i+5];
 8005754:	4b42      	ldr	r3, [pc, #264]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	4618      	mov	r0, r3
 800575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800575c:	1d5a      	adds	r2, r3, #5
 800575e:	4941      	ldr	r1, [pc, #260]	; (8005864 <_Z22PresentationTaskThreadPKv+0x228>)
 8005760:	4603      	mov	r3, r0
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	4403      	add	r3, r0
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	4413      	add	r3, r2
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if(checkIfTempSensorReadoutCorrect(dataBits, checksumBits)){
 8005772:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005776:	4619      	mov	r1, r3
 8005778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800577a:	f000 f87b 	bl	8005874 <_Z31checkIfTempSensorReadoutCorrectmh>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	f43f af5f 	beq.w	8005644 <_Z22PresentationTaskThreadPKv+0x8>
					uint16_t humid = (dataBLE[newData][i+1] << 8) | dataBLE[newData][i+2];
 8005786:	4b36      	ldr	r3, [pc, #216]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	4934      	ldr	r1, [pc, #208]	; (8005864 <_Z22PresentationTaskThreadPKv+0x228>)
 8005792:	4603      	mov	r3, r0
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	4403      	add	r3, r0
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	440b      	add	r3, r1
 800579c:	4413      	add	r3, r2
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	b21a      	sxth	r2, r3
 80057a4:	4b2e      	ldr	r3, [pc, #184]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	461c      	mov	r4, r3
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	1c99      	adds	r1, r3, #2
 80057ae:	482d      	ldr	r0, [pc, #180]	; (8005864 <_Z22PresentationTaskThreadPKv+0x228>)
 80057b0:	4623      	mov	r3, r4
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	4423      	add	r3, r4
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4403      	add	r3, r0
 80057ba:	440b      	add	r3, r1
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	b21b      	sxth	r3, r3
 80057c0:	4313      	orrs	r3, r2
 80057c2:	b21b      	sxth	r3, r3
 80057c4:	84bb      	strh	r3, [r7, #36]	; 0x24
					uint16_t temp  = (dataBLE[newData][i+3] << 8) | dataBLE[newData][i+4];
 80057c6:	4b26      	ldr	r3, [pc, #152]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	4618      	mov	r0, r3
 80057cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ce:	1cda      	adds	r2, r3, #3
 80057d0:	4924      	ldr	r1, [pc, #144]	; (8005864 <_Z22PresentationTaskThreadPKv+0x228>)
 80057d2:	4603      	mov	r3, r0
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4403      	add	r3, r0
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	440b      	add	r3, r1
 80057dc:	4413      	add	r3, r2
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	b21a      	sxth	r2, r3
 80057e4:	4b1e      	ldr	r3, [pc, #120]	; (8005860 <_Z22PresentationTaskThreadPKv+0x224>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	461c      	mov	r4, r3
 80057ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ec:	1d19      	adds	r1, r3, #4
 80057ee:	481d      	ldr	r0, [pc, #116]	; (8005864 <_Z22PresentationTaskThreadPKv+0x228>)
 80057f0:	4623      	mov	r3, r4
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4423      	add	r3, r4
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	4403      	add	r3, r0
 80057fa:	440b      	add	r3, r1
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	b21b      	sxth	r3, r3
 8005800:	4313      	orrs	r3, r2
 8005802:	b21b      	sxth	r3, r3
 8005804:	847b      	strh	r3, [r7, #34]	; 0x22
	//			uint8_t checksumBits = dataBLE[i+5];
	//			if(checkIfTempSensorReadoutCorrect(dataBits, checksumBits)){
	//				uint16_t humid = (dataBLE[i+1] << 8) | dataBLE[i+2];
	//				uint16_t temp  = (dataBLE[i+3] << 8) | dataBLE[i+4];

					uint16_t humidDecimal = humid%10;
 8005806:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005808:	4b18      	ldr	r3, [pc, #96]	; (800586c <_Z22PresentationTaskThreadPKv+0x230>)
 800580a:	fba3 1302 	umull	r1, r3, r3, r2
 800580e:	08d9      	lsrs	r1, r3, #3
 8005810:	460b      	mov	r3, r1
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	843b      	strh	r3, [r7, #32]
					uint16_t tempDecimal  = temp%10;
 800581c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800581e:	4b13      	ldr	r3, [pc, #76]	; (800586c <_Z22PresentationTaskThreadPKv+0x230>)
 8005820:	fba3 1302 	umull	r1, r3, r3, r2
 8005824:	08d9      	lsrs	r1, r3, #3
 8005826:	460b      	mov	r3, r1
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	005b      	lsls	r3, r3, #1
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	83fb      	strh	r3, [r7, #30]
					temp = temp/(uint16_t)10;
 8005832:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005834:	4a0d      	ldr	r2, [pc, #52]	; (800586c <_Z22PresentationTaskThreadPKv+0x230>)
 8005836:	fba2 2303 	umull	r2, r3, r2, r3
 800583a:	08db      	lsrs	r3, r3, #3
 800583c:	847b      	strh	r3, [r7, #34]	; 0x22
					humid= humid/(uint16_t)10;
 800583e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005840:	4a0a      	ldr	r2, [pc, #40]	; (800586c <_Z22PresentationTaskThreadPKv+0x230>)
 8005842:	fba2 2303 	umull	r2, r3, r2, r3
 8005846:	08db      	lsrs	r3, r3, #3
 8005848:	84bb      	strh	r3, [r7, #36]	; 0x24
					//xQueueSend(msgQueueHandle, (uint8_t *)uartData, 100);
					printf("Temperatura\t %hu.%huC\r\nWilgotnosc\t %hu.%hu%%\r\n",
 800584a:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800584c:	8bfa      	ldrh	r2, [r7, #30]
 800584e:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8005850:	8c3b      	ldrh	r3, [r7, #32]
							  temp, tempDecimal, humid, humidDecimal);
 8005852:	9300      	str	r3, [sp, #0]
 8005854:	4603      	mov	r3, r0
 8005856:	4806      	ldr	r0, [pc, #24]	; (8005870 <_Z22PresentationTaskThreadPKv+0x234>)
 8005858:	f000 ff8a 	bl	8006770 <iprintf>
				}
			}
		}
	}
 800585c:	e6f2      	b.n	8005644 <_Z22PresentationTaskThreadPKv+0x8>
 800585e:	bf00      	nop
 8005860:	200001b5 	.word	0x200001b5
 8005864:	200000a0 	.word	0x200000a0
 8005868:	080073a0 	.word	0x080073a0
 800586c:	cccccccd 	.word	0xcccccccd
 8005870:	080073b0 	.word	0x080073b0

08005874 <_Z31checkIfTempSensorReadoutCorrectmh>:
		sentConfigurationMsg[i] = '\0';
	}
	newConfig = true;
}

bool checkIfTempSensorReadoutCorrect(uint32_t dataBits, uint8_t checksumBits){
 8005874:	b480      	push	{r7}
 8005876:	b085      	sub	sp, #20
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	460b      	mov	r3, r1
 800587e:	70fb      	strb	r3, [r7, #3]
	uint8_t value = ((dataBits >> 24) & 0xFF) + ((dataBits >> 16) & 0xFF) + ((dataBits >> 8) & 0xFF) + (dataBits & 0xFF);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	0e1b      	lsrs	r3, r3, #24
 8005884:	b2da      	uxtb	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	b2db      	uxtb	r3, r3
 800588c:	4413      	add	r3, r2
 800588e:	b2da      	uxtb	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	0a1b      	lsrs	r3, r3, #8
 8005894:	b2db      	uxtb	r3, r3
 8005896:	4413      	add	r3, r2
 8005898:	b2da      	uxtb	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	4413      	add	r3, r2
 80058a0:	73fb      	strb	r3, [r7, #15]
	if(value == checksumBits)
 80058a2:	7bfa      	ldrb	r2, [r7, #15]
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d101      	bne.n	80058ae <_Z31checkIfTempSensorReadoutCorrectmh+0x3a>
		return true;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e000      	b.n	80058b0 <_Z31checkIfTempSensorReadoutCorrectmh+0x3c>
	return false;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a04      	ldr	r2, [pc, #16]	; (80058dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d101      	bne.n	80058d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80058ce:	f7fb fde9 	bl	80014a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80058d2:	bf00      	nop
 80058d4:	3708      	adds	r7, #8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40000400 	.word	0x40000400

080058e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80058e0:	b480      	push	{r7}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80058e4:	bf00      	nop
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr
	...

080058f0 <Make_Connection>:
 * @brief  Make the device connectable
 * @param  None 
 * @retval None
 */
void Make_Connection(void)
{  
 80058f0:	b530      	push	{r4, r5, lr}
    tBleStatus ret;
    
    printf("Client Create Connection\n");
 80058f2:	4818      	ldr	r0, [pc, #96]	; (8005954 <Make_Connection+0x64>)
{  
 80058f4:	b08d      	sub	sp, #52	; 0x34
    printf("Client Create Connection\n");
 80058f6:	f000 ffc3 	bl	8006880 <puts>

    tBDAddr bdaddr1 = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 80058fa:	4a17      	ldr	r2, [pc, #92]	; (8005958 <Make_Connection+0x68>)
 80058fc:	6810      	ldr	r0, [r2, #0]
 80058fe:	8893      	ldrh	r3, [r2, #4]
 8005900:	9008      	str	r0, [sp, #32]
    tBDAddr bdaddr2 = {0xcc, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8005902:	f852 0f06 	ldr.w	r0, [r2, #6]!
    tBDAddr bdaddr1 = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8005906:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    tBDAddr bdaddr2 = {0xcc, 0x00, 0x00, 0xE1, 0x80, 0x02};
 800590a:	900a      	str	r0, [sp, #40]	; 0x28
 800590c:	8893      	ldrh	r3, [r2, #4]
 800590e:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c

    BSP_LED_On(LED2); //To indicate the start of the connection and discovery phase
 8005912:	2000      	movs	r0, #0
 8005914:	f000 faa0 	bl	8005e58 <BSP_LED_On>
    ret = aci_gap_create_connection(
    		SCAN_P/*0x0010*/, /* 10240 msec = Time interval from when the Controller started its last scan until it begins the subsequent scan = how long to wait between scans (for a number N, Time = N x 0.625 msec) */
    		SCAN_L/*0x0010*/, /* 10240 msec = Scan Window: amount of time for the duration of the LE scan = how long to scan (for a number N, Time = N x 0.625 msec) */
			PUBLIC_ADDR, /* Peer_Address_Type */
//			bdaddr, /* Peer_Address */
			((whichServerConnecting == 1) ? bdaddr1 : bdaddr2),
 8005918:	4b10      	ldr	r3, [pc, #64]	; (800595c <Make_Connection+0x6c>)
    ret = aci_gap_create_connection(
 800591a:	220c      	movs	r2, #12
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	9206      	str	r2, [sp, #24]
 8005920:	2128      	movs	r1, #40	; 0x28
 8005922:	9205      	str	r2, [sp, #20]
 8005924:	223c      	movs	r2, #60	; 0x3c
    tBDAddr bdaddr1 = {0xaa, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8005926:	ad08      	add	r5, sp, #32
    tBDAddr bdaddr2 = {0xcc, 0x00, 0x00, 0xE1, 0x80, 0x02};
 8005928:	ac0a      	add	r4, sp, #40	; 0x28
    ret = aci_gap_create_connection(
 800592a:	9204      	str	r2, [sp, #16]
 800592c:	9102      	str	r1, [sp, #8]
 800592e:	2200      	movs	r2, #0
 8005930:	9101      	str	r1, [sp, #4]
 8005932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005936:	9203      	str	r2, [sp, #12]
 8005938:	9200      	str	r2, [sp, #0]
 800593a:	2b01      	cmp	r3, #1
 800593c:	bf0c      	ite	eq
 800593e:	462b      	moveq	r3, r5
 8005940:	4623      	movne	r3, r4
 8005942:	4608      	mov	r0, r1
 8005944:	f7fd fd43 	bl	80033ce <aci_gap_create_connection>
            SUPERV_TIMEOUT/*0x0C80*/, /* 600 msec = Supervision Timeout (reset upon reception of a valid packet) max time between 2 packets before connection is considered lost (Time = N x 10 msec) */
			//!dopiero po zmianie dwoch parametrow nizej udaje sie stworzyc drugie polaczenie!
			/*CONN_L1*/0x000C, /* 1250 msec = Minimum Connection Length (for a number N, Time = N x 0.625 msec) */
			/*CONN_L2*/0x000C  /* 1250 msec = Maximal Connection Length (for a number N, Time = N x 0.625 msec) */
	);
    if (ret != BLE_STATUS_SUCCESS){
 8005948:	b110      	cbz	r0, 8005950 <Make_Connection+0x60>
      printf("Error while starting connection.\n");
 800594a:	4805      	ldr	r0, [pc, #20]	; (8005960 <Make_Connection+0x70>)
 800594c:	f000 ff98 	bl	8006880 <puts>
    }
}
 8005950:	b00d      	add	sp, #52	; 0x34
 8005952:	bd30      	pop	{r4, r5, pc}
 8005954:	08007532 	.word	0x08007532
 8005958:	0800740f 	.word	0x0800740f
 800595c:	2000000d 	.word	0x2000000d
 8005960:	0800754b 	.word	0x0800754b

08005964 <startReadTXCharHandle>:
 * @brief  Discovery TX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadTXCharHandle(void)
{
 8005964:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_tx_char_handle)
 8005966:	4d13      	ldr	r5, [pc, #76]	; (80059b4 <startReadTXCharHandle+0x50>)
 8005968:	782a      	ldrb	r2, [r5, #0]
{
 800596a:	b087      	sub	sp, #28
  if (!start_read_tx_char_handle)
 800596c:	b9fa      	cbnz	r2, 80059ae <startReadTXCharHandle+0x4a>
  {    
    PRINTF("Start reading TX Char Handle\n");
    
    //TODO inne charakterystyki TX, RX (roznica na 12. bajcie)
	/*const*/ uint8_t charUuid128_TX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe1/*0xe4*/,0xf2,0x73,0xd9};
 800596e:	4b12      	ldr	r3, [pc, #72]	; (80059b8 <startReadTXCharHandle+0x54>)
 8005970:	aa02      	add	r2, sp, #8
 8005972:	f103 0710 	add.w	r7, r3, #16
 8005976:	4616      	mov	r6, r2
 8005978:	6818      	ldr	r0, [r3, #0]
 800597a:	6859      	ldr	r1, [r3, #4]
 800597c:	4614      	mov	r4, r2
 800597e:	c403      	stmia	r4!, {r0, r1}
 8005980:	3308      	adds	r3, #8
 8005982:	42bb      	cmp	r3, r7
 8005984:	4622      	mov	r2, r4
 8005986:	d1f7      	bne.n	8005978 <startReadTXCharHandle+0x14>
    if(whichServerConnecting == 1){}
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <startReadTXCharHandle+0x58>)
    	/* OK */
    else if(whichServerConnecting == 2)
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	2b02      	cmp	r3, #2
    	charUuid128_TX[12] = 0xe4;
 800598e:	bf04      	itt	eq
 8005990:	23e4      	moveq	r3, #228	; 0xe4
 8005992:	f88d 3014 	strbeq.w	r3, [sp, #20]
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_TX);
 8005996:	4b0a      	ldr	r3, [pc, #40]	; (80059c0 <startReadTXCharHandle+0x5c>)
 8005998:	8818      	ldrh	r0, [r3, #0]
 800599a:	9600      	str	r6, [sp, #0]
 800599c:	2302      	movs	r3, #2
 800599e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059a2:	2101      	movs	r1, #1
 80059a4:	b280      	uxth	r0, r0
 80059a6:	f7fd fd7c 	bl	80034a2 <aci_gatt_disc_charac_by_uuid>
    start_read_tx_char_handle = TRUE;
 80059aa:	2301      	movs	r3, #1
 80059ac:	702b      	strb	r3, [r5, #0]
  }
}
 80059ae:	b007      	add	sp, #28
 80059b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b2:	bf00      	nop
 80059b4:	200036c6 	.word	0x200036c6
 80059b8:	080073ef 	.word	0x080073ef
 80059bc:	2000000d 	.word	0x2000000d
 80059c0:	200036c0 	.word	0x200036c0

080059c4 <startReadRXCharHandle>:
 * @brief  Discovery RX characteristic handle by UUID 128 bits
 * @param  None 
 * @retval None
 */
void startReadRXCharHandle(void)
{  
 80059c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (!start_read_rx_char_handle)
 80059c6:	4d13      	ldr	r5, [pc, #76]	; (8005a14 <startReadRXCharHandle+0x50>)
 80059c8:	782a      	ldrb	r2, [r5, #0]
{  
 80059ca:	b087      	sub	sp, #28
  if (!start_read_rx_char_handle)
 80059cc:	b9fa      	cbnz	r2, 8005a0e <startReadRXCharHandle+0x4a>
  {
    PRINTF("Start reading RX Char Handle\n");
    
    //TODO inne charakterystyki TX, RX (roznica na 3. bajcie)
    /*const*/ uint8_t charUuid128_RX[16] = {0x66,0x9a,0x0c,0x20,0x00,0x08,0x96,0x9e,0xe2,0x11,0x9e,0xb1,0xe2/*0xe5*/,0xf2,0x73,0xd9};
 80059ce:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <startReadRXCharHandle+0x54>)
 80059d0:	aa02      	add	r2, sp, #8
 80059d2:	f103 0710 	add.w	r7, r3, #16
 80059d6:	4616      	mov	r6, r2
 80059d8:	6818      	ldr	r0, [r3, #0]
 80059da:	6859      	ldr	r1, [r3, #4]
 80059dc:	4614      	mov	r4, r2
 80059de:	c403      	stmia	r4!, {r0, r1}
 80059e0:	3308      	adds	r3, #8
 80059e2:	42bb      	cmp	r3, r7
 80059e4:	4622      	mov	r2, r4
 80059e6:	d1f7      	bne.n	80059d8 <startReadRXCharHandle+0x14>
    if(whichServerConnecting == 1) {}
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <startReadRXCharHandle+0x58>)
    	/* OK */
    else if(whichServerConnecting == 2)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b02      	cmp	r3, #2
    	charUuid128_RX[12] = 0xe5;
 80059ee:	bf04      	itt	eq
 80059f0:	23e5      	moveq	r3, #229	; 0xe5
 80059f2:	f88d 3014 	strbeq.w	r3, [sp, #20]
    aci_gatt_disc_charac_by_uuid(connection_handle, 0x0001, 0xFFFF, UUID_TYPE_128, charUuid128_RX);
 80059f6:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <startReadRXCharHandle+0x5c>)
 80059f8:	8818      	ldrh	r0, [r3, #0]
 80059fa:	9600      	str	r6, [sp, #0]
 80059fc:	2302      	movs	r3, #2
 80059fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a02:	2101      	movs	r1, #1
 8005a04:	b280      	uxth	r0, r0
 8005a06:	f7fd fd4c 	bl	80034a2 <aci_gatt_disc_charac_by_uuid>
    start_read_rx_char_handle = TRUE;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	702b      	strb	r3, [r5, #0]
  }
}
 8005a0e:	b007      	add	sp, #28
 8005a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a12:	bf00      	nop
 8005a14:	200036c5 	.word	0x200036c5
 8005a18:	080073ff 	.word	0x080073ff
 8005a1c:	2000000d 	.word	0x2000000d
 8005a20:	200036c0 	.word	0x200036c0

08005a24 <receiveData>:
 * @param  data_buffer : pointer to store in received data
 * @param  Nb_bytes : number of bytes to be received
 * @retval None
 */
void receiveData(uint8_t* data_buffer, uint8_t Nb_bytes)
{
 8005a24:	b570      	push	{r4, r5, r6, lr}
 8005a26:	4605      	mov	r5, r0
  BSP_LED_Off(LED2);
 8005a28:	2000      	movs	r0, #0
{
 8005a2a:	460e      	mov	r6, r1
  BSP_LED_Off(LED2);
 8005a2c:	f000 fa1d 	bl	8005e6a <BSP_LED_Off>

  for(int i = 0; i < Nb_bytes; i++) {
 8005a30:	462c      	mov	r4, r5
 8005a32:	1b63      	subs	r3, r4, r5
 8005a34:	429e      	cmp	r6, r3
 8005a36:	dc06      	bgt.n	8005a46 <receiveData+0x22>
    printf("%c", data_buffer[i]);
  } //obudowac do wysylania
  // tu moze byc obudowa uartowa/samo wysylanie wartosci temp i wilgotnosci
  fflush(stdout);
 8005a38:	4b05      	ldr	r3, [pc, #20]	; (8005a50 <receiveData+0x2c>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
}
 8005a3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  fflush(stdout);
 8005a40:	6898      	ldr	r0, [r3, #8]
 8005a42:	f000 bcd5 	b.w	80063f0 <fflush>
    printf("%c", data_buffer[i]);
 8005a46:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005a4a:	f000 fea9 	bl	80067a0 <putchar>
 8005a4e:	e7f0      	b.n	8005a32 <receiveData+0xe>
 8005a50:	20000020 	.word	0x20000020

08005a54 <enableNotification>:
 * @brief  Enable notification
 * @param  None 
 * @retval None
 */
void enableNotification(void)
{
 8005a54:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t client_char_conf_data[] = {0x01, 0x00}; /* Enable notifications */
 8005a56:	2301      	movs	r3, #1
 8005a58:	f88d 3004 	strb.w	r3, [sp, #4]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	f88d 3005 	strb.w	r3, [sp, #5]
  
  uint32_t tickstart = HAL_GetTick();
 8005a62:	f7fb fd2b 	bl	80014bc <HAL_GetTick>
  
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){ /* ? */
 8005a66:	4d0d      	ldr	r5, [pc, #52]	; (8005a9c <enableNotification+0x48>)
 8005a68:	4c0d      	ldr	r4, [pc, #52]	; (8005aa0 <enableNotification+0x4c>)
  uint32_t tickstart = HAL_GetTick();
 8005a6a:	4606      	mov	r6, r0
  while(aci_gatt_write_charac_descriptor(connection_handle, tx_handle+2, 2, client_char_conf_data)==BLE_STATUS_NOT_ALLOWED){ /* ? */
 8005a6c:	8821      	ldrh	r1, [r4, #0]
 8005a6e:	8828      	ldrh	r0, [r5, #0]
 8005a70:	3102      	adds	r1, #2
 8005a72:	ab01      	add	r3, sp, #4
 8005a74:	2202      	movs	r2, #2
 8005a76:	b289      	uxth	r1, r1
 8005a78:	b280      	uxth	r0, r0
 8005a7a:	f7fd fd48 	bl	800350e <aci_gatt_write_charac_descriptor>
 8005a7e:	2846      	cmp	r0, #70	; 0x46
 8005a80:	d106      	bne.n	8005a90 <enableNotification+0x3c>
    /* Radio is busy */
    if ((HAL_GetTick() - tickstart) > (10*HCI_DEFAULT_TIMEOUT_MS)) break;
 8005a82:	f7fb fd1b 	bl	80014bc <HAL_GetTick>
 8005a86:	f242 7310 	movw	r3, #10000	; 0x2710
 8005a8a:	1b80      	subs	r0, r0, r6
 8005a8c:	4298      	cmp	r0, r3
 8005a8e:	d9ed      	bls.n	8005a6c <enableNotification+0x18>
  }
  notification_enabled = TRUE;
 8005a90:	4b04      	ldr	r3, [pc, #16]	; (8005aa4 <enableNotification+0x50>)
 8005a92:	2201      	movs	r2, #1
 8005a94:	701a      	strb	r2, [r3, #0]
}
 8005a96:	b002      	add	sp, #8
 8005a98:	bd70      	pop	{r4, r5, r6, pc}
 8005a9a:	bf00      	nop
 8005a9c:	200036c0 	.word	0x200036c0
 8005aa0:	200036f4 	.word	0x200036f4
 8005aa4:	200036c4 	.word	0x200036c4

08005aa8 <Attribute_Modified_CB>:
 * @param  att_data : pointer to the modified attribute data
 * @retval None
 */
void Attribute_Modified_CB(uint16_t handle, uint8_t data_length, uint8_t *att_data)
{
  if(handle == RXCharHandle + 1){
 8005aa8:	4b09      	ldr	r3, [pc, #36]	; (8005ad0 <Attribute_Modified_CB+0x28>)
 8005aaa:	881b      	ldrh	r3, [r3, #0]
 8005aac:	3301      	adds	r3, #1
 8005aae:	4298      	cmp	r0, r3
 8005ab0:	d102      	bne.n	8005ab8 <Attribute_Modified_CB+0x10>
    receiveData(att_data, data_length);
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f7ff bfb6 	b.w	8005a24 <receiveData>
  } else if (handle == TXCharHandle + 2) {        
 8005ab8:	4b06      	ldr	r3, [pc, #24]	; (8005ad4 <Attribute_Modified_CB+0x2c>)
 8005aba:	881b      	ldrh	r3, [r3, #0]
 8005abc:	3302      	adds	r3, #2
 8005abe:	4298      	cmp	r0, r3
 8005ac0:	d104      	bne.n	8005acc <Attribute_Modified_CB+0x24>
    if(att_data[0] == 0x01)
 8005ac2:	7813      	ldrb	r3, [r2, #0]
 8005ac4:	2b01      	cmp	r3, #1
      notification_enabled = TRUE;
 8005ac6:	bf04      	itt	eq
 8005ac8:	4a03      	ldreq	r2, [pc, #12]	; (8005ad8 <Attribute_Modified_CB+0x30>)
 8005aca:	7013      	strbeq	r3, [r2, #0]
 8005acc:	4770      	bx	lr
 8005ace:	bf00      	nop
 8005ad0:	200036fc 	.word	0x200036fc
 8005ad4:	200036f8 	.word	0x200036f8
 8005ad8:	200036c4 	.word	0x200036c4

08005adc <GAP_ConnectionComplete_CB>:
 * @param  addr : Address of peer device
 * @param  handle : Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
 8005adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  connected = TRUE;
 8005ade:	4b0c      	ldr	r3, [pc, #48]	; (8005b10 <GAP_ConnectionComplete_CB+0x34>)
  connection_handle = handle;
  
  printf("Connected to device:");
  for(int i = 5; i > 0; i--){
    printf("%02X-", addr[i]);
 8005ae0:	4f0c      	ldr	r7, [pc, #48]	; (8005b14 <GAP_ConnectionComplete_CB+0x38>)
  connected = TRUE;
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]
  connection_handle = handle;
 8005ae6:	4b0c      	ldr	r3, [pc, #48]	; (8005b18 <GAP_ConnectionComplete_CB+0x3c>)
{  
 8005ae8:	4604      	mov	r4, r0
  printf("Connected to device:");
 8005aea:	480c      	ldr	r0, [pc, #48]	; (8005b1c <GAP_ConnectionComplete_CB+0x40>)
  connection_handle = handle;
 8005aec:	8019      	strh	r1, [r3, #0]
  printf("Connected to device:");
 8005aee:	f000 fe3f 	bl	8006770 <iprintf>
 8005af2:	1da5      	adds	r5, r4, #6
 8005af4:	1c66      	adds	r6, r4, #1
    printf("%02X-", addr[i]);
 8005af6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005afa:	4638      	mov	r0, r7
 8005afc:	f000 fe38 	bl	8006770 <iprintf>
  for(int i = 5; i > 0; i--){
 8005b00:	42b5      	cmp	r5, r6
 8005b02:	d1f8      	bne.n	8005af6 <GAP_ConnectionComplete_CB+0x1a>
  }
  printf("%02X\n", addr[0]);
 8005b04:	7821      	ldrb	r1, [r4, #0]
 8005b06:	4806      	ldr	r0, [pc, #24]	; (8005b20 <GAP_ConnectionComplete_CB+0x44>)
}
 8005b08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  printf("%02X\n", addr[0]);
 8005b0c:	f000 be30 	b.w	8006770 <iprintf>
 8005b10:	200036bc 	.word	0x200036bc
 8005b14:	08007519 	.word	0x08007519
 8005b18:	200036c0 	.word	0x200036c0
 8005b1c:	08007504 	.word	0x08007504
 8005b20:	0800751f 	.word	0x0800751f

08005b24 <GAP_DisconnectionComplete_CB>:
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
  connected = FALSE;
 8005b24:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <GAP_DisconnectionComplete_CB+0x2c>)
  
  printf("Disconnected\n");
 8005b26:	480b      	ldr	r0, [pc, #44]	; (8005b54 <GAP_DisconnectionComplete_CB+0x30>)
{
 8005b28:	b510      	push	{r4, lr}
  connected = FALSE;
 8005b2a:	2400      	movs	r4, #0
 8005b2c:	601c      	str	r4, [r3, #0]
  printf("Disconnected\n");
 8005b2e:	f000 fea7 	bl	8006880 <puts>
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8005b32:	4b09      	ldr	r3, [pc, #36]	; (8005b58 <GAP_DisconnectionComplete_CB+0x34>)
 8005b34:	2201      	movs	r2, #1
 8005b36:	701a      	strb	r2, [r3, #0]
  notification_enabled = FALSE;
 8005b38:	4b08      	ldr	r3, [pc, #32]	; (8005b5c <GAP_DisconnectionComplete_CB+0x38>)
 8005b3a:	701c      	strb	r4, [r3, #0]
  start_read_tx_char_handle = FALSE;
 8005b3c:	4b08      	ldr	r3, [pc, #32]	; (8005b60 <GAP_DisconnectionComplete_CB+0x3c>)
 8005b3e:	701c      	strb	r4, [r3, #0]
  start_read_rx_char_handle = FALSE;
 8005b40:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <GAP_DisconnectionComplete_CB+0x40>)
 8005b42:	701c      	strb	r4, [r3, #0]
  end_read_tx_char_handle = FALSE;
 8005b44:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <GAP_DisconnectionComplete_CB+0x44>)
 8005b46:	701c      	strb	r4, [r3, #0]
  end_read_rx_char_handle = FALSE;
 8005b48:	4b08      	ldr	r3, [pc, #32]	; (8005b6c <GAP_DisconnectionComplete_CB+0x48>)
 8005b4a:	701c      	strb	r4, [r3, #0]
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	bf00      	nop
 8005b50:	200036bc 	.word	0x200036bc
 8005b54:	08007525 	.word	0x08007525
 8005b58:	2000000e 	.word	0x2000000e
 8005b5c:	200036c4 	.word	0x200036c4
 8005b60:	200036c6 	.word	0x200036c6
 8005b64:	200036c5 	.word	0x200036c5
 8005b68:	200036c3 	.word	0x200036c3
 8005b6c:	200036c2 	.word	0x200036c2

08005b70 <GATT_Notification_CB>:
 * @retval None
 */
void GATT_Notification_CB(uint16_t attr_handle, uint8_t attr_len, uint8_t *attr_value)
{
	/* !Odebrane dane od servera! */
    if (attr_handle == tx_handle+1 && attr_len != 0 && *attr_value != '\0') {
 8005b70:	4b0f      	ldr	r3, [pc, #60]	; (8005bb0 <GATT_Notification_CB+0x40>)
 8005b72:	881b      	ldrh	r3, [r3, #0]
 8005b74:	3301      	adds	r3, #1
 8005b76:	4298      	cmp	r0, r3
{
 8005b78:	b570      	push	{r4, r5, r6, lr}
    if (attr_handle == tx_handle+1 && attr_len != 0 && *attr_value != '\0') {
 8005b7a:	d113      	bne.n	8005ba4 <GATT_Notification_CB+0x34>
 8005b7c:	b191      	cbz	r1, 8005ba4 <GATT_Notification_CB+0x34>
 8005b7e:	7813      	ldrb	r3, [r2, #0]
 8005b80:	b183      	cbz	r3, 8005ba4 <GATT_Notification_CB+0x34>
      //TODO: wszystkie wiadomosci otrzymane podczas jednego slotu wlozyc do kolejki zeby potem dalo sie wszystko wypisac
      for(int i=0; i<attr_len && i<MSG_LEN; i++){
		  dataBLE[newData][i] = *(attr_value+i);
 8005b82:	4c0c      	ldr	r4, [pc, #48]	; (8005bb4 <GATT_Notification_CB+0x44>)
 8005b84:	4d0c      	ldr	r5, [pc, #48]	; (8005bb8 <GATT_Notification_CB+0x48>)
 8005b86:	7820      	ldrb	r0, [r4, #0]
 8005b88:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8005b8c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8005b90:	2300      	movs	r3, #0
      for(int i=0; i<attr_len && i<MSG_LEN; i++){
 8005b92:	428b      	cmp	r3, r1
 8005b94:	da01      	bge.n	8005b9a <GATT_Notification_CB+0x2a>
 8005b96:	2b14      	cmp	r3, #20
 8005b98:	d105      	bne.n	8005ba6 <GATT_Notification_CB+0x36>
//		  dataBLE[i] = *(attr_value+i);
	  }//      strncpy((char *)dataBLE[newData], (char *)attr_value, (size_t)(attr_len <= MSG_LEN ? attr_len : MSG_LEN));

      //?
//      if(client_ready){
      	  newDataPresent = true;
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	4b07      	ldr	r3, [pc, #28]	; (8005bbc <GATT_Notification_CB+0x4c>)
		  newData++;
 8005b9e:	4410      	add	r0, r2
      	  newDataPresent = true;
 8005ba0:	701a      	strb	r2, [r3, #0]
		  newData++;
 8005ba2:	7020      	strb	r0, [r4, #0]
 8005ba4:	bd70      	pop	{r4, r5, r6, pc}
		  dataBLE[newData][i] = *(attr_value+i);
 8005ba6:	5cd6      	ldrb	r6, [r2, r3]
 8005ba8:	54ee      	strb	r6, [r5, r3]
      for(int i=0; i<attr_len && i<MSG_LEN; i++){
 8005baa:	3301      	adds	r3, #1
 8005bac:	e7f1      	b.n	8005b92 <GATT_Notification_CB+0x22>
 8005bae:	bf00      	nop
 8005bb0:	200036f4 	.word	0x200036f4
 8005bb4:	200001b5 	.word	0x200001b5
 8005bb8:	200000a0 	.word	0x200000a0
 8005bbc:	200001b6 	.word	0x200001b6

08005bc0 <user_notify>:
{
  hci_uart_pckt *hci_pckt = pData;  
  /* obtain event packet */
  hci_event_pckt *event_pckt = (hci_event_pckt*)hci_pckt->data;
  
  if(hci_pckt->type != HCI_EVENT_PKT)
 8005bc0:	7802      	ldrb	r2, [r0, #0]
 8005bc2:	2a04      	cmp	r2, #4
{
 8005bc4:	4603      	mov	r3, r0
  if(hci_pckt->type != HCI_EVENT_PKT)
 8005bc6:	d167      	bne.n	8005c98 <user_notify+0xd8>
    return;
  
  switch(event_pckt->evt){
 8005bc8:	7842      	ldrb	r2, [r0, #1]
 8005bca:	2a3e      	cmp	r2, #62	; 0x3e
 8005bcc:	d005      	beq.n	8005bda <user_notify+0x1a>
 8005bce:	2aff      	cmp	r2, #255	; 0xff
 8005bd0:	d00b      	beq.n	8005bea <user_notify+0x2a>
 8005bd2:	2a05      	cmp	r2, #5
 8005bd4:	d160      	bne.n	8005c98 <user_notify+0xd8>

  /* Disconnection */
  case EVT_DISCONN_COMPLETE:
    {
      GAP_DisconnectionComplete_CB();
 8005bd6:	f7ff bfa5 	b.w	8005b24 <GAP_DisconnectionComplete_CB>
  /* Connection Complete */
  case EVT_LE_META_EVENT:
    {
      evt_le_meta_event *evt = (void *)event_pckt->data;
      
      switch(evt->subevent){
 8005bda:	78c2      	ldrb	r2, [r0, #3]
 8005bdc:	2a01      	cmp	r2, #1
 8005bde:	d15b      	bne.n	8005c98 <user_notify+0xd8>
      case EVT_LE_CONN_COMPLETE:
        {
          evt_le_connection_complete *cc = (void *)evt->data;
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8005be0:	f8b0 1005 	ldrh.w	r1, [r0, #5]
 8005be4:	3009      	adds	r0, #9
 8005be6:	f7ff bf79 	b.w	8005adc <GAP_ConnectionComplete_CB>
    
  /* 4 rozne typy eventow EVT_VENDOR: */
  case EVT_VENDOR:
    {
      evt_blue_aci *blue_evt = (void*)event_pckt->data;
      switch(blue_evt->ecode){
 8005bea:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8005bee:	f640 410f 	movw	r1, #3087	; 0xc0f
 8005bf2:	428a      	cmp	r2, r1
 8005bf4:	d01a      	beq.n	8005c2c <user_notify+0x6c>
 8005bf6:	f5b2 6f41 	cmp.w	r2, #3088	; 0xc10
 8005bfa:	d204      	bcs.n	8005c06 <user_notify+0x46>
 8005bfc:	f640 4101 	movw	r1, #3073	; 0xc01
 8005c00:	428a      	cmp	r2, r1
 8005c02:	d006      	beq.n	8005c12 <user_notify+0x52>
 8005c04:	4770      	bx	lr
 8005c06:	d034      	beq.n	8005c72 <user_notify+0xb2>
 8005c08:	f640 4112 	movw	r1, #3090	; 0xc12
 8005c0c:	428a      	cmp	r2, r1
 8005c0e:	d015      	beq.n	8005c3c <user_notify+0x7c>
 8005c10:	4770      	bx	lr
        
      /* Attribute modified (zmieniaja sie handle TX i RX) */
      case EVT_BLUE_GATT_ATTRIBUTE_MODIFIED:
        {
          if (bnrg_expansion_board == IDB05A1) {
 8005c12:	4a22      	ldr	r2, [pc, #136]	; (8005c9c <user_notify+0xdc>)
 8005c14:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8005c18:	7812      	ldrb	r2, [r2, #0]
            evt_gatt_attr_modified_IDB05A1 *evt = (evt_gatt_attr_modified_IDB05A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
          }
          else {
            evt_gatt_attr_modified_IDB04A1 *evt = (evt_gatt_attr_modified_IDB04A1*)blue_evt->data;
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8005c1a:	7a59      	ldrb	r1, [r3, #9]
          if (bnrg_expansion_board == IDB05A1) {
 8005c1c:	2a01      	cmp	r2, #1
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8005c1e:	bf0c      	ite	eq
 8005c20:	f103 020c 	addeq.w	r2, r3, #12
            Attribute_Modified_CB(evt->attr_handle, evt->data_length, evt->att_data);
 8005c24:	f103 020a 	addne.w	r2, r3, #10
 8005c28:	f7ff bf3e 	b.w	8005aa8 <Attribute_Modified_CB>

      /* GATT notification = odebrane dane od servera */
      case EVT_BLUE_GATT_NOTIFICATION:
        {
          evt_gatt_attr_notification *evt = (evt_gatt_attr_notification*)blue_evt->data;
          GATT_Notification_CB(evt->attr_handle, evt->event_data_length - 2, evt->attr_value);
 8005c2c:	79c1      	ldrb	r1, [r0, #7]
 8005c2e:	3902      	subs	r1, #2
 8005c30:	f100 020a 	add.w	r2, r0, #10
 8005c34:	b2c9      	uxtb	r1, r1
 8005c36:	8900      	ldrh	r0, [r0, #8]
 8005c38:	f7ff bf9a 	b.w	8005b70 <GATT_Notification_CB>
        }
        break;

      /* Odczytwanie charakterystyk slave'a czyli poznawanie TX i RX handles */
      case EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP:
        if(BLE_Role == CLIENT) {
 8005c3c:	4a18      	ldr	r2, [pc, #96]	; (8005ca0 <user_notify+0xe0>)
 8005c3e:	7812      	ldrb	r2, [r2, #0]
 8005c40:	2a00      	cmp	r2, #0
 8005c42:	d129      	bne.n	8005c98 <user_notify+0xd8>
          PRINTF("EVT_BLUE_GATT_DISC_READ_CHAR_BY_UUID_RESP\n");
          
          evt_gatt_disc_read_char_by_uuid_resp *resp = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8005c44:	4a17      	ldr	r2, [pc, #92]	; (8005ca4 <user_notify+0xe4>)
 8005c46:	7812      	ldrb	r2, [r2, #0]
 8005c48:	b142      	cbz	r2, 8005c5c <user_notify+0x9c>
 8005c4a:	4a17      	ldr	r2, [pc, #92]	; (8005ca8 <user_notify+0xe8>)
 8005c4c:	7812      	ldrb	r2, [r2, #0]
 8005c4e:	b92a      	cbnz	r2, 8005c5c <user_notify+0x9c>
          {
            tx_handle = resp->attr_handle;
 8005c50:	4b16      	ldr	r3, [pc, #88]	; (8005cac <user_notify+0xec>)
 8005c52:	8901      	ldrh	r1, [r0, #8]
            printf("TX Char Handle %04X\n", tx_handle);
 8005c54:	4816      	ldr	r0, [pc, #88]	; (8005cb0 <user_notify+0xf0>)
            tx_handle = resp->attr_handle;
 8005c56:	8019      	strh	r1, [r3, #0]
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            rx_handle = resp->attr_handle;
            printf("RX Char Handle %04X\n", rx_handle);
 8005c58:	f000 bd8a 	b.w	8006770 <iprintf>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8005c5c:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <user_notify+0xf4>)
 8005c5e:	7812      	ldrb	r2, [r2, #0]
 8005c60:	b1d2      	cbz	r2, 8005c98 <user_notify+0xd8>
 8005c62:	4a15      	ldr	r2, [pc, #84]	; (8005cb8 <user_notify+0xf8>)
 8005c64:	7812      	ldrb	r2, [r2, #0]
 8005c66:	b9ba      	cbnz	r2, 8005c98 <user_notify+0xd8>
            rx_handle = resp->attr_handle;
 8005c68:	8919      	ldrh	r1, [r3, #8]
 8005c6a:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <user_notify+0xfc>)
            printf("RX Char Handle %04X\n", rx_handle);
 8005c6c:	4814      	ldr	r0, [pc, #80]	; (8005cc0 <user_notify+0x100>)
            rx_handle = resp->attr_handle;
 8005c6e:	8019      	strh	r1, [r3, #0]
 8005c70:	e7f2      	b.n	8005c58 <user_notify+0x98>
        }
        break;
        
      /* Potrzebne dla mastera w UserProcess */
      case EVT_BLUE_GATT_PROCEDURE_COMPLETE:
        if(BLE_Role == CLIENT) {
 8005c72:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <user_notify+0xe0>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	b97b      	cbnz	r3, 8005c98 <user_notify+0xd8>
          /* Wait for gatt procedure complete event trigger related to Discovery Charac by UUID */
          //evt_gatt_procedure_complete *pr = (void*)blue_evt->data;
          
          if (start_read_tx_char_handle && !end_read_tx_char_handle)
 8005c78:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <user_notify+0xe4>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	b12b      	cbz	r3, 8005c8a <user_notify+0xca>
 8005c7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ca8 <user_notify+0xe8>)
 8005c80:	781a      	ldrb	r2, [r3, #0]
 8005c82:	b912      	cbnz	r2, 8005c8a <user_notify+0xca>
          {
            end_read_tx_char_handle = TRUE;
          }
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
          {
            end_read_rx_char_handle = TRUE;
 8005c84:	2201      	movs	r2, #1
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	e006      	b.n	8005c98 <user_notify+0xd8>
          else if (start_read_rx_char_handle && !end_read_rx_char_handle)
 8005c8a:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <user_notify+0xf4>)
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	b11b      	cbz	r3, 8005c98 <user_notify+0xd8>
 8005c90:	4b09      	ldr	r3, [pc, #36]	; (8005cb8 <user_notify+0xf8>)
 8005c92:	781a      	ldrb	r2, [r3, #0]
 8005c94:	2a00      	cmp	r2, #0
 8005c96:	d0f5      	beq.n	8005c84 <user_notify+0xc4>
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	200025b5 	.word	0x200025b5
 8005ca0:	200025b4 	.word	0x200025b4
 8005ca4:	200036c6 	.word	0x200036c6
 8005ca8:	200036c3 	.word	0x200036c3
 8005cac:	200036f4 	.word	0x200036f4
 8005cb0:	0800756c 	.word	0x0800756c
 8005cb4:	200036c5 	.word	0x200036c5
 8005cb8:	200036c2 	.word	0x200036c2
 8005cbc:	200036f6 	.word	0x200036f6
 8005cc0:	08007581 	.word	0x08007581

08005cc4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cc4:	4b0e      	ldr	r3, [pc, #56]	; (8005d00 <HAL_MspInit+0x3c>)
{
 8005cc6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cc8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005cca:	f042 0201 	orr.w	r2, r2, #1
 8005cce:	661a      	str	r2, [r3, #96]	; 0x60
 8005cd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005cd2:	f002 0201 	and.w	r2, r2, #1
 8005cd6:	9200      	str	r2, [sp, #0]
 8005cd8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005cdc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005ce0:	659a      	str	r2, [r3, #88]	; 0x58
 8005ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ce8:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005cea:	2200      	movs	r2, #0
 8005cec:	210f      	movs	r1, #15
 8005cee:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cf2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005cf4:	f7fb fc0e 	bl	8001514 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005cf8:	b003      	add	sp, #12
 8005cfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cfe:	bf00      	nop
 8005d00:	40021000 	.word	0x40021000

08005d04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d04:	b510      	push	{r4, lr}
 8005d06:	4604      	mov	r4, r0
 8005d08:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d0a:	2214      	movs	r2, #20
 8005d0c:	2100      	movs	r1, #0
 8005d0e:	a803      	add	r0, sp, #12
 8005d10:	f000 fc79 	bl	8006606 <memset>
  if(huart->Instance==USART3)
 8005d14:	6822      	ldr	r2, [r4, #0]
 8005d16:	4b12      	ldr	r3, [pc, #72]	; (8005d60 <HAL_UART_MspInit+0x5c>)
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d11f      	bne.n	8005d5c <HAL_UART_MspInit+0x58>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005d1c:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d20:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 8005d22:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d24:	480f      	ldr	r0, [pc, #60]	; (8005d64 <HAL_UART_MspInit+0x60>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005d26:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005d2a:	659a      	str	r2, [r3, #88]	; 0x58
 8005d2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d2e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005d32:	9201      	str	r2, [sp, #4]
 8005d34:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d38:	f042 0204 	orr.w	r2, r2, #4
 8005d3c:	64da      	str	r2, [r3, #76]	; 0x4c
 8005d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	9302      	str	r3, [sp, #8]
 8005d46:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005d48:	2330      	movs	r3, #48	; 0x30
 8005d4a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d50:	2303      	movs	r3, #3
 8005d52:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005d54:	2307      	movs	r3, #7
 8005d56:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d58:	f7fb fc42 	bl	80015e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005d5c:	b008      	add	sp, #32
 8005d5e:	bd10      	pop	{r4, pc}
 8005d60:	40004800 	.word	0x40004800
 8005d64:	48000800 	.word	0x48000800

08005d68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005d68:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8005d6a:	4601      	mov	r1, r0
{
 8005d6c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8005d6e:	2200      	movs	r2, #0
 8005d70:	201d      	movs	r0, #29
 8005d72:	f7fb fbcf 	bl	8001514 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8005d76:	201d      	movs	r0, #29
 8005d78:	f7fb fc00 	bl	800157c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8005d7c:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <HAL_InitTick+0x68>)
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8005d7e:	4c15      	ldr	r4, [pc, #84]	; (8005dd4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM3_CLK_ENABLE();
 8005d80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d82:	f042 0202 	orr.w	r2, r2, #2
 8005d86:	659a      	str	r2, [r3, #88]	; 0x58
 8005d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005d90:	a901      	add	r1, sp, #4
 8005d92:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM3_CLK_ENABLE();
 8005d94:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005d96:	f7fc f9a3 	bl	80020e0 <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005d9a:	f7fc f97d 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
  htim3.Instance = TIM3;
 8005d9e:	4b0e      	ldr	r3, [pc, #56]	; (8005dd8 <HAL_InitTick+0x70>)
 8005da0:	6023      	str	r3, [r4, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8005da2:	f240 33e7 	movw	r3, #999	; 0x3e7
 8005da6:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005da8:	4b0c      	ldr	r3, [pc, #48]	; (8005ddc <HAL_InitTick+0x74>)
 8005daa:	fbb0 f0f3 	udiv	r0, r0, r3
 8005dae:	3801      	subs	r0, #1
  htim3.Init.Prescaler = uwPrescalerValue;
  htim3.Init.ClockDivision = 0;
 8005db0:	2300      	movs	r3, #0
  htim3.Init.Prescaler = uwPrescalerValue;
 8005db2:	6060      	str	r0, [r4, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8005db4:	4620      	mov	r0, r4
  htim3.Init.ClockDivision = 0;
 8005db6:	6123      	str	r3, [r4, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005db8:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8005dba:	f7fc ffc7 	bl	8002d4c <HAL_TIM_Base_Init>
 8005dbe:	b920      	cbnz	r0, 8005dca <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f7fc fe93 	bl	8002aec <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8005dc6:	b008      	add	sp, #32
 8005dc8:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 8005dca:	2001      	movs	r0, #1
 8005dcc:	e7fb      	b.n	8005dc6 <HAL_InitTick+0x5e>
 8005dce:	bf00      	nop
 8005dd0:	40021000 	.word	0x40021000
 8005dd4:	20003700 	.word	0x20003700
 8005dd8:	40000400 	.word	0x40000400
 8005ddc:	000f4240 	.word	0x000f4240

08005de0 <NMI_Handler>:
 8005de0:	4770      	bx	lr

08005de2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005de2:	e7fe      	b.n	8005de2 <HardFault_Handler>

08005de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005de4:	e7fe      	b.n	8005de4 <MemManage_Handler>

08005de6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005de6:	e7fe      	b.n	8005de6 <BusFault_Handler>

08005de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005de8:	e7fe      	b.n	8005de8 <UsageFault_Handler>

08005dea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005dea:	4770      	bx	lr

08005dec <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8005dec:	4801      	ldr	r0, [pc, #4]	; (8005df4 <EXTI0_IRQHandler+0x8>)
 8005dee:	f7fb bbdf 	b.w	80015b0 <HAL_EXTI_IRQHandler>
 8005df2:	bf00      	nop
 8005df4:	200036ec 	.word	0x200036ec

08005df8 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005df8:	4801      	ldr	r0, [pc, #4]	; (8005e00 <TIM3_IRQHandler+0x8>)
 8005dfa:	f7fc be91 	b.w	8002b20 <HAL_TIM_IRQHandler>
 8005dfe:	bf00      	nop
 8005e00:	20003700 	.word	0x20003700

08005e04 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 8005e04:	4801      	ldr	r0, [pc, #4]	; (8005e0c <EXTI15_10_IRQHandler+0x8>)
 8005e06:	f7fb bbd3 	b.w	80015b0 <HAL_EXTI_IRQHandler>
 8005e0a:	bf00      	nop
 8005e0c:	20000014 	.word	0x20000014

08005e10 <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 8005e10:	4b10      	ldr	r3, [pc, #64]	; (8005e54 <BSP_LED_Init+0x44>)
{
 8005e12:	b510      	push	{r4, lr}
  LED2_GPIO_CLK_ENABLE();    
 8005e14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e16:	f042 0201 	orr.w	r2, r2, #1
 8005e1a:	64da      	str	r2, [r3, #76]	; 0x4c
 8005e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8005e1e:	b086      	sub	sp, #24
  LED2_GPIO_CLK_ENABLE();    
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	9b00      	ldr	r3, [sp, #0]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin   = LED_PIN [Led];
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8005e28:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8005e2a:	2420      	movs	r4, #32
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8005e2c:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8005e2e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8005e30:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8005e32:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8005e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8005e38:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8005e3a:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8005e3c:	f7fb fbd0 	bl	80015e0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8005e40:	2200      	movs	r2, #0
 8005e42:	4621      	mov	r1, r4
 8005e44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e48:	f7fb fd36 	bl	80018b8 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8005e4c:	2000      	movs	r0, #0
 8005e4e:	b006      	add	sp, #24
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	bf00      	nop
 8005e54:	40021000 	.word	0x40021000

08005e58 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8005e58:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e62:	f7fb fd29 	bl	80018b8 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8005e66:	2000      	movs	r0, #0
 8005e68:	bd08      	pop	{r3, pc}

08005e6a <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8005e6a:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	2120      	movs	r1, #32
 8005e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e74:	f7fb fd20 	bl	80018b8 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8005e78:	2000      	movs	r0, #0
 8005e7a:	bd08      	pop	{r3, pc}

08005e7c <BSP_PB_Init>:
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 8005e7c:	4b1f      	ldr	r3, [pc, #124]	; (8005efc <BSP_PB_Init+0x80>)
{
 8005e7e:	b530      	push	{r4, r5, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 8005e80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e82:	f042 0204 	orr.w	r2, r2, #4
 8005e86:	64da      	str	r2, [r3, #76]	; 0x4c
 8005e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8005e8a:	b087      	sub	sp, #28
  USER_BUTTON_GPIO_CLK_ENABLE();
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	9300      	str	r3, [sp, #0]
 8005e92:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8005e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e98:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8005e9a:	2302      	movs	r3, #2
{
 8005e9c:	4605      	mov	r5, r0
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8005e9e:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005ea0:	9304      	str	r3, [sp, #16]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	b931      	cbnz	r1, 8005eb4 <BSP_PB_Init+0x38>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8005ea6:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8005ea8:	4815      	ldr	r0, [pc, #84]	; (8005f00 <BSP_PB_Init+0x84>)
 8005eaa:	a901      	add	r1, sp, #4
 8005eac:	f7fb fb98 	bl	80015e0 <HAL_GPIO_Init>
  int32_t ret = BSP_ERROR_NONE;
 8005eb0:	4620      	mov	r0, r4
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
	}
  }
  
  return ret;
 8005eb2:	e010      	b.n	8005ed6 <BSP_PB_Init+0x5a>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8005eb4:	4c13      	ldr	r4, [pc, #76]	; (8005f04 <BSP_PB_Init+0x88>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005eb6:	4b14      	ldr	r3, [pc, #80]	; (8005f08 <BSP_PB_Init+0x8c>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8005eb8:	4811      	ldr	r0, [pc, #68]	; (8005f00 <BSP_PB_Init+0x84>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8005eba:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8005ebc:	a901      	add	r1, sp, #4
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8005ebe:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8005ec2:	f7fb fb8d 	bl	80015e0 <HAL_GPIO_Init>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8005ec6:	4911      	ldr	r1, [pc, #68]	; (8005f0c <BSP_PB_Init+0x90>)
 8005ec8:	4620      	mov	r0, r4
 8005eca:	f7fb fb6b 	bl	80015a4 <HAL_EXTI_GetHandle>
 8005ece:	4601      	mov	r1, r0
 8005ed0:	b118      	cbz	r0, 8005eda <BSP_PB_Init+0x5e>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005ed2:	f06f 0003 	mvn.w	r0, #3
}
 8005ed6:	b007      	add	sp, #28
 8005ed8:	bd30      	pop	{r4, r5, pc}
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 8005eda:	4620      	mov	r0, r4
 8005edc:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <BSP_PB_Init+0x94>)
 8005ede:	f7fb fb5b 	bl	8001598 <HAL_EXTI_RegisterCallback>
 8005ee2:	4604      	mov	r4, r0
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d1f4      	bne.n	8005ed2 <BSP_PB_Init+0x56>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8005ee8:	4602      	mov	r2, r0
 8005eea:	210f      	movs	r1, #15
 8005eec:	2028      	movs	r0, #40	; 0x28
 8005eee:	f7fb fb11 	bl	8001514 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8005ef2:	2028      	movs	r0, #40	; 0x28
 8005ef4:	f7fb fb42 	bl	800157c <HAL_NVIC_EnableIRQ>
 8005ef8:	e7da      	b.n	8005eb0 <BSP_PB_Init+0x34>
 8005efa:	bf00      	nop
 8005efc:	40021000 	.word	0x40021000
 8005f00:	48000800 	.word	0x48000800
 8005f04:	20000014 	.word	0x20000014
 8005f08:	10110000 	.word	0x10110000
 8005f0c:	1600000d 	.word	0x1600000d
 8005f10:	08005f2d 	.word	0x08005f2d

08005f14 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8005f14:	b508      	push	{r3, lr}
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 8005f16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005f1a:	4803      	ldr	r0, [pc, #12]	; (8005f28 <BSP_PB_GetState+0x14>)
 8005f1c:	f7fb fcc6 	bl	80018ac <HAL_GPIO_ReadPin>
}
 8005f20:	fab0 f080 	clz	r0, r0
 8005f24:	0940      	lsrs	r0, r0, #5
 8005f26:	bd08      	pop	{r3, pc}
 8005f28:	48000800 	.word	0x48000800

08005f2c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 8005f2c:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 8005f2e:	2000      	movs	r0, #0
 8005f30:	f7ff f852 	bl	8004fd8 <BSP_PB_Callback>
 8005f34:	bd08      	pop	{r3, pc}
	...

08005f38 <MX_USART2_UART_Init>:

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;
  huart->Instance = USART2;
  huart->Init.BaudRate = 115200;
 8005f38:	4a0a      	ldr	r2, [pc, #40]	; (8005f64 <MX_USART2_UART_Init+0x2c>)
 8005f3a:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
{
 8005f3e:	b508      	push	{r3, lr}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 8005f40:	210c      	movs	r1, #12
  huart->Init.BaudRate = 115200;
 8005f42:	e880 1004 	stmia.w	r0, {r2, ip}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8005f46:	2200      	movs	r2, #0
 8005f48:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8005f4a:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8005f4c:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8005f4e:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005f50:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8005f52:	61c2      	str	r2, [r0, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005f54:	6202      	str	r2, [r0, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005f56:	6242      	str	r2, [r0, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8005f58:	f7fd f9cd 	bl	80032f6 <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8005f5c:	3000      	adds	r0, #0
 8005f5e:	bf18      	it	ne
 8005f60:	2001      	movne	r0, #1
 8005f62:	bd08      	pop	{r3, pc}
 8005f64:	40004400 	.word	0x40004400

08005f68 <BSP_COM_Init>:
{
 8005f68:	b510      	push	{r4, lr}
  if(COM > COMn)
 8005f6a:	2801      	cmp	r0, #1
{
 8005f6c:	b088      	sub	sp, #32
  if(COM > COMn)
 8005f6e:	d832      	bhi.n	8005fd6 <BSP_COM_Init+0x6e>
     hcom_uart[COM].Instance = COM_USART[COM];
 8005f70:	491a      	ldr	r1, [pc, #104]	; (8005fdc <BSP_COM_Init+0x74>)
 8005f72:	4a1b      	ldr	r2, [pc, #108]	; (8005fe0 <BSP_COM_Init+0x78>)
 8005f74:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8005f78:	01c3      	lsls	r3, r0, #7
 8005f7a:	18d4      	adds	r4, r2, r3
 8005f7c:	50d1      	str	r1, [r2, r3]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005f7e:	4b19      	ldr	r3, [pc, #100]	; (8005fe4 <BSP_COM_Init+0x7c>)
 8005f80:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f82:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005f86:	659a      	str	r2, [r3, #88]	; 0x58
 8005f88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f8a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005f8e:	9201      	str	r2, [sp, #4]
 8005f90:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f94:	f042 0201 	orr.w	r2, r2, #1
 8005f98:	64da      	str	r2, [r3, #76]	; 0x4c
 8005f9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	9302      	str	r3, [sp, #8]
 8005fa2:	9b02      	ldr	r3, [sp, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005fa4:	230c      	movs	r3, #12
 8005fa6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fac:	2300      	movs	r3, #0
 8005fae:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005fb6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005fbc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005fbe:	f7fb fb0f 	bl	80015e0 <HAL_GPIO_Init>
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f7ff ffb8 	bl	8005f38 <MX_USART2_UART_Init>
 8005fc8:	2800      	cmp	r0, #0
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005fca:	bf0c      	ite	eq
 8005fcc:	2000      	moveq	r0, #0
 8005fce:	f06f 0003 	mvnne.w	r0, #3
}
 8005fd2:	b008      	add	sp, #32
 8005fd4:	bd10      	pop	{r4, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005fd6:	f06f 0001 	mvn.w	r0, #1
 8005fda:	e7fa      	b.n	8005fd2 <BSP_COM_Init+0x6a>
 8005fdc:	20000010 	.word	0x20000010
 8005fe0:	20003740 	.word	0x20003740
 8005fe4:	40021000 	.word	0x40021000

08005fe8 <__io_putchar>:
{ 
 8005fe8:	b513      	push	{r0, r1, r4, lr}
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 8005fea:	4b08      	ldr	r3, [pc, #32]	; (800600c <__io_putchar+0x24>)
{ 
 8005fec:	a902      	add	r1, sp, #8
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 8005fee:	781c      	ldrb	r4, [r3, #0]
{ 
 8005ff0:	f841 0d04 	str.w	r0, [r1, #-4]!
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT); 
 8005ff4:	4806      	ldr	r0, [pc, #24]	; (8006010 <__io_putchar+0x28>)
 8005ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
 8006000:	f7fd f8f1 	bl	80031e6 <HAL_UART_Transmit>
}
 8006004:	9801      	ldr	r0, [sp, #4]
 8006006:	b002      	add	sp, #8
 8006008:	bd10      	pop	{r4, pc}
 800600a:	bf00      	nop
 800600c:	200036c7 	.word	0x200036c7
 8006010:	20003740 	.word	0x20003740

08006014 <BSP_SPI1_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8006014:	b507      	push	{r0, r1, r2, lr}
  int32_t ret = BSP_ERROR_NONE;
  
  if(HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, Length, BUS_SPI1_POLL_TIMEOUT) != HAL_OK)
 8006016:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	4613      	mov	r3, r2
 800601e:	460a      	mov	r2, r1
 8006020:	4601      	mov	r1, r0
 8006022:	4805      	ldr	r0, [pc, #20]	; (8006038 <BSP_SPI1_SendRecv+0x24>)
 8006024:	f7fc fc3a 	bl	800289c <HAL_SPI_TransmitReceive>
 8006028:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 800602a:	bf14      	ite	ne
 800602c:	f06f 0005 	mvnne.w	r0, #5
 8006030:	2000      	moveq	r0, #0
 8006032:	b003      	add	sp, #12
 8006034:	f85d fb04 	ldr.w	pc, [sp], #4
 8006038:	200037c0 	.word	0x200037c0

0800603c <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 800603c:	f7fb ba3e 	b.w	80014bc <HAL_GetTick>

08006040 <MX_SPI1_Init>:

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006040:	4a0f      	ldr	r2, [pc, #60]	; (8006080 <MX_SPI1_Init+0x40>)
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8006042:	f44f 61e0 	mov.w	r1, #1792	; 0x700
{
 8006046:	b508      	push	{r3, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006048:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800604c:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 800604e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi->Init.Mode = SPI_MODE_MASTER;
 8006052:	e880 1004 	stmia.w	r0, {r2, ip}
  hspi->Init.NSS = SPI_NSS_SOFT;
 8006056:	6181      	str	r1, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8006058:	2200      	movs	r2, #0
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800605a:	2118      	movs	r1, #24
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 800605c:	6082      	str	r2, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800605e:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8006060:	6142      	str	r2, [r0, #20]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8006062:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006064:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 7;
 8006066:	2107      	movs	r1, #7
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8006068:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800606a:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800606c:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800606e:	2208      	movs	r2, #8
  hspi->Init.CRCPolynomial = 7;
 8006070:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006072:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8006074:	f7fc fbc1 	bl	80027fa <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8006078:	3000      	adds	r0, #0
 800607a:	bf18      	it	ne
 800607c:	2001      	movne	r0, #1
 800607e:	bd08      	pop	{r3, pc}
 8006080:	40013000 	.word	0x40013000

08006084 <BSP_SPI1_Init>:
{
 8006084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(SPI1InitCounter++ == 0)
 8006088:	4a28      	ldr	r2, [pc, #160]	; (800612c <BSP_SPI1_Init+0xa8>)
  hspi1.Instance  = SPI1;
 800608a:	4c29      	ldr	r4, [pc, #164]	; (8006130 <BSP_SPI1_Init+0xac>)
 800608c:	4b29      	ldr	r3, [pc, #164]	; (8006134 <BSP_SPI1_Init+0xb0>)
 800608e:	6023      	str	r3, [r4, #0]
  if(SPI1InitCounter++ == 0)
 8006090:	6813      	ldr	r3, [r2, #0]
 8006092:	1c59      	adds	r1, r3, #1
{
 8006094:	b088      	sub	sp, #32
  if(SPI1InitCounter++ == 0)
 8006096:	6011      	str	r1, [r2, #0]
 8006098:	b11b      	cbz	r3, 80060a2 <BSP_SPI1_Init+0x1e>
  int32_t ret = BSP_ERROR_NONE;
 800609a:	2000      	movs	r0, #0
}
 800609c:	b008      	add	sp, #32
 800609e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) 
 80060a2:	4620      	mov	r0, r4
 80060a4:	f7fc fd1e 	bl	8002ae4 <HAL_SPI_GetState>
 80060a8:	4605      	mov	r5, r0
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d1f5      	bne.n	800609a <BSP_SPI1_Init+0x16>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80060ae:	4b22      	ldr	r3, [pc, #136]	; (8006138 <BSP_SPI1_Init+0xb4>)
 80060b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80060b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060b6:	661a      	str	r2, [r3, #96]	; 0x60
 80060b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80060ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80060be:	9200      	str	r2, [sp, #0]
 80060c0:	9a00      	ldr	r2, [sp, #0]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060c4:	f042 0201 	orr.w	r2, r2, #1
 80060c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80060ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060cc:	f002 0201 	and.w	r2, r2, #1
 80060d0:	9201      	str	r2, [sp, #4]
 80060d2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060d6:	f042 0202 	orr.w	r2, r2, #2
 80060da:	64da      	str	r2, [r3, #76]	; 0x4c
 80060dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060de:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060e0:	f003 0302 	and.w	r3, r3, #2
 80060e4:	9302      	str	r3, [sp, #8]
 80060e6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060e8:	f04f 0802 	mov.w	r8, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80060ec:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060ee:	2703      	movs	r7, #3
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80060f0:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060f2:	a903      	add	r1, sp, #12
 80060f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80060f8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060fa:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060fe:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006100:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006102:	f7fb fa6d 	bl	80015e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006106:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006108:	480c      	ldr	r0, [pc, #48]	; (800613c <BSP_SPI1_Init+0xb8>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800610a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800610c:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800610e:	f8cd 8010 	str.w	r8, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006112:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006114:	9706      	str	r7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006116:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006118:	f7fb fa62 	bl	80015e0 <HAL_GPIO_Init>
			if (MX_SPI1_Init(&hspi1) != HAL_OK)
 800611c:	4620      	mov	r0, r4
 800611e:	f7ff ff8f 	bl	8006040 <MX_SPI1_Init>
 8006122:	2800      	cmp	r0, #0
 8006124:	d0b9      	beq.n	800609a <BSP_SPI1_Init+0x16>
				ret = BSP_ERROR_BUS_FAILURE;
 8006126:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800612a:	e7b7      	b.n	800609c <BSP_SPI1_Init+0x18>
 800612c:	200036c8 	.word	0x200036c8
 8006130:	200037c0 	.word	0x200037c0
 8006134:	40013000 	.word	0x40013000
 8006138:	40021000 	.word	0x40021000
 800613c:	48000400 	.word	0x48000400

08006140 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8006140:	2001      	movs	r0, #1
 8006142:	4770      	bx	lr

08006144 <_kill>:

int _kill(int pid, int sig)
{
 8006144:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006146:	f000 f89b 	bl	8006280 <__errno>
 800614a:	2316      	movs	r3, #22
 800614c:	6003      	str	r3, [r0, #0]
	return -1;
}
 800614e:	f04f 30ff 	mov.w	r0, #4294967295
 8006152:	bd08      	pop	{r3, pc}

08006154 <_exit>:

void _exit (int status)
{
 8006154:	b508      	push	{r3, lr}
	errno = EINVAL;
 8006156:	f000 f893 	bl	8006280 <__errno>
 800615a:	2316      	movs	r3, #22
 800615c:	6003      	str	r3, [r0, #0]
 800615e:	e7fe      	b.n	800615e <_exit+0xa>

08006160 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	460e      	mov	r6, r1
 8006164:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006166:	460c      	mov	r4, r1
 8006168:	1ba3      	subs	r3, r4, r6
 800616a:	429d      	cmp	r5, r3
 800616c:	dc01      	bgt.n	8006172 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800616e:	4628      	mov	r0, r5
 8006170:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8006172:	f3af 8000 	nop.w
 8006176:	f804 0b01 	strb.w	r0, [r4], #1
 800617a:	e7f5      	b.n	8006168 <_read+0x8>

0800617c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800617c:	b570      	push	{r4, r5, r6, lr}
 800617e:	460e      	mov	r6, r1
 8006180:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006182:	460c      	mov	r4, r1
 8006184:	1ba3      	subs	r3, r4, r6
 8006186:	429d      	cmp	r5, r3
 8006188:	dc01      	bgt.n	800618e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800618a:	4628      	mov	r0, r5
 800618c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800618e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006192:	f7ff ff29 	bl	8005fe8 <__io_putchar>
 8006196:	e7f5      	b.n	8006184 <_write+0x8>

08006198 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8006198:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800619a:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <_sbrk+0x2c>)
 800619c:	6819      	ldr	r1, [r3, #0]
{
 800619e:	4602      	mov	r2, r0
	if (heap_end == 0)
 80061a0:	b909      	cbnz	r1, 80061a6 <_sbrk+0xe>
		heap_end = &end;
 80061a2:	4909      	ldr	r1, [pc, #36]	; (80061c8 <_sbrk+0x30>)
 80061a4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80061a6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80061a8:	4669      	mov	r1, sp
 80061aa:	4402      	add	r2, r0
 80061ac:	428a      	cmp	r2, r1
 80061ae:	d906      	bls.n	80061be <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80061b0:	f000 f866 	bl	8006280 <__errno>
 80061b4:	230c      	movs	r3, #12
 80061b6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80061b8:	f04f 30ff 	mov.w	r0, #4294967295
 80061bc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80061be:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80061c0:	bd08      	pop	{r3, pc}
 80061c2:	bf00      	nop
 80061c4:	200036cc 	.word	0x200036cc
 80061c8:	20003828 	.word	0x20003828

080061cc <_close>:

int _close(int file)
{
	return -1;
}
 80061cc:	f04f 30ff 	mov.w	r0, #4294967295
 80061d0:	4770      	bx	lr

080061d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80061d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061d6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80061d8:	2000      	movs	r0, #0
 80061da:	4770      	bx	lr

080061dc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80061dc:	2001      	movs	r0, #1
 80061de:	4770      	bx	lr

080061e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80061e0:	2000      	movs	r0, #0
 80061e2:	4770      	bx	lr

080061e4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061e4:	490f      	ldr	r1, [pc, #60]	; (8006224 <SystemInit+0x40>)
 80061e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80061ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80061f2:	4b0d      	ldr	r3, [pc, #52]	; (8006228 <SystemInit+0x44>)
 80061f4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80061f6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80061f8:	f042 0201 	orr.w	r2, r2, #1
 80061fc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 80061fe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8006206:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800620a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800620c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006210:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006218:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800621a:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800621c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006220:	608b      	str	r3, [r1, #8]
 8006222:	4770      	bx	lr
 8006224:	e000ed00 	.word	0xe000ed00
 8006228:	40021000 	.word	0x40021000

0800622c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800622c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006264 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006230:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006232:	e003      	b.n	800623c <LoopCopyDataInit>

08006234 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006234:	4b0c      	ldr	r3, [pc, #48]	; (8006268 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006236:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006238:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800623a:	3104      	adds	r1, #4

0800623c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800623c:	480b      	ldr	r0, [pc, #44]	; (800626c <LoopForever+0xa>)
	ldr	r3, =_edata
 800623e:	4b0c      	ldr	r3, [pc, #48]	; (8006270 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006240:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006242:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006244:	d3f6      	bcc.n	8006234 <CopyDataInit>
	ldr	r2, =_sbss
 8006246:	4a0b      	ldr	r2, [pc, #44]	; (8006274 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006248:	e002      	b.n	8006250 <LoopFillZerobss>

0800624a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800624a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800624c:	f842 3b04 	str.w	r3, [r2], #4

08006250 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006250:	4b09      	ldr	r3, [pc, #36]	; (8006278 <LoopForever+0x16>)
	cmp	r2, r3
 8006252:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006254:	d3f9      	bcc.n	800624a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006256:	f7ff ffc5 	bl	80061e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800625a:	f000 f9a5 	bl	80065a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800625e:	f7ff f801 	bl	8005264 <main>

08006262 <LoopForever>:

LoopForever:
    b LoopForever
 8006262:	e7fe      	b.n	8006262 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006264:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8006268:	080077f4 	.word	0x080077f4
	ldr	r0, =_sdata
 800626c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006270:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8006274:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8006278:	20003828 	.word	0x20003828

0800627c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800627c:	e7fe      	b.n	800627c <ADC1_2_IRQHandler>
	...

08006280 <__errno>:
 8006280:	4b01      	ldr	r3, [pc, #4]	; (8006288 <__errno+0x8>)
 8006282:	6818      	ldr	r0, [r3, #0]
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	20000020 	.word	0x20000020

0800628c <__sflush_r>:
 800628c:	898a      	ldrh	r2, [r1, #12]
 800628e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006292:	4605      	mov	r5, r0
 8006294:	0710      	lsls	r0, r2, #28
 8006296:	460c      	mov	r4, r1
 8006298:	d45a      	bmi.n	8006350 <__sflush_r+0xc4>
 800629a:	684b      	ldr	r3, [r1, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	dc05      	bgt.n	80062ac <__sflush_r+0x20>
 80062a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dc02      	bgt.n	80062ac <__sflush_r+0x20>
 80062a6:	2000      	movs	r0, #0
 80062a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	d0f9      	beq.n	80062a6 <__sflush_r+0x1a>
 80062b2:	2300      	movs	r3, #0
 80062b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062b8:	682f      	ldr	r7, [r5, #0]
 80062ba:	602b      	str	r3, [r5, #0]
 80062bc:	d033      	beq.n	8006326 <__sflush_r+0x9a>
 80062be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	075a      	lsls	r2, r3, #29
 80062c4:	d505      	bpl.n	80062d2 <__sflush_r+0x46>
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	1ac0      	subs	r0, r0, r3
 80062ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062cc:	b10b      	cbz	r3, 80062d2 <__sflush_r+0x46>
 80062ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80062d0:	1ac0      	subs	r0, r0, r3
 80062d2:	2300      	movs	r3, #0
 80062d4:	4602      	mov	r2, r0
 80062d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062d8:	6a21      	ldr	r1, [r4, #32]
 80062da:	4628      	mov	r0, r5
 80062dc:	47b0      	blx	r6
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	d106      	bne.n	80062f2 <__sflush_r+0x66>
 80062e4:	6829      	ldr	r1, [r5, #0]
 80062e6:	291d      	cmp	r1, #29
 80062e8:	d84b      	bhi.n	8006382 <__sflush_r+0xf6>
 80062ea:	4a2b      	ldr	r2, [pc, #172]	; (8006398 <__sflush_r+0x10c>)
 80062ec:	40ca      	lsrs	r2, r1
 80062ee:	07d6      	lsls	r6, r2, #31
 80062f0:	d547      	bpl.n	8006382 <__sflush_r+0xf6>
 80062f2:	2200      	movs	r2, #0
 80062f4:	6062      	str	r2, [r4, #4]
 80062f6:	04d9      	lsls	r1, r3, #19
 80062f8:	6922      	ldr	r2, [r4, #16]
 80062fa:	6022      	str	r2, [r4, #0]
 80062fc:	d504      	bpl.n	8006308 <__sflush_r+0x7c>
 80062fe:	1c42      	adds	r2, r0, #1
 8006300:	d101      	bne.n	8006306 <__sflush_r+0x7a>
 8006302:	682b      	ldr	r3, [r5, #0]
 8006304:	b903      	cbnz	r3, 8006308 <__sflush_r+0x7c>
 8006306:	6560      	str	r0, [r4, #84]	; 0x54
 8006308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800630a:	602f      	str	r7, [r5, #0]
 800630c:	2900      	cmp	r1, #0
 800630e:	d0ca      	beq.n	80062a6 <__sflush_r+0x1a>
 8006310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006314:	4299      	cmp	r1, r3
 8006316:	d002      	beq.n	800631e <__sflush_r+0x92>
 8006318:	4628      	mov	r0, r5
 800631a:	f000 f97d 	bl	8006618 <_free_r>
 800631e:	2000      	movs	r0, #0
 8006320:	6360      	str	r0, [r4, #52]	; 0x34
 8006322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006326:	6a21      	ldr	r1, [r4, #32]
 8006328:	2301      	movs	r3, #1
 800632a:	4628      	mov	r0, r5
 800632c:	47b0      	blx	r6
 800632e:	1c41      	adds	r1, r0, #1
 8006330:	d1c6      	bne.n	80062c0 <__sflush_r+0x34>
 8006332:	682b      	ldr	r3, [r5, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d0c3      	beq.n	80062c0 <__sflush_r+0x34>
 8006338:	2b1d      	cmp	r3, #29
 800633a:	d001      	beq.n	8006340 <__sflush_r+0xb4>
 800633c:	2b16      	cmp	r3, #22
 800633e:	d101      	bne.n	8006344 <__sflush_r+0xb8>
 8006340:	602f      	str	r7, [r5, #0]
 8006342:	e7b0      	b.n	80062a6 <__sflush_r+0x1a>
 8006344:	89a3      	ldrh	r3, [r4, #12]
 8006346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800634a:	81a3      	strh	r3, [r4, #12]
 800634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006350:	690f      	ldr	r7, [r1, #16]
 8006352:	2f00      	cmp	r7, #0
 8006354:	d0a7      	beq.n	80062a6 <__sflush_r+0x1a>
 8006356:	0793      	lsls	r3, r2, #30
 8006358:	680e      	ldr	r6, [r1, #0]
 800635a:	bf08      	it	eq
 800635c:	694b      	ldreq	r3, [r1, #20]
 800635e:	600f      	str	r7, [r1, #0]
 8006360:	bf18      	it	ne
 8006362:	2300      	movne	r3, #0
 8006364:	eba6 0807 	sub.w	r8, r6, r7
 8006368:	608b      	str	r3, [r1, #8]
 800636a:	f1b8 0f00 	cmp.w	r8, #0
 800636e:	dd9a      	ble.n	80062a6 <__sflush_r+0x1a>
 8006370:	4643      	mov	r3, r8
 8006372:	463a      	mov	r2, r7
 8006374:	6a21      	ldr	r1, [r4, #32]
 8006376:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006378:	4628      	mov	r0, r5
 800637a:	47b0      	blx	r6
 800637c:	2800      	cmp	r0, #0
 800637e:	dc07      	bgt.n	8006390 <__sflush_r+0x104>
 8006380:	89a3      	ldrh	r3, [r4, #12]
 8006382:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006386:	81a3      	strh	r3, [r4, #12]
 8006388:	f04f 30ff 	mov.w	r0, #4294967295
 800638c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006390:	4407      	add	r7, r0
 8006392:	eba8 0800 	sub.w	r8, r8, r0
 8006396:	e7e8      	b.n	800636a <__sflush_r+0xde>
 8006398:	20400001 	.word	0x20400001

0800639c <_fflush_r>:
 800639c:	b538      	push	{r3, r4, r5, lr}
 800639e:	690b      	ldr	r3, [r1, #16]
 80063a0:	4605      	mov	r5, r0
 80063a2:	460c      	mov	r4, r1
 80063a4:	b1db      	cbz	r3, 80063de <_fflush_r+0x42>
 80063a6:	b118      	cbz	r0, 80063b0 <_fflush_r+0x14>
 80063a8:	6983      	ldr	r3, [r0, #24]
 80063aa:	b90b      	cbnz	r3, 80063b0 <_fflush_r+0x14>
 80063ac:	f000 f872 	bl	8006494 <__sinit>
 80063b0:	4b0c      	ldr	r3, [pc, #48]	; (80063e4 <_fflush_r+0x48>)
 80063b2:	429c      	cmp	r4, r3
 80063b4:	d109      	bne.n	80063ca <_fflush_r+0x2e>
 80063b6:	686c      	ldr	r4, [r5, #4]
 80063b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063bc:	b17b      	cbz	r3, 80063de <_fflush_r+0x42>
 80063be:	4621      	mov	r1, r4
 80063c0:	4628      	mov	r0, r5
 80063c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063c6:	f7ff bf61 	b.w	800628c <__sflush_r>
 80063ca:	4b07      	ldr	r3, [pc, #28]	; (80063e8 <_fflush_r+0x4c>)
 80063cc:	429c      	cmp	r4, r3
 80063ce:	d101      	bne.n	80063d4 <_fflush_r+0x38>
 80063d0:	68ac      	ldr	r4, [r5, #8]
 80063d2:	e7f1      	b.n	80063b8 <_fflush_r+0x1c>
 80063d4:	4b05      	ldr	r3, [pc, #20]	; (80063ec <_fflush_r+0x50>)
 80063d6:	429c      	cmp	r4, r3
 80063d8:	bf08      	it	eq
 80063da:	68ec      	ldreq	r4, [r5, #12]
 80063dc:	e7ec      	b.n	80063b8 <_fflush_r+0x1c>
 80063de:	2000      	movs	r0, #0
 80063e0:	bd38      	pop	{r3, r4, r5, pc}
 80063e2:	bf00      	nop
 80063e4:	08007600 	.word	0x08007600
 80063e8:	08007620 	.word	0x08007620
 80063ec:	080075e0 	.word	0x080075e0

080063f0 <fflush>:
 80063f0:	4601      	mov	r1, r0
 80063f2:	b920      	cbnz	r0, 80063fe <fflush+0xe>
 80063f4:	4b04      	ldr	r3, [pc, #16]	; (8006408 <fflush+0x18>)
 80063f6:	4905      	ldr	r1, [pc, #20]	; (800640c <fflush+0x1c>)
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	f000 b8b7 	b.w	800656c <_fwalk_reent>
 80063fe:	4b04      	ldr	r3, [pc, #16]	; (8006410 <fflush+0x20>)
 8006400:	6818      	ldr	r0, [r3, #0]
 8006402:	f7ff bfcb 	b.w	800639c <_fflush_r>
 8006406:	bf00      	nop
 8006408:	08007640 	.word	0x08007640
 800640c:	0800639d 	.word	0x0800639d
 8006410:	20000020 	.word	0x20000020

08006414 <_cleanup_r>:
 8006414:	4901      	ldr	r1, [pc, #4]	; (800641c <_cleanup_r+0x8>)
 8006416:	f000 b8a9 	b.w	800656c <_fwalk_reent>
 800641a:	bf00      	nop
 800641c:	0800639d 	.word	0x0800639d

08006420 <std.isra.0>:
 8006420:	2300      	movs	r3, #0
 8006422:	b510      	push	{r4, lr}
 8006424:	4604      	mov	r4, r0
 8006426:	6003      	str	r3, [r0, #0]
 8006428:	6043      	str	r3, [r0, #4]
 800642a:	6083      	str	r3, [r0, #8]
 800642c:	8181      	strh	r1, [r0, #12]
 800642e:	6643      	str	r3, [r0, #100]	; 0x64
 8006430:	81c2      	strh	r2, [r0, #14]
 8006432:	6103      	str	r3, [r0, #16]
 8006434:	6143      	str	r3, [r0, #20]
 8006436:	6183      	str	r3, [r0, #24]
 8006438:	4619      	mov	r1, r3
 800643a:	2208      	movs	r2, #8
 800643c:	305c      	adds	r0, #92	; 0x5c
 800643e:	f000 f8e2 	bl	8006606 <memset>
 8006442:	4b05      	ldr	r3, [pc, #20]	; (8006458 <std.isra.0+0x38>)
 8006444:	6263      	str	r3, [r4, #36]	; 0x24
 8006446:	4b05      	ldr	r3, [pc, #20]	; (800645c <std.isra.0+0x3c>)
 8006448:	62a3      	str	r3, [r4, #40]	; 0x28
 800644a:	4b05      	ldr	r3, [pc, #20]	; (8006460 <std.isra.0+0x40>)
 800644c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800644e:	4b05      	ldr	r3, [pc, #20]	; (8006464 <std.isra.0+0x44>)
 8006450:	6224      	str	r4, [r4, #32]
 8006452:	6323      	str	r3, [r4, #48]	; 0x30
 8006454:	bd10      	pop	{r4, pc}
 8006456:	bf00      	nop
 8006458:	080068b1 	.word	0x080068b1
 800645c:	080068d3 	.word	0x080068d3
 8006460:	0800690b 	.word	0x0800690b
 8006464:	0800692f 	.word	0x0800692f

08006468 <__sfmoreglue>:
 8006468:	b570      	push	{r4, r5, r6, lr}
 800646a:	1e4a      	subs	r2, r1, #1
 800646c:	2568      	movs	r5, #104	; 0x68
 800646e:	4355      	muls	r5, r2
 8006470:	460e      	mov	r6, r1
 8006472:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006476:	f000 f91d 	bl	80066b4 <_malloc_r>
 800647a:	4604      	mov	r4, r0
 800647c:	b140      	cbz	r0, 8006490 <__sfmoreglue+0x28>
 800647e:	2100      	movs	r1, #0
 8006480:	e880 0042 	stmia.w	r0, {r1, r6}
 8006484:	300c      	adds	r0, #12
 8006486:	60a0      	str	r0, [r4, #8]
 8006488:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800648c:	f000 f8bb 	bl	8006606 <memset>
 8006490:	4620      	mov	r0, r4
 8006492:	bd70      	pop	{r4, r5, r6, pc}

08006494 <__sinit>:
 8006494:	6983      	ldr	r3, [r0, #24]
 8006496:	b510      	push	{r4, lr}
 8006498:	4604      	mov	r4, r0
 800649a:	bb33      	cbnz	r3, 80064ea <__sinit+0x56>
 800649c:	6483      	str	r3, [r0, #72]	; 0x48
 800649e:	64c3      	str	r3, [r0, #76]	; 0x4c
 80064a0:	6503      	str	r3, [r0, #80]	; 0x50
 80064a2:	4b12      	ldr	r3, [pc, #72]	; (80064ec <__sinit+0x58>)
 80064a4:	4a12      	ldr	r2, [pc, #72]	; (80064f0 <__sinit+0x5c>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6282      	str	r2, [r0, #40]	; 0x28
 80064aa:	4298      	cmp	r0, r3
 80064ac:	bf04      	itt	eq
 80064ae:	2301      	moveq	r3, #1
 80064b0:	6183      	streq	r3, [r0, #24]
 80064b2:	f000 f81f 	bl	80064f4 <__sfp>
 80064b6:	6060      	str	r0, [r4, #4]
 80064b8:	4620      	mov	r0, r4
 80064ba:	f000 f81b 	bl	80064f4 <__sfp>
 80064be:	60a0      	str	r0, [r4, #8]
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 f817 	bl	80064f4 <__sfp>
 80064c6:	2200      	movs	r2, #0
 80064c8:	60e0      	str	r0, [r4, #12]
 80064ca:	2104      	movs	r1, #4
 80064cc:	6860      	ldr	r0, [r4, #4]
 80064ce:	f7ff ffa7 	bl	8006420 <std.isra.0>
 80064d2:	2201      	movs	r2, #1
 80064d4:	2109      	movs	r1, #9
 80064d6:	68a0      	ldr	r0, [r4, #8]
 80064d8:	f7ff ffa2 	bl	8006420 <std.isra.0>
 80064dc:	2202      	movs	r2, #2
 80064de:	2112      	movs	r1, #18
 80064e0:	68e0      	ldr	r0, [r4, #12]
 80064e2:	f7ff ff9d 	bl	8006420 <std.isra.0>
 80064e6:	2301      	movs	r3, #1
 80064e8:	61a3      	str	r3, [r4, #24]
 80064ea:	bd10      	pop	{r4, pc}
 80064ec:	08007640 	.word	0x08007640
 80064f0:	08006415 	.word	0x08006415

080064f4 <__sfp>:
 80064f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064f6:	4b1c      	ldr	r3, [pc, #112]	; (8006568 <__sfp+0x74>)
 80064f8:	681e      	ldr	r6, [r3, #0]
 80064fa:	69b3      	ldr	r3, [r6, #24]
 80064fc:	4607      	mov	r7, r0
 80064fe:	b913      	cbnz	r3, 8006506 <__sfp+0x12>
 8006500:	4630      	mov	r0, r6
 8006502:	f7ff ffc7 	bl	8006494 <__sinit>
 8006506:	3648      	adds	r6, #72	; 0x48
 8006508:	68b4      	ldr	r4, [r6, #8]
 800650a:	6873      	ldr	r3, [r6, #4]
 800650c:	3b01      	subs	r3, #1
 800650e:	d503      	bpl.n	8006518 <__sfp+0x24>
 8006510:	6833      	ldr	r3, [r6, #0]
 8006512:	b133      	cbz	r3, 8006522 <__sfp+0x2e>
 8006514:	6836      	ldr	r6, [r6, #0]
 8006516:	e7f7      	b.n	8006508 <__sfp+0x14>
 8006518:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800651c:	b16d      	cbz	r5, 800653a <__sfp+0x46>
 800651e:	3468      	adds	r4, #104	; 0x68
 8006520:	e7f4      	b.n	800650c <__sfp+0x18>
 8006522:	2104      	movs	r1, #4
 8006524:	4638      	mov	r0, r7
 8006526:	f7ff ff9f 	bl	8006468 <__sfmoreglue>
 800652a:	6030      	str	r0, [r6, #0]
 800652c:	2800      	cmp	r0, #0
 800652e:	d1f1      	bne.n	8006514 <__sfp+0x20>
 8006530:	230c      	movs	r3, #12
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	4604      	mov	r4, r0
 8006536:	4620      	mov	r0, r4
 8006538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800653a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800653e:	81e3      	strh	r3, [r4, #14]
 8006540:	2301      	movs	r3, #1
 8006542:	81a3      	strh	r3, [r4, #12]
 8006544:	6665      	str	r5, [r4, #100]	; 0x64
 8006546:	6025      	str	r5, [r4, #0]
 8006548:	60a5      	str	r5, [r4, #8]
 800654a:	6065      	str	r5, [r4, #4]
 800654c:	6125      	str	r5, [r4, #16]
 800654e:	6165      	str	r5, [r4, #20]
 8006550:	61a5      	str	r5, [r4, #24]
 8006552:	2208      	movs	r2, #8
 8006554:	4629      	mov	r1, r5
 8006556:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800655a:	f000 f854 	bl	8006606 <memset>
 800655e:	6365      	str	r5, [r4, #52]	; 0x34
 8006560:	63a5      	str	r5, [r4, #56]	; 0x38
 8006562:	64a5      	str	r5, [r4, #72]	; 0x48
 8006564:	64e5      	str	r5, [r4, #76]	; 0x4c
 8006566:	e7e6      	b.n	8006536 <__sfp+0x42>
 8006568:	08007640 	.word	0x08007640

0800656c <_fwalk_reent>:
 800656c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006570:	4680      	mov	r8, r0
 8006572:	4689      	mov	r9, r1
 8006574:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006578:	2600      	movs	r6, #0
 800657a:	b914      	cbnz	r4, 8006582 <_fwalk_reent+0x16>
 800657c:	4630      	mov	r0, r6
 800657e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006582:	68a5      	ldr	r5, [r4, #8]
 8006584:	6867      	ldr	r7, [r4, #4]
 8006586:	3f01      	subs	r7, #1
 8006588:	d501      	bpl.n	800658e <_fwalk_reent+0x22>
 800658a:	6824      	ldr	r4, [r4, #0]
 800658c:	e7f5      	b.n	800657a <_fwalk_reent+0xe>
 800658e:	89ab      	ldrh	r3, [r5, #12]
 8006590:	2b01      	cmp	r3, #1
 8006592:	d907      	bls.n	80065a4 <_fwalk_reent+0x38>
 8006594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006598:	3301      	adds	r3, #1
 800659a:	d003      	beq.n	80065a4 <_fwalk_reent+0x38>
 800659c:	4629      	mov	r1, r5
 800659e:	4640      	mov	r0, r8
 80065a0:	47c8      	blx	r9
 80065a2:	4306      	orrs	r6, r0
 80065a4:	3568      	adds	r5, #104	; 0x68
 80065a6:	e7ee      	b.n	8006586 <_fwalk_reent+0x1a>

080065a8 <__libc_init_array>:
 80065a8:	b570      	push	{r4, r5, r6, lr}
 80065aa:	4e0d      	ldr	r6, [pc, #52]	; (80065e0 <__libc_init_array+0x38>)
 80065ac:	4c0d      	ldr	r4, [pc, #52]	; (80065e4 <__libc_init_array+0x3c>)
 80065ae:	1ba4      	subs	r4, r4, r6
 80065b0:	10a4      	asrs	r4, r4, #2
 80065b2:	2500      	movs	r5, #0
 80065b4:	42a5      	cmp	r5, r4
 80065b6:	d109      	bne.n	80065cc <__libc_init_array+0x24>
 80065b8:	4e0b      	ldr	r6, [pc, #44]	; (80065e8 <__libc_init_array+0x40>)
 80065ba:	4c0c      	ldr	r4, [pc, #48]	; (80065ec <__libc_init_array+0x44>)
 80065bc:	f000 fea2 	bl	8007304 <_init>
 80065c0:	1ba4      	subs	r4, r4, r6
 80065c2:	10a4      	asrs	r4, r4, #2
 80065c4:	2500      	movs	r5, #0
 80065c6:	42a5      	cmp	r5, r4
 80065c8:	d105      	bne.n	80065d6 <__libc_init_array+0x2e>
 80065ca:	bd70      	pop	{r4, r5, r6, pc}
 80065cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065d0:	4798      	blx	r3
 80065d2:	3501      	adds	r5, #1
 80065d4:	e7ee      	b.n	80065b4 <__libc_init_array+0xc>
 80065d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80065da:	4798      	blx	r3
 80065dc:	3501      	adds	r5, #1
 80065de:	e7f2      	b.n	80065c6 <__libc_init_array+0x1e>
 80065e0:	080077ec 	.word	0x080077ec
 80065e4:	080077ec 	.word	0x080077ec
 80065e8:	080077ec 	.word	0x080077ec
 80065ec:	080077f0 	.word	0x080077f0

080065f0 <memcpy>:
 80065f0:	b510      	push	{r4, lr}
 80065f2:	1e43      	subs	r3, r0, #1
 80065f4:	440a      	add	r2, r1
 80065f6:	4291      	cmp	r1, r2
 80065f8:	d100      	bne.n	80065fc <memcpy+0xc>
 80065fa:	bd10      	pop	{r4, pc}
 80065fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006600:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006604:	e7f7      	b.n	80065f6 <memcpy+0x6>

08006606 <memset>:
 8006606:	4402      	add	r2, r0
 8006608:	4603      	mov	r3, r0
 800660a:	4293      	cmp	r3, r2
 800660c:	d100      	bne.n	8006610 <memset+0xa>
 800660e:	4770      	bx	lr
 8006610:	f803 1b01 	strb.w	r1, [r3], #1
 8006614:	e7f9      	b.n	800660a <memset+0x4>
	...

08006618 <_free_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4605      	mov	r5, r0
 800661c:	2900      	cmp	r1, #0
 800661e:	d045      	beq.n	80066ac <_free_r+0x94>
 8006620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006624:	1f0c      	subs	r4, r1, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	bfb8      	it	lt
 800662a:	18e4      	addlt	r4, r4, r3
 800662c:	f000 fadc 	bl	8006be8 <__malloc_lock>
 8006630:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <_free_r+0x98>)
 8006632:	6813      	ldr	r3, [r2, #0]
 8006634:	4610      	mov	r0, r2
 8006636:	b933      	cbnz	r3, 8006646 <_free_r+0x2e>
 8006638:	6063      	str	r3, [r4, #4]
 800663a:	6014      	str	r4, [r2, #0]
 800663c:	4628      	mov	r0, r5
 800663e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006642:	f000 bad2 	b.w	8006bea <__malloc_unlock>
 8006646:	42a3      	cmp	r3, r4
 8006648:	d90c      	bls.n	8006664 <_free_r+0x4c>
 800664a:	6821      	ldr	r1, [r4, #0]
 800664c:	1862      	adds	r2, r4, r1
 800664e:	4293      	cmp	r3, r2
 8006650:	bf04      	itt	eq
 8006652:	681a      	ldreq	r2, [r3, #0]
 8006654:	685b      	ldreq	r3, [r3, #4]
 8006656:	6063      	str	r3, [r4, #4]
 8006658:	bf04      	itt	eq
 800665a:	1852      	addeq	r2, r2, r1
 800665c:	6022      	streq	r2, [r4, #0]
 800665e:	6004      	str	r4, [r0, #0]
 8006660:	e7ec      	b.n	800663c <_free_r+0x24>
 8006662:	4613      	mov	r3, r2
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	b10a      	cbz	r2, 800666c <_free_r+0x54>
 8006668:	42a2      	cmp	r2, r4
 800666a:	d9fa      	bls.n	8006662 <_free_r+0x4a>
 800666c:	6819      	ldr	r1, [r3, #0]
 800666e:	1858      	adds	r0, r3, r1
 8006670:	42a0      	cmp	r0, r4
 8006672:	d10b      	bne.n	800668c <_free_r+0x74>
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	4401      	add	r1, r0
 8006678:	1858      	adds	r0, r3, r1
 800667a:	4282      	cmp	r2, r0
 800667c:	6019      	str	r1, [r3, #0]
 800667e:	d1dd      	bne.n	800663c <_free_r+0x24>
 8006680:	6810      	ldr	r0, [r2, #0]
 8006682:	6852      	ldr	r2, [r2, #4]
 8006684:	605a      	str	r2, [r3, #4]
 8006686:	4401      	add	r1, r0
 8006688:	6019      	str	r1, [r3, #0]
 800668a:	e7d7      	b.n	800663c <_free_r+0x24>
 800668c:	d902      	bls.n	8006694 <_free_r+0x7c>
 800668e:	230c      	movs	r3, #12
 8006690:	602b      	str	r3, [r5, #0]
 8006692:	e7d3      	b.n	800663c <_free_r+0x24>
 8006694:	6820      	ldr	r0, [r4, #0]
 8006696:	1821      	adds	r1, r4, r0
 8006698:	428a      	cmp	r2, r1
 800669a:	bf04      	itt	eq
 800669c:	6811      	ldreq	r1, [r2, #0]
 800669e:	6852      	ldreq	r2, [r2, #4]
 80066a0:	6062      	str	r2, [r4, #4]
 80066a2:	bf04      	itt	eq
 80066a4:	1809      	addeq	r1, r1, r0
 80066a6:	6021      	streq	r1, [r4, #0]
 80066a8:	605c      	str	r4, [r3, #4]
 80066aa:	e7c7      	b.n	800663c <_free_r+0x24>
 80066ac:	bd38      	pop	{r3, r4, r5, pc}
 80066ae:	bf00      	nop
 80066b0:	200036d0 	.word	0x200036d0

080066b4 <_malloc_r>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	1ccd      	adds	r5, r1, #3
 80066b8:	f025 0503 	bic.w	r5, r5, #3
 80066bc:	3508      	adds	r5, #8
 80066be:	2d0c      	cmp	r5, #12
 80066c0:	bf38      	it	cc
 80066c2:	250c      	movcc	r5, #12
 80066c4:	2d00      	cmp	r5, #0
 80066c6:	4606      	mov	r6, r0
 80066c8:	db01      	blt.n	80066ce <_malloc_r+0x1a>
 80066ca:	42a9      	cmp	r1, r5
 80066cc:	d903      	bls.n	80066d6 <_malloc_r+0x22>
 80066ce:	230c      	movs	r3, #12
 80066d0:	6033      	str	r3, [r6, #0]
 80066d2:	2000      	movs	r0, #0
 80066d4:	bd70      	pop	{r4, r5, r6, pc}
 80066d6:	f000 fa87 	bl	8006be8 <__malloc_lock>
 80066da:	4a23      	ldr	r2, [pc, #140]	; (8006768 <_malloc_r+0xb4>)
 80066dc:	6814      	ldr	r4, [r2, #0]
 80066de:	4621      	mov	r1, r4
 80066e0:	b991      	cbnz	r1, 8006708 <_malloc_r+0x54>
 80066e2:	4c22      	ldr	r4, [pc, #136]	; (800676c <_malloc_r+0xb8>)
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	b91b      	cbnz	r3, 80066f0 <_malloc_r+0x3c>
 80066e8:	4630      	mov	r0, r6
 80066ea:	f000 f8d1 	bl	8006890 <_sbrk_r>
 80066ee:	6020      	str	r0, [r4, #0]
 80066f0:	4629      	mov	r1, r5
 80066f2:	4630      	mov	r0, r6
 80066f4:	f000 f8cc 	bl	8006890 <_sbrk_r>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d126      	bne.n	800674a <_malloc_r+0x96>
 80066fc:	230c      	movs	r3, #12
 80066fe:	6033      	str	r3, [r6, #0]
 8006700:	4630      	mov	r0, r6
 8006702:	f000 fa72 	bl	8006bea <__malloc_unlock>
 8006706:	e7e4      	b.n	80066d2 <_malloc_r+0x1e>
 8006708:	680b      	ldr	r3, [r1, #0]
 800670a:	1b5b      	subs	r3, r3, r5
 800670c:	d41a      	bmi.n	8006744 <_malloc_r+0x90>
 800670e:	2b0b      	cmp	r3, #11
 8006710:	d90f      	bls.n	8006732 <_malloc_r+0x7e>
 8006712:	600b      	str	r3, [r1, #0]
 8006714:	50cd      	str	r5, [r1, r3]
 8006716:	18cc      	adds	r4, r1, r3
 8006718:	4630      	mov	r0, r6
 800671a:	f000 fa66 	bl	8006bea <__malloc_unlock>
 800671e:	f104 000b 	add.w	r0, r4, #11
 8006722:	1d23      	adds	r3, r4, #4
 8006724:	f020 0007 	bic.w	r0, r0, #7
 8006728:	1ac3      	subs	r3, r0, r3
 800672a:	d01b      	beq.n	8006764 <_malloc_r+0xb0>
 800672c:	425a      	negs	r2, r3
 800672e:	50e2      	str	r2, [r4, r3]
 8006730:	bd70      	pop	{r4, r5, r6, pc}
 8006732:	428c      	cmp	r4, r1
 8006734:	bf0d      	iteet	eq
 8006736:	6863      	ldreq	r3, [r4, #4]
 8006738:	684b      	ldrne	r3, [r1, #4]
 800673a:	6063      	strne	r3, [r4, #4]
 800673c:	6013      	streq	r3, [r2, #0]
 800673e:	bf18      	it	ne
 8006740:	460c      	movne	r4, r1
 8006742:	e7e9      	b.n	8006718 <_malloc_r+0x64>
 8006744:	460c      	mov	r4, r1
 8006746:	6849      	ldr	r1, [r1, #4]
 8006748:	e7ca      	b.n	80066e0 <_malloc_r+0x2c>
 800674a:	1cc4      	adds	r4, r0, #3
 800674c:	f024 0403 	bic.w	r4, r4, #3
 8006750:	42a0      	cmp	r0, r4
 8006752:	d005      	beq.n	8006760 <_malloc_r+0xac>
 8006754:	1a21      	subs	r1, r4, r0
 8006756:	4630      	mov	r0, r6
 8006758:	f000 f89a 	bl	8006890 <_sbrk_r>
 800675c:	3001      	adds	r0, #1
 800675e:	d0cd      	beq.n	80066fc <_malloc_r+0x48>
 8006760:	6025      	str	r5, [r4, #0]
 8006762:	e7d9      	b.n	8006718 <_malloc_r+0x64>
 8006764:	bd70      	pop	{r4, r5, r6, pc}
 8006766:	bf00      	nop
 8006768:	200036d0 	.word	0x200036d0
 800676c:	200036d4 	.word	0x200036d4

08006770 <iprintf>:
 8006770:	b40f      	push	{r0, r1, r2, r3}
 8006772:	4b0a      	ldr	r3, [pc, #40]	; (800679c <iprintf+0x2c>)
 8006774:	b513      	push	{r0, r1, r4, lr}
 8006776:	681c      	ldr	r4, [r3, #0]
 8006778:	b124      	cbz	r4, 8006784 <iprintf+0x14>
 800677a:	69a3      	ldr	r3, [r4, #24]
 800677c:	b913      	cbnz	r3, 8006784 <iprintf+0x14>
 800677e:	4620      	mov	r0, r4
 8006780:	f7ff fe88 	bl	8006494 <__sinit>
 8006784:	ab05      	add	r3, sp, #20
 8006786:	9a04      	ldr	r2, [sp, #16]
 8006788:	68a1      	ldr	r1, [r4, #8]
 800678a:	9301      	str	r3, [sp, #4]
 800678c:	4620      	mov	r0, r4
 800678e:	f000 fa57 	bl	8006c40 <_vfiprintf_r>
 8006792:	b002      	add	sp, #8
 8006794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006798:	b004      	add	sp, #16
 800679a:	4770      	bx	lr
 800679c:	20000020 	.word	0x20000020

080067a0 <putchar>:
 80067a0:	b538      	push	{r3, r4, r5, lr}
 80067a2:	4b08      	ldr	r3, [pc, #32]	; (80067c4 <putchar+0x24>)
 80067a4:	681c      	ldr	r4, [r3, #0]
 80067a6:	4605      	mov	r5, r0
 80067a8:	b124      	cbz	r4, 80067b4 <putchar+0x14>
 80067aa:	69a3      	ldr	r3, [r4, #24]
 80067ac:	b913      	cbnz	r3, 80067b4 <putchar+0x14>
 80067ae:	4620      	mov	r0, r4
 80067b0:	f7ff fe70 	bl	8006494 <__sinit>
 80067b4:	68a2      	ldr	r2, [r4, #8]
 80067b6:	4629      	mov	r1, r5
 80067b8:	4620      	mov	r0, r4
 80067ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067be:	f000 bceb 	b.w	8007198 <_putc_r>
 80067c2:	bf00      	nop
 80067c4:	20000020 	.word	0x20000020

080067c8 <_puts_r>:
 80067c8:	b570      	push	{r4, r5, r6, lr}
 80067ca:	460e      	mov	r6, r1
 80067cc:	4605      	mov	r5, r0
 80067ce:	b118      	cbz	r0, 80067d8 <_puts_r+0x10>
 80067d0:	6983      	ldr	r3, [r0, #24]
 80067d2:	b90b      	cbnz	r3, 80067d8 <_puts_r+0x10>
 80067d4:	f7ff fe5e 	bl	8006494 <__sinit>
 80067d8:	69ab      	ldr	r3, [r5, #24]
 80067da:	68ac      	ldr	r4, [r5, #8]
 80067dc:	b913      	cbnz	r3, 80067e4 <_puts_r+0x1c>
 80067de:	4628      	mov	r0, r5
 80067e0:	f7ff fe58 	bl	8006494 <__sinit>
 80067e4:	4b23      	ldr	r3, [pc, #140]	; (8006874 <_puts_r+0xac>)
 80067e6:	429c      	cmp	r4, r3
 80067e8:	d117      	bne.n	800681a <_puts_r+0x52>
 80067ea:	686c      	ldr	r4, [r5, #4]
 80067ec:	89a3      	ldrh	r3, [r4, #12]
 80067ee:	071b      	lsls	r3, r3, #28
 80067f0:	d51d      	bpl.n	800682e <_puts_r+0x66>
 80067f2:	6923      	ldr	r3, [r4, #16]
 80067f4:	b1db      	cbz	r3, 800682e <_puts_r+0x66>
 80067f6:	3e01      	subs	r6, #1
 80067f8:	68a3      	ldr	r3, [r4, #8]
 80067fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067fe:	3b01      	subs	r3, #1
 8006800:	60a3      	str	r3, [r4, #8]
 8006802:	b9e9      	cbnz	r1, 8006840 <_puts_r+0x78>
 8006804:	2b00      	cmp	r3, #0
 8006806:	da2e      	bge.n	8006866 <_puts_r+0x9e>
 8006808:	4622      	mov	r2, r4
 800680a:	210a      	movs	r1, #10
 800680c:	4628      	mov	r0, r5
 800680e:	f000 f893 	bl	8006938 <__swbuf_r>
 8006812:	3001      	adds	r0, #1
 8006814:	d011      	beq.n	800683a <_puts_r+0x72>
 8006816:	200a      	movs	r0, #10
 8006818:	bd70      	pop	{r4, r5, r6, pc}
 800681a:	4b17      	ldr	r3, [pc, #92]	; (8006878 <_puts_r+0xb0>)
 800681c:	429c      	cmp	r4, r3
 800681e:	d101      	bne.n	8006824 <_puts_r+0x5c>
 8006820:	68ac      	ldr	r4, [r5, #8]
 8006822:	e7e3      	b.n	80067ec <_puts_r+0x24>
 8006824:	4b15      	ldr	r3, [pc, #84]	; (800687c <_puts_r+0xb4>)
 8006826:	429c      	cmp	r4, r3
 8006828:	bf08      	it	eq
 800682a:	68ec      	ldreq	r4, [r5, #12]
 800682c:	e7de      	b.n	80067ec <_puts_r+0x24>
 800682e:	4621      	mov	r1, r4
 8006830:	4628      	mov	r0, r5
 8006832:	f000 f8e5 	bl	8006a00 <__swsetup_r>
 8006836:	2800      	cmp	r0, #0
 8006838:	d0dd      	beq.n	80067f6 <_puts_r+0x2e>
 800683a:	f04f 30ff 	mov.w	r0, #4294967295
 800683e:	bd70      	pop	{r4, r5, r6, pc}
 8006840:	2b00      	cmp	r3, #0
 8006842:	da04      	bge.n	800684e <_puts_r+0x86>
 8006844:	69a2      	ldr	r2, [r4, #24]
 8006846:	4293      	cmp	r3, r2
 8006848:	db06      	blt.n	8006858 <_puts_r+0x90>
 800684a:	290a      	cmp	r1, #10
 800684c:	d004      	beq.n	8006858 <_puts_r+0x90>
 800684e:	6823      	ldr	r3, [r4, #0]
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	6022      	str	r2, [r4, #0]
 8006854:	7019      	strb	r1, [r3, #0]
 8006856:	e7cf      	b.n	80067f8 <_puts_r+0x30>
 8006858:	4622      	mov	r2, r4
 800685a:	4628      	mov	r0, r5
 800685c:	f000 f86c 	bl	8006938 <__swbuf_r>
 8006860:	3001      	adds	r0, #1
 8006862:	d1c9      	bne.n	80067f8 <_puts_r+0x30>
 8006864:	e7e9      	b.n	800683a <_puts_r+0x72>
 8006866:	6823      	ldr	r3, [r4, #0]
 8006868:	200a      	movs	r0, #10
 800686a:	1c5a      	adds	r2, r3, #1
 800686c:	6022      	str	r2, [r4, #0]
 800686e:	7018      	strb	r0, [r3, #0]
 8006870:	bd70      	pop	{r4, r5, r6, pc}
 8006872:	bf00      	nop
 8006874:	08007600 	.word	0x08007600
 8006878:	08007620 	.word	0x08007620
 800687c:	080075e0 	.word	0x080075e0

08006880 <puts>:
 8006880:	4b02      	ldr	r3, [pc, #8]	; (800688c <puts+0xc>)
 8006882:	4601      	mov	r1, r0
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	f7ff bf9f 	b.w	80067c8 <_puts_r>
 800688a:	bf00      	nop
 800688c:	20000020 	.word	0x20000020

08006890 <_sbrk_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4c06      	ldr	r4, [pc, #24]	; (80068ac <_sbrk_r+0x1c>)
 8006894:	2300      	movs	r3, #0
 8006896:	4605      	mov	r5, r0
 8006898:	4608      	mov	r0, r1
 800689a:	6023      	str	r3, [r4, #0]
 800689c:	f7ff fc7c 	bl	8006198 <_sbrk>
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	d102      	bne.n	80068aa <_sbrk_r+0x1a>
 80068a4:	6823      	ldr	r3, [r4, #0]
 80068a6:	b103      	cbz	r3, 80068aa <_sbrk_r+0x1a>
 80068a8:	602b      	str	r3, [r5, #0]
 80068aa:	bd38      	pop	{r3, r4, r5, pc}
 80068ac:	20003824 	.word	0x20003824

080068b0 <__sread>:
 80068b0:	b510      	push	{r4, lr}
 80068b2:	460c      	mov	r4, r1
 80068b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b8:	f000 fca4 	bl	8007204 <_read_r>
 80068bc:	2800      	cmp	r0, #0
 80068be:	bfab      	itete	ge
 80068c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068c2:	89a3      	ldrhlt	r3, [r4, #12]
 80068c4:	181b      	addge	r3, r3, r0
 80068c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068ca:	bfac      	ite	ge
 80068cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80068ce:	81a3      	strhlt	r3, [r4, #12]
 80068d0:	bd10      	pop	{r4, pc}

080068d2 <__swrite>:
 80068d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d6:	461f      	mov	r7, r3
 80068d8:	898b      	ldrh	r3, [r1, #12]
 80068da:	05db      	lsls	r3, r3, #23
 80068dc:	4605      	mov	r5, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	4616      	mov	r6, r2
 80068e2:	d505      	bpl.n	80068f0 <__swrite+0x1e>
 80068e4:	2302      	movs	r3, #2
 80068e6:	2200      	movs	r2, #0
 80068e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ec:	f000 f906 	bl	8006afc <_lseek_r>
 80068f0:	89a3      	ldrh	r3, [r4, #12]
 80068f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068fa:	81a3      	strh	r3, [r4, #12]
 80068fc:	4632      	mov	r2, r6
 80068fe:	463b      	mov	r3, r7
 8006900:	4628      	mov	r0, r5
 8006902:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006906:	f000 b869 	b.w	80069dc <_write_r>

0800690a <__sseek>:
 800690a:	b510      	push	{r4, lr}
 800690c:	460c      	mov	r4, r1
 800690e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006912:	f000 f8f3 	bl	8006afc <_lseek_r>
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	89a3      	ldrh	r3, [r4, #12]
 800691a:	bf15      	itete	ne
 800691c:	6560      	strne	r0, [r4, #84]	; 0x54
 800691e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006922:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006926:	81a3      	strheq	r3, [r4, #12]
 8006928:	bf18      	it	ne
 800692a:	81a3      	strhne	r3, [r4, #12]
 800692c:	bd10      	pop	{r4, pc}

0800692e <__sclose>:
 800692e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006932:	f000 b8d3 	b.w	8006adc <_close_r>
	...

08006938 <__swbuf_r>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	460e      	mov	r6, r1
 800693c:	4614      	mov	r4, r2
 800693e:	4605      	mov	r5, r0
 8006940:	b118      	cbz	r0, 800694a <__swbuf_r+0x12>
 8006942:	6983      	ldr	r3, [r0, #24]
 8006944:	b90b      	cbnz	r3, 800694a <__swbuf_r+0x12>
 8006946:	f7ff fda5 	bl	8006494 <__sinit>
 800694a:	4b21      	ldr	r3, [pc, #132]	; (80069d0 <__swbuf_r+0x98>)
 800694c:	429c      	cmp	r4, r3
 800694e:	d12a      	bne.n	80069a6 <__swbuf_r+0x6e>
 8006950:	686c      	ldr	r4, [r5, #4]
 8006952:	69a3      	ldr	r3, [r4, #24]
 8006954:	60a3      	str	r3, [r4, #8]
 8006956:	89a3      	ldrh	r3, [r4, #12]
 8006958:	071a      	lsls	r2, r3, #28
 800695a:	d52e      	bpl.n	80069ba <__swbuf_r+0x82>
 800695c:	6923      	ldr	r3, [r4, #16]
 800695e:	b363      	cbz	r3, 80069ba <__swbuf_r+0x82>
 8006960:	6923      	ldr	r3, [r4, #16]
 8006962:	6820      	ldr	r0, [r4, #0]
 8006964:	1ac0      	subs	r0, r0, r3
 8006966:	6963      	ldr	r3, [r4, #20]
 8006968:	b2f6      	uxtb	r6, r6
 800696a:	4298      	cmp	r0, r3
 800696c:	4637      	mov	r7, r6
 800696e:	db04      	blt.n	800697a <__swbuf_r+0x42>
 8006970:	4621      	mov	r1, r4
 8006972:	4628      	mov	r0, r5
 8006974:	f7ff fd12 	bl	800639c <_fflush_r>
 8006978:	bb28      	cbnz	r0, 80069c6 <__swbuf_r+0x8e>
 800697a:	68a3      	ldr	r3, [r4, #8]
 800697c:	3b01      	subs	r3, #1
 800697e:	60a3      	str	r3, [r4, #8]
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	6022      	str	r2, [r4, #0]
 8006986:	701e      	strb	r6, [r3, #0]
 8006988:	6963      	ldr	r3, [r4, #20]
 800698a:	3001      	adds	r0, #1
 800698c:	4298      	cmp	r0, r3
 800698e:	d004      	beq.n	800699a <__swbuf_r+0x62>
 8006990:	89a3      	ldrh	r3, [r4, #12]
 8006992:	07db      	lsls	r3, r3, #31
 8006994:	d519      	bpl.n	80069ca <__swbuf_r+0x92>
 8006996:	2e0a      	cmp	r6, #10
 8006998:	d117      	bne.n	80069ca <__swbuf_r+0x92>
 800699a:	4621      	mov	r1, r4
 800699c:	4628      	mov	r0, r5
 800699e:	f7ff fcfd 	bl	800639c <_fflush_r>
 80069a2:	b190      	cbz	r0, 80069ca <__swbuf_r+0x92>
 80069a4:	e00f      	b.n	80069c6 <__swbuf_r+0x8e>
 80069a6:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <__swbuf_r+0x9c>)
 80069a8:	429c      	cmp	r4, r3
 80069aa:	d101      	bne.n	80069b0 <__swbuf_r+0x78>
 80069ac:	68ac      	ldr	r4, [r5, #8]
 80069ae:	e7d0      	b.n	8006952 <__swbuf_r+0x1a>
 80069b0:	4b09      	ldr	r3, [pc, #36]	; (80069d8 <__swbuf_r+0xa0>)
 80069b2:	429c      	cmp	r4, r3
 80069b4:	bf08      	it	eq
 80069b6:	68ec      	ldreq	r4, [r5, #12]
 80069b8:	e7cb      	b.n	8006952 <__swbuf_r+0x1a>
 80069ba:	4621      	mov	r1, r4
 80069bc:	4628      	mov	r0, r5
 80069be:	f000 f81f 	bl	8006a00 <__swsetup_r>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d0cc      	beq.n	8006960 <__swbuf_r+0x28>
 80069c6:	f04f 37ff 	mov.w	r7, #4294967295
 80069ca:	4638      	mov	r0, r7
 80069cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ce:	bf00      	nop
 80069d0:	08007600 	.word	0x08007600
 80069d4:	08007620 	.word	0x08007620
 80069d8:	080075e0 	.word	0x080075e0

080069dc <_write_r>:
 80069dc:	b538      	push	{r3, r4, r5, lr}
 80069de:	4c07      	ldr	r4, [pc, #28]	; (80069fc <_write_r+0x20>)
 80069e0:	4605      	mov	r5, r0
 80069e2:	4608      	mov	r0, r1
 80069e4:	4611      	mov	r1, r2
 80069e6:	2200      	movs	r2, #0
 80069e8:	6022      	str	r2, [r4, #0]
 80069ea:	461a      	mov	r2, r3
 80069ec:	f7ff fbc6 	bl	800617c <_write>
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	d102      	bne.n	80069fa <_write_r+0x1e>
 80069f4:	6823      	ldr	r3, [r4, #0]
 80069f6:	b103      	cbz	r3, 80069fa <_write_r+0x1e>
 80069f8:	602b      	str	r3, [r5, #0]
 80069fa:	bd38      	pop	{r3, r4, r5, pc}
 80069fc:	20003824 	.word	0x20003824

08006a00 <__swsetup_r>:
 8006a00:	4b32      	ldr	r3, [pc, #200]	; (8006acc <__swsetup_r+0xcc>)
 8006a02:	b570      	push	{r4, r5, r6, lr}
 8006a04:	681d      	ldr	r5, [r3, #0]
 8006a06:	4606      	mov	r6, r0
 8006a08:	460c      	mov	r4, r1
 8006a0a:	b125      	cbz	r5, 8006a16 <__swsetup_r+0x16>
 8006a0c:	69ab      	ldr	r3, [r5, #24]
 8006a0e:	b913      	cbnz	r3, 8006a16 <__swsetup_r+0x16>
 8006a10:	4628      	mov	r0, r5
 8006a12:	f7ff fd3f 	bl	8006494 <__sinit>
 8006a16:	4b2e      	ldr	r3, [pc, #184]	; (8006ad0 <__swsetup_r+0xd0>)
 8006a18:	429c      	cmp	r4, r3
 8006a1a:	d10f      	bne.n	8006a3c <__swsetup_r+0x3c>
 8006a1c:	686c      	ldr	r4, [r5, #4]
 8006a1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	0715      	lsls	r5, r2, #28
 8006a26:	d42c      	bmi.n	8006a82 <__swsetup_r+0x82>
 8006a28:	06d0      	lsls	r0, r2, #27
 8006a2a:	d411      	bmi.n	8006a50 <__swsetup_r+0x50>
 8006a2c:	2209      	movs	r2, #9
 8006a2e:	6032      	str	r2, [r6, #0]
 8006a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a34:	81a3      	strh	r3, [r4, #12]
 8006a36:	f04f 30ff 	mov.w	r0, #4294967295
 8006a3a:	bd70      	pop	{r4, r5, r6, pc}
 8006a3c:	4b25      	ldr	r3, [pc, #148]	; (8006ad4 <__swsetup_r+0xd4>)
 8006a3e:	429c      	cmp	r4, r3
 8006a40:	d101      	bne.n	8006a46 <__swsetup_r+0x46>
 8006a42:	68ac      	ldr	r4, [r5, #8]
 8006a44:	e7eb      	b.n	8006a1e <__swsetup_r+0x1e>
 8006a46:	4b24      	ldr	r3, [pc, #144]	; (8006ad8 <__swsetup_r+0xd8>)
 8006a48:	429c      	cmp	r4, r3
 8006a4a:	bf08      	it	eq
 8006a4c:	68ec      	ldreq	r4, [r5, #12]
 8006a4e:	e7e6      	b.n	8006a1e <__swsetup_r+0x1e>
 8006a50:	0751      	lsls	r1, r2, #29
 8006a52:	d512      	bpl.n	8006a7a <__swsetup_r+0x7a>
 8006a54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a56:	b141      	cbz	r1, 8006a6a <__swsetup_r+0x6a>
 8006a58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a5c:	4299      	cmp	r1, r3
 8006a5e:	d002      	beq.n	8006a66 <__swsetup_r+0x66>
 8006a60:	4630      	mov	r0, r6
 8006a62:	f7ff fdd9 	bl	8006618 <_free_r>
 8006a66:	2300      	movs	r3, #0
 8006a68:	6363      	str	r3, [r4, #52]	; 0x34
 8006a6a:	89a3      	ldrh	r3, [r4, #12]
 8006a6c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006a70:	81a3      	strh	r3, [r4, #12]
 8006a72:	2300      	movs	r3, #0
 8006a74:	6063      	str	r3, [r4, #4]
 8006a76:	6923      	ldr	r3, [r4, #16]
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	89a3      	ldrh	r3, [r4, #12]
 8006a7c:	f043 0308 	orr.w	r3, r3, #8
 8006a80:	81a3      	strh	r3, [r4, #12]
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	b94b      	cbnz	r3, 8006a9a <__swsetup_r+0x9a>
 8006a86:	89a3      	ldrh	r3, [r4, #12]
 8006a88:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a90:	d003      	beq.n	8006a9a <__swsetup_r+0x9a>
 8006a92:	4621      	mov	r1, r4
 8006a94:	4630      	mov	r0, r6
 8006a96:	f000 f867 	bl	8006b68 <__smakebuf_r>
 8006a9a:	89a2      	ldrh	r2, [r4, #12]
 8006a9c:	f012 0301 	ands.w	r3, r2, #1
 8006aa0:	d00c      	beq.n	8006abc <__swsetup_r+0xbc>
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60a3      	str	r3, [r4, #8]
 8006aa6:	6963      	ldr	r3, [r4, #20]
 8006aa8:	425b      	negs	r3, r3
 8006aaa:	61a3      	str	r3, [r4, #24]
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	b953      	cbnz	r3, 8006ac6 <__swsetup_r+0xc6>
 8006ab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ab4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006ab8:	d1ba      	bne.n	8006a30 <__swsetup_r+0x30>
 8006aba:	bd70      	pop	{r4, r5, r6, pc}
 8006abc:	0792      	lsls	r2, r2, #30
 8006abe:	bf58      	it	pl
 8006ac0:	6963      	ldrpl	r3, [r4, #20]
 8006ac2:	60a3      	str	r3, [r4, #8]
 8006ac4:	e7f2      	b.n	8006aac <__swsetup_r+0xac>
 8006ac6:	2000      	movs	r0, #0
 8006ac8:	e7f7      	b.n	8006aba <__swsetup_r+0xba>
 8006aca:	bf00      	nop
 8006acc:	20000020 	.word	0x20000020
 8006ad0:	08007600 	.word	0x08007600
 8006ad4:	08007620 	.word	0x08007620
 8006ad8:	080075e0 	.word	0x080075e0

08006adc <_close_r>:
 8006adc:	b538      	push	{r3, r4, r5, lr}
 8006ade:	4c06      	ldr	r4, [pc, #24]	; (8006af8 <_close_r+0x1c>)
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4605      	mov	r5, r0
 8006ae4:	4608      	mov	r0, r1
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	f7ff fb70 	bl	80061cc <_close>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	d102      	bne.n	8006af6 <_close_r+0x1a>
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	b103      	cbz	r3, 8006af6 <_close_r+0x1a>
 8006af4:	602b      	str	r3, [r5, #0]
 8006af6:	bd38      	pop	{r3, r4, r5, pc}
 8006af8:	20003824 	.word	0x20003824

08006afc <_lseek_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4c07      	ldr	r4, [pc, #28]	; (8006b1c <_lseek_r+0x20>)
 8006b00:	4605      	mov	r5, r0
 8006b02:	4608      	mov	r0, r1
 8006b04:	4611      	mov	r1, r2
 8006b06:	2200      	movs	r2, #0
 8006b08:	6022      	str	r2, [r4, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f7ff fb68 	bl	80061e0 <_lseek>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_lseek_r+0x1e>
 8006b14:	6823      	ldr	r3, [r4, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_lseek_r+0x1e>
 8006b18:	602b      	str	r3, [r5, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	20003824 	.word	0x20003824

08006b20 <__swhatbuf_r>:
 8006b20:	b570      	push	{r4, r5, r6, lr}
 8006b22:	460e      	mov	r6, r1
 8006b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b28:	2900      	cmp	r1, #0
 8006b2a:	b090      	sub	sp, #64	; 0x40
 8006b2c:	4614      	mov	r4, r2
 8006b2e:	461d      	mov	r5, r3
 8006b30:	da07      	bge.n	8006b42 <__swhatbuf_r+0x22>
 8006b32:	2300      	movs	r3, #0
 8006b34:	602b      	str	r3, [r5, #0]
 8006b36:	89b3      	ldrh	r3, [r6, #12]
 8006b38:	061a      	lsls	r2, r3, #24
 8006b3a:	d410      	bmi.n	8006b5e <__swhatbuf_r+0x3e>
 8006b3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b40:	e00e      	b.n	8006b60 <__swhatbuf_r+0x40>
 8006b42:	aa01      	add	r2, sp, #4
 8006b44:	f000 fb70 	bl	8007228 <_fstat_r>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	dbf2      	blt.n	8006b32 <__swhatbuf_r+0x12>
 8006b4c:	9a02      	ldr	r2, [sp, #8]
 8006b4e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006b52:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006b56:	425a      	negs	r2, r3
 8006b58:	415a      	adcs	r2, r3
 8006b5a:	602a      	str	r2, [r5, #0]
 8006b5c:	e7ee      	b.n	8006b3c <__swhatbuf_r+0x1c>
 8006b5e:	2340      	movs	r3, #64	; 0x40
 8006b60:	2000      	movs	r0, #0
 8006b62:	6023      	str	r3, [r4, #0]
 8006b64:	b010      	add	sp, #64	; 0x40
 8006b66:	bd70      	pop	{r4, r5, r6, pc}

08006b68 <__smakebuf_r>:
 8006b68:	898b      	ldrh	r3, [r1, #12]
 8006b6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006b6c:	079d      	lsls	r5, r3, #30
 8006b6e:	4606      	mov	r6, r0
 8006b70:	460c      	mov	r4, r1
 8006b72:	d507      	bpl.n	8006b84 <__smakebuf_r+0x1c>
 8006b74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b78:	6023      	str	r3, [r4, #0]
 8006b7a:	6123      	str	r3, [r4, #16]
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	6163      	str	r3, [r4, #20]
 8006b80:	b002      	add	sp, #8
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	ab01      	add	r3, sp, #4
 8006b86:	466a      	mov	r2, sp
 8006b88:	f7ff ffca 	bl	8006b20 <__swhatbuf_r>
 8006b8c:	9900      	ldr	r1, [sp, #0]
 8006b8e:	4605      	mov	r5, r0
 8006b90:	4630      	mov	r0, r6
 8006b92:	f7ff fd8f 	bl	80066b4 <_malloc_r>
 8006b96:	b948      	cbnz	r0, 8006bac <__smakebuf_r+0x44>
 8006b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b9c:	059a      	lsls	r2, r3, #22
 8006b9e:	d4ef      	bmi.n	8006b80 <__smakebuf_r+0x18>
 8006ba0:	f023 0303 	bic.w	r3, r3, #3
 8006ba4:	f043 0302 	orr.w	r3, r3, #2
 8006ba8:	81a3      	strh	r3, [r4, #12]
 8006baa:	e7e3      	b.n	8006b74 <__smakebuf_r+0xc>
 8006bac:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <__smakebuf_r+0x7c>)
 8006bae:	62b3      	str	r3, [r6, #40]	; 0x28
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	6020      	str	r0, [r4, #0]
 8006bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb8:	81a3      	strh	r3, [r4, #12]
 8006bba:	9b00      	ldr	r3, [sp, #0]
 8006bbc:	6163      	str	r3, [r4, #20]
 8006bbe:	9b01      	ldr	r3, [sp, #4]
 8006bc0:	6120      	str	r0, [r4, #16]
 8006bc2:	b15b      	cbz	r3, 8006bdc <__smakebuf_r+0x74>
 8006bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f000 fb3f 	bl	800724c <_isatty_r>
 8006bce:	b128      	cbz	r0, 8006bdc <__smakebuf_r+0x74>
 8006bd0:	89a3      	ldrh	r3, [r4, #12]
 8006bd2:	f023 0303 	bic.w	r3, r3, #3
 8006bd6:	f043 0301 	orr.w	r3, r3, #1
 8006bda:	81a3      	strh	r3, [r4, #12]
 8006bdc:	89a3      	ldrh	r3, [r4, #12]
 8006bde:	431d      	orrs	r5, r3
 8006be0:	81a5      	strh	r5, [r4, #12]
 8006be2:	e7cd      	b.n	8006b80 <__smakebuf_r+0x18>
 8006be4:	08006415 	.word	0x08006415

08006be8 <__malloc_lock>:
 8006be8:	4770      	bx	lr

08006bea <__malloc_unlock>:
 8006bea:	4770      	bx	lr

08006bec <__sfputc_r>:
 8006bec:	6893      	ldr	r3, [r2, #8]
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	b410      	push	{r4}
 8006bf4:	6093      	str	r3, [r2, #8]
 8006bf6:	da09      	bge.n	8006c0c <__sfputc_r+0x20>
 8006bf8:	6994      	ldr	r4, [r2, #24]
 8006bfa:	42a3      	cmp	r3, r4
 8006bfc:	db02      	blt.n	8006c04 <__sfputc_r+0x18>
 8006bfe:	b2cb      	uxtb	r3, r1
 8006c00:	2b0a      	cmp	r3, #10
 8006c02:	d103      	bne.n	8006c0c <__sfputc_r+0x20>
 8006c04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c08:	f7ff be96 	b.w	8006938 <__swbuf_r>
 8006c0c:	6813      	ldr	r3, [r2, #0]
 8006c0e:	1c58      	adds	r0, r3, #1
 8006c10:	6010      	str	r0, [r2, #0]
 8006c12:	7019      	strb	r1, [r3, #0]
 8006c14:	b2c8      	uxtb	r0, r1
 8006c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <__sfputs_r>:
 8006c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1e:	4606      	mov	r6, r0
 8006c20:	460f      	mov	r7, r1
 8006c22:	4614      	mov	r4, r2
 8006c24:	18d5      	adds	r5, r2, r3
 8006c26:	42ac      	cmp	r4, r5
 8006c28:	d101      	bne.n	8006c2e <__sfputs_r+0x12>
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	e007      	b.n	8006c3e <__sfputs_r+0x22>
 8006c2e:	463a      	mov	r2, r7
 8006c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff ffd9 	bl	8006bec <__sfputc_r>
 8006c3a:	1c43      	adds	r3, r0, #1
 8006c3c:	d1f3      	bne.n	8006c26 <__sfputs_r+0xa>
 8006c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006c40 <_vfiprintf_r>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	b09d      	sub	sp, #116	; 0x74
 8006c46:	460c      	mov	r4, r1
 8006c48:	4617      	mov	r7, r2
 8006c4a:	9303      	str	r3, [sp, #12]
 8006c4c:	4606      	mov	r6, r0
 8006c4e:	b118      	cbz	r0, 8006c58 <_vfiprintf_r+0x18>
 8006c50:	6983      	ldr	r3, [r0, #24]
 8006c52:	b90b      	cbnz	r3, 8006c58 <_vfiprintf_r+0x18>
 8006c54:	f7ff fc1e 	bl	8006494 <__sinit>
 8006c58:	4b7c      	ldr	r3, [pc, #496]	; (8006e4c <_vfiprintf_r+0x20c>)
 8006c5a:	429c      	cmp	r4, r3
 8006c5c:	d157      	bne.n	8006d0e <_vfiprintf_r+0xce>
 8006c5e:	6874      	ldr	r4, [r6, #4]
 8006c60:	89a3      	ldrh	r3, [r4, #12]
 8006c62:	0718      	lsls	r0, r3, #28
 8006c64:	d55d      	bpl.n	8006d22 <_vfiprintf_r+0xe2>
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d05a      	beq.n	8006d22 <_vfiprintf_r+0xe2>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c70:	2320      	movs	r3, #32
 8006c72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c76:	2330      	movs	r3, #48	; 0x30
 8006c78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c7c:	f04f 0b01 	mov.w	fp, #1
 8006c80:	46b8      	mov	r8, r7
 8006c82:	4645      	mov	r5, r8
 8006c84:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d155      	bne.n	8006d38 <_vfiprintf_r+0xf8>
 8006c8c:	ebb8 0a07 	subs.w	sl, r8, r7
 8006c90:	d00b      	beq.n	8006caa <_vfiprintf_r+0x6a>
 8006c92:	4653      	mov	r3, sl
 8006c94:	463a      	mov	r2, r7
 8006c96:	4621      	mov	r1, r4
 8006c98:	4630      	mov	r0, r6
 8006c9a:	f7ff ffbf 	bl	8006c1c <__sfputs_r>
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	f000 80c4 	beq.w	8006e2c <_vfiprintf_r+0x1ec>
 8006ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ca6:	4453      	add	r3, sl
 8006ca8:	9309      	str	r3, [sp, #36]	; 0x24
 8006caa:	f898 3000 	ldrb.w	r3, [r8]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 80bc 	beq.w	8006e2c <_vfiprintf_r+0x1ec>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cba:	9304      	str	r3, [sp, #16]
 8006cbc:	9307      	str	r3, [sp, #28]
 8006cbe:	9205      	str	r2, [sp, #20]
 8006cc0:	9306      	str	r3, [sp, #24]
 8006cc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cc6:	931a      	str	r3, [sp, #104]	; 0x68
 8006cc8:	2205      	movs	r2, #5
 8006cca:	7829      	ldrb	r1, [r5, #0]
 8006ccc:	4860      	ldr	r0, [pc, #384]	; (8006e50 <_vfiprintf_r+0x210>)
 8006cce:	f7f9 fa7f 	bl	80001d0 <memchr>
 8006cd2:	f105 0801 	add.w	r8, r5, #1
 8006cd6:	9b04      	ldr	r3, [sp, #16]
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	d131      	bne.n	8006d40 <_vfiprintf_r+0x100>
 8006cdc:	06d9      	lsls	r1, r3, #27
 8006cde:	bf44      	itt	mi
 8006ce0:	2220      	movmi	r2, #32
 8006ce2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ce6:	071a      	lsls	r2, r3, #28
 8006ce8:	bf44      	itt	mi
 8006cea:	222b      	movmi	r2, #43	; 0x2b
 8006cec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cf0:	782a      	ldrb	r2, [r5, #0]
 8006cf2:	2a2a      	cmp	r2, #42	; 0x2a
 8006cf4:	d02c      	beq.n	8006d50 <_vfiprintf_r+0x110>
 8006cf6:	9a07      	ldr	r2, [sp, #28]
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	200a      	movs	r0, #10
 8006cfc:	46a8      	mov	r8, r5
 8006cfe:	3501      	adds	r5, #1
 8006d00:	f898 3000 	ldrb.w	r3, [r8]
 8006d04:	3b30      	subs	r3, #48	; 0x30
 8006d06:	2b09      	cmp	r3, #9
 8006d08:	d96d      	bls.n	8006de6 <_vfiprintf_r+0x1a6>
 8006d0a:	b371      	cbz	r1, 8006d6a <_vfiprintf_r+0x12a>
 8006d0c:	e026      	b.n	8006d5c <_vfiprintf_r+0x11c>
 8006d0e:	4b51      	ldr	r3, [pc, #324]	; (8006e54 <_vfiprintf_r+0x214>)
 8006d10:	429c      	cmp	r4, r3
 8006d12:	d101      	bne.n	8006d18 <_vfiprintf_r+0xd8>
 8006d14:	68b4      	ldr	r4, [r6, #8]
 8006d16:	e7a3      	b.n	8006c60 <_vfiprintf_r+0x20>
 8006d18:	4b4f      	ldr	r3, [pc, #316]	; (8006e58 <_vfiprintf_r+0x218>)
 8006d1a:	429c      	cmp	r4, r3
 8006d1c:	bf08      	it	eq
 8006d1e:	68f4      	ldreq	r4, [r6, #12]
 8006d20:	e79e      	b.n	8006c60 <_vfiprintf_r+0x20>
 8006d22:	4621      	mov	r1, r4
 8006d24:	4630      	mov	r0, r6
 8006d26:	f7ff fe6b 	bl	8006a00 <__swsetup_r>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	d09e      	beq.n	8006c6c <_vfiprintf_r+0x2c>
 8006d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d32:	b01d      	add	sp, #116	; 0x74
 8006d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d38:	2b25      	cmp	r3, #37	; 0x25
 8006d3a:	d0a7      	beq.n	8006c8c <_vfiprintf_r+0x4c>
 8006d3c:	46a8      	mov	r8, r5
 8006d3e:	e7a0      	b.n	8006c82 <_vfiprintf_r+0x42>
 8006d40:	4a43      	ldr	r2, [pc, #268]	; (8006e50 <_vfiprintf_r+0x210>)
 8006d42:	1a80      	subs	r0, r0, r2
 8006d44:	fa0b f000 	lsl.w	r0, fp, r0
 8006d48:	4318      	orrs	r0, r3
 8006d4a:	9004      	str	r0, [sp, #16]
 8006d4c:	4645      	mov	r5, r8
 8006d4e:	e7bb      	b.n	8006cc8 <_vfiprintf_r+0x88>
 8006d50:	9a03      	ldr	r2, [sp, #12]
 8006d52:	1d11      	adds	r1, r2, #4
 8006d54:	6812      	ldr	r2, [r2, #0]
 8006d56:	9103      	str	r1, [sp, #12]
 8006d58:	2a00      	cmp	r2, #0
 8006d5a:	db01      	blt.n	8006d60 <_vfiprintf_r+0x120>
 8006d5c:	9207      	str	r2, [sp, #28]
 8006d5e:	e004      	b.n	8006d6a <_vfiprintf_r+0x12a>
 8006d60:	4252      	negs	r2, r2
 8006d62:	f043 0302 	orr.w	r3, r3, #2
 8006d66:	9207      	str	r2, [sp, #28]
 8006d68:	9304      	str	r3, [sp, #16]
 8006d6a:	f898 3000 	ldrb.w	r3, [r8]
 8006d6e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d70:	d110      	bne.n	8006d94 <_vfiprintf_r+0x154>
 8006d72:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006d76:	2b2a      	cmp	r3, #42	; 0x2a
 8006d78:	f108 0101 	add.w	r1, r8, #1
 8006d7c:	d137      	bne.n	8006dee <_vfiprintf_r+0x1ae>
 8006d7e:	9b03      	ldr	r3, [sp, #12]
 8006d80:	1d1a      	adds	r2, r3, #4
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	9203      	str	r2, [sp, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	bfb8      	it	lt
 8006d8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d8e:	f108 0802 	add.w	r8, r8, #2
 8006d92:	9305      	str	r3, [sp, #20]
 8006d94:	4d31      	ldr	r5, [pc, #196]	; (8006e5c <_vfiprintf_r+0x21c>)
 8006d96:	f898 1000 	ldrb.w	r1, [r8]
 8006d9a:	2203      	movs	r2, #3
 8006d9c:	4628      	mov	r0, r5
 8006d9e:	f7f9 fa17 	bl	80001d0 <memchr>
 8006da2:	b140      	cbz	r0, 8006db6 <_vfiprintf_r+0x176>
 8006da4:	2340      	movs	r3, #64	; 0x40
 8006da6:	1b40      	subs	r0, r0, r5
 8006da8:	fa03 f000 	lsl.w	r0, r3, r0
 8006dac:	9b04      	ldr	r3, [sp, #16]
 8006dae:	4303      	orrs	r3, r0
 8006db0:	9304      	str	r3, [sp, #16]
 8006db2:	f108 0801 	add.w	r8, r8, #1
 8006db6:	f898 1000 	ldrb.w	r1, [r8]
 8006dba:	4829      	ldr	r0, [pc, #164]	; (8006e60 <_vfiprintf_r+0x220>)
 8006dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006dc0:	2206      	movs	r2, #6
 8006dc2:	f108 0701 	add.w	r7, r8, #1
 8006dc6:	f7f9 fa03 	bl	80001d0 <memchr>
 8006dca:	2800      	cmp	r0, #0
 8006dcc:	d034      	beq.n	8006e38 <_vfiprintf_r+0x1f8>
 8006dce:	4b25      	ldr	r3, [pc, #148]	; (8006e64 <_vfiprintf_r+0x224>)
 8006dd0:	bb03      	cbnz	r3, 8006e14 <_vfiprintf_r+0x1d4>
 8006dd2:	9b03      	ldr	r3, [sp, #12]
 8006dd4:	3307      	adds	r3, #7
 8006dd6:	f023 0307 	bic.w	r3, r3, #7
 8006dda:	3308      	adds	r3, #8
 8006ddc:	9303      	str	r3, [sp, #12]
 8006dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de0:	444b      	add	r3, r9
 8006de2:	9309      	str	r3, [sp, #36]	; 0x24
 8006de4:	e74c      	b.n	8006c80 <_vfiprintf_r+0x40>
 8006de6:	fb00 3202 	mla	r2, r0, r2, r3
 8006dea:	2101      	movs	r1, #1
 8006dec:	e786      	b.n	8006cfc <_vfiprintf_r+0xbc>
 8006dee:	2300      	movs	r3, #0
 8006df0:	9305      	str	r3, [sp, #20]
 8006df2:	4618      	mov	r0, r3
 8006df4:	250a      	movs	r5, #10
 8006df6:	4688      	mov	r8, r1
 8006df8:	3101      	adds	r1, #1
 8006dfa:	f898 2000 	ldrb.w	r2, [r8]
 8006dfe:	3a30      	subs	r2, #48	; 0x30
 8006e00:	2a09      	cmp	r2, #9
 8006e02:	d903      	bls.n	8006e0c <_vfiprintf_r+0x1cc>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d0c5      	beq.n	8006d94 <_vfiprintf_r+0x154>
 8006e08:	9005      	str	r0, [sp, #20]
 8006e0a:	e7c3      	b.n	8006d94 <_vfiprintf_r+0x154>
 8006e0c:	fb05 2000 	mla	r0, r5, r0, r2
 8006e10:	2301      	movs	r3, #1
 8006e12:	e7f0      	b.n	8006df6 <_vfiprintf_r+0x1b6>
 8006e14:	ab03      	add	r3, sp, #12
 8006e16:	9300      	str	r3, [sp, #0]
 8006e18:	4622      	mov	r2, r4
 8006e1a:	4b13      	ldr	r3, [pc, #76]	; (8006e68 <_vfiprintf_r+0x228>)
 8006e1c:	a904      	add	r1, sp, #16
 8006e1e:	4630      	mov	r0, r6
 8006e20:	f3af 8000 	nop.w
 8006e24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006e28:	4681      	mov	r9, r0
 8006e2a:	d1d8      	bne.n	8006dde <_vfiprintf_r+0x19e>
 8006e2c:	89a3      	ldrh	r3, [r4, #12]
 8006e2e:	065b      	lsls	r3, r3, #25
 8006e30:	f53f af7d 	bmi.w	8006d2e <_vfiprintf_r+0xee>
 8006e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e36:	e77c      	b.n	8006d32 <_vfiprintf_r+0xf2>
 8006e38:	ab03      	add	r3, sp, #12
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	4622      	mov	r2, r4
 8006e3e:	4b0a      	ldr	r3, [pc, #40]	; (8006e68 <_vfiprintf_r+0x228>)
 8006e40:	a904      	add	r1, sp, #16
 8006e42:	4630      	mov	r0, r6
 8006e44:	f000 f888 	bl	8006f58 <_printf_i>
 8006e48:	e7ec      	b.n	8006e24 <_vfiprintf_r+0x1e4>
 8006e4a:	bf00      	nop
 8006e4c:	08007600 	.word	0x08007600
 8006e50:	08007644 	.word	0x08007644
 8006e54:	08007620 	.word	0x08007620
 8006e58:	080075e0 	.word	0x080075e0
 8006e5c:	0800764a 	.word	0x0800764a
 8006e60:	0800764e 	.word	0x0800764e
 8006e64:	00000000 	.word	0x00000000
 8006e68:	08006c1d 	.word	0x08006c1d

08006e6c <_printf_common>:
 8006e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e70:	4691      	mov	r9, r2
 8006e72:	461f      	mov	r7, r3
 8006e74:	688a      	ldr	r2, [r1, #8]
 8006e76:	690b      	ldr	r3, [r1, #16]
 8006e78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	bfb8      	it	lt
 8006e80:	4613      	movlt	r3, r2
 8006e82:	f8c9 3000 	str.w	r3, [r9]
 8006e86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	b112      	cbz	r2, 8006e96 <_printf_common+0x2a>
 8006e90:	3301      	adds	r3, #1
 8006e92:	f8c9 3000 	str.w	r3, [r9]
 8006e96:	6823      	ldr	r3, [r4, #0]
 8006e98:	0699      	lsls	r1, r3, #26
 8006e9a:	bf42      	ittt	mi
 8006e9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006ea0:	3302      	addmi	r3, #2
 8006ea2:	f8c9 3000 	strmi.w	r3, [r9]
 8006ea6:	6825      	ldr	r5, [r4, #0]
 8006ea8:	f015 0506 	ands.w	r5, r5, #6
 8006eac:	d107      	bne.n	8006ebe <_printf_common+0x52>
 8006eae:	f104 0a19 	add.w	sl, r4, #25
 8006eb2:	68e3      	ldr	r3, [r4, #12]
 8006eb4:	f8d9 2000 	ldr.w	r2, [r9]
 8006eb8:	1a9b      	subs	r3, r3, r2
 8006eba:	429d      	cmp	r5, r3
 8006ebc:	db29      	blt.n	8006f12 <_printf_common+0xa6>
 8006ebe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006ec2:	6822      	ldr	r2, [r4, #0]
 8006ec4:	3300      	adds	r3, #0
 8006ec6:	bf18      	it	ne
 8006ec8:	2301      	movne	r3, #1
 8006eca:	0692      	lsls	r2, r2, #26
 8006ecc:	d42e      	bmi.n	8006f2c <_printf_common+0xc0>
 8006ece:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ed2:	4639      	mov	r1, r7
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	47c0      	blx	r8
 8006ed8:	3001      	adds	r0, #1
 8006eda:	d021      	beq.n	8006f20 <_printf_common+0xb4>
 8006edc:	6823      	ldr	r3, [r4, #0]
 8006ede:	68e5      	ldr	r5, [r4, #12]
 8006ee0:	f8d9 2000 	ldr.w	r2, [r9]
 8006ee4:	f003 0306 	and.w	r3, r3, #6
 8006ee8:	2b04      	cmp	r3, #4
 8006eea:	bf08      	it	eq
 8006eec:	1aad      	subeq	r5, r5, r2
 8006eee:	68a3      	ldr	r3, [r4, #8]
 8006ef0:	6922      	ldr	r2, [r4, #16]
 8006ef2:	bf0c      	ite	eq
 8006ef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ef8:	2500      	movne	r5, #0
 8006efa:	4293      	cmp	r3, r2
 8006efc:	bfc4      	itt	gt
 8006efe:	1a9b      	subgt	r3, r3, r2
 8006f00:	18ed      	addgt	r5, r5, r3
 8006f02:	f04f 0900 	mov.w	r9, #0
 8006f06:	341a      	adds	r4, #26
 8006f08:	454d      	cmp	r5, r9
 8006f0a:	d11b      	bne.n	8006f44 <_printf_common+0xd8>
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f12:	2301      	movs	r3, #1
 8006f14:	4652      	mov	r2, sl
 8006f16:	4639      	mov	r1, r7
 8006f18:	4630      	mov	r0, r6
 8006f1a:	47c0      	blx	r8
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d103      	bne.n	8006f28 <_printf_common+0xbc>
 8006f20:	f04f 30ff 	mov.w	r0, #4294967295
 8006f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f28:	3501      	adds	r5, #1
 8006f2a:	e7c2      	b.n	8006eb2 <_printf_common+0x46>
 8006f2c:	18e1      	adds	r1, r4, r3
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	2030      	movs	r0, #48	; 0x30
 8006f32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006f36:	4422      	add	r2, r4
 8006f38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006f3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006f40:	3302      	adds	r3, #2
 8006f42:	e7c4      	b.n	8006ece <_printf_common+0x62>
 8006f44:	2301      	movs	r3, #1
 8006f46:	4622      	mov	r2, r4
 8006f48:	4639      	mov	r1, r7
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	47c0      	blx	r8
 8006f4e:	3001      	adds	r0, #1
 8006f50:	d0e6      	beq.n	8006f20 <_printf_common+0xb4>
 8006f52:	f109 0901 	add.w	r9, r9, #1
 8006f56:	e7d7      	b.n	8006f08 <_printf_common+0x9c>

08006f58 <_printf_i>:
 8006f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006f5c:	4617      	mov	r7, r2
 8006f5e:	7e0a      	ldrb	r2, [r1, #24]
 8006f60:	b085      	sub	sp, #20
 8006f62:	2a6e      	cmp	r2, #110	; 0x6e
 8006f64:	4698      	mov	r8, r3
 8006f66:	4606      	mov	r6, r0
 8006f68:	460c      	mov	r4, r1
 8006f6a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f6c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8006f70:	f000 80bc 	beq.w	80070ec <_printf_i+0x194>
 8006f74:	d81a      	bhi.n	8006fac <_printf_i+0x54>
 8006f76:	2a63      	cmp	r2, #99	; 0x63
 8006f78:	d02e      	beq.n	8006fd8 <_printf_i+0x80>
 8006f7a:	d80a      	bhi.n	8006f92 <_printf_i+0x3a>
 8006f7c:	2a00      	cmp	r2, #0
 8006f7e:	f000 80c8 	beq.w	8007112 <_printf_i+0x1ba>
 8006f82:	2a58      	cmp	r2, #88	; 0x58
 8006f84:	f000 808a 	beq.w	800709c <_printf_i+0x144>
 8006f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f8c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8006f90:	e02a      	b.n	8006fe8 <_printf_i+0x90>
 8006f92:	2a64      	cmp	r2, #100	; 0x64
 8006f94:	d001      	beq.n	8006f9a <_printf_i+0x42>
 8006f96:	2a69      	cmp	r2, #105	; 0x69
 8006f98:	d1f6      	bne.n	8006f88 <_printf_i+0x30>
 8006f9a:	6821      	ldr	r1, [r4, #0]
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006fa2:	d023      	beq.n	8006fec <_printf_i+0x94>
 8006fa4:	1d11      	adds	r1, r2, #4
 8006fa6:	6019      	str	r1, [r3, #0]
 8006fa8:	6813      	ldr	r3, [r2, #0]
 8006faa:	e027      	b.n	8006ffc <_printf_i+0xa4>
 8006fac:	2a73      	cmp	r2, #115	; 0x73
 8006fae:	f000 80b4 	beq.w	800711a <_printf_i+0x1c2>
 8006fb2:	d808      	bhi.n	8006fc6 <_printf_i+0x6e>
 8006fb4:	2a6f      	cmp	r2, #111	; 0x6f
 8006fb6:	d02a      	beq.n	800700e <_printf_i+0xb6>
 8006fb8:	2a70      	cmp	r2, #112	; 0x70
 8006fba:	d1e5      	bne.n	8006f88 <_printf_i+0x30>
 8006fbc:	680a      	ldr	r2, [r1, #0]
 8006fbe:	f042 0220 	orr.w	r2, r2, #32
 8006fc2:	600a      	str	r2, [r1, #0]
 8006fc4:	e003      	b.n	8006fce <_printf_i+0x76>
 8006fc6:	2a75      	cmp	r2, #117	; 0x75
 8006fc8:	d021      	beq.n	800700e <_printf_i+0xb6>
 8006fca:	2a78      	cmp	r2, #120	; 0x78
 8006fcc:	d1dc      	bne.n	8006f88 <_printf_i+0x30>
 8006fce:	2278      	movs	r2, #120	; 0x78
 8006fd0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8006fd4:	496e      	ldr	r1, [pc, #440]	; (8007190 <_printf_i+0x238>)
 8006fd6:	e064      	b.n	80070a2 <_printf_i+0x14a>
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8006fde:	1d11      	adds	r1, r2, #4
 8006fe0:	6019      	str	r1, [r3, #0]
 8006fe2:	6813      	ldr	r3, [r2, #0]
 8006fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e0a3      	b.n	8007134 <_printf_i+0x1dc>
 8006fec:	f011 0f40 	tst.w	r1, #64	; 0x40
 8006ff0:	f102 0104 	add.w	r1, r2, #4
 8006ff4:	6019      	str	r1, [r3, #0]
 8006ff6:	d0d7      	beq.n	8006fa8 <_printf_i+0x50>
 8006ff8:	f9b2 3000 	ldrsh.w	r3, [r2]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	da03      	bge.n	8007008 <_printf_i+0xb0>
 8007000:	222d      	movs	r2, #45	; 0x2d
 8007002:	425b      	negs	r3, r3
 8007004:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007008:	4962      	ldr	r1, [pc, #392]	; (8007194 <_printf_i+0x23c>)
 800700a:	220a      	movs	r2, #10
 800700c:	e017      	b.n	800703e <_printf_i+0xe6>
 800700e:	6820      	ldr	r0, [r4, #0]
 8007010:	6819      	ldr	r1, [r3, #0]
 8007012:	f010 0f80 	tst.w	r0, #128	; 0x80
 8007016:	d003      	beq.n	8007020 <_printf_i+0xc8>
 8007018:	1d08      	adds	r0, r1, #4
 800701a:	6018      	str	r0, [r3, #0]
 800701c:	680b      	ldr	r3, [r1, #0]
 800701e:	e006      	b.n	800702e <_printf_i+0xd6>
 8007020:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007024:	f101 0004 	add.w	r0, r1, #4
 8007028:	6018      	str	r0, [r3, #0]
 800702a:	d0f7      	beq.n	800701c <_printf_i+0xc4>
 800702c:	880b      	ldrh	r3, [r1, #0]
 800702e:	4959      	ldr	r1, [pc, #356]	; (8007194 <_printf_i+0x23c>)
 8007030:	2a6f      	cmp	r2, #111	; 0x6f
 8007032:	bf14      	ite	ne
 8007034:	220a      	movne	r2, #10
 8007036:	2208      	moveq	r2, #8
 8007038:	2000      	movs	r0, #0
 800703a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800703e:	6865      	ldr	r5, [r4, #4]
 8007040:	60a5      	str	r5, [r4, #8]
 8007042:	2d00      	cmp	r5, #0
 8007044:	f2c0 809c 	blt.w	8007180 <_printf_i+0x228>
 8007048:	6820      	ldr	r0, [r4, #0]
 800704a:	f020 0004 	bic.w	r0, r0, #4
 800704e:	6020      	str	r0, [r4, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d13f      	bne.n	80070d4 <_printf_i+0x17c>
 8007054:	2d00      	cmp	r5, #0
 8007056:	f040 8095 	bne.w	8007184 <_printf_i+0x22c>
 800705a:	4675      	mov	r5, lr
 800705c:	2a08      	cmp	r2, #8
 800705e:	d10b      	bne.n	8007078 <_printf_i+0x120>
 8007060:	6823      	ldr	r3, [r4, #0]
 8007062:	07da      	lsls	r2, r3, #31
 8007064:	d508      	bpl.n	8007078 <_printf_i+0x120>
 8007066:	6923      	ldr	r3, [r4, #16]
 8007068:	6862      	ldr	r2, [r4, #4]
 800706a:	429a      	cmp	r2, r3
 800706c:	bfde      	ittt	le
 800706e:	2330      	movle	r3, #48	; 0x30
 8007070:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007074:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007078:	ebae 0305 	sub.w	r3, lr, r5
 800707c:	6123      	str	r3, [r4, #16]
 800707e:	f8cd 8000 	str.w	r8, [sp]
 8007082:	463b      	mov	r3, r7
 8007084:	aa03      	add	r2, sp, #12
 8007086:	4621      	mov	r1, r4
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff feef 	bl	8006e6c <_printf_common>
 800708e:	3001      	adds	r0, #1
 8007090:	d155      	bne.n	800713e <_printf_i+0x1e6>
 8007092:	f04f 30ff 	mov.w	r0, #4294967295
 8007096:	b005      	add	sp, #20
 8007098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800709c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80070a0:	493c      	ldr	r1, [pc, #240]	; (8007194 <_printf_i+0x23c>)
 80070a2:	6822      	ldr	r2, [r4, #0]
 80070a4:	6818      	ldr	r0, [r3, #0]
 80070a6:	f012 0f80 	tst.w	r2, #128	; 0x80
 80070aa:	f100 0504 	add.w	r5, r0, #4
 80070ae:	601d      	str	r5, [r3, #0]
 80070b0:	d001      	beq.n	80070b6 <_printf_i+0x15e>
 80070b2:	6803      	ldr	r3, [r0, #0]
 80070b4:	e002      	b.n	80070bc <_printf_i+0x164>
 80070b6:	0655      	lsls	r5, r2, #25
 80070b8:	d5fb      	bpl.n	80070b2 <_printf_i+0x15a>
 80070ba:	8803      	ldrh	r3, [r0, #0]
 80070bc:	07d0      	lsls	r0, r2, #31
 80070be:	bf44      	itt	mi
 80070c0:	f042 0220 	orrmi.w	r2, r2, #32
 80070c4:	6022      	strmi	r2, [r4, #0]
 80070c6:	b91b      	cbnz	r3, 80070d0 <_printf_i+0x178>
 80070c8:	6822      	ldr	r2, [r4, #0]
 80070ca:	f022 0220 	bic.w	r2, r2, #32
 80070ce:	6022      	str	r2, [r4, #0]
 80070d0:	2210      	movs	r2, #16
 80070d2:	e7b1      	b.n	8007038 <_printf_i+0xe0>
 80070d4:	4675      	mov	r5, lr
 80070d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80070da:	fb02 3310 	mls	r3, r2, r0, r3
 80070de:	5ccb      	ldrb	r3, [r1, r3]
 80070e0:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80070e4:	4603      	mov	r3, r0
 80070e6:	2800      	cmp	r0, #0
 80070e8:	d1f5      	bne.n	80070d6 <_printf_i+0x17e>
 80070ea:	e7b7      	b.n	800705c <_printf_i+0x104>
 80070ec:	6808      	ldr	r0, [r1, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	6949      	ldr	r1, [r1, #20]
 80070f2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80070f6:	d004      	beq.n	8007102 <_printf_i+0x1aa>
 80070f8:	1d10      	adds	r0, r2, #4
 80070fa:	6018      	str	r0, [r3, #0]
 80070fc:	6813      	ldr	r3, [r2, #0]
 80070fe:	6019      	str	r1, [r3, #0]
 8007100:	e007      	b.n	8007112 <_printf_i+0x1ba>
 8007102:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007106:	f102 0004 	add.w	r0, r2, #4
 800710a:	6018      	str	r0, [r3, #0]
 800710c:	6813      	ldr	r3, [r2, #0]
 800710e:	d0f6      	beq.n	80070fe <_printf_i+0x1a6>
 8007110:	8019      	strh	r1, [r3, #0]
 8007112:	2300      	movs	r3, #0
 8007114:	6123      	str	r3, [r4, #16]
 8007116:	4675      	mov	r5, lr
 8007118:	e7b1      	b.n	800707e <_printf_i+0x126>
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	1d11      	adds	r1, r2, #4
 800711e:	6019      	str	r1, [r3, #0]
 8007120:	6815      	ldr	r5, [r2, #0]
 8007122:	6862      	ldr	r2, [r4, #4]
 8007124:	2100      	movs	r1, #0
 8007126:	4628      	mov	r0, r5
 8007128:	f7f9 f852 	bl	80001d0 <memchr>
 800712c:	b108      	cbz	r0, 8007132 <_printf_i+0x1da>
 800712e:	1b40      	subs	r0, r0, r5
 8007130:	6060      	str	r0, [r4, #4]
 8007132:	6863      	ldr	r3, [r4, #4]
 8007134:	6123      	str	r3, [r4, #16]
 8007136:	2300      	movs	r3, #0
 8007138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800713c:	e79f      	b.n	800707e <_printf_i+0x126>
 800713e:	6923      	ldr	r3, [r4, #16]
 8007140:	462a      	mov	r2, r5
 8007142:	4639      	mov	r1, r7
 8007144:	4630      	mov	r0, r6
 8007146:	47c0      	blx	r8
 8007148:	3001      	adds	r0, #1
 800714a:	d0a2      	beq.n	8007092 <_printf_i+0x13a>
 800714c:	6823      	ldr	r3, [r4, #0]
 800714e:	079b      	lsls	r3, r3, #30
 8007150:	d507      	bpl.n	8007162 <_printf_i+0x20a>
 8007152:	2500      	movs	r5, #0
 8007154:	f104 0919 	add.w	r9, r4, #25
 8007158:	68e3      	ldr	r3, [r4, #12]
 800715a:	9a03      	ldr	r2, [sp, #12]
 800715c:	1a9b      	subs	r3, r3, r2
 800715e:	429d      	cmp	r5, r3
 8007160:	db05      	blt.n	800716e <_printf_i+0x216>
 8007162:	68e0      	ldr	r0, [r4, #12]
 8007164:	9b03      	ldr	r3, [sp, #12]
 8007166:	4298      	cmp	r0, r3
 8007168:	bfb8      	it	lt
 800716a:	4618      	movlt	r0, r3
 800716c:	e793      	b.n	8007096 <_printf_i+0x13e>
 800716e:	2301      	movs	r3, #1
 8007170:	464a      	mov	r2, r9
 8007172:	4639      	mov	r1, r7
 8007174:	4630      	mov	r0, r6
 8007176:	47c0      	blx	r8
 8007178:	3001      	adds	r0, #1
 800717a:	d08a      	beq.n	8007092 <_printf_i+0x13a>
 800717c:	3501      	adds	r5, #1
 800717e:	e7eb      	b.n	8007158 <_printf_i+0x200>
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1a7      	bne.n	80070d4 <_printf_i+0x17c>
 8007184:	780b      	ldrb	r3, [r1, #0]
 8007186:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800718a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800718e:	e765      	b.n	800705c <_printf_i+0x104>
 8007190:	08007666 	.word	0x08007666
 8007194:	08007655 	.word	0x08007655

08007198 <_putc_r>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	460d      	mov	r5, r1
 800719c:	4614      	mov	r4, r2
 800719e:	4606      	mov	r6, r0
 80071a0:	b118      	cbz	r0, 80071aa <_putc_r+0x12>
 80071a2:	6983      	ldr	r3, [r0, #24]
 80071a4:	b90b      	cbnz	r3, 80071aa <_putc_r+0x12>
 80071a6:	f7ff f975 	bl	8006494 <__sinit>
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <_putc_r+0x60>)
 80071ac:	429c      	cmp	r4, r3
 80071ae:	d112      	bne.n	80071d6 <_putc_r+0x3e>
 80071b0:	6874      	ldr	r4, [r6, #4]
 80071b2:	68a3      	ldr	r3, [r4, #8]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	60a3      	str	r3, [r4, #8]
 80071ba:	da16      	bge.n	80071ea <_putc_r+0x52>
 80071bc:	69a2      	ldr	r2, [r4, #24]
 80071be:	4293      	cmp	r3, r2
 80071c0:	db02      	blt.n	80071c8 <_putc_r+0x30>
 80071c2:	b2eb      	uxtb	r3, r5
 80071c4:	2b0a      	cmp	r3, #10
 80071c6:	d110      	bne.n	80071ea <_putc_r+0x52>
 80071c8:	4622      	mov	r2, r4
 80071ca:	4629      	mov	r1, r5
 80071cc:	4630      	mov	r0, r6
 80071ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80071d2:	f7ff bbb1 	b.w	8006938 <__swbuf_r>
 80071d6:	4b09      	ldr	r3, [pc, #36]	; (80071fc <_putc_r+0x64>)
 80071d8:	429c      	cmp	r4, r3
 80071da:	d101      	bne.n	80071e0 <_putc_r+0x48>
 80071dc:	68b4      	ldr	r4, [r6, #8]
 80071de:	e7e8      	b.n	80071b2 <_putc_r+0x1a>
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <_putc_r+0x68>)
 80071e2:	429c      	cmp	r4, r3
 80071e4:	bf08      	it	eq
 80071e6:	68f4      	ldreq	r4, [r6, #12]
 80071e8:	e7e3      	b.n	80071b2 <_putc_r+0x1a>
 80071ea:	6823      	ldr	r3, [r4, #0]
 80071ec:	1c5a      	adds	r2, r3, #1
 80071ee:	6022      	str	r2, [r4, #0]
 80071f0:	701d      	strb	r5, [r3, #0]
 80071f2:	b2e8      	uxtb	r0, r5
 80071f4:	bd70      	pop	{r4, r5, r6, pc}
 80071f6:	bf00      	nop
 80071f8:	08007600 	.word	0x08007600
 80071fc:	08007620 	.word	0x08007620
 8007200:	080075e0 	.word	0x080075e0

08007204 <_read_r>:
 8007204:	b538      	push	{r3, r4, r5, lr}
 8007206:	4c07      	ldr	r4, [pc, #28]	; (8007224 <_read_r+0x20>)
 8007208:	4605      	mov	r5, r0
 800720a:	4608      	mov	r0, r1
 800720c:	4611      	mov	r1, r2
 800720e:	2200      	movs	r2, #0
 8007210:	6022      	str	r2, [r4, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	f7fe ffa4 	bl	8006160 <_read>
 8007218:	1c43      	adds	r3, r0, #1
 800721a:	d102      	bne.n	8007222 <_read_r+0x1e>
 800721c:	6823      	ldr	r3, [r4, #0]
 800721e:	b103      	cbz	r3, 8007222 <_read_r+0x1e>
 8007220:	602b      	str	r3, [r5, #0]
 8007222:	bd38      	pop	{r3, r4, r5, pc}
 8007224:	20003824 	.word	0x20003824

08007228 <_fstat_r>:
 8007228:	b538      	push	{r3, r4, r5, lr}
 800722a:	4c07      	ldr	r4, [pc, #28]	; (8007248 <_fstat_r+0x20>)
 800722c:	2300      	movs	r3, #0
 800722e:	4605      	mov	r5, r0
 8007230:	4608      	mov	r0, r1
 8007232:	4611      	mov	r1, r2
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	f7fe ffcc 	bl	80061d2 <_fstat>
 800723a:	1c43      	adds	r3, r0, #1
 800723c:	d102      	bne.n	8007244 <_fstat_r+0x1c>
 800723e:	6823      	ldr	r3, [r4, #0]
 8007240:	b103      	cbz	r3, 8007244 <_fstat_r+0x1c>
 8007242:	602b      	str	r3, [r5, #0]
 8007244:	bd38      	pop	{r3, r4, r5, pc}
 8007246:	bf00      	nop
 8007248:	20003824 	.word	0x20003824

0800724c <_isatty_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4c06      	ldr	r4, [pc, #24]	; (8007268 <_isatty_r+0x1c>)
 8007250:	2300      	movs	r3, #0
 8007252:	4605      	mov	r5, r0
 8007254:	4608      	mov	r0, r1
 8007256:	6023      	str	r3, [r4, #0]
 8007258:	f7fe ffc0 	bl	80061dc <_isatty>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_isatty_r+0x1a>
 8007260:	6823      	ldr	r3, [r4, #0]
 8007262:	b103      	cbz	r3, 8007266 <_isatty_r+0x1a>
 8007264:	602b      	str	r3, [r5, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	20003824 	.word	0x20003824

0800726c <abort>:
 800726c:	b508      	push	{r3, lr}
 800726e:	2006      	movs	r0, #6
 8007270:	f000 f82c 	bl	80072cc <raise>
 8007274:	2001      	movs	r0, #1
 8007276:	f7fe ff6d 	bl	8006154 <_exit>

0800727a <_raise_r>:
 800727a:	291f      	cmp	r1, #31
 800727c:	b538      	push	{r3, r4, r5, lr}
 800727e:	4604      	mov	r4, r0
 8007280:	460d      	mov	r5, r1
 8007282:	d904      	bls.n	800728e <_raise_r+0x14>
 8007284:	2316      	movs	r3, #22
 8007286:	6003      	str	r3, [r0, #0]
 8007288:	f04f 30ff 	mov.w	r0, #4294967295
 800728c:	bd38      	pop	{r3, r4, r5, pc}
 800728e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007290:	b112      	cbz	r2, 8007298 <_raise_r+0x1e>
 8007292:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007296:	b94b      	cbnz	r3, 80072ac <_raise_r+0x32>
 8007298:	4620      	mov	r0, r4
 800729a:	f000 f831 	bl	8007300 <_getpid_r>
 800729e:	462a      	mov	r2, r5
 80072a0:	4601      	mov	r1, r0
 80072a2:	4620      	mov	r0, r4
 80072a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072a8:	f000 b818 	b.w	80072dc <_kill_r>
 80072ac:	2b01      	cmp	r3, #1
 80072ae:	d00a      	beq.n	80072c6 <_raise_r+0x4c>
 80072b0:	1c59      	adds	r1, r3, #1
 80072b2:	d103      	bne.n	80072bc <_raise_r+0x42>
 80072b4:	2316      	movs	r3, #22
 80072b6:	6003      	str	r3, [r0, #0]
 80072b8:	2001      	movs	r0, #1
 80072ba:	bd38      	pop	{r3, r4, r5, pc}
 80072bc:	2400      	movs	r4, #0
 80072be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80072c2:	4628      	mov	r0, r5
 80072c4:	4798      	blx	r3
 80072c6:	2000      	movs	r0, #0
 80072c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080072cc <raise>:
 80072cc:	4b02      	ldr	r3, [pc, #8]	; (80072d8 <raise+0xc>)
 80072ce:	4601      	mov	r1, r0
 80072d0:	6818      	ldr	r0, [r3, #0]
 80072d2:	f7ff bfd2 	b.w	800727a <_raise_r>
 80072d6:	bf00      	nop
 80072d8:	20000020 	.word	0x20000020

080072dc <_kill_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4c07      	ldr	r4, [pc, #28]	; (80072fc <_kill_r+0x20>)
 80072e0:	2300      	movs	r3, #0
 80072e2:	4605      	mov	r5, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	4611      	mov	r1, r2
 80072e8:	6023      	str	r3, [r4, #0]
 80072ea:	f7fe ff2b 	bl	8006144 <_kill>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	d102      	bne.n	80072f8 <_kill_r+0x1c>
 80072f2:	6823      	ldr	r3, [r4, #0]
 80072f4:	b103      	cbz	r3, 80072f8 <_kill_r+0x1c>
 80072f6:	602b      	str	r3, [r5, #0]
 80072f8:	bd38      	pop	{r3, r4, r5, pc}
 80072fa:	bf00      	nop
 80072fc:	20003824 	.word	0x20003824

08007300 <_getpid_r>:
 8007300:	f7fe bf1e 	b.w	8006140 <_getpid>

08007304 <_init>:
 8007304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007306:	bf00      	nop
 8007308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800730a:	bc08      	pop	{r3}
 800730c:	469e      	mov	lr, r3
 800730e:	4770      	bx	lr

08007310 <_fini>:
 8007310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007312:	bf00      	nop
 8007314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007316:	bc08      	pop	{r3}
 8007318:	469e      	mov	lr, r3
 800731a:	4770      	bx	lr
